[
  {
    "type": "playlist",
    "id": 432610,
    "title": "Modern JavaScript Essentials for React",
    "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
    "slug": "modern-javascript-essentials-for-react",
    "published": true,
    "updated_at": "2021-02-13T13:53:32.326-06:00",
    "created_at": "2019-05-20T12:47:16.618-05:00",
    "duration": 2967,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
    "primary_tag": {
      "name": "javascript",
      "slug": "javascript",
      "label": "JavaScript",
      "context": "languages",
      "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
      "url": "http://app.egghead.af:5000/api/v1/tags/javascript",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
      "http_url": "http://app.egghead.af:5000/browse/languages/javascript"
    },
    "tags": [
      {
        "name": "javascript",
        "slug": "javascript",
        "label": "JavaScript",
        "context": "languages",
        "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
        "url": "http://app.egghead.af:5000/api/v1/tags/javascript",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "http_url": "http://app.egghead.af:5000/browse/languages/javascript"
      }
    ],
    "library_list": [],
    "language_list": [
      "javascript"
    ],
    "framework_list": [],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/square_480/PureRectMod_1_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/square_280/PureRectMod_1_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/square_256/PureRectMod_1_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/square_128/PureRectMod_1_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/square_64/PureRectMod_1_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/square_32/PureRectMod_1_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/thumb/PureRectMod_1_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/full/PureRectMod_1_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/610/landscape/PureRectMod_1_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/modern-javascript-essentials-for-react",
    "path": "/playlists/modern-javascript-essentials-for-react",
    "http_url": "http://app.egghead.af:5000/playlists/modern-javascript-essentials-for-react",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/modern-javascript-essentials-for-react/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/modern-javascript-essentials-for-react/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns?pl=modern-javascript-essentials-for-react",
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432610/users/353304/toggle_save",
    "items": [
      {
        "id": 4859,
        "creator_id": 12067,
        "slug": "javascript-write-concise-functions-with-es6-arrows-and-implicit-returns",
        "title": "Write Concise Functions with ES6 Arrows and Implicit Returns",
        "state": "bundled",
        "summary": "Arrow functions are a great feature from ES6 that let you write more concise code by leaving out the \"function\" keyword. Here you'll learn how to convert regular functions to arrow functions and how to implicitly return expressions and object literals.",
        "duration": 141,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] The immediate benefit of an arrow function is that it's shorter to type. We can convert this function into an arrow by putting it into a variable. We'll call it the same name. Instead of using the function keyboard, we'll use the arrow on the right side of the parameters. Save this. We can see it works the same way.\n\n[0:22] If instead we had an anonymous function, this one's even easier to convert into an arrow. You just delete the function keyword and put the arrow on the right side of the arguments. Now I can call printFullName and if I pass in nothing, it prints out undefined. If I pass in some strings, it puts them together.\n\n[0:42] Arrow functions are always anonymous functions. You can't have a named one that doesn't get stored in a variable.\n\n[0:48] Another benefit of arrow functions is the implicit return. If all you have is a single expression that returns a value, you can get rid of the braces and get rid of the return. You can even put it all in one line if you want. This works the same way. If you use the return keyword, the implicit return won't work.\n\n[1:10] In a function like this one that returns nothing, this is effectively the same as saying return undefined. If we were to shorten this one by removing the braces, that will be the same thing as saying return console log, which may or may not be what you actually intended. Before you remove the braces, just make sure it's OK that you're going to return that single expression.\n\n[1:32] If you have a named function like this that returns an object, we can turn this into an arrow function, same way we've done with the others and we can log out its value.\n\n[1:44] But if we want to turn this into an implicit return, you'll see that if we get rid of the return and the surrounding braces, this is ambiguous. JavaScript can't tell if this brace is supposed to be the beginning of a function or the beginning of an object. If your return value is a single object, you need to wrap that object in parentheses and then it works great.\n\n[2:05] We can even clean up this object a little bit by using ES6 object shorthand because if the name of the key matches the name of the variable that's going into that key, you can just use the variable name. This will create a key called name with that value and a key called email with that value.",
        "casting_words_order": "zeDk",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns",
        "path": "/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/hkcs4",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/javascript-write-concise-arrow-functions-using-implicit-returns-and-this-Syhe6UX04/javascript-write-concise-arrow-functions-using-implicit-returns-and-this-Syhe6UX04.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": -2097151,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876386,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-write-concise-functions-with-es6-arrows-and-implicit-returns/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/01-after-arrow-functions"
          }
        }
      },
      {
        "id": 4905,
        "creator_id": 12067,
        "slug": "javascript-understand-how-this-works-in-regular-functions-and-arrow-functions",
        "title": "Understand How `this` Works in Regular Functions and Arrow Functions",
        "state": "bundled",
        "summary": "Arrow functions simplify the handling of `this`, by consistently setting it to the value from the lexical scope where the arrow is defined. In this lesson you'll learn how `this` is handled in regular functions versus how it works in arrow functions.",
        "duration": 116,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Regular JavaScript functions have a lot of rules to determine the value of this. If we were to call this function right now, we'll see that it prints out the window object. If this file were in strict mode, we put use strict at the top then this is undefined instead of the window.\n\n[0:19] We can also change the value of this in a regular JavaScript function by using the bind method and we can pass in some sort of value to bind to this. This could be a number or an object or anything. This will return a new function that we could store in a variable and then we could call that function.\n\n[0:41] Now we see that this is the value of 42 and it will be whatever we set this to. If we change this to an object or something, it will be that.\n\n[0:49] We could also use call or apply and those call the function immediately so if we say call with the value of this or apply, it will set that, as long it's a regular function.\n\n[1:01] Arrow functions have different rules. If we change this into an arrow function, then we can see when we call it with apply, this is just an object. It's ignoring the value that we pass in here. In arrow functions, this is bound to the value of whatever this is in the surrounding scope. In the case here, we got an empty object.\n\n[1:25] If I call the function directly, we get that same object. If I bind it to some value and then call that function, we get the same object. There's no way to change the value of this in an arrow function once you create that arrow.\n\n[1:41] In some cases, this is great because it means you can pass a function around and it will retain its this binding. In cases where you do need the dynamic value of this, like if you're passing a function to jQuery or something, then you should stick with a regular function and not an arrow function.",
        "casting_words_order": "zeDi",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions",
        "path": "/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/banjg",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-understand-how-this-works-in-regular-functions-and-arrow-functions-BkPx0LQCN/scikit-learn-understand-how-this-works-in-regular-functions-and-arrow-functions-BkPx0LQCN.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 2097153,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876387,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-this-works-in-regular-functions-and-arrow-functions/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/02-after-this"
          }
        }
      },
      {
        "id": 4906,
        "creator_id": 12067,
        "slug": "javascript-use-let-and-const-for-block-scoped-variables",
        "title": "Use let and const for Block-Scoped Variables",
        "state": "bundled",
        "summary": "ES6 introduces two new keywords to create variables - `let` and `const`. Both of them are block-scoped, as opposed to `var` which is scoped to the surrounding function. The more limited scope of `let` and `const` makes them more predictable. In this lesson you'll learn how `let` and `const` work, the difference between function and block scope, and how `const` is only sort of constant.",
        "duration": 239,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] ES6 adds two new variable types, let and const. They differ from var in that let and const are both scope to the enclosing block, instead of to the enclosing function.\n\n[0:12] If we log out outer var and outer let, we're going to see the values as we expect them. If we move this console.log above the variable declarations, we can see it prints out undefined and undefined. This is because in JavaScript, inside this enclosing block, this variable name do exists, it just don't have values yet.\n\n[0:34] If we do the same thing inside this if block, if we log out inner let and inner var, this works as expected. If we move that same console.log above two variables, we get the two undefines again.\n\n[0:52] Where let diverges from var is if we put one of this console.logs outside of the if. If we try this now, we're going to see that inner let is not defined because we're outside of this block. That's because let is scoped to the block whereas var is scoped to the enclosing function.\n\n[1:10] A common got you with a var is using it inside of a for loop. We'll create a variable called i. We'll then slice it to . Then we'll say while i<5, we're going to increment it by 1. Inside the for loop, we're just going to print out this value.\n\n[1:28] If you call this function, it works as we expect so far. If we wrap the console.log in a set timeout where we're introducing a function that wraps the console.log, now we have a closure that closes over the reference to i.\n\n[1:45] If we ran this timeout after 1 second, we're going to see that it prints out the value 5 after 1 second elapsed. That's because by the time this runs, i has already incremented to 5 and the for loop is done.\n\n[1:58] This function here closes over the reference to the variable i. It doesn't actually make a copy of the value itself, it actually refers to the variable i in memory. When it goes to print that out, one second later, the variable i now holds the value 5.\n\n[2:16] If we replace the var with let, then it works as we'd expect and that's because let creates a new variable for each iteration. When the closure latches onto that variable, it gets that value frozen in time. When they'll run, one second later, we get  through 4.\n\n[2:34] I mentioned earlier that ES6 introduces two variable types, let and const. From the name, you'd guess that const means constant, but that's only partially true. If I make a variable called name by saying const name and initializing it to Dave, then I can log out that value. It works as we expect.\n\n[2:55] If we try to reassign the value, then we get an error because name is read only. So far, const is living up to its name. If instead we create a const person and put a complex type in here like an object and we give that person a name, then we can log out the person.\n\n[3:18] Even though we can't say person equals some other object because the person variable is read only, we are allowed to change the internal properties of person. We can say person.name equals someone else and that's perfectly allowable.\n\n[3:38] The same is true for constant arrays, so if we have an array of numbers and we log out those numbers, we can push new numbers onto the array even though it's a constant. It's good to keep in mind when you see a const that you can't reassign it, but that a const is no guarantee that the internals won't change.",
        "casting_words_order": "zeDg",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables",
        "path": "/lessons/javascript-use-let-and-const-for-block-scoped-variables?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-use-let-and-const-for-block-scoped-variables?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/w5tg4",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-let-and-const-for-block-scoped-variables-BygHyvXAE/scikit-learn-use-let-and-const-for-block-scoped-variables-BygHyvXAE.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 4718593,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876388,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-let-and-const-for-block-scoped-variables/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/03-after-let-const"
          }
        }
      },
      {
        "id": 5281,
        "creator_id": 71775,
        "slug": "javascript-understand-the-difference-between-statements-and-expressions",
        "title": "Understand the Difference Between Statements and Expressions",
        "state": "bundled",
        "summary": "Every bit of JavaScript code can be classified as either a \"statement\" or an \"expression\". It's important to know the difference, because there are some places where you can only write an expression (when you get into React, for instance, JSX allows expressions but not statements). In this lesson you'll learn the difference between these two, and how to rewrite some statements as expressions.",
        "duration": 155,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] In JavaScript, there's a difference between statements and expressions. An expression is anything that evaluates to a value. If we create a variable called A and we set it equal to 1+2, the 1+2 is an expression. It's being assigned into A, but this entire thing is a statement.\n\n[0:19] One way to think about this is if you can put it on the right side of an equal sign, it's an expression. For statements, we have things like if, or we could if is a value, then we do something here. If is a statement, but the thing inside the parentheses is an expression. This needs to evaluate to some sort of Boolean value.\n\n[0:38] Likewise, a for loop is also a statement. Same for while, and try and catch, and also let and const and var. These are all examples of statements.\n\n[0:53] Expressions that evaluate to a value can go on the right side of an equal sign, so things like math like the 1+2 or an array of some values here or an object literal with keys and values. These are expressions and can be assigned to variables or returned from functions.\n\n[1:14] It's important to know the difference between statements and expressions, especially for frameworks like React where the rule is that you can only have expressions inside JSX.\n\n[1:23] Not to get too far into React here, but if we had a component and it was returning some JSX, JSX lets you put expressions into curly braces. You can put things like math in here or strings, but you can't write statements like if or for.\n\n[1:43] For cases like this where you need to have an expression instead on a statement, you can rewrite some statements as expressions. If we say if math.random > .5, then we set A to yes, otherwise, we set A to no.\n\n[2:00] If we need to rewrite this as an expression, we can use the ternary operator, which is the question mark. On the left side of the question mark goes the condition. In our case, this is the math.random. If this is true, then it's going to evaluate to the thing on the right which should be yes. Otherwise, use a colon to say that otherwise it'll evaluate to no.\n\n[2:23] We have our condition and then it evaluates to this if it's true and this if it's false. This entire thing is an expression and so we can use this anywhere we need an expression instead of a statement.",
        "casting_words_order": "zeDL",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions",
        "path": "/lessons/javascript-understand-the-difference-between-statements-and-expressions?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-understand-the-difference-between-statements-and-expressions?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/beasp",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-understand-the-difference-between-statements-and-expressions-rkBbSxCYr/scikit-learn-understand-the-difference-between-statements-and-expressions-rkBbSxCYr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 6029313,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876389,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-the-difference-between-statements-and-expressions/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/04-after-statements-expressions"
          }
        }
      },
      {
        "id": 4910,
        "creator_id": 12067,
        "slug": "javascript-use-es6-template-strings-to-interpolate-values",
        "title": "Use ES6 Template Strings to Interpolate Values",
        "state": "bundled",
        "summary": "Template strings are a great feature added in ES6 that allow you to evaluate expressions and insert the results within a string. Here you'll learn how to use them, and what kinds of things can and can't be inserted into strings with the template string syntax.",
        "duration": 96,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] If we have a couple of strings like this and we wanted to concatenate them together into a full name, we can use ES6 template strings, which are the backticks, and these support string interpolations, so we can run expressions inside them by putting them inside dollar curly braces.\n\n[00:15] We can insert the first name, followed by a space, and then the last name. Log this out. Then we have our two strings put together here.\n\n[00:25] Because the stuff inside the braces can be any valid JavaScript expression, we could print out the full name, followed by some conditional text based on whether this person uses React. If it's true, we can print out uses-react. If it's false, we could print out doesn't-use-react.\n\n[00:46] Here, we're using the ternary operator, which will evaluate this expression. If it's true, it returns this first expression here. Otherwise, it returns the expression after the colon.\n\n[00:58] We can log this out. Because this is false, we get doesn't-use-react. If we change this to true, we get uses-react.\n\n[01:07] You can evaluate any valid JavaScript expression inside the curly braces. If we wanted to print, \"The answer is 40 plus 2,\" and then log that out, we get, \"The answer is 42.\"\n\n[01:23] If we had a function that would add these numbers together for us, we could call that function in here. We get the same thing because any valid JavaScript expression can go inside the curly braces. It'll evaluate that and put it into the string.",
        "casting_words_order": "zfoR",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values",
        "path": "/lessons/javascript-use-es6-template-strings-to-interpolate-values?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-use-es6-template-strings-to-interpolate-values?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/3q4z2",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-es6-template-strings-to-interpolate-values-rkXNZ4V04/scikit-learn-use-es6-template-strings-to-interpolate-values-rkXNZ4V04.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 6946817,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876390,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-es6-template-strings-to-interpolate-values/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/05-after-template-strings"
          }
        }
      },
      {
        "id": 4913,
        "creator_id": 12067,
        "slug": "javascript-use-the-rest-and-spread-operators-on-arrays-and-objects",
        "title": "Use the Rest and Spread Operators on Arrays and Objects",
        "state": "bundled",
        "summary": "The rest and spread operators are two different names for the same three `...` dots. In one case, you can combine elements together with `...rest`, and in the other, you can `...spread` out an array into arguments (or even spread an object into another object). This lesson will walk you through all the different uses of rest and spread.",
        "duration": 174,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] When you're writing out a function, you can use ES6 rest arguments, which are the three dots before a parameter, to collect all the arguments together into an array.\n\n[00:09] If we were to log out that array and then call the function with a set of arguments like one, two, and three, we'll see we get an array of one, two, and three.\n\n[00:20] The rest arguments parameter needs to be the last one, but you can put parameters before it. We can have first and second and then the rest, which we can call a rest.\n\n[00:32] If we print out our first and our second and the rest, and then we add a couple more arguments here, you can see printed the first and the second. Combine the rest of them into an array.\n\n[00:45] This is guaranteed to be an array. If you don't have enough arguments, it'll just be an empty array. Including if we call it with nothing, we can see first and second were undefined, but rest is still an empty array.\n\n[00:59] The spread operator looks the same except if explodes an array in place. You could spread out the numbers like this and then it's going to pass them in as individual arguments to this function. It's the same thing as if we've written out nums0, nums1, and so on.\n\n[01:17] The spread operator works on objects too. If we logged out an object with ...user, this explodes all the properties into this brand-new object. This is useful if you want to add properties to an object without modifying the original.\n\n[01:33] You can add full name here, which is made up of the user's first name and the user's last name. This is exactly the same as if we'd written out longhand creating an object and then creating a username property that had user.username, first name from user first name and so on.\n\n[01:52] It's important to know that the order matters too. If we had a first name before our user -- say the first name was default and then user and full name -- the properties from the user will override existing ones in this object.\n\n[02:07] Since this user has a first name, we get Dave here. If the user didn't have a first name, we would get default.\n\n[02:15] A nice way to combine the rest and spread operators is if you need to write a debug function that will print or not print something based on some global flag.\n\n[02:27] We'll write a function called debug that takes in some arguments. This forwards them along to console a log but only if debug is true, so if debug, we will console log all the stuff from the arguments.\n\n[02:43] Now we can call debug just like we called a console log with some arguments. If debug is true, we see the string. If debug is false, it doesn't print anything at all.",
        "casting_words_order": "zfoT",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects",
        "path": "/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/d0v7w",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-the-rest-and-spread-operators-on-arrays-and-objects-ry83wqVCN/scikit-learn-use-the-rest-and-spread-operators-on-arrays-and-objects-ry83wqVCN.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 7536641,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876391,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-rest-and-spread-operators-on-arrays-and-objects/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/06-after-rest-spread"
          }
        }
      },
      {
        "id": 4914,
        "creator_id": 12067,
        "slug": "javascript-use-destructuring-to-pick-apart-arrays-and-objects",
        "title": "Use Destructuring to Pick Apart Arrays and Objects",
        "state": "bundled",
        "summary": "The syntax for destructuring, introduced in ES6, makes it easy to pull values out of arrays and objects and into variables, without a lot of tedious manual assignments. This lesson will show you how to destructure arrays and objects and make your code more concise.",
        "duration": 295,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] If we want to grab the first couple of values out of this array, we can use ES6 destructuring to pull those values out like this.\n\n[00:09] This will create a variable called A that has a value one and a variable called B which has the value two, and then the rest of the array elements will be ignored. This is exactly the same as writing const-A equals nums-zero and const-B equals nums-one.\n\n[00:30] You can think of this syntax with the brackets on the left as saying that I expect this thing to be an array, and I want you to pull out the first field and put it in A and the second field, put it in B.\n\n[00:42] You can also combine the rest operator with destructuring to put the remaining items into a new a new array. This one will be called Others. Then we can log out our A, B, and Others. We can see we have the individual values and then the rest of them here.\n\n[00:59] Just like using the rest operator with functions, if we don't have enough items in our array, the fact that we use three dots here guarantees that Others is going to be an array even if it's empty.\n\n[01:09] Also notice that I printed out nums. It hasn't been changed by this destructuring operation. Whether you're destructuring arrays or objects, it'll never modify the original thing on the right side of the equal sign.\n\n[01:22] Speaking of objects, we can destructure objects as well. If we have an object called User with these fields here, we can pull out the username and first name field and store them in variables and log them out here.\n\n[01:36] By using the curly braces on the left side of the equal sign, we're saying that we expect this thing to be an object. Pull out the username key and put it in a variable called username and the first name key and put it in a variable called First Name.\n\n[01:50] The variable names here need match key names in the object. You can rename them if you need to by putting a colon and the new name. Now we can print out You Name, the First Name and that still works.\n\n[02:02] We can specify default values for these keys if they're missing. If we had a full name key, we could say its default is missing. If we pull that out from User and log out Full Name, we'll see we get the value missing. If the object has a full name then full name will get that value instead.\n\n[02:29] Just like with arrays, we can use the rest operator. We can pull out the username and then pull out the rest of the properties into a variable called Name and destructure all that from User. If we print out Name, we can see that it has everything except the username property.\n\n[02:46] This is useful if you need to remove a property from an object. Just as with array destructuring, it doesn't modify the original user. We can see here the original user still has the username.\n\n[02:58] If you have an object like this that has a nested array, and this array has objects inside it, you can pull these values out with destructuring as well by using nested destructuring.\n\n[03:08] If we say that the outer level is an object, and we expect it's going to have a key called Posts -- and then Posts is going to be an array -- we're destructuring the Posts array.\n\n[03:21] The first item in that array is an object, so we'll destructure that and pull out its title. The second object in that array also has a title. We can't call it title because we're using that name here, so we'll call that T2. Now we can pull this all out of User.\n\n[03:39] Now we can log out title and T2. We can see we've got these values here. What we don't have is the Posts. When you're destructuring multiple levels, only the deepest keys become variables. If you also needed the whole array of Posts, you'd need to pull that out separately.\n\n[03:58] All that said, this can be pretty hard to read. I don't recommend using multilevel destructuring if you can avoid it.\n\n[04:05] If you've used React, this is one place where you're going to see destructuring used a lot in the real world. If you're writing a function component, and it takes props, the props object is usually written destructured like this. We'll pull out the initial count property from that object.\n\n[04:23] Hooks use destructuring too. The useState hook might take the initial count and use useState is going to return an array with two items in it. You'd usually write that this way by destructuring the count and the setCount function from the useState array.\n\n[04:41] Everything on the screen here, aside from the call to useState, is plain old JavaScript. This is not some special React code. You'll often see React code written this way with props being destructured and hook values being destructured.",
        "casting_words_order": "zfoV",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects",
        "path": "/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/pj6w9",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-destructuring-to-pick-apart-arrays-and-objects-rylq_qE0N/scikit-learn-use-destructuring-to-pick-apart-arrays-and-objects-rylq_qE0N.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 7897089,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876392,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-destructuring-to-pick-apart-arrays-and-objects/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/07-after-destructuring"
          }
        }
      },
      {
        "id": 4915,
        "creator_id": 12067,
        "slug": "javascript-understand-mutable-vs-immutable-operations-in-javascript",
        "title": "Understand Mutable vs. Immutable Operations in JavaScript",
        "state": "bundled",
        "summary": "Modern JS code is often written in a functional style, opting to perform immutable updates to objects and arrays rather than mutating the original values. In this lesson you'll learn what mutability and immutability are, how to spot mutations in your code, and how to convert code with mutations into immutable code.",
        "duration": 320,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] In order to understand how to do an immutable update, it's important to first understand what mutation means and what immutable update looks like.\n\n[00:08] Mutate is just a fancy word for change. If we log out the user and then change the user's first name, and then log out the user again, we've mutated the user here. The original user now has changed.\n\n[00:22] If we expand the items in the console over here, you can see that the second one says the first name is someone else. That makes sense because that's after we changed it.\n\n[00:31] If we expand the first one, we can also see its first name says someone else, even though the printed out value up here says it's Dave. That's because in the developer console, when you console log out an object, it actually keeps it referenced to the object itself.\n\n[00:47] If we mouse-over this little \"i\" here, we can see it's says value below was evaluated just now. This proves that we did actually change the user.\n\n[00:58] Another kind of common mutable code is a function that takes an object and changes it. If we had a set name that took a user and a new name, and then set the user's first name to the new name, we could log out the user and call set name on that user with a new value, and then log out the user again.\n\n[01:21] We'll see the same as we did before. The first time it says it's Dave and the second time it's someone else. If we expand these two values, you can see we've modified the original.\n\n[01:31] This happens because JavaScript passes variables by reference. When we pass the user in here, we're not passing in a copy of the user, we're passing in a reference to this user object right here. When we change it in a function that change cascades out to the actual object.\n\n[01:49] Sometimes you'll see code like this that changes the user and then returns it. To call it, you might put the value into a new user and then log out that new user.\n\n[02:00] The trouble is we are still modifying the user that's passed in, even though we're returning one. All this might look like it won't change the user, it actually will. If we expand these objects, we can see in the first expansion here that we've modified the original user object.\n\n[02:17] If this is a mutation, or a mutable update, then how can we update this user immutably? The way to do that is to make a copy of this user object.\n\n[02:26] An easy way to do that is to create a variable and use the ES6 spread operator to spread out the user inside a new object. This is creating a brand new wrapper and copying in all of the properties from user.\n\n[02:42] Now we could return that copy, but before we do, we can change the first name in the copy to be the new name. Now if we try this, at the top level, we see it works the same way.\n\n[02:53] If we expand these objects, we can see that we left the original user untouched. This first name is the same as it was before and only the second one is changed.\n\n[03:03] If we were to log out user triple equals new user, which tests whether these things are the same object, we can see that prints out false. Which makes sense because we created a brand new object and returned that new object.\n\n[03:17] Another way to write this update would be to do this first name assignment inside the new object. We spread out the user and then set the first name to a new value.\n\n[03:29] This will override the first name from the user here. Now we can just return the copy. We could simply this one step further by returning the object itself without saving it into a variable.\n\n[03:40] Notice how the user has this nested array of posts inside. When we explode the user in place here, we're copying over these four keys and then overriding the first name.\n\n[03:51] This is effectively the same as saying posts is user.posts, username is user.username, and so on. That means that the array of posts inside this new object will actually not be a copy of this array, it will actually be a reference to the original.\n\n[04:13] We can prove that if we log out user.posts triple-equals newuser.posts. We can see that's true. They both have the same array of posts.\n\n[04:24] If you wanted to do a nested update where you change the name and you also change the posts -- maybe we wanted to add a new post D at the end of this -- we can set posts to a new array. Following the same kind of format explode user.posts in place and then put a new item at the end of it.\n\n[04:45] Now when we check if the posts are equal, we see false. If we expand these two objects, we can see the first one has three posts and the second one has four.\n\n[04:56] In order to immutably update an object or an array, you need to create a new object or array, copy in all the old values, and then make your changes. If you have nested objects or nested arrays, you need to make sure to update each level in turn.\n\n[05:11] You might worry that making all these copies will cause performance problems. The JavaScript virtual machine and its garbage collector are well-optimized for this kind of use case.",
        "casting_words_order": "zfoX",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript",
        "path": "/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/36j15",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-understand-mutable-vs-immutable-operations-in-javascript-By39pcV0N/scikit-learn-understand-mutable-vs-immutable-operations-in-javascript-By39pcV0N.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8110081,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876393,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-mutable-vs-immutable-operations-in-javascript/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/08-after-immutability"
          }
        }
      },
      {
        "id": 4926,
        "creator_id": 12067,
        "slug": "javascript-find-elements-in-javascript-arrays-with-find-and-findindex",
        "title": "Find Elements in JavaScript Arrays with find and findIndex",
        "state": "bundled",
        "summary": "When you need to find an object in an array based on a property of that object, reach for the `find` and `findIndex` methods. You can supply a function to look up an item by any condition you can dream up. Want to find the first item larger than a certain number? Or the object with a certain id? Use find to get the array element, or `findIndex` to get the element's index.",
        "duration": 90,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Here we have an array of objects where each one is a spice. If we wanted to find a specific object in this array, we can use the find function on the array. We say array.find, and find takes a function which will get each item in the array, we'll call it spice.\n\n[0:18] Inside this function, you want to return true if the item matches the one you want, and false otherwise. If we're looking for, say, coriander, we can say spice.name is coriander. The result of this call will be the first item that match.\n\n[0:37] We could say const spice = this, and then we'll log out the spice. We can see we found it here. If we had a couple of them that each had, maybe different IDs, say this was six and this was seven, and we save, we're going to see that we still find the first one. That's because find starts at the beginning and goes to the end, and it stopped looking as soon as you return true.\n\n[1:02] If you wanted to get the index of the item instead of the item itself, you can use findIndex. findIndex works the same way. It takes a function and you return true or false. It'll return the index of the first matching item. In this case, we get three.\n\n[1:18] For both find and findIndex, if you always return false, if you don't find a match, then you're going to get -1 for the findIndex case, or undefined if you're using find.",
        "casting_words_order": "zeDN",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex",
        "path": "/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/4caa8",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-find-elements-in-javascript-arrays-with-find-and-findindex-SyVMwykxB/scikit-learn-find-elements-in-javascript-arrays-with-find-and-findindex-SyVMwykxB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8232961,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876394,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-find-elements-in-javascript-arrays-with-find-and-findindex/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/09-after-find"
          }
        }
      },
      {
        "id": 4927,
        "creator_id": 12067,
        "slug": "javascript-remove-array-items-with-slice-and-splice",
        "title": "Remove Array Items with Slice and Splice",
        "state": "bundled",
        "summary": "The confusingly-named `slice` and `splice` functions do very different things. Here you'll learn the difference between `slice` vs. `splice`, which to use for immutable operations, and a few ways to remove items from an array.",
        "duration": 208,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] If we have an array like this and we wanted to remove the first item, we can use the slice function by calling word.slice.\n\n[0:08] Slice takes two arguments, the beginning and the end, but it doesn't include the end index. We're going to use 1 to start because this is index 1 and we'll use 4 to end because that's 1 past the end here. If I log out the word, we're going to see the word hasn't changed at all. If I log out the sliced value, we can see it return the last three letters.\n\n[0:33] There's an easier way to write this if you want to start at one index and take the rest of the items. You can do that by leaving off the second argument. This is saying slice starting at 1 and taking the rest and we get the same result.\n\n[0:46] If instead we wanted to remove the last item, so we wanted to get COD, we could write that as start at  and stop before 3. Then we go , 1, 2, giving us the first three letters. Instead of a hard coded number here, we could use word.length-1.\n\n[1:05] If we wanted just the last item, we can pass a negative number to slice, which is like wrapping around to the array and starting here. If we go -1 we'll start with E. If we go -2, it'll start with D and take the rest. -3 will start with O and take the rest. -4 will start at the beginning. If we pass -5 or any other number that's larger than the size of the array, it will just get the whole array.\n\n[1:34] If you need to remove something from the middle of an array, then slice is not the right tool for that. Instead, you can use the very similarly named splice, but splice will actually change the word. It's also a lot more powerful than slice in that it can remove, and it can add items.\n\n[1:49] The first argument to splice is going to be the index where we want to start making our changes. Let's say we wanted to remove the letter O, that's index 1. I'll pass a 1 to splice and if we try this now, what this is saying is start at index 1 and remove everything after it. You can see the call to splice returned the letters that were removed and modified the word to just have the first letter.\n\n[2:14] The second argument to splice is how many items to remove starting at index 1. If we wanted to just remove the O, we could pass a 1 here and that will take out the O. If we wanted to remove OD, we could pass 2. You'll see we pulled out O and D and word just has C and E now.\n\n[2:34] I mentioned that splice can let you add items as well and if you pass any more arguments after this, it will insert them at that position after doing the removing. Here it's going to remove O and D and then if we wanted to add some new letters like X and Y...Now we can see, it started at index 1, remove two letters and inserted X and Y in their place, and the resulting word as CXYE.\n\n[3:03] Since splice modifies the original array and evaluate returns is the stuff that removed, if you want to do an immutable update, you'll need to make a copy first and store that copy in a variable. We could make a new array and spread our word into it and then do our modification to the copy and log out the copy.\n\n[3:24] There you can see word hasn't changed and we've got our modified copy.",
        "casting_words_order": "zeDP",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice",
        "path": "/lessons/javascript-remove-array-items-with-slice-and-splice?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-remove-array-items-with-slice-and-splice?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/6y59w",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-remove-array-items-with-slice-and-splice-BJoyd1kxS/scikit-learn-remove-array-items-with-slice-and-splice-BJoyd1kxS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8302593,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876395,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-array-items-with-slice-and-splice/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/10-after-remove-with-slice-splice"
          }
        }
      },
      {
        "id": 4928,
        "creator_id": 12067,
        "slug": "javascript-add-items-to-an-array-with-concat-and-the-spread-operator",
        "title": "Add Items to an Array with Concat and the Spread Operator",
        "state": "bundled",
        "summary": "Next time you need to add something to an array without mutating the array, look toward the `concat` method and the `...` spread operator. In this lesson you'll learn how to use both to add items to an array.",
        "duration": 76,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] If you wanted to add an item to the end of this array, the first instinct would be to use push. We could say numbers.push and push on a new number then we'll log out numbers. The only problem with this is that it modifies the original numbers array.\n\n[0:15] In a lot of cases, you'd rather update the array immutably, which means creating a new one instead of modifying the old one. To do that, we could use concat instead. This will concatenate 1000 to the end of numbers.\n\n[0:29] You can see it didn't change the original numbers array, but it did return a new one. If we log out the result of this, we can see we've got our new array with 1000 and then we haven't changed numbers.\n\n[0:40] Concat can also handle more than single items, so you could add a couple items here and it will stick all of them onto the end of array. You can also pass in an entire array and it'll put them together into one flattened array. It's always nice to have options.\n\n[0:56] Another way you can do this is to make a new array and use the spread operator to spread out the original numbers, then spread out more numbers. This has the same effect as concat.\n\n[1:09] You could also add stuff to the end, to the beginning, or in between. It'll combine all of that into one.",
        "casting_words_order": "zeDR",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator",
        "path": "/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/nchcb",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-add-items-to-an-array-with-concat-and-the-spread-operator-r1lIdJyxB/scikit-learn-add-items-to-an-array-with-concat-and-the-spread-operator-r1lIdJyxB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8341505,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876396,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-add-items-to-an-array-with-concat-and-the-spread-operator/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/11-after-add-with-concat-spread"
          }
        }
      },
      {
        "id": 4929,
        "creator_id": 12067,
        "slug": "javascript-modify-elements-in-an-array-with-map",
        "title": "Modify Elements in an Array with Map",
        "state": "bundled",
        "summary": "When you need to modify every element of an array, or even just a single one, the `map` method is the one to use. Here you'll learn how to use `map` and pass it a function to transform an array.",
        "duration": 125,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] If you have an array like this, and we want it to pull out the first name from each person, we could use the map function on the array. Map takes a function as an argument and that function receives each item of the array in turn, so we could call that person here.\n\n[0:16] If we wanted to extract a first name of each person, we can return person.first here and the result of this call as a map will be a brand new array made up of all of the first names. We could log that out here, save this and now, we can see we have Dan, Ali and Sarah in one array. We can also log out the people and see that the original array has not been changed.\n\n[0:40] Map is a good function to use whenever you want a new array that has the same number of items as the old one. There's no way to exit early from a map call and there's no way to skip elements. If you want to skip certain items, you'll want to use filter instead.\n\n[0:55] The map function is also helpful if you want to change items in an array, but it's important to know that the items that get passed into this function actually are referring to the original items.\n\n[1:05] If we were to change the first name of the person and say person.first += sum!! And then we return to the person, this names array is now actually an array of people with very excited first names. If we look at the original array of people, we can see that it has changed too because we modified each person as it came through this function.\n\n[1:29] A better way to do something like this where you want to update each item is to return a new item and copy in all the properties from person using the spread operator. Then you can change the first name to person.first + !!. In our new array, we can see we've got the exclamation points and the original one we've left it alone.\n\n[1:54] We can also get the index of the item and that's the second argument. If you need the index for something and you wanted to update maybe a specific item that has a specific index, that's available if you need it.",
        "casting_words_order": "zeDT",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map",
        "path": "/lessons/javascript-modify-elements-in-an-array-with-map?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-modify-elements-in-an-array-with-map?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/bqzmt",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-modify-elements-in-an-array-with-map-ryIhdk1lS/scikit-learn-modify-elements-in-an-array-with-map-ryIhdk1lS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8363009,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876397,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-modify-elements-in-an-array-with-map/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/12-after-map"
          }
        }
      },
      {
        "id": 4930,
        "creator_id": 12067,
        "slug": "javascript-remove-elements-from-an-array-with-filter",
        "title": "Remove Elements from an Array with Filter",
        "state": "bundled",
        "summary": "If you need to find and remove one (or multiple) items from an array, the `filter` method is a quick way to do just that. In this lesson you'll learn how to pass a function to `filter` to remove specific items from an array. You can also use it for the inverse -- to keep the items that match a certain condition.",
        "duration": 85,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] If we have an array and we want to remove some of the items, we can use the filter function on the array. We can say spices.filter, and filter takes a function that's going to get each array item in turn. The result of calling filter is going to be a new array with potentially fewer items.\n\n[0:17] From inside this function, if you return a truth evalue, that will keep the item. If you return a false evalue, that will discard it. If we wanted to filter down to only this item, coriander, with the ID 4, we could say return spice.id=4. Now, if we log out our filtered spices, you'll see we get an array with one object, and that's coriander.\n\n[0:44] Let's also log out the original array of spices. You can see that it hasn't changed at all. It still has all the spices in it.\n\n[0:52] Rather than mutating the array you call it on, filter is going to return a brand-new array. We could try some other things here like saying we want the spice IDs that aren't 4. This will give us everything but coriander. Now we've got four spices here.\n\n[1:06] We could also do something like only keep the spices that start with C by doing spice.name.startsWith('C'). Now, we only have the three spices that start with C.\n\n[1:20] Filter is a great choice whenever you want to create a new array that has fewer items than the one you started with.",
        "casting_words_order": "zeDV",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter",
        "path": "/lessons/javascript-remove-elements-from-an-array-with-filter?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-remove-elements-from-an-array-with-filter?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/g9qhe",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-remove-elements-from-an-array-with-filter-SyMGt1keB/scikit-learn-remove-elements-from-an-array-with-filter-SyMGt1keB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8374785,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876398,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-remove-elements-from-an-array-with-filter/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/13-after-filter"
          }
        }
      },
      {
        "id": 4931,
        "creator_id": 12067,
        "slug": "javascript-use-the-reduce-function-on-arrays",
        "title": "Use the Reduce Function on Arrays",
        "state": "bundled",
        "summary": "The `reduce` method on arrays is probably the most powerful of them all.\n\nBut it's also the most confusing.\n\n`reduce` can transform an array into an object, a number, a boolean, or anything else you could need -- as long as you can figure out how to use it! In this lesson we'll start with a simple (and unique) example use for `reduce`, then build upon it to cover a few more advanced uses.",
        "duration": 405,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] The reduce function on arrays is the most general purpose of all of them. It can stand in for filter and map and it can do even more than that. If we say, VeggieDrawer.reduce, reduce takes a function that we are going to call a reducer and that initial value.\n\n[0:18] Unlike filter and map that always return arrays, reduce can return anything. The initial value is usually going to be of the same form as your result. We're going to say, initial value is going to be an array, and let's reduce this VeggieDrawer full of good and bad vegetables into a final array that has just the good ones.\n\n[0:39] Open the result into an array called GoodVeggies. Let's write this reducer function now. We'll call it reducer and it takes two arguments. The first is the previous value. I'm going to call it bucket. I'm thinking of this as we have an empty bucket to start off with and then we're going to add good vegetables to that bucket. The result is going to be a bucket full of the good ones.\n\n[1:01] The second argument is the item in the array. The reducer is going to get called with each item in this array. Whatever you return from this reducer becomes the value of bucket for the next time around.\n\n[1:16] It's a way of saving a value in between each call. In this case, we're building up this array. If we just return bucket, then our result at the end of all of this going to be just our initial value. For the first time it's going to be an empty array and we're just going to keep returning that and that's all we're going to get.\n\n[1:33] Let's put a console log in here of the bucket and the item and run this code and see what happens. You can see it gets called ones for each item in the array. Since we're returning the empty bucket every time, we get that all the way through. At the end, our log out result with GoodVeggies and you can see that's empty too.\n\n[1:57] To make this work, we're going to inspect each item. If the item includes the text bad or the item includes rotten, then we don't want to keep that one. We're just going to return the bucket as it is.\n\n[2:13] If it was empty, we don't add this one. If it had some stuff in it, we also don't add this one. Otherwise, this vegetable must be good so we're going to say bucket.push item and then return this new bucket with the extra vegetable in it. Let's run this and see what we get now.\n\n[2:33] Starting at the top, it starts off empty. Three apples is good, so it gets pushed into the bucket. Second time through, we have our three apples and we have two bad tomatoes. This is going to get skipped, because it has the word bad in it.\n\n[2:47] In the third one, we have celery. The next time through, we're going to have apples and celery. We've got some onions, but we're going to skip the bad onion. We'll skip the rotten cilantro and the peppers, throw in the garlic, and our final result is only the good vegetables.\n\n[3:04] To be fair, this is not taking full advantage of reduce's power, because we could write this with filter. Let's try returning a more complex value. Let's say, we want to have an object. Inside here, we're going to have the vegetables themselves, which is going to be similar to what we're doing here.\n\n[3:22] We'll also keep a count of how many good vegetables there are, then we'll start that off with . This isn't just going to be the length of the array, because we're going to try to add these numbers. We should end up with 3, 4, 8, 9 good vegetables.\n\n[3:38] In our reducer, this if is still fine. If the item is bad or rotten, we won't change the bucket, we'll just leave it alone. If it's good, we need to put the item into this veggies array, which is bucket.veggies. We're also going to increment bucket.howmany by however many vegetables are in this bunch.\n\n[4:00] To do that, we're going to use parseInt on the item. The way parseInt works, if we try parseInt of the string \"7,\" we're going to get 7. ParseInt will stop at the first non-numeric character. If we say 7 apples, we're still going to get 7.\n\n[4:19] On the other hand, if we try to parse a string like apples, we'll get NaN. What we'll do is store this number in a variable. We can say count = parseInt(item). We use the built-in isNaN function to check if count is a number or not. If it's NaN, then we'll just count this as 1. Otherwise, we'll use the full count. Let's save this now. We can see that our result has an array of four vegetables, and the count is 9.\n\n[4:49] To recap, we're calling reduce on the array and passing in a reducer in the initial value. The initial value gets passed into our reducer as the first argument or the first item. Whatever the reducer returns gets fed back into the next call for the next item.\n\n[5:07] The final return value becomes the result of reduce. We're logging that below. In most cases, the shape of the initial value, whether it's an object, an array, or a number is going to match the shape of your final result, but if we were to return a different value for the last item, then our result could be a different shape than our intermediate accumulator.\n\n[5:30] If we wanted to do that, we can take two more arguments, the index of the item and the array itself. Then we can check the index against the length of this array and return a different value based on that.\n\n[5:42] Let's change this to return a summary string that's going to look something like, \"You have 9 veggies:\" and then a comma-separated list of the vegetables. If the index is equal to the array length minus one, meaning it's the last item, then we're going to build up this string. Otherwise, we'll just return the bucket as it is.\n\n[6:07] The intermediate values will still be the same shape, but the final one will be different. To make this string, we'll return a template string that says, \"You have\" and then the number of vegetables, which is bucket.howMany, \"veggies.\" Then we'll print out the vegetables themselves. That's bucket.veggies. We can join that array with a string \", \".\n\n[6:31] Now if we try running this, you can see that all the intermediate calls were the same as before, where we have our object and the item. The final result is a string that summarizes all the good vegetables in the drawer.",
        "casting_words_order": "zeDX",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays",
        "path": "/lessons/javascript-use-the-reduce-function-on-arrays?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-use-the-reduce-function-on-arrays?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/ey3fc",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-the-reduce-function-on-arrays-S1WvYJklH/scikit-learn-use-the-reduce-function-on-arrays-S1WvYJklH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8381185,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876399,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-the-reduce-function-on-arrays/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/14-after-reduce"
          }
        }
      },
      {
        "id": 4932,
        "creator_id": 12067,
        "slug": "javascript-use-import-and-export-on-js-files-and-modules",
        "title": "Use Import and Export On JS Files and Modules",
        "state": "bundled",
        "summary": "Nearly every modern JS app uses `import` to pull in packages from NPM or from other files within the project, but are you sure about how it works? In this lesson you'll learn about *named* and *default* imports & exports, when you need to write the `{}` braces, and when you don't. We'll cover using import & export both with your own files, and with external packages.",
        "duration": 315,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] You can use import and export to pull in code from other modules, whether those are from npm, Yarn, or your own code. Let's install the moment library by saying Yarn as moment.\n\n[0:11] Moment is a library for dealing with dates and times. We can import Moment from the string Moment. Once it's imported, we can call Moment in the format, the current date as year, month, day.\n\n[0:27] What we've done here is import the default. Because it's the default, we could name it whatever we want, like M. That'll still work fine. Of course, the package name needs to match the one you installed. If it doesn't start with any path indicators like dots or anything, then it's usually going to be coming from node modules.\n\n[0:44] Let's install the lodash package. We'll run Yarn as lodash. You could also run npmi- lodash. Lodash is a useful utility library with a bunch of handy functions. One of them is called get. We can import get from lodash.\n\n[1:01] With get, we can create an object. We'll say we have an object here that has a key a. That's an object that has a key b. That's an object that has a key c. Its value is seven. We can use get on this object and pass in a path, like a.b.c.\n\n[1:21] Get will resolve the string path by drilling into this object and pulling out the value. The great thing about get is that it returns undefined if it can't find that path. Versus if we try to access a.b.c directly, we get a reference error.\n\n[1:40] This import is called a named import because it's inside braces. You can think of it like object destructuring, where this module is an object and we're pulling out a key called get and putting it in a variable called get.\n\n[1:53] This name needs to match the name in the module. If you want to rename it, you can use as and say, \"rename get as _get.\" Then we can use _get instead. If you're using a module that has a lot of named exports and you want to import all of them, you can use star. You can say, \"import * as _ from lodash.\"\n\n[2:15] Now we can use _.get because this variable underscore contains all the exports as keys. We can get oa.b.c. Remember, using star does need to be star as something. You can't just import everything into the current namespace. You can do star as whatever name you want and then use that name later on.\n\n[2:41] All these examples are importing from an external package. Let 's see how we could import from one of our own files. We'll make one called user.js. We're going to write a function called say hi, and just console logs hi.\n\n[2:54] Unless we explicitly export this function, it's not available to outside modules. If we go over to index, and we try to import say hi, say, as a named import from ./user, and then we try calling say hi, we're going to get an error because this is undefined.\n\n[3:14] We could also try it as the default. That doesn't work either because we haven't exported it yet. If we precede the function by export default, and now this is going to be the default export, and our call is working.\n\n[3:30] Remember, since this is the default export, we could name it whatever we want. This name doesn't need to match the one of the file. Let's write another function called print name. It'll take a user object, and then log out the user.firstname, followed by user.lastname.\n\n[3:49] We already have one default export, and we can't have more than one of those. We could export this as a named export by just saying export function. Now, print name is a named export from this file. We could import that separately with the braces as print name from./user. We can call our print name function and pass in a user object. That works well.\n\n[4:14] We can also combine these into one import by putting the default import first, followed by a comma, and then any named imports. We'll get rid of this one. It has to be in this order, default followed by named. If we write it the other way, with named comma, default, we're going to get an error. Let's put this back.\n\n[4:37] You can export more than just functions. We can say export const, base URL is some string. One thing to be aware of is it exports need to be at the top level of the file. You can't do them conditionally. If we tried to say like, if true export something, we're going to get an error. The important export may only appear at the top level. I'll undo that.\n\n[5:06] Now, if we take this named export here, we can go back over to our index file and import it and print it out.",
        "casting_words_order": "zeDZ",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules",
        "path": "/lessons/javascript-use-import-and-export-on-js-files-and-modules?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-use-import-and-export-on-js-files-and-modules?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/yhg86",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-import-and-export-on-js-files-and-modules-HyU3tJ1lH/scikit-learn-use-import-and-export-on-js-files-and-modules-HyU3tJ1lH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8384641,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876400,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-use-import-and-export-on-js-files-and-modules/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/15-after-import-export"
          }
        }
      },
      {
        "id": 4933,
        "creator_id": 12067,
        "slug": "javascript-understand-how-babel-transforms-modern-js-into-older-js",
        "title": "Understand how Babel Transforms Modern JS into Older JS",
        "state": "bundled",
        "summary": "With all the modern JS features we're using, you might wonder... how well are they supported by browsers? Will your users be able to run these apps?\n\nIn this lesson we'll look at what the Babel compiler does behind the scenes to turn your fancy modern JS into a dialect that most every browser can understand.",
        "duration": 127,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Some of the modern syntax from ES6 and beyond isn't supported by modern browsers yet. In most JavaScript apps, [inaudible] we'll go through a compile step where a bundler like Webpack or Rollup or Parcel passes it through the Babel compiler and produces JavaScript. Let's take a look at how Babel handles some of these constructs.\n\n[0:18] We'll [inaudible] code in the left, and you'll see the compiled version on the right. Here's just a regular function. You'll see it adds use strict at the top, but this plain function, it just leaves along, because this is regular JavaScript syntax.\n\n[0:31] If we paste in an arrow function, you can see Babel turns that into a regular function using var instead of const. If we change that function to have a function body with returning a value, it turns it into the same thing.\n\n[0:46] If we try to access this from inside the arrow function, Babel's going to store a reference to the surrounding this in a variable and then use that in your function.\n\n[0:56] Now let's try creating an array of numbers. You can see it puts it in a var. If we then destructure the first value from that array, you can see how Babel just accesses the array at index0 and puts that value into a variable called a.\n\n[1:10] If we create an object and then make a copy of that object using the spread operator, Babel changes the const to var, but it leaves the spread operator alone. If we add a key that uses template strings, you can see how it converts the template strings into a series of concatenations starting with empty string, concatenating first name and a space, and then concatenating last name.\n\n[1:32] Let's try adding an import at the top of the file. This line here corresponds to the import itself, where it's using require with a library and storing that in a variable called underscore, but you can also see how it inserted this entire function to do the require itself.\n\n[1:50] Down below, you can see require is not defined. That's because require is defined by your bundler, whether that's Webpack or Parcel or whatever. We'll try adding a default import too. You can see the import here and how Babel's added another function to do the default import.",
        "casting_words_order": "zeD8",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js",
        "url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js",
        "path": "/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js?pl=modern-javascript-essentials-for-react",
        "http_url": "http://app.egghead.af:5000/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js?pl=modern-javascript-essentials-for-react",
        "http_short_url": "http://app.egghead.af:5000/s/8k74h",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [
          "javascript"
        ],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-understand-how-babel-transforms-modern-js-into-older-js-r1NRFkJlS/scikit-learn-understand-how-babel-transforms-modern-js-into-older-js-r1NRFkJlS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/landscape/javascriptlang.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "javascript",
          "label": "JavaScript",
          "http_url": "http://app.egghead.af:5000/browse/languages/javascript",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png"
        },
        "primary_tag": {
          "id": 205,
          "label": "JavaScript",
          "name": "javascript",
          "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
          "slug": "javascript",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
          "path": "/browse/frameworks/javascript",
          "search_url": "http://app.egghead.af:5000/search?topic=javascript",
          "context": "languages"
        },
        "tags": [
          {
            "id": 205,
            "label": "JavaScript",
            "name": "javascript",
            "description": "JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
            "slug": "javascript",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/es6-and-beyond-9922?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/javascript",
            "path": "/browse/frameworks/javascript",
            "search_url": "http://app.egghead.af:5000/search?topic=javascript",
            "context": "languages"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
        "series_row_order": 8386624,
        "series": {
          "title": "Modern JavaScript Essentials for React",
          "description": "Can't tell which parts of the code are React, and which are JavaScript? Before you can work effectively with modern frameworks like React, you've gotta understand the language it's based on (or at least things will go much more smoothly if you do!). In this module you'll learn the essential syntax of modern JavaScript that's necessary to work with React.\n\nWe'll cover arrow functions and how they differ from regular functions, statements vs. expressions (which will come in handy when you start working with React's JSX syntax), and the ...rest and ...spread operators (two names for three dots that look the same). Then we'll get into immutability and why it matters (super important to understand for avoiding weird bugs in your apps). You'll learn how to use the map, filter, and reduce functions — those three paragons of functional programing — with a special focus on making sure you truly (finally!) understand the `reduce` function. And we'll close out by learning how to import and export modules.",
          "duration": 2967,
          "slug": "modern-javascript-essentials-for-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/modern-javascript-essentials-for-react",
          "http_url": "http://app.egghead.af:5000/courses/modern-javascript-essentials-for-react",
          "path": "/courses/modern-javascript-essentials-for-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/thumb/PureRectMod_1_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/full/PureRectMod_1_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/309/landscape/PureRectMod_1_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876401,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/javascript-understand-how-babel-transforms-modern-js-into-older-js/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/1-ModernJS/16-after-babel"
          }
        }
      }
    ],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/modern-javascript-essentials-for-react/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 0,
    "resource_id": "modern-javascript-essentials-for-react"
  },
  {
    "type": "playlist",
    "id": 432483,
    "title": "Easing into React: An Introduction",
    "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
    "slug": "easing-into-react-an-introduction",
    "published": true,
    "updated_at": "2021-02-13T13:52:30.412-06:00",
    "created_at": "2019-10-14T16:25:29.031-05:00",
    "duration": 2985,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/square_480/PureRectMod_2_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/square_280/PureRectMod_2_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/square_256/PureRectMod_2_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/square_128/PureRectMod_2_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/square_64/PureRectMod_2_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/square_32/PureRectMod_2_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/thumb/PureRectMod_2_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/full/PureRectMod_2_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/483/landscape/PureRectMod_2_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/easing-into-react-an-introduction",
    "path": "/playlists/easing-into-react-an-introduction",
    "http_url": "http://app.egghead.af:5000/playlists/easing-into-react-an-introduction",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/easing-into-react-an-introduction/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/easing-into-react-an-introduction/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/react-write-your-first-react-app-hello-world?pl=easing-into-react-an-introduction",
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432483/users/353304/toggle_save",
    "items": [
      {
        "id": 5282,
        "creator_id": 9671,
        "slug": "react-write-your-first-react-app-hello-world",
        "title": "Write Your First React App: Hello World!",
        "state": "bundled",
        "summary": "The first thing we'll do is get a project set up and put some text on the screen. You'll also learn how JSX is similar to HTML, and how to render dynamic context.\n\nBefore you begin, make sure you have Node and NPM installed (Yarn works too, if you have it). We'll be using the `create-react-app` command to create our app. Since you'll be creating a lot of apps throughout this workshop, I suggest installing the command on your system with `npm install -g create-react-app`.",
        "duration": 398,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We're going to start up our React app by running create React app and give it a name, which is going to be 01 Hello World. This will take a little while. We're going to partially follow the directions here by running cd 01 Hello World. It comes with a bunch of files, and specifically a bunch of files inside source that we're not going to need.\n\n[0:22] I want to delete everything underneath source. I'm going to use the touch command to create a new file into source called index.js. That's going to be empty.\n\n[0:32] Now I am going to switch over to my editor. In the terminal here, I am going to run yarn start, which is going to start up the development server. Now if we got this open in our browser, we can get rid of the terminal.\n\n[0:44] The first thing we're going to do is import React from the React package, and this came with create React app. We're also going to import ReactDOM from the ReactDOM package. This will let us render the app to our page here. We're going to call it ReactDOM.render.\n\n[1:01] The first argument here is going to be something to render, so we get to say the string hello. The second argument is where to render it to. The app that create React that gave us comes with this index studied mailed file. One of the elements in here, inside the body tag is this div with the ID root. That's where our React app is going to live. It's going to take this empty div and put the app inside here.\n\n[1:26] To do that, we're going to go back over here and say document.querySelector passing a string hash root. That will render the string hello into the root element. If I save this now, the dev server should refresh and we should see hello. Here we go.\n\n[1:43] This is rendering a plain old string. Let's wrap this thing in a tag. Instead of writing out the string hello, I'm going to write out a div with the word hello in it. Save this and now we get our new string here.\n\n[1:58] This syntax here is called JSX and it looks a lot like HTML. Note there's no quotes around it. We're not writing our div with hello inside like that. We're just writing it inline like this.\n\n[2:10] Another way we've got this working. Let's move this div into a function. I'm going to make a new function up here. We're going to call it hello world and inside the function I'm going to say return and then return this the same div here. Just move it up here and then in place of that down here, I'm going to write our hello world tag.\n\n[2:31] Let me also change the text here so we can see something new up here. When I save, we got hello world over here.\n\n[2:38] What we've done here is create a new react component. React components have to start with a capital letter and they're typically gained with PascalCase like this.\n\n[2:47] Other than this JSX syntax here and down here, this stuff is all regular JavaScript. This is a plain old JavaScript function, it just returns this JSX. To go a little bit further with this, we could try rendering some more HTML, say, we could put an h1 tag inside here, that says, \"This is a hello.\"\n\n[3:07] We don't have to write it all on one line like this. We can move the h1 down here, the text below it, and the div down here. This will work, but it looks a little bit unbalanced. We can wrap it in a parentheses, and then we can move everything down onto its own line.\n\n[3:23] Now we've got normal-looking HTML inside these parentheses. If I save, you see, we've got our h1 and our text down here. For the most part, any valid HTML can go inside here. We could wrap world with a strong tag. That'll make that word bold.\n\n[3:41] We can only return a single tag from a component. We couldn't, for instance, write a second div down here. When I save this, we'll get an error about JSX being wrapped in an enclosing tag. We'll take that out, and we'll get it back to working again.\n\n[3:58] If I open up the browser console and go over to the elements tab, we can drill into our HTML here and see what react has rendered out for us. If we did want to put another tag adjacent to the div without introducing another rapper, we can put that tag in.\n\n[4:16] Because we have to return a single element, we can wrap the whole thing in this special fragment syntax, so it looks like an empty tag. All of this stuff will be rendered directly to the page as is with no wrapping element. When I save, we can see we've got a div. That div is directly next to the span.\n\n[4:35] This is working pretty much like HTML. We can do something that HTML can't, which is dynamic content. If we wanted to say hello to something other than world, we can replace this with some single braces and a variable called name. Then we'll create that name above.\n\n[4:51] We'll say name is, maybe Dave. When I save, you can see it changes. The syntax here with the single braces is surrounding a JavaScript expression. In this case, it's just a variable, but you can do any JavaScript expression in here.\n\n[5:07] You can do math, like 42 plus 82, networks. You can do some string concatenations. We could say name plus exclamation point. You can also do function calls and any other kind of JavaScript expression inside the single braces.\n\n[5:26] Of course, if we leave off the single braces, then it just treats this like a string. Now we get literally name plus exclamation point. If we want to render an expression, make sure to put it in single braces.\n\n[5:39] Just to be clear, we're not restricted to putting one expression inside the tag. We could do the same kind of things somewhere else, like we could put it inside here. We could put two expressions inside a single tag, like we could some math here.\n\n[5:54] When I save that time prettier, we formatted the whole document. That's why we get Hello on a separate line now. An interesting thing to note here is that we've got this trailing space after Hello and it's wrapped inside a JavaScript expression with a single space.\n\n[6:10] If I try just writing a space instead of wrapping it inside braces, then I save the file without formatting it, we'll see at least the space in a file, but it's removed in the final document. This works the same as HTML in that if you have trailing spaces or empty new lines, the actual whitespace is going to be removed from the final document.\n\n[6:34] That's why if I save with prettier enabled, that's going to remove all the empty space.",
        "casting_words_order": "zeD6",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world",
        "path": "/lessons/react-write-your-first-react-app-hello-world?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-write-your-first-react-app-hello-world?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/505qy",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-write-your-first-react-app-hello-world-r1tubLAYr/scikit-learn-write-your-first-react-app-hello-world-r1tubLAYr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 0,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874830,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-your-first-react-app-hello-world/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/01-after-hello-world?fontsize=14"
        }
      },
      {
        "id": 5283,
        "creator_id": 9671,
        "slug": "react-how-jsx-compiles-to-plain-javascript",
        "title": "How JSX Compiles to Plain JavaScript",
        "state": "bundled",
        "summary": "The HTML-looking syntax that React uses is called \"JSX\" and it's actually compiled to plain JavaScript function calls before the browser ever sees the code. In this lesson we'll demystify JSX, learn how `React.createElement` works, and take a look at how the behind-the-scenes compiled version of a React app.",
        "duration": 236,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] The JSX that you write in your React app actually gets compiled into a JavaScript function call. I'm going to open up the browser console and go to the Elements tab and drill into this div here that's holding our React app. You can see, React is rendered on HTML that matches our JSX here.\n\n[0:16] Let's try returning this manually instead. We're going to return React.createElement() and we'll create a div. It'll just be an empty one. Now if we drill into our root element here, we can see our empty div. Let's build up this equivalent using these React createElement() calls, because that's what this JSX is compiled to in the end.\n\n[0:39] CreateElement() takes the element to create. The second argument is the props we're passing into that element. This one doesn't take anything, so we could pass an empty object or we could pass null. All the remaining arguments are the children of that div.\n\n[0:55] This div has one, two, three children. Let's put those here. We're going to write the H1, which is going to be another React create element. After the H1 is going to be the word hello with the space after it. After that, there's going to be the strong tag with the name in it.\n\n[1:17] That would be another React create element. We'll create a strong tag and now it's filling the children for this two. The strong doesn't have any props and the value inside it is just the expression name. We can just put the name directly here and inside the H1, again, there's no props. The content is the string.\n\n[1:40] When I save this, we can see the app we renders and we've got the same thing as this div down here. If I drill in to this element, you can see we have our div, the H1, the hello and the strong tag. Let me just comment this out so you can see the same result from the JSX. You can see we get the same thing and the same output down here.\n\n[2:03] This is actually the JavaScript that's running in the browser when you write JSX like this. We can prove that if we go over to the sources tab and click on this main .js file here. This is a compiled JavaScript that came from our bundled React app.\n\n[2:20] There's a bunch of stuff up top. If we scroll down, we can see our function hello world. That looks familiar. Const name equals Dave. Here's that commented stuff here and then here's our return statement right here.\n\n[2:35] This big long string is what webpack is calling React. Where we'd call capital React, that's this thing here. There is this .a. It's calling createElement. You can see it's turned JSX into createElement div. Inside that, that's an h1 with some text. It's got that string Hello again. The last thing is the strong tag. It's rendering out the name.\n\n[3:02] One more thing we could try is to render out a custom component. If we make a new component function and call it custom, and maybe this one just returns a span, says custom. Now if we render custom inside our Hello World component, we'll see it appears here. We can do the same thing with createElement by adding one more argument after the strong tag.\n\n[3:28] This time, instead of passing a string, we're going to pass this custom function itself. There's no props, and there's no children. We can just leave it like this. If we save now, we'll see we get the same result.\n\n[3:41] To recap, our JSX gets compiled into React.createElement function calls and createElement can create regular html elements by passing a string like div. They can also render our custom components like this one here by passing the function itself.",
        "casting_words_order": "zeD4",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript",
        "path": "/lessons/react-how-jsx-compiles-to-plain-javascript?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-how-jsx-compiles-to-plain-javascript?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/h7md4",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-how-jsx-compiles-to-plain-javascript-ryfeSIAtS/scikit-learn-how-jsx-compiles-to-plain-javascript-ryfeSIAtS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 4194304,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874831,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-jsx-compiles-to-plain-javascript/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/02-after-createElement?fontsize=14"
        }
      },
      {
        "id": 5284,
        "creator_id": 9671,
        "slug": "react-differences-between-jsx-and-html",
        "title": "Differences Between JSX and HTML",
        "state": "bundled",
        "summary": "Although JSX looks a lot like HTML, it has a few key differences. In this lesson we'll see some of the features and syntax that set JSX apart from HTML, and learn to avoid a few \"gotchas\" that might trip you up.",
        "duration": 172,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] JSX looks a lot like HTML but it defers in some keyways. The first thing is that if you want to specify a class on an element, you need to give it className instead of class.\n\n[0:11] Let's just give this div a class of dark. Over in index.css, I am going to add a dark class here. It's going to make the color white and the background some dark color. To get the CSS to apply to our app, we have to actually import that CSS file. This will tell Webpack to pull in that CSS file and put it on the page.\n\n[0:37] We can see it did work, but we got this warning in the console that says, \"Class was an invalid DOM property.\" If we pass className instead, that'll work correctly.\n\n[0:48] The next thing is the event handlers like onClick need to be camelCased. If we pass the onClick handler and give it a function that logs out \"Hello,\" we're going to get this warning about the onClick property.\n\n[1:02] If we try clicking on this <h1> tag, we can see we're not getting the message. In this case, we get the warning and it doesn't work. If we change this to a camelCase onClick, that'll work correctly.\n\n[1:13] Most of the HTML event handlers are the same, just camelCased, same with onkeypress and those other ones. One that differs is onDoubleClick, which in HTML is ondblclick. If we try that, we're going to get this warning about onDoubleClick, so they spell it out in React.\n\n[1:32] Another difference is if you want to associate a label with an input. Say we make an input with an ID of email, then we normally write a label and give it a for property set to email to match the corresponding input. In React, we need to use HTML for instead of for.\n\n[1:53] In JSX, every tag needs to be closed. You can't write input like this. We'll get an error. Make sure to close your inputs and even your divs. One nice thing about JSX is that every tag can be self-closing. If you want an empty div, you don't have to write it out longhand like this.\n\n[2:12] Lastly, if you want to put comments inside a JSX block, those comments are JavaScript, so put them inside single braces and use the balanced kind of comments that start off with /* and end with */.\n\n[2:27] If you have multiple lines, you can use //. If you have a single line, the // comment is going to comment out your closing brace and this will break, so don't do that.\n\n[2:40] As you saw, React will provide helpful warnings and errors if you mess any of these things up. Probably the most common mistake is class versus className. Just make sure to keep an eye on the console and fix any warnings you see.",
        "casting_words_order": "zeD2",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html",
        "path": "/lessons/react-differences-between-jsx-and-html?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-differences-between-jsx-and-html?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/39ckf",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-differences-between-jsx-and-html-SJfiBIRFB/scikit-learn-differences-between-jsx-and-html-SJfiBIRFB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 6291456,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874832,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-differences-between-jsx-and-html/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/03-after-jsx-html-differences?fontsize=14"
        }
      },
      {
        "id": 5285,
        "creator_id": 9671,
        "slug": "scikit-learn-sketch-before-building-a-tweet-component",
        "title": "Sketch Before Building: a \"Tweet\" Component",
        "state": "bundled",
        "summary": "One of the best skills you can learn for React is how to break down a big problem (\"build this whole app\") into individual components. In the next few lessons we'll be building a Tweet component, and in this one, we're going to start off with a sketch of the finished product and break it down into components that we can build.",
        "duration": 52,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] It's helpful to start with a visual of whatever component you're going to build. Here we're going to build a tweet and then we're going to highlight parts of this, and we'll give them component names.\n\n[0:10] This area on the left is going to be called avatar and then we'll combine the handle and name into something called author. Then we'll have a component called time to represent the time since the tweet came out. The text of the tweet will be called message.\n\n[0:27] Then we've got these four buttons that are just going to be variations on the buttons. We're going to have a Reply button, a Retweet button, a Like button and a More Options button. Finally, we have the tweet itself, which is going to be a component that contains all the rest of this.\n\n[0:49] Now that we've given everything a name, we can start building the components.",
        "casting_words_order": "zeD0",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component",
        "url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component",
        "path": "/lessons/scikit-learn-sketch-before-building-a-tweet-component?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/scikit-learn-sketch-before-building-a-tweet-component?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/w772v",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-sketch-before-building-a-tweet-component-B1D-8UAYr/scikit-learn-sketch-before-building-a-tweet-component-B1D-8UAYr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 7340032,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874833,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-a-tweet-component/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5286,
        "creator_id": 9671,
        "slug": "react-build-a-tweet-component-with-hardcoded-data",
        "title": "Build a Tweet Component with Hardcoded Data",
        "state": "bundled",
        "summary": "From the sketch in the previous lesson, we know which components we need to create. In this lesson we'll write the code and get our Tweet component displayed on the screen. To focus on one thing at a time (always a good idea!), we'll use static hardcoded values for now.",
        "duration": 245,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We have our sketch for a tweet here and we have a blank Create React App here that's just an empty index JS. I have a little bit of CSS here to style things up as we build it.\n\n[0:12] We're going to code up this tweet with hard coded data so that it's easier to just focus on the React stuff, then we can look at making it all dynamic later. We're going to start off by importing React and we'll also import React DOM. We're going to build all the components in one file here just to keep things simple.\n\n[0:28] I'm going to use ReactDOM.render and start off by rendering the tweet component, which we're going to build in just a second. I'll use document.querySelector and find the element with ID root, then we can create the tweet component. For now, we'll return a div with the class of tweet and we'll put some text in here so something shows up.\n\n[0:50] Now we've got something on the page, but there's no style applied yet because we need to import our CSS file. Even though we have our index.css file here, the React project won't find it unless we import that file, so I'm going to import index.css here. What this will do is tell webpack to bundle this CSS file with our project.\n\n[1:12] It's not actually importing that file right here, but if we open up the div tools and go to the elements tab and look inside the head tag, webpack has inserted this style tag with all the CSS from that file.\n\n[1:29] Now let's build the avatar component. We'll create a function called avatar then it's going to return an image tag. Then we'll pass it in alts prop with a text avatar, give it a class name of avatar and give it a source of this gravatar URL here. Then we can render our avatar inside the tweet component right here. When I save, Prettier is going to reformat the file and we've got our avatar.\n\n[2:00] Let's do the three components along the top. Since that all sits to the right of the avatar, I'm going to put all of it inside a div with the class of content. We can put the author component here and we can create the author component down below.\n\n[2:17] We'll create a function called author and it's going to return a span with the class of author. Inside that, we'll have two spans, one for the name and one for the handle.\n\n[2:30] Now we'll create the time component and that's going to return the span too. It'll have a class of time and we'll just say three hours ago. We can use that component up here underneath the author and now we've got the time displayed. This little dot between them is handled by CSS.\n\n[2:49] The last thing inside this content block is going to be the message. Then we'll create the message component and that's going to return a div with a class of message and we'll just write something in here.\n\n[3:02] Underneath the message, we'll create a div for the buttons. We'll start off with the reply button. We can also write components as arrow functions so we could say const reply button equals arrow function, that returns some JSX.\n\n[3:19] Here we're using font awesome icons so we can make an I element with the class FA, FA-reply and reply-button. That's going to be our own class. When I save this, we should see the button up here and then we can duplicate this three more times for the retweet button, like button and the more options button.\n\n[3:44] We'll also duplicate the component a few times. Change these names too. Now we can go and fix the icons and there we go, that's our tweet. Even though we've diverged a bit from our original drawing by reversing the name and handle, that just goes to show that the final product doesn't always mess the mock up.",
        "casting_words_order": "zeEy",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data",
        "path": "/lessons/react-build-a-tweet-component-with-hardcoded-data?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-build-a-tweet-component-with-hardcoded-data?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/6yq8p",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-build-a-tweet-component-with-hardcoded-data-ByU4IIRtS/scikit-learn-build-a-tweet-component-with-hardcoded-data-ByU4IIRtS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 7864320,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874834,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-tweet-component-with-hardcoded-data/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/05-after-static-tweet?fontsize=14"
        }
      },
      {
        "id": 5287,
        "creator_id": 9671,
        "slug": "react-make-components-dynamic-with-props",
        "title": "Make Components Dynamic with Props",
        "state": "bundled",
        "summary": "Your components can display dynamic data using what React calls \"props\". In this lesson we'll convert the static Tweet component with embedded hard-coded data into a reusable component that accepts its data as a prop.",
        "duration": 399,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We're going to go through these components with hard-coded data and replace them with dynamic values using what React calls props. I am going to paste in some data and object that describes a tweet. We're going to pass this data into the tweet component as a prop called tweet.\n\n[0:18] Since this is a JavaScript expression, we're going to use the braces to this value into the prop. Now we can go over to the tweet component and receive those props as an object. Every prop that was passed into this component is going to be part of this object. We can log it out to see what React is doing here.\n\n[0:38] We have an object with the single prop called tweet. If we were to pass in some more props like hi as true, we can see we get an object with those two props. I'm going to take that out. We'll go back and remove that log.\n\n[0:55] We'll start by passing the message prop down to this message component. We'll parse a prop called text, then parse in props dot tweet dot message. This is a bit verbose. It's easier to destructure this props object and pull out the tweet prop.\n\n[1:10] We can do that at the top of the function by using ES-60 structuring to pull out the tweet property from this props object and then we could just write tweet.message. It's more common in react components to do this destructuring in the arguments directly. We can move this text directly up here. Now we're destructuring the tweet prop right in the arguments.\n\n[1:33] Let's move down to the message component. We can accept this text prop destructured here. We'll display this text instead of the hard-coded text. That's working. We'll change the author component next. That's going to take an author prop.\n\n[1:53] That author prop is going to be an object. We're going to pull out the author's name and their handle. We'll go up to the tweet component now and parse in that author here from tweet.author. Now, we've got the author and the message displayed. We can do the avatar.\n\n[2:13] We'll parse in a prop called hash, which is going to be the gravatar hash from tweet.gravatar. We'll go into the avatar component and accept that hash prop. Now, instead of the string nothing here, we can put the hash.\n\n[2:28] To do that, we're going to change the string into an ES-6 template string. Now that it's not a regular string, we have to surround it with braces. Then we can replace this word nothing with a template string expression to insert hash into the string. Now we've got our gravatar.\n\n[2:46] We can do the time component next by parsing in a prop called time, and then displaying that relative time here. If we look at the tweet object that we're getting, we have a regular timestamp here. To turn this into our relative time, we're going to install a library called moment.\n\n[3:05] I'm going to use yarn add moment. You can also use NPM install moment. Moment is the library for dealing with dates and times. Computations like relative times, subtracting and adding times, and that sort of thing.\n\n[3:18] At the top of the file, we can import moment now that it's installed. We'll import moment from the moment package. Then we're going to be parsing that timestamp into the time component. That's a prop called time. This will be tweet.timestamp.\n\n[3:33] I'm parsing individual properties from the tweet here instead of parsing the whole tweet to make these components more reusable. This way, the time component, for instance, only needs to know how to deal with time stamps, and doesn't need to know about the whole shape of the tweet object.\n\n[3:48] In here, we can take the time and use the moment library to display our relative time by calling moment with time. On that object, we can call from now. If I save that, the app didn't refresh, because we forgot to restart the dev server. Let me start up the dev server again. Now the app refreshes. We've got 14 hours ago instead of three hours ago.\n\n[4:13] The last two components that need to be updated are the retweet button and like button. These both take account prop. I'm going to refactor this like button to have a span that wraps around the icon. Next to the heart, we want to display the count.\n\n[4:29] I'll put that inside of span with the class of like count. We can use our account prop directly here. Just going to be a number. We just need to go up to our usage of the component and parse in that count from tweet dot likes. We've got our 17 likes.\n\n[4:48] Let's see what happens if we change the likes to . If we render  likes, instead of 17, we're going to actually see the number . It would be nice to have nothing there instead of that number, . Up in like button, we can write an expression based on count. We can say if count is greater than , then we want to render this.\n\n[5:07] We can use the double ampersand, so that if this expression is true, this whole expression will evaluate to the span. If this expression is false, we'll just get false, and react won't render false. We try this. Now we can see  disappears. If we go back and change our likes to 17, we can see that comes back.\n\n[5:30] Let's do the same thing to retreat count or refractor this to have span around the element. I'll show you a different way to insert some dynamic content. By writing a new function called getRetreatCount, this is going to take a count argument.\n\n[5:45] Since we're inside a regular function, we're not restricted to writing only expressions. We can use if and other statements like that. If count is greater than zero, we can say we're going to return a span with a class of retreat count. Inside that span, we'll put our count value. If count is not greater than zero, we'll return null.\n\n[6:06] Even though this isn't a React component, we can return JS experiment, and then down a retreat button, we can write an expression that calls getRetreatCount with the count value. We need to pass in this prop.\n\n[6:19] At the top, we're going to pass in count equal to retweets. We'll save that. Because our retweet is zero, we're not seeing any values here. If we change retweet to some number, then we see that up here.\n\n[6:35] Now, we've got the same component but with dynamic data coming in through props.",
        "casting_words_order": "zeEw",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props",
        "path": "/lessons/react-make-components-dynamic-with-props?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-make-components-dynamic-with-props?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/tztkr",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-make-components-dynamic-with-props-Bkh3U8RKS/scikit-learn-make-components-dynamic-with-props-Bkh3U8RKS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 8126464,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874835,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-make-components-dynamic-with-props/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/06-after-props-tweet?fontsize=14"
        }
      },
      {
        "id": 5288,
        "creator_id": 9671,
        "slug": "react-split-up-a-react-app-into-component-files",
        "title": "Split up a React App into Component Files",
        "state": "bundled",
        "summary": "Having multiple components defined in a single file is nice for learning, but it quickly gets messy and hard to maintain. In this lesson you'll learn how to split up components into files — one file per component — and how to use those components in other files.",
        "duration": 246,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] In this app here, we have all of the components in a single index.js file. In a real React app, you'll usually have one component per file. Let's start refactoring these components out into individual files.\n\n[0:12] I'm going to start with the avatar component. We're going to work through all of the leaf nodes, basically, and then we'll do the tweet at the end. We'll try to keep the app working along the way.\n\n[0:22] To move out the avatar component, I'm going to just cut it, go over to our source directory and create an avatar.js. The filename doesn't have to match the component, but it's nice if it does. At the top, we have to import React. Then we can have our component. We can export this avatar component as our default export.\n\n[0:43] Even though we're not referring to React directly in this file, we need it in order to be able to use JSX, because the JSX is going to turn into React.createElement calls. That'll depend on the symbol.\n\n[0:55] Let's save this file. We'll go back over to index. If I save this now, we're going to get an error because the avatar is not here yet. At the top, we're going to import avatar from that avatar file. Save this, and that's working.\n\n[1:10] Let's do another one. We'll do a message. We can cut message. Go create a message.js file, paste this in here. And we're going to import react, and export the component. We'll import it over in index.\n\n[1:28] Let's do the author component now. Visual studio code which is the editor that I'm using, has a feature where you can select a component. Hit the right click and refactor, and move it to a new file. It's going to create a file called author.js that exports that component. It imports react for us. The spacing is not great. Once I save this, we can go back over to index and import it.\n\n[1:53] Notice that this function is a named export now. It's export function instead of export default. Which means to import it, we need to use braces around the name. That still works.\n\n[2:06] We can do a couple more in the same way. Let's move time. I can use CTRL + Shift + R instead of clicking this refactor button, and go refactor it. Move to a new file. We can save time.js and save index, because it's already added the import for us. That's all set.\n\n[2:26] The last four are all buttons. Now, I'm going to create a file called buttons.js. It'll have all four of them. We'll need to import react. I'm going to cut all four of these buttons out, and move them over there. Since there are four of them, we can't make them all default exports, so we'll make them named exports instead.\n\n[2:50] You just stick export in front of the variable name. This will make them available to our index file. We'll save that, go over to index. Up top, we can import all four of them using braces as reply button, retweet button, like button, and more actions button. All of these are coming from ./buttons. We'll save this. It still works.\n\n[3:17] The only component left in this file is tweet. I'm going to cut this component and go create a tweet.js, import react, and paste that here. We'll export this one as a default back over in index. We can import the tweet component from the tweet file. It's still used down here. Because we're passing this data in as a prop, we can leave this object right here.\n\n[3:46] Now that we've moved tweet, we need to move all of the imports that it depends on. We'll take all of these and not the index.css one, and put them all over here. Now we've got a minimal index.js that just imports the top-level component. That top-level component imports the rest.",
        "casting_words_order": "zeEu",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files",
        "path": "/lessons/react-split-up-a-react-app-into-component-files?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-split-up-a-react-app-into-component-files?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/ynar0",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-split-up-a-react-app-into-component-files-rJ9z_L0YB/scikit-learn-split-up-a-react-app-into-component-files-rJ9z_L0YB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 8257536,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874836,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-split-up-a-react-app-into-component-files/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/split-into-files-q0m6r?fontsize=14"
        }
      },
      {
        "id": 5289,
        "creator_id": 9671,
        "slug": "scikit-learn-sketch-before-building-the-github-file-list",
        "title": "Sketch Before Building: the GitHub File List",
        "state": "bundled",
        "summary": "We're going to switch gears here and build a new app: a GitHub repository's file listing page. We'll get to see a few new techniques in this app, but first, we need to decide on the components to build. In this lesson we'll sketch out what the app will look like and break down the sketch into components.",
        "duration": 27,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Man: [0:00] We're going to build something like the file listing on a GitHub repo. Let's see what components we'll need. We've got the file list, which surrounds everything. Each row of the list is going to be a file list item. Then we'll have the file name and the icon within that file name. We'll have the commit message, and finally, the relative time that this file was last changed.\n\n[0:25] Now that we've got some component names, let's go build it.",
        "casting_words_order": "zeEs",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list",
        "url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list",
        "path": "/lessons/scikit-learn-sketch-before-building-the-github-file-list?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/scikit-learn-sketch-before-building-the-github-file-list?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/mk2sv",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-sketch-before-building-the-github-file-list-SyuEKURYS/scikit-learn-sketch-before-building-the-github-file-list-SyuEKURYS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 8323072,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874837,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-the-github-file-list/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5290,
        "creator_id": 9671,
        "slug": "react-build-the-github-file-list-app",
        "title": "Build the GitHub File List app",
        "state": "bundled",
        "summary": "Drawing upon the list of components we created from the sketch, in this lesson we'll build the GitHub file list app. You'll learn how to render lists of components with `map`, why the `key` prop is important, and how to use React's Fragment syntax to render components without wrapper elements.",
        "duration": 431,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Before we start building the components, I want to add Font Awesome to our index.html file. I'm going to open up our project under Public Index HTML and paste in a link to Font Awesome. Basically, you have a list of icons to work with.\n\n[0:15] Then we'll go into our source directory and open up index.js. We'll start off by building a file list component that wraps everything else. It's going to take a prop called \"files\" and I'll paste in some data that we can use.\n\n[0:28] This is an array of objects that describe files. We're going to pass in that array as the files prop to FileList. Then to get something on the screen, we'll render out a div that says, \"file list.\"\n\n[0:42] We're actually going to model the file list as a table, because it is a table of data. I'm going to write a table element here with the class of file list. Inside that, we'll have a tbody. Inside here, we're going to render out the files.\n\n[0:58] We can't just render out the files as an expression like this, because we'll get an error, because React doesn't know how to render objects. Instead what we'll do is use the map function, which is built into the array itself. For each file, we're going to turn that file into a JSX element that we can render out. For each one of these, we're going to render out their file list item and pass in the file as a prop.\n\n[1:26] We also need to pass the prop code key. This key needs to be unique for each item in the list, and it should be stable between renders. A bad key would be Math.random because even though that's unique, it will change every render and your list will change orders.\n\n[1:44] Another key that's not ideal but works in a pinch is the index of the array item, which we can pull in from the map function here. This one's not ideal because if the array changes order, your list might not reflect that order.\n\n[2:01] The best option for a key is going to be the file's ID. If you have an object that has a unique ID, that's the best key to use. Then we're going to create our file list item and it's going to take the file as a prop. It's going to return a TR, which is a table row, with a class of file list item.\n\n[2:20] Then inside here, we can render out the file name and pass in that file. Then we'll create the file name component, and it's going to receive the files of prop2. For now, let's just render out a div with the file's name.\n\n[2:36] We'll try this out. It looks like it worked but it's got no styling at all. Let's import our index.css file. This has some style rules already set up. Let's check the console. We're going to get this warning because we can't render divs inside TRs.\n\n[2:56] This rule comes from HTML. This isn't a React thing. Tables have specific rules about which elements can be nested inside which other ones. Table rows can only have table cells in them. Our file name is going to have to be a TD instead of a TR. If we do that, this will work. Let's also give this element a class name. We'll give it file name.\n\n[3:22] From the mockup, we are going to put the icon inside file name component. Let's create a file icon. It'll take the file as a prop. This will decide which icon to render based on the file name. You can switch on file.type. This is starting to complain because our function body can't support statements like switch. Let's change this to embraces.\n\n[3:46] Inside the switch, if the file type is folder, we're going to set the icon to fa-folder. This is a Font Awesome icon name. Let's create a variable called icon that's going to hold this value. We can break out of this case. In the case, the type is file will set the icon to fa-file-text-o.\n\n[4:11] We need a default case for this switch. Let's just say that the file is the default icon type. Here, we're going to return a JSX element. Font Awesome usually uses the I. It's going to have a class name with a dynamic class name because we need FA for Font Awesome, and then the icon will be the dynamic part. Close that tag. Now we can use this icon inside our file name component.\n\n[4:39] Since we can't return more than one item from a component, we can't just put the file icon right next to the TD like this. This will be a syntax error. If instead we try to wrap it in a div, this will fix the syntax error, but now we're going to get some console errors because we can't put divs inside table rows.\n\n[5:02] The solution for this is to use the React fragment syntax, the empty tag. That'll take care of one of the errors. We also need to wrap this file icon in a table cell. Let's give it a class name of file icon, and then it'll be styled correctly.\n\n[5:23] Next, we need the commit message component. Next to file name, we can render our commit message. This will take a commit prop. Then we'll pass in file.latest commit, then we can create that commit message and it will receive the commit and render out a table cell with a commit message class.\n\n[5:46] Inside here, we're going to put that commit.message because this commit from the file is actually an object. If we look down on our data, we can see latest commit is an object and it has a message property. If we save this now, we've got our commit message.\n\n[6:04] The last thing to add is the time on the far right. We can reuse that time component from the tweet example. I'm going to open up the console, stop development server and add the moment library that the time component depends on.\n\n[6:17] I'm going to copy from the previous lesson the time.js file. I'm just going to put that in our source directory here and start the development server back up.\n\n[6:31] Now we've got the time JS file here and we can just import it inside our index file and use it right here. At the top, we're going to import time from the time component file and since it's the default export, we don't need any braces here.\n\n[6:49] The time component renders a span instead of the table cell that we need, so we'll need to wrap it inside a table cell. We'll create one with a class of age and inside here, we can render our time and it takes the time prop and we'll pass in the timestamp from the file, which is file.updated app.\n\n[7:08] Once I saved that, we got our times.",
        "casting_words_order": "zeEq",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app",
        "path": "/lessons/react-build-the-github-file-list-app?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-build-the-github-file-list-app?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/ynns0",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-build-the-github-file-list-app-HkC6q8RKB/scikit-learn-build-the-github-file-list-app-HkC6q8RKB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 8355840,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874838,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-github-file-list-app/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/09-after-github-file-list?fontsize=14"
        }
      },
      {
        "id": 5291,
        "creator_id": 9671,
        "slug": "react-use-react-children-to-render-dynamic-content",
        "title": "Use React Children to render dynamic content",
        "state": "bundled",
        "summary": "One of React's more powerful (and underused) features is the children prop. In this lesson we'll learn a few ways to use children to pass dynamic content to components, along with how to give a component \"slots\" that can accept more than one piece of content.",
        "duration": 144,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Here we have an App component that has a single child as icon button. And it renders a button with an icon and some texts. If we want to customize these texts, we have to just change it in line right here, which isn't so great. It'd be nice if we could pass in new texts to display instead.\n\n[0:19] One way to do that is to turn this self-terminating tag into a regular HTML tag that has contents that we could pass some stuff here. Doing this by itself doesn't do anything. As you can see, the button still says Here.\n\n[0:35] But because we put some content between the opening close tags here, that's going to get passed in as a prop called Children. We can render the Children right here. Now, the button says Awesome.\n\n[0:48] Whatever we pass in here, whether it's one element or multiple, they're all going to come out right here in this component. Let's make another component called alert. It's going to use children. It will render a div with a class of alert.\n\n[1:02] Inside here we'll have an icon with the class of fa and fa exclamation and triangle. It will render the children after the icon. I'm going to import our index.css file, and then render our alert component underneath the icon button down here.\n\n[1:19] I'll pass in some text to display here. We see our alert comes out here. We've got the emphasized text. But what if we wanted to be able to customize this alert a little bit further and have some sort of content here, along with a title? We'll have two pieces of customized content.\n\n[1:37] We could do that too if we pass in a new prop here. We can call it Title. Into this prop we could pass some text like the word \"alert\" as a string. Then we can destructure that title prop from props and render it out above the children as an <h3> tag. Now we can see the title.\n\n[1:57] We could also pass something more complex than just a string. We can pass real JSX into a prop as long we surround it in single braces, because it is just a JavaScript expression. We could pass in some emphasized text instead. That renders out just fine.\n\n[2:13] Just like a return value, we can't pass two elements next to each other, but we could wrap them in fragment syntax. Then we can write whatever we want.",
        "casting_words_order": "zeEo",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content",
        "path": "/lessons/react-use-react-children-to-render-dynamic-content?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-react-children-to-render-dynamic-content?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/m9jq1",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-react-children-to-render-dynamic-content-SJgW280FH/scikit-learn-use-react-children-to-render-dynamic-content-SJgW280FH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 8372224,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874839,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-children-to-render-dynamic-content/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/10-after-children?fontsize=14"
        }
      },
      {
        "id": 5293,
        "creator_id": 9671,
        "slug": "react-the-slots-pattern-for-passing-multiple-children-to-a-component",
        "title": "The \"Slots\" Pattern for Passing Multiple Children to a Component",
        "state": "bundled",
        "summary": "React's one-way data flow makes it easy to pass data one level down, but beyond that, it can become tedious to write pass data deeply through a tree of components. In some cases, you can avoid prop drilling by using the \"slots\" pattern to pass entire components as children. In this lesson you'll learn one way to refactor an app to use props as \"slots\" to pass dynamic content into components.",
        "duration": 201,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] This app here is made up of a navbar component which is this top bar here, and the body component, which has the side bar and the content. Both the navbar and the side bar need access to the user object so they could display the avatar.\n\n[0:14] If I drill into the nav component by coming in and clicking on it, I can see it takes the user prop and passes it down to user avatar, which displays the avatar in the corner. Then if I scroll down to the body component, you can see how it takes the user prop and then passes it straight through to side bar.\n\n[0:31] Side bar takes the user and passes it along to user stats, which displays this info here. This pattern of taking a prop and forwarding it along to children, who then take the prop and forward it along to their children, is usually called \"prop drilling.\"\n\n[0:46] While prop drilling isn't bad or wrong in any way, it can be a little annoying to write. It can make your components harder to re-use. We're going to take advantage of the React children prop to pass dynamic data into the nav and body components, rather than having to pass the user down.\n\n[1:03] Let's drill into the nav component. We're going to make it take the children prop instead of user. Now, instead of rendering the user avatar, we're going to render the children. This makes nav customizable, and we can put whatever we want in here.\n\n[1:17] Back down in the app component where we used nav, instead of passing in the user prop like this, we can pass in that user avatar directly. Since we already have the user available here, we could just pass it into the avatar. You can see this works the same way.\n\n[1:35] Now let's do the same thing to the body component. We'll drill into it. Here we have a choice, because we can only take one children prop. Usually, children is intended for the main content of the component. It would just be a little jarring to use this component and pass in children, and to have your data show up in the side bar.\n\n[1:52] Let's have body take a prop called \"side bar,\" and then it can pass this as the children of the side bar component. We'll re-write this and pass in the side bar here. Now we need to modify this side bar component to take children instead of a user. It can render those children in place of user stats here.\n\n[2:13] We can go back to app where body is used. Instead of passing in the user, we can pass in a side bar prop where the value is that user's task component. We save this. We can see it works the same way.\n\n[2:26] This might look a little weird, but it just shows that you can pass JSX into any prop, not just the children. Let's also change the body component to take a children prop and render it in the main content area.\n\n[2:37] I'm going to take this text main content here, and then pass it in as the children of the body component. Then we'll jump back to the body component, change it to accept the prop called \"children,\" and pass the children down to the content component.\n\n[2:54] Now we can change content to take children, and render the children in place of that string. We'll save this. CVF looks the same. Then we can go down to app and change this string to prove that it's working.\n\n[3:09] We've eliminated some of the prop dealing in this app by taking advantage of React's children prop, as well as the fact that you could pass JSX into any prop to make these components customizable, without having to thread low-level data like user throughout the app.",
        "casting_words_order": "zeEm",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component",
        "path": "/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/yf2kz",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-the-slots-pattern-for-passing-multiple-children-to-a-component-S15v2UAtB/scikit-learn-the-slots-pattern-for-passing-multiple-children-to-a-component-S15v2UAtB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 8380416,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874840,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-slots-pattern-for-passing-multiple-children-to-a-component/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/11-after-slots?fontsize=14"
        }
      },
      {
        "id": 5295,
        "creator_id": 9671,
        "slug": "react-validate-data-with-proptypes",
        "title": "Validate data with PropTypes",
        "state": "bundled",
        "summary": "React comes with a feature called PropTypes that let you define which props your components need, along with their types. It's a nice way of bringing some type information to your React apps without having to rewrite them in TypeScript. In this lesson you'll learn how to specify PropTypes for your components, and whether each prop is required or optional.",
        "duration": 303,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] React has a feature called PropTypes. It let you add typing to your React components so they all get warnings if you don't pass the props that they expect. We have to add the package manually and it's called PropTypes. I'll start the dev server back up and we can import that package at the top of the file.\n\n[0:20] PropType used to be part of the React package, but it's a standalone package now. Once it's imported, we can start adding them to components. Let's go down to the simplest component that takes props, which is the like button. If a component doesn't take props, there is no use in adding PropTypes to it.\n\n[0:37] We can add PropTypes by adding a property directly to the component itself. That property is called PropTypes, but note this one is a lowercase P and PropTypes is an object. We'll add a count key to this object matching the count prop. The value of this key will be PropTypes.number.isRequired.\n\n[1:00] PropTypes is the package that we installed, number is the property that means that this thing is expected to be a number, and isRequired means that we'll get a warning if we don't pass in account. Let's save this. We should see the app works the same way. If we open the console, we're passing everything we should right now so we don't get any warnings.\n\n[1:18] If we scroll up to where we're rendering the like button and take out the countprop, we'll save. Then we're going to this failedprop type warning. It says, \"Count is marked as required but its value is undefined.\"\n\n[1:32] Let's try passing in account that has a value that's something that's not a number. We'll pass in like \"Hi,\" as a string. Now we get \"invalid prop count of type string,\" because it was expecting a number. You can see how PropTypes will help you track down errors if you use a component the wrong way.\n\n[1:49] Let's put this back the way it was. We'll go back down to the bottom and we'll add some PropTypes for some more components. For retreat button we'll add a PropTypes property, set that to an object. This will work the same way as like button, where we expect a count prop that has PropTypes.number.isRequired.\n\n[2:13] We'll go up to the next one which is time. For the time component, the PropType is going to be a string. We have the time prop. We'll say, \"PropTypes.string.isRequired. If we leave off the .isRequired, that just means it's optional. But if we pass in the wrong type, it doesn't match a string, we'll get a warning about that.\n\n[2:36] For author, let's do something a little more complex. We want to say that the author prop should be an object with a certain shape. For that, we have PropTypes.shape and we can pass it an object.\n\n[2:49] Inside this object, we follow the same format where we say we expect a name property, which is going to be a PropTypes.string.isRequired and also a handle, which is the same thing. Here we have isRequired on these two sub properties but not on the author itself, which means that author is going to be optional. If it is passed in, then name and handle are required.\n\n[3:16] Let's see how that'll work. If we go up to where we're using author and where we're passing in this author prop. Instead of passing in tweet to author, we're going to pass an empty object. This syntax might look a little weird but the outer braces are surrounding a JavaScript expression and the inner braces are an object. We'll save that.\n\n[3:35] We can see that author.name is marked as required and it stopped at the first error. Also notice that these things are warnings. They're not actually errors and they don't prevent the app from rendering.\n\n[3:49] If we skip passing the author entirely, we're going to get an error because the author component expects that this is going to be a valid object, and it pulls stuff out of it. Just to see what the PropTypes are doing here, let's try replacing this with an empty object so that this stuff will keep working.\n\n[4:06] You can see now that we don't get a warning because the author prop is not actually required. If you need to have a required object that has required fields, you need to remember to put the isRequired on the outermost thing as well. Once that's there, we're going to get this warning that author is required.\n\n[4:25] Let's put this back to the way it was and it'll go back up to the usage of it and pass in the author prop again. Just a few more components left to do where the message requires text to be a string and avatar requires hash to be a string.\n\n[4:42] The one we haven't seen yet is object. On the tweet component, we'll specific that tweet needs to be an object where you can say, PropTypes.object.isRequired. There are a few other PropTypes validators, like, bullion and array of and object of. You can look at the React docs for the full set.",
        "casting_words_order": "zeEk",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes",
        "path": "/lessons/react-validate-data-with-proptypes?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-validate-data-with-proptypes?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/xgr4n",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-validate-data-with-proptypes-SJZWTU0FS/scikit-learn-validate-data-with-proptypes-SJZWTU0FS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 8384512,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874841,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-validate-data-with-proptypes/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/12-after-proptypes-tweet?fontsize=14"
        }
      },
      {
        "id": 5297,
        "creator_id": 9671,
        "slug": "react-deploy-an-app-to-surge-and-now-sh",
        "title": "Deploy an app to Surge and Now.sh",
        "state": "bundled",
        "summary": "Now that you have a functioning React app, it's time to share it with the world! In this lesson you'll learn how to build a production-ready version of your app and deploy it (free!) to the real live internet. It's quick and easy, and a great way to publish portfolio pieces.",
        "duration": 131,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Once you have a React app that's working, it's pretty easy to deploy it to the actual Internet. If you have your own server, you can build the app locally. You can say yarn build or npm run build to do that.\n\n[0:13] It'll take a little while and then output a build directory inside your project. We can open up this build directory and look at what's included. We have our index.html file, but it's been minified.\n\n[0:26] We also have the manifest.json that came from public and the fav icon that came from public and a few other JS files here. Then inside static is the compiled CSS that's been minified and the JavaScript, broken up into bundles.\n\n[0:44] You can kind of ignore most of this as long as you put this build directory, and specifically the index.html file, somewhere on a server that can be accessed. As long as the server can serve index.html, it'll serve your whole app, but if you don't have your own server set up, it's easy enough to deploy it somewhere else.\n\n[1:02] There are a few simple services for this. One's called Now. There's also Surge. To use Surge, we can install it globally with npm install -g surge. Then we just need to follow the directions and run Surge.\n\n[1:17] If we run Surge here, it's going to deploy these files, which is not what we want. We're going to go into the build directory first and then run Surge from here. It's going to pre-fill our project directory, come up with a domain name for us that we can customize if we want to. Then it's going to upload everything.\n\n[1:36] Now we can copy this URL and open it up in our browser. Here's our app running live on the real Internet.\n\n[1:44] We could try it with the same thing with the Now service. We can run npm install -g now. Same as with Surge, we want to run the Now command from inside the build directory.\n\n[1:58] It's copied the URL to our clipboard. We could just paste that into our browser. There's our app running on Now. We have one copy at now.sh and one copy on Surge. That's all it takes to deploy a React app.",
        "casting_words_order": "zeEi",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh",
        "path": "/lessons/react-deploy-an-app-to-surge-and-now-sh?pl=easing-into-react-an-introduction",
        "http_url": "http://app.egghead.af:5000/lessons/react-deploy-an-app-to-surge-and-now-sh?pl=easing-into-react-an-introduction",
        "http_short_url": "http://app.egghead.af:5000/s/ak0nn",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-deploy-an-app-to-surge-and-now-sh-rJ2e0I0FS/scikit-learn-deploy-an-app-to-surge-and-now-sh-rJ2e0I0FS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
        "series_row_order": 8386560,
        "series": {
          "title": "Easing into React: An Introduction",
          "description": "Welcome to React! In this module you'll write your first React app, and learn how to build apps using React's JSX syntax. We're intentionally starting simple, with hard-coded data and no \"state\" to worry about. After working through these lessons you'll understand enough of React's fundamental concepts to be able to build static apps, just as you would with plain HTML.",
          "duration": 2985,
          "slug": "easing-into-react-an-introduction",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/easing-into-react-an-introduction",
          "http_url": "http://app.egghead.af:5000/courses/easing-into-react-an-introduction",
          "path": "/courses/easing-into-react-an-introduction",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/thumb/PureRectMod_2_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/full/PureRectMod_2_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/347/landscape/PureRectMod_2_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874842,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-deploy-an-app-to-surge-and-now-sh/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/2-EasingIntoReact/13-after-deploy?fontsize=14"
        }
      }
    ],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/easing-into-react-an-introduction/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 1,
    "resource_id": "easing-into-react-an-introduction"
  },
  {
    "type": "playlist",
    "id": 432448,
    "title": "Classic React with Class Components",
    "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
    "slug": "classic-react-with-class-components",
    "published": true,
    "updated_at": "2021-02-13T13:51:02.819-06:00",
    "created_at": "2019-10-14T16:30:12.402-05:00",
    "duration": 3946,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/square_480/PureRectMod_4_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/square_280/PureRectMod_4_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/square_256/PureRectMod_4_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/square_128/PureRectMod_4_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/square_64/PureRectMod_4_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/square_32/PureRectMod_4_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/thumb/PureRectMod_4_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/full/PureRectMod_4_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/448/landscape/PureRectMod_4_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/classic-react-with-class-components",
    "path": "/playlists/classic-react-with-class-components",
    "http_url": "http://app.egghead.af:5000/playlists/classic-react-with-class-components",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/classic-react-with-class-components/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/classic-react-with-class-components/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/react-use-react-state-to-make-components-interactive?pl=classic-react-with-class-components",
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432448/users/353304/toggle_save",
    "items": [
      {
        "id": 5325,
        "creator_id": 9671,
        "slug": "react-use-react-state-to-make-components-interactive",
        "title": "Use React State to Make Components Interactive",
        "state": "bundled",
        "summary": "Without state, a React app is essentially just a fancy static HTML page. In this lesson you'll learn what \"state\" is, and how to write a component that retains its own state.",
        "duration": 237,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Here we have a function component rendering a static counter. You can see how it doesn't change if you click the buttons because nothing's wired up and the count is stuck at zero. Let's make it functional by adding state to it.\n\n[00:12] We'll do that by re-writing the counter as a class component. We say class counter extends React.component. Even though React now includes hooks, class components are still widely used and it's important to understand how they work. That's why we're starting with a class.\n\n[00:29] Class components have to have a method called render. In here, we're going to return some JSX, which is going to be the stuff that we already have and down below. I'm also going to comment out this counter component and save the file now and you can see the app looks the same.\n\n[00:45] Now that we have a class, we can make the count dynamic by storing that value and state. First, we'll need a constructor. It's going to take props. The first thing we'll do is call super with those props. This will make it so that we can access this.props inside the constructor if we need to. We don't need to right now.\n\n[01:05] Then we'll initialize state by saying this.state equals an object. We'll give it a property called count and set that to some number that's not zero so we can see that it works. Then we'll l replace the zero that we're rendering with this.state.count. When I save now, we'll see the app refreshes and we have 25.\n\n[01:25] The counter still doesn't work because we haven't wired up the buttons. On the plus button, I'm going to add a prop called on click, and we're going to pass the function to this prop called this.increment which refers to a function that we'll write right now.\n\n[01:39] We'll make another method called increment. Inside of here, we're going to call this.setstate and pass in an object to update our state. We want to update the value of count. We'll replace it with this.state.count plus one.\n\n[01:55] I'll save. We'll click the button. What happened? Can't read property set state of undefined. That means that this is undefined here. The reason we're getting this error is because we passed the function in as the on click prop, passing the function this way detaches the function from it this binding. When the button calls this function, this is undefined.\n\n[02:19] To make this work, we have to manually bind to the increment function. We'll do that in the constructor by setting this.increment equal to this.increment.bind, then pass in the value of this. Here, we're basically replacing the increment method with a new one that is prebound.\n\n[02:39] Now we can pass the function around all we want and this will come out correctly. We'll save now. Now when we click the button, the counter increments.\n\n[02:49] Let's do the same thing for the decrement function now. We'll will duplicate the binding for decrement. We can also copy the increment function, then rename it to decrement. We'll and change the operation to a minus instead of a plus.\n\n[03:06] Now we can click the minus. It's not going to work yet until we pass the function into our on click handler. We'll go down to the button and pass in the on click crop, set to this.decrement. We'll save again. Now our counter can go up and down.\n\n[03:23] Recapping the important bits, we need to initialize the state in the constructor, and then we need to bind any handler for actions that we create. Then whenever we want to change state, we need to call this.setstate and pass in an object specifying the keys that we want to change.\n\n[03:39] After you call set state, React is going to rerender the app with that new value. It's important to know that you can't change state directly like this.state.count+=1 because React won't know that this happened. It won't rerender. Any changes to state should be done with this.setstate.",
        "casting_words_order": "zeJe",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive",
        "path": "/lessons/react-use-react-state-to-make-components-interactive?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-react-state-to-make-components-interactive?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/hv11s",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-react-state-to-make-components-interactive-BkshKjEqS/scikit-learn-use-react-state-to-make-components-interactive-BkshKjEqS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 0,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874299,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-state-to-make-components-interactive/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/01-after-counter?fontsize=14"
        }
      },
      {
        "id": 5327,
        "creator_id": 9671,
        "slug": "react-run-code-after-setstate-with-a-callback",
        "title": "Run Code After setState with a Callback",
        "state": "bundled",
        "summary": "One unintuitive thing about `setState` is that it's actually an asynchronous call. Right after calling `setState`, `this.state` will very likely not be changed yet. In this lesson you'll see this quirk of `setState` first hand, learn why it happens, and how to effectively run code after a `setState` call when you need to depend on the changed value.",
        "duration": 170,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] When we call setState in a React component, that causes React to update the state and then trigger a re-render with that new value. You click the button, it calls this function which calls setState and then later, it calls render.\n\n[00:13] That doesn't happen immediately. If we logout the newState after updating it and then we go and click our plus button, you see the count is incremented to one but it printed out a count of zero. That's because setState is asynchronous, so when you call setState, it's really just queuing up an update\n\n[00:34] After this function is done at some point later, React will call your render function. This can become a problem if you're trying to update state based on old state multiple times. If we were to do three setStates here and then try this out, we're going to see the count goes up by one each time, even though we might think it's going to go up by three.\n\n[00:55] A better way to write setState that's guaranteed to produce the right result is to pass it a function instead of an object. Let's replace this with a function that's going to take the previous state and then it's going to return an object that's going to update the state.\n\n[01:11] This object looks the same, but instead of referencing this.state, we can use previous state. We'll try this out and it's going to work the same way decrementing by one, but the big difference is if we copy and paste a few of this, then when we click the button, it's going to go down by three because now it's queuing up three set state calls.\n\n[01:33] When React goes to ran these calls, it's going to pass in the previous state. First it passes in previous state with a count of zero, subtract one then it's going to call the next one. Now our count is minus one, so I can subtract one and so on.\n\n[01:49] The passing in the function doesn't make setState any less asynchronous. We can logout this.state after running this and we're going to see that when we decrement, we still get the previous value printed out after setState runs.\n\n[02:03] To make this format a little bit nicer to write, we can shorten the argument name to something like prev. Then we can take advantage of the fact that arrow functions can directly return objects as long as we wrap the braces in parenthesis. This function is just the same.\n\n[02:23] If we do actually need to ran some code after setState runs, we can pass a second argument to setState. Here's our first argument. We can pass the second argument, which is the function and it's not going to take any arguments at all. Inside here, we can access this.state and it's guaranteed to be the latest value.\n\n[02:43] If I save this and click minus, we're now seeing that it prints out a value that's in sync with the actual count.",
        "casting_words_order": "zeJa",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback",
        "path": "/lessons/react-run-code-after-setstate-with-a-callback?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-run-code-after-setstate-with-a-callback?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/347b1",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-run-code-after-setstate-with-a-callback-B16vqjNcB/scikit-learn-run-code-after-setstate-with-a-callback-B16vqjNcB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 4194304,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874300,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-run-code-after-setstate-with-a-callback/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/02-after-setstate-async?fontsize=14"
        }
      },
      {
        "id": 5329,
        "creator_id": 9671,
        "slug": "react-write-a-react-component-without-the-constructor",
        "title": "Write a React Component Without the Constructor",
        "state": "bundled",
        "summary": "Class components suffer from a bit of boilerplate with the constructor and needing to `.bind` each handler function. In this lesson you'll learn how to skip that boilerplate by using property initializers, so that you can write class components without a constructor and without needing to `.bind` every handler function.",
        "duration": 61,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] One of the downsides with class components is having to write this constructor every time and having to manually bind these functions.\n\n[00:07] A different way to do this is to use property initializers, where we can set these functions to arrow functions. By making them arrows, they're going to automatically bind to this when the class is instantiated. We can remove the binding and the constructor, and the app still works.\n\n[00:29] We can move the initialization of state out of the constructor and into a property initializer. We can just set state = an object. If we needed to access props in here, we can use this.props within here. We don't need it for this, but we'll just set it to some sort of number. We'll see that this works.\n\n[00:46] I'm going to take out this from the constructor. We can see we're initializing to 5 and the counter still works. At this point, the constructor is pretty much useless, and this warning tells us so. We can delete the constructor and the app still works.",
        "casting_words_order": "zeJD",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor",
        "path": "/lessons/react-write-a-react-component-without-the-constructor?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-write-a-react-component-without-the-constructor?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/hgg27",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-write-a-react-component-without-the-constructor-SkxZiiVqS/scikit-learn-write-a-react-component-without-the-constructor-SkxZiiVqS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 6291456,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874301,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-write-a-react-component-without-the-constructor/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/03-after-constructorless?fontsize=14"
        }
      },
      {
        "id": 5330,
        "creator_id": 9671,
        "slug": "react-setstate-uses-shallow-merge-to-update-state",
        "title": "setState Uses \"Shallow Merge\" to Update State",
        "state": "bundled",
        "summary": "When you call `setState`, what happens to the existing value? Here you'll learn about shallow vs. deep merge, and how `setState` will merge your new values with the old state, preserving some of them and helping avoid repetitive code.",
        "duration": 253,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] The way set state works is that it will take this object and shallow merge these properties in with the old state. Since our state only has one property, it's not very obvious how that works. Let's add another property called lip, and we'll set it true. This will control whether the counter is light or dark.\n\n[00:18] Down to the render function, we can change this class dynamically based on the state. I'm going to convert this string to a template string. Inside the string, I'm going to insert an expression that based on the value of lit, if it's true, then we're just going to pass an empty string. If it's false, we're going to pass the class dark.\n\n[00:40] It's dark class is defined in our CSS file to change the background color and some of the other colors on the button. We'll save now and it should stay white. We get an error because we're using lit. this should be this.state.lit.\n\n[00:55] Instead of writing that out, I'm going to destructure the state at the top, so we'll pull out lit and count from this.state. Now this will work and we can replace this.state.count with just count.\n\n[01:12] Then we can add a button to turn the lights on and off. It's going to say light/dark and go give it an onClick prop. Into that we'll pass this.toggle which is a function that doesn't exist yet. Let's create that here.\n\n[01:26] We'll create a function called toggle, which is going to be an error function. When we click the button, it will call this.set state and we'll use the updater form where we take the previous state and then return an object to update the state. We can set lit to the opposite of whatever it was before. Now we can click our light/dark button and it'll toggle the lights.\n\n[01:48] Independently, we can change the count. When we flip the lights on and off, the count stays the same. This is because the value from this object is being shallow merged into the state, so it only replaces lit while leaving count alone.\n\n[02:04] The reason it's called shallow merge is because it only goes one level deep. If we had some nested state where maybe these properties were inside an object called wrap, now that we've changed the shape, we've got to go and update all the places we use state.\n\n[02:19] We can change these three occurrences to this.state.wrap and where we access prev.lit, we can access prev.wrap.lit. That works on the reading side. Now when we write this state, we need to update these two set a wrap object with lit inside and to do the same for count.\n\n[02:44] Now notice what happens. If I increment the count, the counter goes dark because lit is being unset. It's replacing this wrap value with a new object that only has a count property, so lit is undefined.\n\n[02:58] We can prove this if we put a console log inside our render function and log out of this.state. Initially, we can see is an object with a wrap. It has the properties we want. Once we click once, we get a new object. It has wrap, but wrap only has count.\n\n[03:16] Since there's no lit, undefined is the same as false, which is why we have a dark counter. We can try turning the lights back on, but that's going to wipe out the count. Now, the app is truly broken.\n\n[03:28] Again, this is happening because set state is doing a shallow merge of this object with the state object. It's only going one level deep. Because we specified the wrap object, it's replacing state.wrap with this new one, which is missing some important properties.\n\n[03:45] To fix this, we can copy in the existing properties from prev.wrap. Here, we're basically doing our own shallow merge, copying in everything, and overwriting the lit property. We can do the same for our count by putting in this.state.wrap. Same for this one. Now, our app should work again. We can change the count and we can change the lights and they work independently.",
        "casting_words_order": "zeH6",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state",
        "path": "/lessons/react-setstate-uses-shallow-merge-to-update-state?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-setstate-uses-shallow-merge-to-update-state?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/af4z7",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-setstate-uses-shallow-merge-to-update-state-SkCSjsE9S/scikit-learn-setstate-uses-shallow-merge-to-update-state-SkCSjsE9S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 7340032,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874302,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-setstate-uses-shallow-merge-to-update-state/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/04-after-shallow-merge?fontsize=14"
        }
      },
      {
        "id": 5333,
        "creator_id": 9671,
        "slug": "react-the-consequences-of-mutating-state",
        "title": "The Consequences of Mutating State",
        "state": "bundled",
        "summary": "When you modify state directly, it can cause tricky bugs where your UI doesn't update — even if you call `this.setState` immediately afterwards. In this lesson you'll see first-hand how mutating state can cause problems, and how to update state the right way, with immutability.",
        "duration": 233,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] When you have nested state like this and you need to update some deep property of it, it can be tempting to just change that property directly and then set the state. Why can't we just change this.state.wrap.count and say + = 1. Then call this.setState with this.state.\n\n[00:22] Let's try this out and we'll get a warning that we shouldn't use this.state directly, but it still seems to work. If we scroll down to the toggle function where we have the updater form of setState, you could try the same thing here by turning this into a function body and returning this new object.\n\n[00:42] Rather than returning the object, we'll just set prev.wrap.lit to the opposite and then return this new prev object. We only get this warning once even though we're effectively doing the same thing here. The app does seem to work.\n\n[01:05] The problem with this comes when you start to pass the state around as props. Let's create a new component called status. It's going to extend React.pure component, instead of React.component.\n\n[01:20] The only difference between a pure component and a regular one is that a pure component will only rerender if its props have changed. The regular component will always rerender even if its props are the same.\n\n[01:32] Inside here, let's return a div. Inside that div, we're going to render out the count. If lit is true, we're going to render out true. If lit is false, we'll render false. this is because React won't render Booleans directly.\n\n[01:49] Let's destructure the props and pull out count and lit from this.props. Now we can use this component up in our counter. We'll put it below the button and render out status and pass in a lit prop equal to lit and count equal to count.\n\n[02:13] Now, we're reflecting the state of this counter component inside our little status component down here. As you change the count, you can see the status is updating. When we turn the lights off, it goes false. When we click minus, the count goes down.\n\n[02:29] Everything seems to be working fine, but this wrap object that contains these two pieces of state isn't changing between renders. If we pass the wrap down, and then inside our status component, destructure count and lit for wrap, and then we won't pass in lit and count anymore.\n\n[02:48] Now we can see it looks fine so far. If we flip the lights off, this should be false now, but it says true. It's not updating. If we increment the counter, that's not changing anything either. That's because in our increment and toggle functions, we're modifying that object and returning it, and modifying the object and setting it back into state.\n\n[03:12] The decrement function is still doing things the right way. If we decrement the count, we're going to see this value updates. That's the only time that this component is going to rerender because the rap object is being recreated.\n\n[03:27] All this to say, if you're changing something deeply nested in state, make sure you recreate each level and copy in the previous properties before replacing whatever you need to change.\n\n[03:39] Modifying the state directly like this, or like we did in the toggle function might work for a little while, but if you end up using optimized components like our status one down here, that's a pure component, you could end up with some pretty confusing results.",
        "casting_words_order": "zeJF",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state",
        "path": "/lessons/react-the-consequences-of-mutating-state?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-the-consequences-of-mutating-state?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/evja8",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-the-consequences-of-mutating-state-SJ_ghj4qr/scikit-learn-the-consequences-of-mutating-state-SJ_ghj4qr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 7864320,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874303,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-consequences-of-mutating-state/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/05-after-consequences-of-mutation?fontsize=14"
        }
      },
      {
        "id": 5336,
        "creator_id": 9671,
        "slug": "react-store-the-value-of-form-input-in-state",
        "title": "Store the Value of Form Input in State",
        "state": "bundled",
        "summary": "React has two ways to deal with input controls: \"controlled\" and \"uncontrolled.\" In this lesson you'll learn how to use a controlled input — that is, an input where the value is kept in the component's state.",
        "duration": 109,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We have a text input here. We can type into it, but we'd like to have it update this title to say \"Hello\" to wherever we'll type into the box.\n\n[0:07] To do that, we need to be able to get the value out of the input. The standard way to do that in React is to make it a controlled input. That just means we need to pass it a prop called value which will tell it what to display, and a prop called onChange which will be called whenever you type into the box.\n\n[0:25] This means we need to keep track of this value ourselves. We're going to initialize the piece of state. We'll have a variable called name which will initialize to empty, and then we can pass that name into the value.\n\n[0:39] If we tried this now without the unchange but passing in this value of empty string...But notice we can't type into the input anymore because but passing in this value, we're forcing the input to always be equal to this empty string.\n\n[0:53] To be able to update this state when we type new characters, we'll put in the onChange handler and we'll pass this to handleChange. Then we can create a handleChange method on this class and it's going to take the event that trigger the change and we'll call this.setState and pass in an object with a name and we're going to set that name to the event.target.value.\n\n[1:21] The target refers to the input that triggered the event and the value will be whatever the value of that input was at the time of the event. We're also still hard coding this name here so let's replace this with this.state.name.\n\n[1:35] Now, when we type into the box, the onChange handler is being called with the current value that gets set in state, it re-renders the component and then updates the header. It then also passes that value into the input, so it stays in sync with whatever we typed.",
        "casting_words_order": "zeH4",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state",
        "path": "/lessons/react-store-the-value-of-form-input-in-state?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-store-the-value-of-form-input-in-state?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/h8dds",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-store-the-value-of-form-input-in-state-ryfn3oVcr/scikit-learn-store-the-value-of-form-input-in-state-ryfn3oVcr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8126464,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874304,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-the-value-of-form-input-in-state/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/06-after-inputs-controlled?fontsize=14"
        }
      },
      {
        "id": 5338,
        "creator_id": 9671,
        "slug": "react-use-a-ref-to-refer-to-an-uncontrolled-input",
        "title": "Use a Ref to Refer to an Uncontrolled Input",
        "state": "bundled",
        "summary": "React has two ways to deal with input controls: \"controlled\" and \"uncontrolled.\" In this lesson you'll learn how to use an input in an uncontrolled way and access its value using a \"`ref`\".",
        "duration": 97,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] If you only need to get the value out of input at a specific time like when a form is submitted, you can leave the input uncontrolled. That is don't pass it a value or onChange handler but instead, pass it a ref. The ref object will point to the DOM node that actually backs this input and when the form is submitted, we can pull the value out.\n\n[00:19] To do that, we have to create a ref and we'll do that inside the constructor. We'll take props and we'll call super(props), then we can call React.createRef and this will create a ref object. We can store that inside a variable on the class. We'll call it inputRef. You can call it whatever you want. Now we can pass this.inputRef in as the ref prop to this input.\n\n[00:45] When the input first mounts, it's going to set this up to point to the actual DOM node. Now that we have this ref, we can write a submit handler for the form. We're going to pass in an onSubmit prop and set that to this.handlesubmit. Our submitHandler is going to take the event.\n\n[01:03] First thing we'll do is call event.preventdefault to make sure that it doesn't actually refresh the page. We'll try that. Now, when we click Submit, the page doesn't refresh. From inside the eventHandler we can alert the value of the input by using this.inputref.current.value. The actual DOM node is stored under whatevertherefis.current.\n\n[01:32] If we type in some name now and hit Submit, we can see we get the value out of the input.",
        "casting_words_order": "zeJH",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input",
        "path": "/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/91z9d",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-a-ref-to-refer-to-an-uncontrolled-input-rJLgTi4qS/scikit-learn-use-a-ref-to-refer-to-an-uncontrolled-input-rJLgTi4qS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8257536,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874305,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-ref-to-refer-to-an-uncontrolled-input/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/07-after-inputs-uncontrolled?fontsize=14"
        }
      },
      {
        "id": 5339,
        "creator_id": 9671,
        "slug": "scikit-learn-sketch-before-building-shopper-app",
        "title": "Sketch Before Building: Shopper App",
        "state": "bundled",
        "summary": "We're going to combine the skills you've learned so far into a little online store app, with a list of products, a shopping cart, and a checkout page. In this lesson we'll see how the app will work, and break it down into components that we can build.",
        "duration": 59,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Here, we're going to build this shopping site. We've got a list of items for sale, and we can add them to the cart. Then we can click over to our cart, and we can see a summary of the items we're going to buy along with the total. Then we can go to the checkout page and fill out this form.\n\n[0:19] We've got the form data displayed here. Let's look at breaking this app down into components. We'll have one that surrounds the entire thing, and then we'll have this top navbar area and the list of items itself. Then we'll have each row in this list. We're going to call each of those rows item, we'll call the container item page, top will be navbar, and the surrounding component will be app.\n\n[0:43] Then for the cart page, we're going to have the same shell, but the inner component will be called cart page. We can reuse the item component for the rows. Finally, for checkout page, we'll keep the app and the navbar the same and create a component called checkout page to contain the form.",
        "casting_words_order": "zeH2",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app",
        "url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app",
        "path": "/lessons/scikit-learn-sketch-before-building-shopper-app?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/scikit-learn-sketch-before-building-shopper-app?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/e5h49",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-sketch-before-building-shopper-app-Sk2uaiE5S/scikit-learn-sketch-before-building-shopper-app-Sk2uaiE5S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8323072,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874306,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/scikit-learn-sketch-before-building-shopper-app/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5341,
        "creator_id": 9671,
        "slug": "react-build-the-shopper-s-item-page",
        "title": "Build the Shopper's Item Page",
        "state": "bundled",
        "summary": "In this lesson we'll build an ItemPage component to display a list of items for sale, along with a NavBar component for navigation. You'll learn how to render a list of items in React using the Array `.map` function.",
        "duration": 187,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We have pretty much a blank slate here with some hard coded product data. We're going to start by adding a navbar component which we're going to import from navbar.js. That file doesn't exist yet, so we'll go create navbar.js.\n\n[00:18] We'll insert our boilerplate here to create our navbar component and export it. Inside this component we're going to render a nav element that has a UL and one item for now called store. We can save this and save our index file. The app should refresh and we've got our navbar here.\n\n[00:40] Now we'll write a component to display these products. I'm going to create a main tag and inside that I'm going to put the item page. Into this component we'll pass a prop called items, and we'll pass in those products. We're also going to need to import that item page up top and we can create this file as itempage.js.\n\n[01:05] Just as before, we're going to import React and create this item page component that is exported as the default. It takes a prop called items, which is going to be that array of products and it's going to render out the div with a class of item page. Inside here, we'll have an H2 that says items for sale.\n\n[01:26] Below here, we want to render out the items, but we can't just render them out like this. If we try this, we're going to get an error because React won't be able to render these objects inside the list.\n\n[01:37] To render our list, we're going to use the array map function so we can map over our items. For each item, we're going to return a new list item tag and inside it will display the item name.\n\n[01:52] Now our items are rendered, but if we open up the console, we can see this warning about a missing key prop. That's because each item in a map needs to have a unique prop called key and we'll pass the item ID for that key. With the key prop in place, we'll get rid of that warning.\n\n[02:10] We need to add some more stuff to these items, but instead of doing it all inline, I'm going to pull this out to a component called item and it's going to take the item as a prop and we'll render out that list item. Then we can render the item component here and parse in the item as a prop.\n\n[02:27] We also need to move this key prop up to where we're returning this item because the key belongs on the thing being returned from the map, not on the internal component. Underneath the name here, we're going to render a span with a class of price and that's going to render out the item's price.\n\n[02:47] Let's try this and then we'll add the class of item to our top of item. That looks a little bit nicer and then we'll add our add to cart button with the class of add and it will just say add to cart. Now our items are displayed and we can click the buttons but they don't do anything yet.",
        "casting_words_order": "zeJJ",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page",
        "path": "/lessons/react-build-the-shopper-s-item-page?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-build-the-shopper-s-item-page?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/5cc47",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-build-the-shopper-s-item-page-rkph6iNcS/scikit-learn-build-the-shopper-s-item-page-rkph6iNcS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8355840,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874307,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-item-page/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/09-after-shopper-ItemPage?fontsize=14"
        }
      },
      {
        "id": 5344,
        "creator_id": 9671,
        "slug": "react-add-items-to-the-cart",
        "title": "Add Items to the Cart",
        "state": "bundled",
        "summary": "At this point the app is displaying a list with Add to Cart buttons but they aren't wired up yet. In this lesson we will add state to hold the items in our cart, and implement the code for the Add to Cart buttons.",
        "duration": 225,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Now let's make these add to cart buttons functional. To do that, we're going to need to pass a handler function down into the item page component. That's going to need to make its way down to the button, so that when we click the button, it will call the handler.\n\n[00:12] Let's call that prop on add to cart. We're going to take that prop and pass it through to the item component with the same name. Item will take that prop and pass it along to button as the onClick prop. When we click the button, it will call up to the props and up to the app, but we haven't pass in the prop yet.\n\n[00:35] To be able to handle the click here and add items to a cart, we're going to need some state. We're going to turn this component into a class component. We'll make a class app extends React component and we'll give you a render function, which is going to return this same structure here. Let's move this up into our render function.\n\n[00:59] Now we can write our handler function. We're going to call it handleAdd and it's going to take the item and it's going to add that item to the cart, which is some state we don't have yet. Let's create some state and we'll initialize a cart to an empty array.\n\n[01:15] Now in handleAdd, we can call this.setState and we'll use the updater form where we take the previous and return anew object that'll be merged into the current state. We'll set cart equal to a new array, which is a copy of everything in the previous cart plus this new item at the end.\n\n[01:36] Every time you click add to cart, it's going to add another copy of this item to the cart. Now that we have our handler function, we can pass it in to the item page. We'll pass the on add to cart prop and pass in this.handleAdd.\n\n[01:52] Now if we open up the console and click add to cart a couple times, we're seeing the actual click event here and not the item, so we've missed something. Let's go back to item page and see that on add to cart is being passed down to here and passed from item into the button.\n\n[02:10] We don't want the button to call add to cart directly, we need to pass in the item. We're going to wrap this in an arrow function so that onClick will call our function here and then we can call on add to cart with the item because we have the item as a prop.\n\n[02:28] Now we can try this again and now we're seeing the actual items come out in the console. It would be nice to have some visual display when you add items to the cart. Let's go back to our index and we'll open up our nav bar and we'll add an item to this list to display in the right here. We'll add new list item with the class cart count, then we'll have a little shopping cart next to the cart count, which we're going to get as a prop.\n\n[02:54] Let's make sure we're receiving that cart count as a prop. We can also check if the cart count is zero and if it is, we'll display the word empty, otherwise, we'll show to cart count.\n\n[03:07] Right now, we're seeing nothing because cart count is undefined. Let's go back over to index and we're going to pass in the cart count prop and we'll pass this.state.cart.length. Now it says empty and as we add items to the cart, the number goes up.\n\n[03:25] Let's also take care of this accessibility warning we got for the shopping cart by going over to the nav bar. We can try following these instructions by wrapping this in a span tag and then giving it a role of image and we'll give it an area label of items and cart. That takes care of the warning.",
        "casting_words_order": "zeJL",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart",
        "path": "/lessons/react-add-items-to-the-cart?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-add-items-to-the-cart?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/zct3d",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-add-items-to-the-cart-SkYmCoE5r/scikit-learn-add-items-to-the-cart-SkYmCoE5r.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8372224,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874308,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-add-items-to-the-cart/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/10-after-shopper-add-to-cart?fontsize=14"
        }
      },
      {
        "id": 5347,
        "creator_id": 9671,
        "slug": "react-build-the-shopper-s-cart-page",
        "title": "Build the Shopper's Cart Page",
        "state": "bundled",
        "summary": "In this lesson we'll create a CartPage component and wire up our NavBar links to switch between the list of items and the shopping cart.",
        "duration": 175,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Let's add a cart page and make it so that we can click on these links to go between the items page and the cart page. Rather than us a full-on router, I'm just going to create a piece of state called active page. It will initialize it to store. We'll have two pages, one called store and one called cart.\n\n[00:19] Down in our render function, we can look at that piece of state and either render item page or cart page. I'm going to destructure that variable from state. We'll pull out an active page. I'll also pull up the cart from this.state. We can shorten this to just cart.length.\n\n[00:38] Inside our main tag, we can look at active page. If active page is store, then we'll render this item page, otherwise we're going to render a cart page. Now let's import this cart page component. We'll import cart page from CartPage.js.\n\n[01:03] I've already created this file. It's just a simple component that renders out shopping cart. We have no way of getting to this page yet, so let's go over to our index file. We want to make it, so that we can click on this items and have app React to that by changing the active page.\n\n[01:19] Let's create a page change handler. We're going to have handle page change and it's going to take a new page and it's going to call setState and set the active page to that new page. Now we just need to call this whenever we click on one of the nav bar items.\n\n[01:39] We'll pass this page change handler down into nav bar and we'll call it onPageChange and pass in this .handlePageChange. Now we can go into nav bar and we can take our on page change handler and then we're going to wrap this elements in link tags. We'll have one around store and one around the cart down.\n\n[02:08] To make them valid links, we're going to need to give them an href tag. We'll give this an href of /cart and this one, href of /. Then we're going to override the default click behavior by passing an onClick handler.\n\n[02:22] The click handler needs to take the event and do two things. The first is to call prevent default on event and this will make the link not actually take us anywhere. Then we can call onPageChange and pass in the page that we want to go to, which is store.\n\n[02:39] We'll do a similar kind of thing for the other link. Instead of going to store, we're going to go to cart. Now we can click on store and while it leaves us here, if we click on empty, it'll bring us to the cart.",
        "casting_words_order": "zeIw",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page",
        "path": "/lessons/react-build-the-shopper-s-cart-page?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-build-the-shopper-s-cart-page?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/ex126",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-build-the-shopper-s-cart-page-ryiR0s4qH/scikit-learn-build-the-shopper-s-cart-page-ryiR0s4qH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8380416,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874309,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-the-shopper-s-cart-page/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/11-after-shopper-CartPage?fontsize=14"
        }
      },
      {
        "id": 5349,
        "creator_id": 9671,
        "slug": "react-display-cart-items-and-a-total",
        "title": "Display Cart Items and a Total",
        "state": "bundled",
        "summary": "The CartPage component exists but doesn't display any items yet! In this lesson we'll finish writing that component and display a total price for the cart. We'll also refactor our Item component to make it reusable between the two pages.",
        "duration": 497,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We can add items to our cart. The cart doesn't really show anything yet. Let's change that here. We're going to take the items as a prop. We'll render out a div with the class of cart page. Inside here, we'll do something similar to what we did on item page where we have a list, and we map over the items. We'll have items.map.\n\n[00:21] For each item, we'll render out an item component. We'll give it a key of item.ID. We'll pass the item so we can display it. Then we just need to import the item.\n\n[00:37] This component doesn't exist yet as its own file. Let's go over to our item page. Where we have item here, we're going to extract this into a separate file. We'll cut this, create a new file called item.js, and paste that component here. We'll also need to export the item as the default, and we'll need to import React because we're using JSX.\n\n[01:00] Now that we've got this item file, we can go over to item page. In order to be able to use it here, we're going to need to import item from that new file. That still works. Now we can save our cart page, and we can add a couple of things to the cart and go click on the cart.\n\n[01:18] We're getting \"can't read property map of undefined\" because we're expecting the items as a prop, but we're not passing it into cart page. Let's go back over to our app. Where we were rendering cart page, we're going to pass the items prop and pass in the current cart, which is an array of items.\n\n[01:37] We can try again, add a couple of things, click on cart. They all show up here. There are a few problems with this. One of them is that we're getting this duplicate key warnings because we actually have duplicate items. Both of these phone items we'll have the same id, and all the laptops will have the same id.\n\n[01:56] They'll have duplicate keys, and that's why we're getting these warnings. Also, this is not a great display for a cart. We'd like to see maybe we have two phones, three laptops. These buttons shouldn't be here. We shouldn't be able to add items in a cart from inside the cart.\n\n[02:11] Since we're using this item component in two places -- the items for sale and the cart -- we want to be able to customize this button area. Let's go to our item component. Instead of always rendering a button, we'll cut this out and we'll accept the children prop, which will render in its place.\n\n[02:32] We can see the button's gone. Now we can go over to our item page and pass in that button. We'll just expand this component, and then paste in the button. It's calling on \"add to cart\" which we already have here and it's passing in the item which we already have here.\n\n[02:51] Now item page is working the same way. Let's go over to cart page, and maybe in place of that button, we can display how many items there are. Before we can do that, we need to combine these items into sort of a rolled-up summary saying, \"We have two phones, three laptops,\" whatever.\n\n[03:10] We're going to use array reduced on these items to turn it into a summary, but before we can do that, I'm going to turn this into a function body with braces and return this component here. That will let us have multiple lines in here so we can create a variable called cart and say, \"Items that reduce.\"\n\n[03:30] The reduce will take a function. We'll call it \"summarizer\" and initial value, which is going to be an empty array. Our final result is going to be in an array so we're going to start off with an empty one.\n\n[03:41] Let's write this summarizer function and we can write it in line here or we can write it up here because it's going to be passed all the arguments that it needs. We'll write our summarizer and it'll be a function that takes two arguments.\n\n[03:54] The first is the running total or the final result. The second is each item in the list. Our items array is an array of objects. Each one has an ID. If each one had an ID of, say, one and then one and then two and two and two, pretend these are objects, we want to create one record in result for each ID.\n\n[04:17] For each item in the list, we're going to look it up in the existing result so we can use the find method and it'll take each item. We'll call it \"I\" and if that result item's ID is the same as this item's ID, that means we found a copy of this item in the list.\n\n[04:36] We'll save that in existing item and then existing item is either going to be the item we found or it'll be null if there wasn't one. If an existing item was not found, we're going to add this one to the list. We'll say result.push.\n\n[04:52] We're going to push on a new object which is a copy of the item, but we're also going to give it account property. We'll start that off as one. The way this will work is the first time we see an item with an ID of one, it's going to push on that item with account of one.\n\n[05:09] The second time we see an item with an ID of one, it's going to find that one. We want to increment the count. If we did find that item, then we're just going to increment it's count property by saying, \"Existingitem.count ++.\" Since this is referring to something in the result array, we've modified that result and we can just return the result at the end of the reducer.\n\n[05:34] Now let's try displaying this. We'll have our cart here and instead of looking over the items, we're going to map over the cart. Let's save this and see what happens. Add two phones, three headphones and a camera and then click on the cart.\n\n[05:50] We can see we've summarized. We have one phone, one headphones, one camera, but we don't have any counts displayed. Let's modify our item here.\n\n[05:59] Now remember we can pass in the children to be displayed next to the price and we'll display item.count in that spot. Now let's add a couple of more things and then go to the cart. We can see we have two phones and four headphones.\n\n[06:15] It would be nice if we had a total that said how much we were going to spend. Underneath our list here, we're going to add a new div with a class of total. We'll say the total is $ something and we'll compute that value by reducing the items.\n\n[06:31] We have our cart and we'll use the array reduce function to turn that array into a single number. This is going to take the total and each item and then inside our reducer, we're going to return that next value which is going to be the existing total plus however much this item is going to cost.\n\n[06:50] It's not just item.price because we have to multiply it by the item count. We multiply these two together, add it to the total, that will become the new total and we'll do that for each item. Let's try that. We'll add a couple of items, click view our cart and we'll our total is object 297.\n\n[07:11] That's a little strange. That's happening because our total is uninitialized. Because we forgot to pass the initial value as the second argument of the reducer, the initial value is actually just going to be the first item in the list and that's an object.\n\n[07:26] When we say, \"Object plus some number,\" then well, we get some junk like this. By initializing it to zero, our first total is going to be zero and then this is going to work OK. Let's add a couple of items, click on our cart and now our total is correct.\n\n[07:42] Then we can make it look a little bit nicer if we go over to our CSS file here and add some styling. We'll add a rule to target this list here with cart page ul.\n\n[07:54] We'll set the margin bottom to 1M. That will leave us little space there and then we can target the total and shift it over to the right with cartpage.total. Then we'll use text align, right. Then we'll give it a small margin right of maybe 10 pixels. That will just line it up with the rest of the numbers.",
        "casting_words_order": "zeIu",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total",
        "path": "/lessons/react-display-cart-items-and-a-total?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-display-cart-items-and-a-total?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/mb1dv",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-display-cart-items-and-a-total-BJ4UJ2V9B/scikit-learn-display-cart-items-and-a-total-BJ4UJ2V9B.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8384512,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874310,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-cart-items-and-a-total/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/12-after-shopper-cart-items-and-total?fontsize=14"
        }
      },
      {
        "id": 5351,
        "creator_id": 9671,
        "slug": "react-build-a-checkout-form",
        "title": "Build a Checkout Form",
        "state": "bundled",
        "summary": "To finish off the Shopper app we will add a Checkout button and a CheckoutPage with a form. You'll learn how to manage multiple form fields with vanilla React, and how to handle the differences between text and checkbox inputs.",
        "duration": 588,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We're going to add a checkout button to the cart page, so that we can go to a checkout screen and fill out a form.\n\n[00:05] Within this page, we need to add a button underneath the total. It's just going to say checkout now. We need this button to be able to navigate to the page. We're going to add an onClick handler and inside of there, we're going to write an error function that calls onPageChange with checkout.\n\n[00:27] Now the onPageChange function is going to come in as a prop, but it's not yet, so let's add that to our props. Then we'll go over to index JS, which is the main app and make sure we're passing down that onPageChange handler into our cart. We can copy the one from nav bar and go down to cart page and paste it in.\n\n[00:49] Now we need to create a checkout page so we'll go and make a checkoutpage.js. This here will create our checkout page component as a class because it's going to need some state to hold our form input. For now, we're just going to render out div checkout just to make sure we get something on the page here.\n\n[01:09] Now we can import this in our main app file, checkout page from the checkout page file we just made. Now we need to decide whether to render that checkout page depending on our active page. If it's store, we're rendering item page otherwise, we need to add some more conditions here.\n\n[01:31] If active page is cart, then we're going to render the cart and if it's not the cart, we're going to render our checkout page. We're going to want to pass the items into that page. We'll pass them in as a prop.\n\n[01:46] Now we'll save this and add a couple of things to the cart, go over to the cart and click checkout now and now we're at this page. Within this checkout page, we want to add a form. We're going to go over to checkout page and initialize some state.\n\n[02:02] We'll have one piece of state for each foreign field. We're going to have first name which will start off empty string and the last name which will also be an empty string. Then a bunch of other values they'll start off empty and we'll have a one checkbox.\n\n[02:18] Inside the render method, we'll modify this to be a div for the class of checkout page. At the top of the page, we'll have a message that says how many items we're buying specifically you are buying, items.countitems. Items is going to come in as a prop.\n\n[02:34] Rather than write this.props.items, we can destructure items from this.props. Under that we'll have a form and then let's write out the first field here. We'll have a div with a class of field group. This will just give us some styling and inside of that, we're going to have a label and it's going to point at the field called first name. The label will say first name.\n\n[03:01] We'll write the corresponding input, which is going to be typed text. The ID needs to match the HTML 4 on the label so we'll give that first name as an ID. We're also going to need to give it a name prop, which is also going to be first name. This name is going to correspond to the name in state and it just so happens that the name and ID matched.\n\n[03:25] We're also going to make this a controlled input, so we're going to give it a value of first name, which we'll pullout of the state. When we type into the input, we'll call an onChange handler called this.handleChange, which we'll create in a second as well.\n\n[03:41] Let's destructure this first name from state up top here. We'll pull out first name and then all the rest of these fields from this.state. Underneath we write that changeHandler function we're calling handleChange underneath to take the event.\n\n[03:59] Because we gave this input a name of first name, we can use that as a key into our state. We can call this.setState and give it an object. We can use that any of our key syntax, which is the brackets and pullout event.target.name so that will be the key and we'll set it to event.target.value.\n\n[04:20] This way we only need to write one change handler for all the inputs we're going to have on the page. Let's save this, add a couple items and get to our cart and checkout. We can see the first name field is working. Let's add a few more fields.\n\n[04:36] Just to save some time, we're going to paste in the rest of the text fields that look a lot like this one and then we can make sure those work. Let's add a drop down for the state control. We'll have another div with a class of field group and same as the others, we'll have a label, it'll be first state and the text will be state.\n\n[05:00] Here we're going to use the SelectControl and its name is going to be state because that is the name in our class state. It's ID also needs to be state to match the label. Let controls work the same as other inputs when they're controlled so we can pass in a value pulling this thing out of our class state. When it's changed, we will call our same change handler, this.handleChange.\n\n[05:32] To add items to the drop down, we're going to add options in here. We'll have an option with the value of empty string that says, \"Pick a state.\" Then we'll have an option for each of the 50 states in the US. Instead of writing them all out here, we can turn them into a component.\n\n[05:49] Let's create a file called states.JS. We'll create a component called states. We'll render all the options inside here. Because options need to be direct children of a select control, we're going to use a fragment, and put all the options inside the fragment. Now we have each of the states, including the default one, which is empty.\n\n[06:12] We'll save that and go over to our checkout page. We can use states right here and get rid of this option. We'll import states at the top of the file from our states JS file. Try adding a couple of items, go over to our checkout page, and now we can pick states.\n\n[06:34] You also might notice we have three items in the cart, and it says, \"You are buying items.\" This is incorrect. That's because they should be items.length instead of items.count. Now we can add a couple items. It says we're buying five.\n\n[06:51] Let's add a checkbox so we can see how checkboxes work. We have this is residential flag. We're going to go to the bottom. We'll add one more div to the class of field group. It's going to have a label. That's going to point out is residential. We'll make it say, \"Is this a residential address?\" Then we'll write our input.\n\n[07:14] It's going to have a type of checkbox this time. Same as the others, the name is going to match the piece of state and the ID is going to match the label. Instead of parsing a prop called value, we're going to parse one called checked.\n\n[07:28] We're going to parse in our true or false flag from state. We can write our on-change prop. It's going to still be this .handle change. We can go and try this out. If we go to our checkout page and try toggling the box, but it doesn't turn off.\n\n[07:46] That's because our handle change function doesn't know how to deal with checkboxes, because the value of a checkbox is stored in .checked instead of .value. We need to do a little bit more work to pull that apart.\n\n[07:59] We'll put a name in a variable called name, that'll be event.target.name. The value is going to depend on the type of the input. We can check event.target.type. If that's equal to checkbox, then the value is going to be event.target.checked. Otherwise, it's going to be event.target.value.\n\n[08:25] When we set state, we can use the name as the key, and the value as the value. Now we can go back to our checkout page, and the checkbox works correctly. Just to do something with these inputs, we could display them underneath the form if we go down here.\n\n[08:45] We'll paste in a section that displays pieces of state. We'll display the shipping address, their email, and whether it was residential or not. We're only going to display this section once the form is completely filled out.\n\n[08:59] We'll create a variable called done at the top of this function. Done will be true when first name, last name, and all the other properties are filled in. Let's save this. We can go and try it out. We'll fill in some details here.\n\n[09:24] Once we fill in the form, the information appears here, and we can toggle whether it's residential or commercial. The most important parts of this component are probably the initial state and this change handler here that knows how to deal with multiple inputs.\n\n[09:39] If we only had text boxes, we wouldn't need to check if the type is checkbox. With not too much code, we can handle all these different inputs with a single function.",
        "casting_words_order": "zeJN",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form",
        "path": "/lessons/react-build-a-checkout-form?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-build-a-checkout-form?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/60fe3",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-build-a-checkout-form-HJlFgh49H/scikit-learn-build-a-checkout-form-HJlFgh49H.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8386560,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874311,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-build-a-checkout-form/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/13-after-shopper-CheckoutPage?fontsize=14"
        }
      },
      {
        "id": 5352,
        "creator_id": 9671,
        "slug": "react-phases-of-the-component-lifecycle",
        "title": "Phases of the Component Lifecycle",
        "state": "bundled",
        "summary": "As a React component appears on the screen, updates, and later disappears, it goes through a \"lifecycle\". We can tap into various parts of it by implementing certain methods in component classes. This lesson goes over the four phases of the lifecycle: mount, render, commit, and unmount.",
        "duration": 75,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] React components go through a lifecycle as they appear on screen and as they change over time. This lifecycle has four phases.\n\n[00:07] The first one is called mount, and this happens once, when the component is first added to the DOM.\n\n[00:13] After this is render. This happens when the component renders for the first time and every time after that. Despite the name, this doesn't change the screen. This is the phase where React will call your render method. It's where we act as asking the component what should be displayed.\n\n[00:30] You're going to return JSX here. React is going to take that output and synchronize it to the DOM. That's the third phase which is called commit. This is React takes whatever you return for render and updates the page to reflect it.\n\n[00:45] These two phases, render and commit, happen over and over again as your component goes through its lifecycle. Every time we change state, we're going to get another render and another commit. Change state, render commit. Change state, render commit.\n\n[01:01] The fourth phase is unmount. This happens when the component is being removed from the DOM. Here, React is giving you an opportunity to clean up from anything that you might have set up earlier, like timers, subscriptions, or things like that.",
        "casting_words_order": "zeJP",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle",
        "path": "/lessons/react-phases-of-the-component-lifecycle?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-phases-of-the-component-lifecycle?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/kwzcd",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-phases-of-the-component-lifecycle-HyzZf24cS/scikit-learn-phases-of-the-component-lifecycle-HyzZf24cS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8387584,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874312,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-phases-of-the-component-lifecycle/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/14-before-lifecycle-phases?fontsize=14"
        }
      },
      {
        "id": 5353,
        "creator_id": 9671,
        "slug": "react-mounting-updating-and-unmounting",
        "title": "Mounting, Updating, and Unmounting",
        "state": "bundled",
        "summary": "The three most common lifecycle methods you'll probably need are `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`. In this lesson we'll look at examples of all three and when they run.",
        "duration": 123,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We're going to add some lifecycle methods to our counter component here. I just want to talk about the three most common ones. Those are componentDidMount, which happens after the component first appears, so after the first commit.\n\n[00:14] Then we have componentDidUpdate, which runs on every subsequent render. It doesn't run on the first one, but if we were to change state, we're going to get a componentDidUpdate.\n\n[00:23] The last one is componentWillUnmount. This gets called right before the unmount happens. It's getting called before instead of after because afterwards, your component doesn't exist anymore. Let's fill these out.\n\n[00:36] After the component mounts, we're going to logout that we DidMount, then print out mounted. This is a good time to fetch data, create event listeners, or interact with DOM nodes through refs. At this point, your component is at rest. Nothing is running. It's just waiting.\n\n[00:52] Then we have componentDidUpdate, which is going to get a few arguments. We're going to get the previous props, previous state, and an optional snapshot, this third argument coming from the getSnapshotBeforeUpdate lifecycle. Inside here, we'll logout that we did update.\n\n[01:09] This is a good time to resync data if some of your data depended on props. Maybe you were loading some data based on an ID. If that ID changed, you want to re-fetch. Here's a way you could do that. Similar to DidMount, the component is at rest at this point. Nothing's changing anymore and the DOM is stable. You can access DOM elements if you need to.\n\n[01:30] The last one is componentWillUnmount. It doesn't get any arguments. This is a time to do any cleanup, timers, subscriptions, or anything else that you set up earlier and need to tear down.\n\n[01:42] Let's save this. The app's going to refresh. We can see that render runs first, and then componentDidMount. As we change the value of the counter, each time we change state, it's going to re-render. We're going to get another render and DidUpdate, and another render and DidUpdate. This cycle will repeat until the component is unmounted.",
        "casting_words_order": "zeIs",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting",
        "path": "/lessons/react-mounting-updating-and-unmounting?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-mounting-updating-and-unmounting?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/wtq53",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-mounting-updating-and-unmounting-Hy8JXn4qH/scikit-learn-mounting-updating-and-unmounting-Hy8JXn4qH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8388096,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874313,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-mounting-updating-and-unmounting/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/15-after-didUpdate-didMount-willUnmount?fontsize=14"
        }
      },
      {
        "id": 5354,
        "creator_id": 9671,
        "slug": "react-optimize-a-react-component-with-shouldcomponentupdate",
        "title": "Optimize a React Component with shouldComponentUpdate",
        "state": "bundled",
        "summary": "Implementing the `shouldComponentUpdate` lifecycle method is one simple way to optimize a React component by preventing it from rendering when it doesn't need to. In this lesson you'll learn how to implement this method, as well as how to extend PureComponent as a shortcut.",
        "duration": 275,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] A React component will primarily render for two reasons. Either its internal state has changed or its parent has told it to re-render. In this app right now, we only have the single counter component, and there's no child-parent relationship.\n\n[00:12] Let's expand this app to keep track of past counts, and we can display a list of them below the counter. For that, we're going to make a new component called \"old value,\" and it's going to render out list.props.value. It will render a list of these and show past counts every time we change the value here.\n\n[00:32] In our counter whenever we change the value, we've got to keep a list of these now. We'll add another piece of state called \"old values,\" and it'll be an entity, right? Every time we increment or decrement, we can put the old value into that array.\n\n[00:45] We can set old values equal to a new array that has a copy of the existing values, plus whatever the current value of count is. Before we change it, we'll save the old one in this array. We'll do the same thing in decrement.\n\n[01:02] Now we have this array. Let's render out a list of these values below the counter. Inside render, I'll leave the counter itself alone and wrap it in a div. Inside here, we can render out a list, and it will map over our old values. For each value and its index, we'll render out a list item. We have to give this a key so we can pass in the index.\n\n[01:28] Here is where we'll render out the old value component and pass in this number. Let's save this. Now every time we change the number, something gets added to the list. Now we have some structure where we can try out the should component update method. Inside this old value render method, we're going to log out that old value rendered.\n\n[01:51] Let's try the app now. Every time we click the button, we're going to see old value rendered, old value rendered twice, old value rendered three times. Every time we add a new item to the list, it's re-rendering the previous ones plus this new item.\n\n[02:06] While this isn't actually a performance problem, because this is very fast to render, we can implement the should component update lifecycle method and optimize this old value component to only re-render when its props have changed. When we add an item to the list, zero, one and two here are still getting the same values as last time. You don't really need your re-render.\n\n[02:26] To see this bit more visually, we can open up the React div tools in the components explorer. If we go to the gear here, we can turn on highlight updates when components render. Now every time things render, we'll see this flash of boxes. You can see that the first few items in the list are getting that flash because they are re-rendering.\n\n[02:47] Let's implement shouldComponentUpdate. It's going to get the nextProps and the nextState as arguments. We only care about nextProps here. Inside this function, we're going to compare if nextProps.value is the same as this.props.value.\n\n[03:06] Meaning, if the incoming value is the same as the current one, then in that case, we're going to return false. We don't need to re-render if the value hasn't changed. Otherwise, we'll return true. Let's save this and we'll try it out.\n\n[03:19] We'll add some values and you can see how the box is highlighting the whole counter component because the whole counter is re-rendering, but this old values aren't re-rendering anymore. If we look in the console and clear this out.\n\n[03:35] When I click the button, this time you can see old value as being re-rendered once. That's the new one that has been added to the list, but it's not re-rendering the old once. I mentioned that this is not a performance problem and so shouldComponentUpdate should usually be used sparingly and only when you know this actually down with rendering.\n\n[03:54] If you do decide to optimize a component to only render when its props change, there's an even easier way to do that. Rather than writing shouldComponentUpdate manually, you can change your component to extend React.PureComponent.\n\n[04:07] PureComponent basically has a built in shouldComponentUpdate function that will check all the previous props with the incoming ones and only re-render when those props change. With that one change, we can try updating our state. We see it works the same way. We only get the old value rendered for the new item and not for the old ones.\n\n[04:26] If you're using function components instead of class components, you can wrap those functions in a React.memo and this will have the same effect as PureComponent.",
        "casting_words_order": "zeIq",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate",
        "path": "/lessons/react-optimize-a-react-component-with-shouldcomponentupdate?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-optimize-a-react-component-with-shouldcomponentupdate?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/n42g9",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-optimize-a-react-component-with-shouldcomponentupdate-ryjVNhN9S/scikit-learn-optimize-a-react-component-with-shouldcomponentupdate-ryjVNhN9S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8388352,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874314,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-optimize-a-react-component-with-shouldcomponentupdate/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/16-after-shouldComponentUpdate?fontsize=14"
        }
      },
      {
        "id": 5355,
        "creator_id": 9671,
        "slug": "react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate",
        "title": "Automatically Scroll a Chat Box with getSnapshotBeforeUpdate",
        "state": "bundled",
        "summary": "Sometimes you need to take a measurement of some part of the DOM before the component updates, and apply a change after the update is done. In this lesson we'll implement the `getSnapshotBeforeUpdate` lifecycle method to automatically scroll a chat window as new messages are added.",
        "duration": 180,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We have this chat component here with an array of messages. We're rendering them out inside this box here. As we add messages to the list, they show up. As the messages pile up, the scroll bar appears but it's stuck at the top. We'd like to scroll to the bottom every time we add a new message.\n\n[00:17] To do that, we need to manually set the scroll position of this div, which means we need a ref to this div. First, we need to create a ref. To do that, we're going to create a constructor. It's going to take props and call super props. Then we'll create a variable called this.chatRef, and call React.createRef. That'll create an empty ref object. We can take this.chatRef and pass it in as the ref prop to this div.\n\n[00:47] Now that we have a way to refer to the div, we need to figure out when to make that change. We could write the component did update method. It will take previous props, previous state, and the snapshot argument.\n\n[01:00] Here, we could try to check the length of list and change scroll position like comparing the previous state to the new state, but it's a bit too late here, because the component has already been updated.\n\n[01:10] We need to check the length of the list before component date update. For that, there's lifecycle called getSnapshotBeforeUpdate. It takes the previous props and previous state. React is going to call this function right before it updates the DOM, and then right after it updates the DOM, it's going to call component date update.\n\n[01:27] In here, we can check if we've added a message. If this.state.messages.length, which is the current array of messages, is greater than the previous state messages length, which means we've added a message, in here we want to capture the current scroll position.\n\n[01:44] Let's create a variable called chat that's going to be this.chatref.current, just to save us a little bit of typing. Then we can compute chat.scrollheight minus chat.scrolltop. It will return this value. Scroll height is going to be the height of the element in pixels. It's full height, not just the amount we can see in this box.\n\n[02:07] The scrolltop is the position of the scrollbar in pixels from the top. At the top, it's zero. At the bottom, it's going to be scrollheight. Whatever we return from this function is going to come out as the snapshot argument in component date updated.\n\n[02:20] This lets us remember some piece of DOM state before we get into date update. Under this if, we'll return null in case messages hasn't changed.\n\n[02:30] Now we can go to componentDidUpdate and if the snapshot is not null, then we'll again save that ref off into a variable. Now we can set the scroll position by setting scroll top to the current scroll light minus that snapshot value. Let's save this, we can try it out.\n\n[02:49] Add some as use to the list and as it gets bigger, the scroll bar stays to the bottom now. If we scroll up a little bit, it remembers that scroll position.",
        "casting_words_order": "zeIo",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate",
        "path": "/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/99j85",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate-SyrQSn4cB/scikit-learn-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate-SyrQSn4cB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8388480,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874315,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-automatically-scroll-a-chat-box-with-getsnapshotbeforeupdate/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/17-after-getSnapshotBeforeUpdate?fontsize=14"
        }
      },
      {
        "id": 5356,
        "creator_id": 9671,
        "slug": "react-update-state-based-on-props-with-getderivedstatefromprops",
        "title": "Update State Based On Props with getDerivedStateFromProps",
        "state": "bundled",
        "summary": "It's not often that you should need to update state to reflect a change in props (usually, it's better to use the props directly), but sometimes there's no way around it. In this lesson we'll implement the static `getDerivedStateFromProps` lifecycle method to keep track of a prop's value as it changes.",
        "duration": 153,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We have this dice component here, where we can click the roll dice button. Each time we click it, we're going to get two random dice rolls between one and six. We're storing that value in state as an array of two numbers and rendering it out here.\n\n[00:14] We're going to add another component called history. We'll make a class component called history. That'll extend React.component. It's going to have some state with one item called history. That's going to be an array of items.\n\n[00:29] In the render method, we're going to render out a UL, where we map over the items in history. For each item, we'll render out an LI with a key of item.ID and inside variable, put item.value. Each item in this array will have an ID and a value, and we're going to fill up this array based on props.\n\n[00:52] What we'll do is render out the history component right here under the button, and pass a value prop where the value is the array of dice. History is going to keep a record of all of its value props over time and stick them in this history array.\n\n[01:04] In order to compute state based on props, we're going to implement a lifecycle method called getDerivedStateFromProps. This method is actually static, and it receives as arguments props and state. Don't forget to mark it static. Otherwise, it won't get called at all.\n\n[01:21] Since it's static, that means we can't access this anywhere inside this function. All we have to go off is props and state. This function is going to get called right before render. What we can do in here is return an object that's going to be the new state, or return null if we don't want to change the state.\n\n[01:39] Every time it renders, we're going to push the current value prop onto this history array. We're going to return a new state object with history equal to a new array.\n\n[01:49] It has a copy of everything in state.history, and an object to describe the value. It's going to have an ID -- it'll just be a random number -- and the value itself, which is going to come from props.value. Then we can save this and try it out.\n\n[02:04] You can see when the component first rendered with --, as the numbers, it rendered history with --. Every time we click roll dice, these numbers are going to get added to our array.\n\n[02:16] This getDerivedStateFromProps lifecycle is not commonly used. It's not very common that you actually want to sync props with state. It's usually better to just take the props and render them as is. If you need to change your state based on props, then you can implement the static getDerivedStateFromProps with it.",
        "casting_words_order": "zeJR",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops",
        "path": "/lessons/react-update-state-based-on-props-with-getderivedstatefromprops?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-update-state-based-on-props-with-getderivedstatefromprops?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/v96bk",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-update-state-based-on-props-with-getderivedstatefromprops-r1ae82E5B/scikit-learn-update-state-based-on-props-with-getderivedstatefromprops-r1ae82E5B.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8388544,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874316,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-update-state-based-on-props-with-getderivedstatefromprops/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/18-after-getDerivedStateFromProps?fontsize=14"
        }
      },
      {
        "id": 5357,
        "creator_id": 9671,
        "slug": "react-use-error-boundaries-to-catch-and-recover-from-errors",
        "title": "Use Error Boundaries to Catch and Recover from Errors",
        "state": "bundled",
        "summary": "When an error occurs in the component tree, the usual behavior of React is to unmount the entire tree, leaving the user with a blank screen. You can catch these errors and render some fallback content by implementing an error boundary component. In this lesson we'll create an ErrorCatcher that can intercept errors, and you'll see how to add multiple error boundaries to an app.",
        "duration": 249,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] This component here has a few items in state. It's rendering them out here. We have a function that's going to set the items to undefined which is going to break this when we click the button. We'll see the error here and in the console.\n\n[00:13] When a React app crashes like this, if we're inside create React app, we get this nice little pop up. Once we close the pop up, you can see the app is gone because the entire component tree has been unmounted at this point.\n\n[00:24] React provides a way to catch these errors and display a fallback component. We can do that by implementing an error boundary. We'll create a new class called error catcher. It's going to extend react.component. It's going to have one piece of state called error. It's going to start off null.\n\n[00:44] Inside its render method, we're going to check if this.state. error has been set. If it is, we'll say something went wrong. Otherwise we'll render this.props.children. Now we can wrap the breakable component inside our error catcher down where we're rendering it. We'll render the error catcher around breakable.\n\n[01:07] So far, nothing is going to be different. When we click the button, the app is going to break and the whole component tree unmounts because error catcher isn't really doing anything special here yet.\n\n[01:16] We can make a catch the error by implementing the static get derived state from error lifecycle method. It receives the error that occurred as an argument, and it can return an object to update the state or know to leave the state alone. When we get an error, we want to return an object that's going to update the state with that error. We'll return the error key with that error value.\n\n[01:38] Because this method is called during the render phase, we can't perform any side effects inside this method. If we do need to perform some side effects, we can implement component div catch. It gives the error as well. It also gets info as the second argument, which is going to be the component call stack.\n\n[01:55] Inside of here, we'll log out component div catch along with the error and the info. It will also throw a console login this one, so we can see when it runs. Let's put one in our render method as well. Now we get the error catcher rendering. When the app breaks, you can see we still get the error overlay but if we close it, we see this something went wrong message.\n\n[02:20] It's not rendering the broken components anymore, but it is rendering this fall back. In the console, we can see that it printed out the get derived stage from error, and then render, and then component div catch. We've got that type error here and the info object with the components stack telling us that this error occurred inside breakable, which was inside error catcher.\n\n[02:42] This error catcher component is called an error boundary. It's going to catch any errors that occur underneath it in the tree. If we have multiple error catchers, the errors will stop at the first one.\n\n[02:53] We could try adding another layer of these. Say, we have an error catcher on the outside with breakable, and another error catcher with another breakable. Then we'll close out the error catcher here. Let's pass an ID into these so we can see which one's catching the error. We'll call this one One, and this one Two.\n\n[03:10] Up in the error catcher component, we'll change this message into a template string and render out that number. Now we've got two copies of our breakable component and two copies of our error catcher. If an error occurs in this top one, the error catcher with the ID one should catch it. We see it does. It replaces this entire app tree with that error message.\n\n[03:36] Let's refresh. If we break the second breakable component, we'd expect that error catcher number two is going to catch it. We see that it does. It renders that error message in place of this subtree, but outside of that subtree, we can still see the app is OK. If we break this one, we're back to something went wrong one.\n\n[03:58] You can have as many error boundaries in your app as you want, but most apps only need one. If you need to report errors to an external service, the component div catch life cycle is a good place to send that data off.",
        "casting_words_order": "zeIm",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors",
        "path": "/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors?pl=classic-react-with-class-components",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors?pl=classic-react-with-class-components",
        "http_short_url": "http://app.egghead.af:5000/s/50fwd",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-error-boundaries-to-catch-and-recover-from-errors-Skx3LhEcB/scikit-learn-use-error-boundaries-to-catch-and-recover-from-errors-Skx3LhEcB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
        "series_row_order": 8388576,
        "series": {
          "title": "Classic React with Class Components",
          "description": "Until this point, the components we've built have all been stateless and pretty much static. In this module, you'll learn how to write `class` components in React to handle state, which will allow us to create interactive components.\n\nUp until React 16.8, classes were the only way to add state to components. Today, we have Hooks that allow us to add state to function components without writing a class. So you might wonder, why learn classes at all?\n\nThe reality is that there is a mountain of React code that existed before Hooks, and plenty of companies aren't fond of rewriting code that already works. Having a full understanding of class components will give you an advantage when it comes to finding a React job, and it'll also help when looking for answers on StackOverflow and the like.",
          "duration": 3946,
          "slug": "classic-react-with-class-components",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/classic-react-with-class-components",
          "http_url": "http://app.egghead.af:5000/courses/classic-react-with-class-components",
          "path": "/courses/classic-react-with-class-components",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/thumb/PureRectMod_4_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/full/PureRectMod_4_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/349/landscape/PureRectMod_4_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874317,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-error-boundaries-to-catch-and-recover-from-errors/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/3-ReactClasses/19-after-error-boundaries?fontsize=14"
        }
      }
    ],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/classic-react-with-class-components/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 2,
    "resource_id": "classic-react-with-class-components"
  },
  {
    "type": "playlist",
    "id": 432611,
    "title": "Using React Hooks",
    "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
    "slug": "using-react-hooks",
    "published": true,
    "updated_at": "2021-02-13T13:53:28.451-06:00",
    "created_at": "2019-10-14T16:26:16.698-05:00",
    "duration": 3908,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/square_480/PureRectMod_3_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/square_280/PureRectMod_3_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/square_256/PureRectMod_3_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/square_128/PureRectMod_3_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/square_64/PureRectMod_3_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/square_32/PureRectMod_3_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/thumb/PureRectMod_3_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/full/PureRectMod_3_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/611/landscape/PureRectMod_3_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/using-react-hooks",
    "path": "/playlists/using-react-hooks",
    "http_url": "http://app.egghead.af:5000/playlists/using-react-hooks",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/using-react-hooks/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/using-react-hooks/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component?pl=using-react-hooks",
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432611/users/353304/toggle_save",
    "items": [
      {
        "id": 5292,
        "creator_id": 71775,
        "slug": "react-use-the-usestate-hook-to-add-state-to-a-function-component",
        "title": "Use the useState Hook to Add State to a Function Component",
        "state": "bundled",
        "summary": "Being able to add state to function components (without having to rewrite them as a class) is one of the biggest benefits of Hooks. In this lesson you'll learn about the `useState` hook and how it can be used to create state associated with a function component.",
        "duration": 93,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We're going to build this really easy-to-use step counter here. Whenever you take a step, just click the button and it'll record how many steps you've walked.\n\n[0:07] To make this interactive, we could refactor this to a class component and add a step that way. Instead, we're going to use the useState hook. Import useState from React. At the top of the component, we're going to call useState. As an argument to that function, we're going to pass in the initial state which is going to start off at .\n\n[0:25] We want it to start off at  steps, and we click the button to go up. UseState is going to return an array with two elements. We can destructure that array into two variables, called steps and set steps. It will render the steps down in the component.\n\n[0:41] Just to see that this is working, let's change this to some other number. We'll see the app refreshes with 100. What's happening here is that when the React renders the component the first time, it's going to initialize this variable steps to be 100, and we're rendering that here. It's also giving us a function so that we can change the steps and re-render the component.\n\n[1:02] Let's wire up the onClick handler for this button. We'll past it a function. When this button is clicked, we'll call a step steps and pass in the new value, which is going to be steps+1.\n\n[1:14] Let's save. Then we can click the button and account the increments. Every time we set the steps, React is going to re-render this component. This called to useState it's going to return the latest value of state, even though we're passing in 100 here, because this only affects the first render. Every time after that, we're going to get the current value out.",
        "casting_words_order": "zeEg",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component",
        "path": "/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/qv9hj",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-the-usestate-hook-to-add-state-to-a-function-component-rkhahwAtS/scikit-learn-use-the-usestate-hook-to-add-state-to-a-function-component-rkhahwAtS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 0,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876402,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-usestate-hook-to-add-state-to-a-function-component/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/01-after-step-counter?fontsize=14"
        }
      },
      {
        "id": 5294,
        "creator_id": 71775,
        "slug": "react-the-magic-behind-how-hooks-work",
        "title": "The \"Magic\" Behind How Hooks Work",
        "state": "bundled",
        "summary": "The way that `useState` is able to retain state between function calls might seem oddly \"magical\" at first. Is there some compiler trickery going on? Or has React somehow prevented variables from clearing when a function ends? In this lesson you'll learn the behind-the-scenes technique that makes Hooks possible.",
        "duration": 165,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Let's take a look at how hooks actually work under the hood. Here's a component that has one piece of state called people. When you click the button, you call setPeople, so it increments the number.\n\n[0:11] What's actually going on is that before React calls this component, it creates an array that lives alongside this component instance. It's an array of hooks. React keeps an index into this array. It starts off at .\n\n[0:24] Every time you call a hook, like this call to use state here, it's going to occupy the first slot with whatever value you pass in as the default, so that first slot has 300 and the index moves down to the next slot getting ready for the next hook.\n\n[0:38] Except, in this case, there is no next hook. Let's say we click the button which calls setPeople to people+1. That's going to increment the 300 to 301. The index is going to reset to  and the React is going to re-render that component.\n\n[0:50] This time through, that first use state call is going to be matched up with the first slot in the array, which has a value of 301. Instead of initializing it to 300, it's going to pull out that 301 and put it in the variable people. After that first call, the index moves down.\n\n[1:06] Let's look at another example that has three pieces of state. We've got a username, password, and a \"remember me\" checkbox. As we type into the username and password fields, and click the checkbox, you can see the state is updating.\n\n[1:21] Let's look at how this one would work. We have our array of hooks and the index is initialized to . Then React renders the component for the first time.\n\n[1:29] That first use state takes up the first slot with an empty string. Then the index moves down. The second use state takes up the second slot with an empty string, and the index moves down. The third use state takes the third slot with false and the index shrinks again.\n\n[1:44] Let's say we type a D into the username box. That first slot is replaced with a D instead of empty string and then the component's going to re-render again. The index is going to reset. The first call to use state is going to pull out that D, the second call is going to pull out the empty string, and the third call's going to pull out false.\n\n[2:02] This is how hooks are able to retain state between renders, which leads to a few rules of hooks. First, the call order has to be stable. It means that you can't put hooks inside loops, conditionals, nested functions, you can't call ifs before hooks, or anything like that. Basically, you should put hook calls at the top of your function.\n\n[2:20] The second rule is you can only call hooks from function components or custom hooks. You can't call it from classes.\n\n[2:27] The third is that custom hook names should start with the words use. This is because there's an ESLint rule that comes with create-react-app that's checking if you're following the rules. It can only do that if it knows what a hook looks like. It's looking inside function components and inside functions that start with use to make sure you're not violating the first two rules.",
        "casting_words_order": "zeEe",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work",
        "path": "/lessons/react-the-magic-behind-how-hooks-work?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-the-magic-behind-how-hooks-work?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/n847r",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-the-magic-behind-how-hooks-work-rJ0WTD0Yr/scikit-learn-the-magic-behind-how-hooks-work-rJ0WTD0Yr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 4194304,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876403,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-the-magic-behind-how-hooks-work/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5296,
        "creator_id": 71775,
        "slug": "react-call-usestate-multiple-times-in-one-component",
        "title": "Call useState Multiple Times in One Component",
        "state": "bundled",
        "summary": "When your component needs more than one piece of state, you can simply call `useState` more than once. In this lesson you'll see how to store multiple pieces of state with multiple calls to `useState`.",
        "duration": 92,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We're going to keep track of two pieces of state in this App using the useState hook. Let's import useState from React. For the first piece of state, we're going to keep track of how much water is in the coffee maker.\n\n[0:11] We'll need a setter function, setOuncesWater and we'll fill in these values by calling useState and pass in our initial value which will be 8 ounces.\n\n[0:20] Then, our second piece of state is going to keep track of how many grams of coffee we have. I have a setGramsCoffee as our setter function and we'll fill this in with useState and pass in an initial value of 13.\n\n[0:33] We have two pieces of state that are independent of each other. I have named the setter functions this way to show that you don't have to call them coffee and setCoffee or water and setWater. You can choose whatever names you like, but it is common to start these function names with the word set.\n\n[0:47] Underneath our water heading, I'm going to add a button and we'll render out how much water we have in ounces. Then, I'll do the same for coffee and change it to grams.\n\n[1:00] We want to make it so when we click the buttons, it increments the numbers. We'll add an onClick handler to the button and inside here, we'll pass it to function that calls setOuncesWater and pass in water+1 and then similarly, for coffee, we'll write an onClick handler and pass the function that calls setGramsCoffee and pass in coffee+1.\n\n[1:27] Now we may click the buttons. The numbers go up, and this component has two pieces of state that are independent of each other.",
        "casting_words_order": "zeEa",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component",
        "path": "/lessons/react-call-usestate-multiple-times-in-one-component?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-call-usestate-multiple-times-in-one-component?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/hsvv0",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-call-usestate-multiple-times-in-one-component-S1xO6P0Kr/scikit-learn-call-usestate-multiple-times-in-one-component-S1xO6P0Kr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 6291456,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876404,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-call-usestate-multiple-times-in-one-component/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/03-after-multiple-usestate?fontsize=14"
        }
      },
      {
        "id": 5298,
        "creator_id": 71775,
        "slug": "react-store-an-object-in-usestate-and-update-it-immutably",
        "title": "Store an Object in useState and Update It Immutably",
        "state": "bundled",
        "summary": "The `useState` hook can be used to store any single value, but that single value can be an object! In this lesson you'll learn how to keep an object in state and, more importantly, how and why to update it in an immutable way.",
        "duration": 232,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] Our component has two pieces of state and each one is an individual number. This is because useState can only hold a single value, but that value can be any type. Let's refactor this to use in object instead.\n\n[0:12] We're going to change our variable names here to brew and set brew. Instead of passing in just a number, we're going to pass an object. This object will have two keys, we'll have water which shall be 8 for 8 ounces and coffee which shall be 13 for 13 grams.\n\n[0:30] Now we can get rid of the water state because two pieces of state are held in one object now. Then we'll have to update how we're using the water and coffee variables down here, so we'll change water to brew.water and coffee to brew.coffee.\n\n[0:47] Now if I say we're going to get some errors about these variables not being defined because we've changed them. Let's refactor this to color setBrew function. Since these functions are going to get a little bit longer, I'm going to move them outside of the click handler.\n\n[1:00] We'll write our setWater function. It's going to increment the water value. We'll write another one called setCoffee, which is going to increment the coffee value. We'll change the click handlers to call setWater and setCoffee.\n\n[1:17] Our setter functions here, I'm going to change these two functions with braces. We can call setBrew. We're going to pass in a new object here, where we'll set the water to water plus one. We'll set the coffee to whatever the current value is, which will be brew.coffee.\n\n[1:36] For the setCoffee function, I'm going to call setBrew again, but I'm going to call it a different way. Instead of passing a new object, we're going to pass a function. This function will get the old value or the existing value of the brew. It'll return an object. Inside here, we can return our new object.\n\n[1:55] What this lets us do is just make sure that we don't get any stale values in state. We can set the water to brew.water. We can set coffee to brew.coffee plus one. Brew here refers to the argument we're getting in this function, not the one up here, so that we're guaranteed we get the latest values.\n\n[2:18] In this case, because we're creating these functions on every render, we're always going to have our latest values here, but in some cases, if you have nested functions with closures, these values can get stale. In those cases, the updater form with this function is the way to go.\n\n[2:35] Let's try this now. I've got a typo in water. We'll change it to brew.water. Now we can click the buttons, and they work the same as they used to. One thing to watch out for when you're setting a complex value in useState, like an object to an array, is to make sure not to mutate an object, and make sure to always create a new one.\n\n[2:55] We'll show you want not to do. If we comment this out, and then instead of creating a new object like this, we say brew.water plus equals one, and set brew to that new value there. You might think this would work, but when we click the button, we're going to see the number does not change.\n\n[3:14] This is because if we called one of this setter functions with the same value, and this is going to be the same object here, React is going to optimize by not re-rendering because it doesn't think the object has changed.\n\n[3:25] Since we have changed the water a couple of times, if we go and update the copy once, we're going to see water suddenly jumps to whatever that new value should be, because changing coffee, which is calling the setter function is written correctly, it's going to trigger a re-render and we're going to get this new value of water.\n\n[3:42] Just be aware when you're calling a setting functions for useState that you're passing in new objects and you're doing immutable updates instead of mutating the value and passing it in this way.",
        "casting_words_order": "zeEB",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably",
        "path": "/lessons/react-store-an-object-in-usestate-and-update-it-immutably?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-store-an-object-in-usestate-and-update-it-immutably?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/vyer6",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-store-an-object-in-usestate-and-update-it-immutably-BJK2TvRtr/scikit-learn-store-an-object-in-usestate-and-update-it-immutably-BJK2TvRtr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 7340032,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876405,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-store-an-object-in-usestate-and-update-it-immutably/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/04-after-usestate-complex-values?fontsize=14"
        }
      },
      {
        "id": 5299,
        "creator_id": 71775,
        "slug": "react-extract-related-hooks-code-into-a-custom-hook",
        "title": "Extract Related Hooks Code into a Custom Hook",
        "state": "bundled",
        "summary": "Because hooks are just regular function calls, they can be extracted into functions called \"custom hooks\" and re-used across your app. In this lesson we'll see how to extract some state and a couple related updater functions into a custom hook.",
        "duration": 167,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] This component has a single call to useState and we're storing state in this one object with two properties. Then we have two functions, addWater and addCoffee below. They call the setter and update the correct property.\n\n[0:14] This state in these two setter functions belong together. They don't depend on anything else in the component. To clean up the code, we're going to extract this into a custom hook, which is a fancy word for cutting and pasting this into a new function. We're going to make a function called useCoffeemaker and we'll paste in that code right here.\n\n[0:34] Now we can call useCoffeemaker from inside our App component, but we still need access to the water and coffee values and their updater functions. We're going to return those necessary bits from this function.\n\n[0:48] Return an object. Then we can expose the water as brew.water and the coffee from brew.coffee. Then we can also send out the addWater and addCoffee functions. In our App component, we can pull those values out of the object. We'll use destructuring to pull out the water and coffee and the addWater and addCoffee functions.\n\n[1:16] We still have a couple more changes to make because we don't have a brew variable here anymore. We have just water and coffee directly. We can change those references there. Now our App is working again.\n\n[1:27] If we wanted to be able to customize those initial values instead of hard coding them in this function, we could pass in values for water and coffee and just use those right here. The initial values can be provided by the component that uses the coffeemaker. We'll pass in 8 for water and 13 for coffee. This works fine. We can change those values here. The defaults have changed.\n\n[1:55] All that's required to make a custom hook is to create a function that starts with the word \"use.\" Inside this function, we can call any hooks that we need to and return some kind of public API from the function. We can just return whatever we want here. We could have returned an array, but instead of doing that, we have an object with some properties and functions.\n\n[2:16] To be clear on why this works, when React is calling this App component, we're allowed to call hooks anywhere inside that call chain. If you visualize the way the call chain works as React calls App and then maybe App was calling useState, now App is calling useCoffeemaker. useCoffeemaker is calling useState.\n\n[2:39] Really, this call to useState is still underneath the call to App. It's just one level removed, so that state will still be tied to the App component.",
        "casting_words_order": "zeED",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook",
        "path": "/lessons/react-extract-related-hooks-code-into-a-custom-hook?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-extract-related-hooks-code-into-a-custom-hook?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/zwb6p",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-extract-related-hooks-code-into-a-custom-hook-r13VRvCFS/scikit-learn-extract-related-hooks-code-into-a-custom-hook-r13VRvCFS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 7864320,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876406,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-extract-related-hooks-code-into-a-custom-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/05-after-usestate-custom-hook?fontsize=14"
        }
      },
      {
        "id": 5300,
        "creator_id": 71775,
        "slug": "react-access-a-dom-node-directly-with-the-useref-hook",
        "title": "Access a DOM Node Directly with the useRef Hook",
        "state": "bundled",
        "summary": "Sometimes you need to access a DOM node directly. There are a bunch of cases when that might be necessary, whether that's to focus an input, pull a value out of an input, measure the size of an element, draw on a canvas element, or any number of other situations. In those cases, the `useRef` hook will let you create a reference to access a DOM node directly. In this lesson you'll learn how to extract values from inputs using refs.",
        "duration": 181,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] In this app here, we've got two inputs and we can type into the inputs. We could hit login. It's going to refresh the page. We'd like to handle that form submission and pull out the values of these inputs.\n\n[0:10] One way to do that is to use the useref hook and create references to the DOM nodes themselves, and then pull out the values directly. We're going to import the useref hook. At the top of this component, we're going to call useref. That's going to return a reference object.\n\n[0:26] We'll save that into a variable called username ref. We'll make another one for password ref. Right now, each of these ref objects is a blank canvas. They can refer to any DOM element.\n\n[0:40] The way we're going to tie to the input is to pass a prop called ref, and then we pass in that object. Username ref into the username input. We could do the same thing for password ref passing password ref as the ref prop.\n\n[0:56] We'll save this now. The app doesn't work any differently. We just have refs to these inputs now which means that whenever we want to, like at form submission, we can pull the values out.\n\n[1:06] We're going to add an onSubmit handler to the form. It's going to call the function called \"handleSubmit.\" We'll write that function right here, so we'll write a handleSubmit function. It's going to take the event which it's going to receive at submission time.\n\n[1:23] Then inside here, we're going to change this to a regular function body. The first thing we'll do is call it event.preventDefault, which is going to prevent that page refresh from happening. Let's see that in action. We try this out, log in. Now the page doesn't refresh.\n\n[1:39] At this point we can read these refs and pull the values out of the inputs. We can log out the username ref.current.value and password ref.current.value. Save that, and I'll open up the console.\n\n[1:56] Now, if I type in a username and the password and hit log in, we can see it prints it out. You just need to make sure that you're accessing the ref.current instead of just the ref. It's not username ref.value, it's username ref.current.value.\n\n[2:10] If we log out the refs right after we create them, let's just log out username.ref, we're going to see when the component renders it's an object where current is undefined. Then immediately after rendering, current is going to refer to the input. By the time we hit log in, username ref.current is actually the input.\n\n[2:30] We can log out username ref at submission time. Now, if I type something in the username box and hit login, we're going to see a Princeton name, but it also prints out this current object. The value of current is actually the DOM node input. Hover over it and you can see Chrome is highlighting it here.\n\n[2:51] To recap, we created an empty ref at the top of the component. Then any time after the component is mounted, we can refer to that ref.current to get at that DOM node.",
        "casting_words_order": "zeEF",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook",
        "path": "/lessons/react-access-a-dom-node-directly-with-the-useref-hook?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-access-a-dom-node-directly-with-the-useref-hook?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/fp5pn",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-access-a-dom-node-directly-with-the-useref-hook-BkrTAvRKB/scikit-learn-access-a-dom-node-directly-with-the-useref-hook-BkrTAvRKB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8126464,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876407,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-access-a-dom-node-directly-with-the-useref-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/06-after-useref-dom-node?fontsize=14"
        }
      },
      {
        "id": 5301,
        "creator_id": 71775,
        "slug": "react-manage-simple-state-with-the-usereducer-hook",
        "title": "Manage Simple State with the useReducer Hook",
        "state": "bundled",
        "summary": "The `useState` hook is perfect for simple values, but sometimes you want more control over how state is updated. In those cases, the `useReducer` hook is a good option. In this lesson we'll look at a simple example of `useReducer` in action to give you a feel for how the \"reducer\" function works.",
        "duration": 236,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We've got this room component here with two buttons that don't do anything yet. We're going to add some state to this component to track whether the light is on or off. To do that, we'll import the useReducer hook. At the top of the component, we'll call useReducer.\n\n[0:15] It takes two arguments. The first is the reducer function itself, we can call that whatever we want. The second is the initialState. This state can be whatever type you want, and in this case, we're going to use a Boolean value, true for light is on and false for light is off.\n\n[0:30] We've got our reducer and our initialState and this returns an array of two values which will destructure into the variable called light which is going to be true or false and a Dispatch function that we'll call to change the state.\n\n[0:44] Right now, this div has a class of room and lit and that means the light is on. What we'd like to do is have the class lit when light is true and unlit when light is false.\n\n[0:56] We'll turn this into a template string and surround the backticks with braces and we can substitute the word lit with an expression. We can check if the light is true, we're going to use the string \"lit.\" Otherwise, we'll use \"unlit.\"\n\n[1:11] Now we need to add some click handlers to the buttons so when we click them, the state will change. We'll add the onClick prop to each button and it's going to take a function. When we click the button, we're going to call dispatch and this dispatch function is going to call through to our reducer and pass in an action. We can decide what this action's going to be.\n\n[1:31] We could pass an object with a type here or we could pass just a simple string. In this case, we're just going to pass the string \"On.\" When we click On, we're going to dispatch the string \"On.\" Let's copy this and add the same code to the off button and instead, we'll dispatch \"off.\" Now all that's left is to write the reducer function.\n\n[1:53] We'll create the reducer function outside the component. We're putting it outside the component because we don't want to recreate this function every time the component renders. It doesn't depend directly on any pieces of state or props inside these components, that's why it's going to be outside.\n\n[2:10] You could just as easily put it inside, and you should do that if your reducer depends on props or state. Since ours is independent, we can just write it here.\n\n[2:20] We're going to take two arguments in this reducer, the first is the state which is going to be that true or false value. The second is the action, which came in from dispatch. When we call dispatch on, that's going to call the reducer with true and on.\n\n[2:35] Then, whatever we return from this reducer is going to become the new state. If we return true here, then no matter what we dispatch, light is always going to be on. Let's save this and try it out, or we can click On or we can click Off, and we can see the light doesn't change.\n\n[2:51] We can also try returning false from here, and then our initial state is true. If we click On, it turns black, and if we click Off, it also turns black, because we're always returning false. Instead of this, we're going to switch on the action. If the action is the string \"On,\" we're going to return true. If the action is the string \"Off,\" we'll return false.\n\n[3:18] We need a default case. In that case, we're going to return the state as it is. If we dispatch some other string that our reducer doesn't understand, we're just going to leave the state alone. Let's try this.\n\n[3:31] The room starts out lit, and if we click On, it stays lit. If we click Off, it turns off. We can toggle back and forth. For a simple reducer like this, you could also write it with an if. That would be fine.\n\n[3:42] To recap, we call it the useReducer hook. We pass in our reducer function. It takes the state, current state, and an action, and it returns that new state. Once you return the new state, the component's going to re-render with that new state.",
        "casting_words_order": "zeEJ",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook",
        "path": "/lessons/react-manage-simple-state-with-the-usereducer-hook?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-manage-simple-state-with-the-usereducer-hook?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/vkjz3",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-manage-simple-state-with-the-usereducer-hook-SJ5N1_CtB/scikit-learn-manage-simple-state-with-the-usereducer-hook-SJ5N1_CtB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8257536,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876408,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-simple-state-with-the-usereducer-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/07-after-usereducer-simple?fontsize=14"
        }
      },
      {
        "id": 5302,
        "creator_id": 71775,
        "slug": "react-implement-undo-redo-with-the-usereducer-hook",
        "title": "Implement undo/redo with the useReducer Hook",
        "state": "bundled",
        "summary": "A perfect case for `useReducer` is when a state update needs to depend on the existing state. In this lesson, we'll implement undo/redo functionality with `useReducer`.",
        "duration": 632,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We got the beginnings of a shopping list app here and we want to be able to add products to the list and then undo and redo our actions. To do that, we're going to use the useReducer hook to maintain our state. We'll import useReducer and we're also going to need useRef to be able to grab the value of that input and add it to our list.\n\n[0:19] At the top of the component, we're going to make a variable called input and call useRef to create a new ref. Then we'll add the ref prop to the input and change this div into a form. We also give the button a type of submit so that it will trigger the form submit handler. Then we'll give the form an onSubmit prop, it will call a function called addItem.\n\n[0:46] Let's create this function now up here. We'll create a function called addItem. It's going to take an event. We'll start off by calling event.preventDefault. We'll log out the input current value to get the value of that input and make sure everything's working.\n\n[1:04] Let's try this out. We'll open up the console, type in a value, hit enter. It prints it out. That's all working. Now we can work on our reducer and adding this item to a list. At the top of our function, we're going to call useReducer. We're going to pass in our reducer function and an initial state, which is going to be an object.\n\n[1:26] To be able to manage undo and redo, we're going to need to have a few different keys. We'll have a present, which is going to be our list of items. As we add items to the list, they're going to get added to this array. We'll render that array down below.\n\n[1:39] We're also going to have our past so that whenever we add something to the list, we'll put the old state into past. This array is going to be an array of past states. It'll actually be an array of these arrays.\n\n[1:54] Then we'll have another similar kind of array for future. If you click undo a few times, it'll move stuff into future. Then we'll have a couple flags for canUndo, that will start as false, and canRedo, that's also false.\n\n[2:08] This reducer is going to return an array of two values. The first one is going to be the list of items. The second will be the dispatch function that we will call to add new items to the list. We'll also call it for undo and redo.\n\n[2:22] Let's write this reducer now. Since it doesn't depend on anything inside this function, we're going to create the function up top. We'll call it reducer. It's going to take the existing state and an action. It's going to return the new state.\n\n[2:36] We'll save this and make sure the app is still running. It doesn't do anything yet. Now we can start filling out the app a little further. In our add item function, we're going to call dispatch, and we're going to pass an object. Its just going to have a type of add and a value of input.current.value. We're just going to pass along whatever was in the input.\n\n[3:00] After we dispatch that value, we're going to want to clear it out. We'll set input.current.value to empty string. Now let's try this. We'll type in a value, hit add, and it clears it out. Now we can go up to our reducer and handle this add action.\n\n[3:17] What we'll do is switch on action.type. We're going to have the type of add. In that case, we're going to return a new state. Remember, state is an object, so we're going to return an object. The object needs to look like this.\n\n[3:33] We basically need to recompute all of these keys. Some of them are going to be dependent on existing values and state. Before the switch, we're going to pull some values out of here, so the structure, past, present, and future from state.\n\n[3:51] Now let's go over what we want to do when we add an item. We need to add it to our present array. We're going to set present to the new array, that's a copy of the existing values and present, plus a new item with some kind of unique ID.\n\n[4:06] We could just use a random number for the sake of this example. The name on that item is going to be action.value. That's going to be whatever we typed into the input. That takes care of adding the item to our array.\n\n[4:20] We should be able to see the item appear now if we add an item to the list and hit add. It doesn't do anything yet. Let's scroll down to where we're rendering the items and realize we're not actually rendering any items yet. I'll paste in some code here to map over the items and render out list items based on the item name and the ID.\n\n[4:41] Now, we can try adding eggs, milk, and bread. That works. Now we can fill out the rest of our states so that undo and redo will work.\n\n[4:52] When we add an item to our array of present items, we need to save the current present so that we can roll back to it. For that, we've got the array called past that's going to be a copy of everything in the past plus the existing present. If we had three items in the list, that would be this present here. The new present would be four items in the list.\n\n[5:15] We're also going to reset our future array to be empty. This is consistent with undo in most apps, where if you undo a few times and change something, you can no longer redo the changes you undid.\n\n[5:28] Now we just need to set our two flags. There's canUndo. That's going to be true, because we have some stuff in the past, and canRedo is going to be false because our future is empty.\n\n[5:39] We're set up to handle undo and redo now, but the buttons don't do anything yet, because we haven't wired them up. Let's go to the undo and redo buttons. We'll add an onClick prop, and we'll pass the function that calls dispatch, and since our reducer is expecting an object with the type property, we'll pass an object with the type of undo.\n\n[6:01] Then I'll copy this onClick prop and paste it into the redo button, and change the type to redo. Now we can go through our reducer and implement the handlers for these two actions.\n\n[6:13] We're going to add a case for undo and a case for redo. We're also going to need a default. That's just going to return state as it is. Similar to add, we need to return an object again. That object is going to redefine all these keys, except before we do our undo action, we want to check if we can undo, and if not, then just exit here.\n\n[6:42] If not, state.canUndo, then we're going to return state. That will prevent us from trying to undo something when we can't. Otherwise, we're going to return a new present, which is going to be the last one in our past array, which will be past.length-1.\n\n[6:59] Then we'll set past to past without the last item, so we can slice off the last item by using a negative index on the slice function. We will set our future to a new array that has the current present plus everything in the future.\n\n[7:16] Then we can set our flags. canUndo is possible if past.length>1, and canRedo is going to be true because we've just undone something. Let's try this and see if it works.\n\n[7:32] We'll add a couple of items and then click undo. It disappears. We click undo again, and we're here. We click undo again, and it doesn't break. That's great. Let's work on the redo button now.\n\n[7:46] For redo, first we're going to check if we can redo. We'll check if not state.canRedo, then we're going to return state as it is. Otherwise, we're going to return a new one. To figure out our new present and future, we're going to destructure the future array. We'll pull off new present as the first item and the rest of the items as new future, and we'll pull those out of the future array.\n\n[8:14] We're basically picking off the first item saying that's going to be present now, and all the rest of them will be future. Present will be new present and future will be new future. Since we're redoing by copying forward by one, we're going to set the past to whatever was in the past before plus the current present.\n\n[8:37] Now we can recompute our flags. canUndo is definitely going to be true, because we just did a redo, and canRedo will depend on whether there was anything in the new future. If newfuture.length>, we can redo. Now we can save this, and let's try it out again.\n\n[8:58] We'll add a few items to the list and click undo a few times, and then redo a few times. Works great. Since we have these flags, we can try to disable these buttons when they're not actually valid.\n\n[9:10] Inside our component, we can set a disabled flag on the undo button only if we can't undo, so notenabled.canUndo, and then the same kind of thing for our redo button. We'll set this disabled when we can't redo. Now we can see both the buttons are grayed out, and so we add something to the list.\n\n[9:34] Now we can undo once. Now we can't undo but we can redo. We can add a few more items, hit undo. If we add an item, it's going to disable our ability to redo, because we've lost that history. That's working great.\n\n[9:49] To recap, we are calling useReducer and passing in our reducer function. Most of the complexity in this app is in the reducer. The reason we're using a reducer instead of useState is because the state depends on current stuff in state. Every time we're computing a new state, it depends on things that are in the old state.\n\n[10:10] If we were doing this with useState we would have had to have a bunch of different useState calls at the top of the component. Keeping them all in sync with each other would have been harder.\n\n[10:20] UseReducer lets us do that in one place. We get the current state and an action. Depending on that action, we return a new state or maybe prevent the user from making any changes at all.",
        "casting_words_order": "zeEL",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook",
        "path": "/lessons/react-implement-undo-redo-with-the-usereducer-hook?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-implement-undo-redo-with-the-usereducer-hook?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/bw7d4",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-implement-undo-redo-with-the-usereducer-hook-rJY2kO0FS/scikit-learn-implement-undo-redo-with-the-usereducer-hook-rJY2kO0FS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8323072,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876409,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-undo-redo-with-the-usereducer-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/08-after-usereducer-undo?fontsize=14"
        }
      },
      {
        "id": 5303,
        "creator_id": 71775,
        "slug": "react-synchronize-state-with-side-effects-with-the-useeffect-hook",
        "title": "Synchronize State with Side Effects with the useEffect Hook",
        "state": "bundled",
        "summary": "Of all the Hooks, `useEffect` is probably the most complex. Once you understand it, though, it's very powerful. In this lesson we'll look at a small example of \"synchronizing\" a piece of state with a side effect (in this case, updating the document title).",
        "duration": 217,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We have a small app here that has an input and we can type into the input. As we type into it, it's going to update the state. It's keeping the input in sync with this name state.\n\n[0:10] If we wanted to synchronize this input with something else like maybe the title bar, we can use the useEffect hook which we can import from React and then inside our component, we can call the useEffect hook, and useEffect takes a function.\n\n[0:25] What this will do is when the component renders the useEffect call is going to queue up this function. It will execute after the render is done. Inside the useEffect, we can perform side effects like setting document title to our name state. We can also add a console.log that says, \"Set title to name,\" so we can see when it runs.\n\n[0:44] I'll open up the console and then save this file and when the app refreshes, we can see it says, \"Set title empty,\" because the input's empty. That's because useEffect runs after every render, including the first one.\n\n[0:57] Now if we type into the box, we can see that each character press is calling setName, which is going to re-render the component which queues up a new effect. This is letting us keep the name in sync with the title.\n\n[1:08] In this example, you might wonder why we can't just do document title up here and skip this whole effect thing. We can try this. If we type into the box, it does work the same. We change the state, it re-renders the component and it sets the title.\n\n[1:25] The downside with doing it this way is that React expects your component renders to be pure. That is, they shouldn't change anything outside the scope of the component. Here, we're modifying the document title.\n\n[1:35] By putting this inside the useEffect, we can wait to set the title until React is ready. As a general rule, all of your side effects should go inside the useEffect function.\n\n[1:44] You've seen how useEffect will run after every render, but you can also tone it down to only run after certain renders. Let me duplicate this input and look at another example. I want to call this one number and we'll change the rest of these names to number and call setNumber. Then we'll make a piece of state called number. It'll have a setter called setNumber.\n\n[2:10] I'll save this and if we type into the name box, we can see the title is updating, same as it did before. If we type into this second input, you can also see it's still updating that title, even though the title hasn't changed.\n\n[2:22] We can restrict how often this useEffect runs by passing a second argument, which is an array. In this array, we should put values that this effect depends on. That means variables like name because name is used inside the effect. By putting that in this array, we're saying this effect depends on name and it should only rerun when name has changed.\n\n[2:42] If we save again and type into our name field, we can see it's setting the title. Now if we change the number, the effect isn't running because number is not in this array.\n\n[2:53] If we were to put number in this array, now this effect will run when either of these input changes. What you have to watch out for is using variables inside an effect and forgetting to put those variables inside this array.\n\n[3:06] If we were to put number, but not name, we'll get this warning, \"The useEffect is missing a dependency.\" This missing dependency is going to cause a bug. If we type into the name field, we can see the title isn't updating anymore. As soon as we type into the number field, the title is going to update because that change in number is going to trigger the effect.\n\n[3:26] The rule of thumb is every variable you use inside your effect function should go inside this dependency array, or you can leave the array off entirely and then the effect will run on every render.",
        "casting_words_order": "zeEN",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook",
        "path": "/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/qt4n9",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-synchronize-state-with-side-effects-with-the-useeffect-hook-BJkZ-_CKr/scikit-learn-synchronize-state-with-side-effects-with-the-useeffect-hook-BJkZ-_CKr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8355840,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876410,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-synchronize-state-with-side-effects-with-the-useeffect-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/09-after-useeffect-title?fontsize=14"
        }
      },
      {
        "id": 5304,
        "creator_id": 71775,
        "slug": "react-manage-input-focus-with-useeffect",
        "title": "Manage Input Focus with useEffect",
        "state": "bundled",
        "summary": "The `useEffect` hook is a good candidate whenever you need to perform an action after a certain state or prop has changed. In this lesson we'll look at how to focus an input after a failed form submission.",
        "duration": 315,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We have this login form app here. What we want to do is when you type in the wrong username or password, and try to log in, we want it to highlight the field that you got wrong and move the focus back to that field so the user can fix it.\n\n[0:13] We have [inaudible] to these inputs so that we're able to focus them later on. We're also going to need some state to be able to hold the values of the inputs. I am going to import the usestate hook, and then we'll create two pieces of state. One is going to be initialized empty for the username and the other for the password.\n\n[0:30] When we destructure this into username and set username, and password, and set password. We're also going to need some state for the error, so we'll call usestate and pass null, so be the initial value of the error. We're going to de-structure that into error and setError.\n\n[0:54] Now let's wire up these inputs with the value and the change handlers, so we're going to pass the value is going to be the username state. onChange, we're going to take that event and call set username with e.target.value, so we'll keep the username input in sync with the state. Then we'll copy the same thing into the other input for password and change this to password and set password.\n\n[1:23] Now let's fill out our submit handler here. We want to check if the username and password are correct so we can check if username is let's say Dave and the password is pass. We're going to reset the fields, so set username to empty string then we'll set password also to empty string.\n\n[1:44] Let's try this out. If we type in Dave and pass and hit login, it wipes them out. If we type Dave 2 and pass, hit login, it leaves them alone. Here we should be displaying an error. Let's write an else case here.\n\n[1:58] If the username was wrong, then we're going to set that error state and what we'll do is set the error to an object that has both a message like invalid username at a field where shall the username ref.current. This will let us refer to the input later on.\n\n[2:16] Otherwise, we can check if the password is wrong and if it was, then we'll do something really similar to this. We'll set the error to invalid password and set the field to password ref. Now we can try this out and she work the same so far where it clears it out if it's correct. If we get it wrong, then it doesn't display anything.\n\n[2:39] Now that we have this error set, let's display it down below. At the top of the form, I'm going to check if the error has been set. If it is, we're going to render out a div as a class of error. Inside here, we can just put the error message.\n\n[2:56] Let's try that. We get the username wrong, then we get invalid username. We get the username right but the passwords wrong, we get invalid password. All that's left is to focus the correct input after the error shows up. To do that, we can use the use effects hook.\n\n[3:13] Let's import use effects from React. We can write our effect here. We'll call use effect, then pass in our function. We want this effect to run only when the error changes. I'm going to pass the second argument to use effect and pass an error as an item in the array. If the error goes from null to something else or from something else to null, this effect is going to run.\n\n[3:38] We're going to check if the error exists, which means that it has been set. We can use the error.field that we set down here. We can just call focus on that. This saves us from having to figure out which field to focus on inside this effect. We just focus on error.field and these refs. Usernameref.current will point to the username input. Passwordref.current is going to point to this password input.\n\n[4:06] Let's try this out. If we type in Dave2 and the correct password login, we get invalid username and our focus jumped to the username field. If we get the username correct, but we get the password wrong, the focus jumps to the password field.\n\n[4:21] To recap what's happening here, let me click login. It's handled submit function is called because it's passed as the on submit handler to this form. Inside the submit handler, we're calling prevent default so that page doesn't refresh. Then we're checking the value of username and password.\n\n[4:38] If they're correct, we just blank out the values. If they're wrong, we set this error object to point to the field that was wrong, along with the message. Calling said error is going to change that state. That's going to trigger a rerender.\n\n[4:51] When this component rerenders, this effect is going to be run because the error has changed. It went from null to whatever we just changed it to. This code is going to run. The error is an object now so we can focus on the field.\n\n[5:06] You can think of this as we are synchronizing the state of error with the focus of a field, or you can think of it as when error changes, then focus the field.",
        "casting_words_order": "zeER",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect",
        "path": "/lessons/react-manage-input-focus-with-useeffect?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-manage-input-focus-with-useeffect?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/z41rp",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-manage-input-focus-with-useeffect-HJTiWdCtH/scikit-learn-manage-input-focus-with-useeffect-HJTiWdCtH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8372224,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876411,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-input-focus-with-useeffect/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/10-after-useeffect-focus?fontsize=14"
        }
      },
      {
        "id": 5305,
        "creator_id": 71775,
        "slug": "react-return-a-function-from-useeffect-to-clean-up-a-previous-effect",
        "title": "Return a Function From useEffect to Clean Up a Previous Effect",
        "state": "bundled",
        "summary": "The `useEffect` hook allows you to return a function that will execute before the next time the effect runs, effectively letting you \"clean up\" from a prior effect — whether you need to clear a timeout, or unregister an event handler, or some other task that should happen before setting up the effect again. In this lesson we'll see how to set up and clear an interval timer.",
        "duration": 186,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We have this App here called Timer. When you click the Re-Render button, we're going to set this random piece of state to some random number, which will trigger a re-render. That's all this random state is for.\n\n[0:12] When you type into the box, we're going to be setting this time state to whatever you type in here. What we want to do is whenever you change the number in this box, we want to set up a timer, an interval, that'll run at this frequency.\n\n[0:26] If we set this to 1,000, it would run once every second. You can think of that as when the time changes, then set up a timer. Or that we were synchronizing the value in this box with the state of some timer. Either way you look at it, we're going to need the useEffect hook to set that up.\n\n[0:44] We'll call useEffect, pass in our function. We already know that we want this effect to run when the time changes, or to synchronize the time with some other side effect. I'm going to provide the second argument with array and just having that time value in there. When time changes, this effect will run.\n\n[1:04] Inside here, I'll call setInterval, then we'll pass the function to run whenever the timer goes off, that's just going to logout the word tick and the current time. We'll make it so this interval runs every time milliseconds. One more thing I'm going to change our initial time to 1,000 so that we don't get a crazy runaway interval.\n\n[1:28] I'll open up the console and save the App. We can see we're getting a tick every second. If we change the 1,000 to a 2,000, we're going to get tick every two seconds, but we're still getting the ones every second. That's not really what we wanted. The two-second interval should replace the one-second interval. To do that, we need to clean up our previous interval.\n\n[1:54] UseEffect gives us a way to do that by returning a function, and this is going to let us clean up from our effect. It's going to run before the next effect runs. In here, we can call clearInterval and pass in a handler to the timer if we don't have it yet. Let's create a variable called timer and when we call setInterval, we'll put that value into timer.\n\n[2:18] Now we can clear it before the next interval is set. Remember this is only running when time changes and only when we type something new in this box will this effect run, clear the old one and start the new one.\n\n[2:31] Let's save. We can try again. We've got our one-second interval. If we change this to a two-second interval, we should start seeing tick 2,000 and now, we don't see any tick 1,000s anymore.\n\n[2:46] When you have an effect that sets something up for this to be clear away, before the next time it is set up whether that's an event handler or a time interval or something else like that, you can return the function from your effect and this will run before the next effect runs. It will also run before the component unmounts like a book end to the component's life cycle.",
        "casting_words_order": "zeET",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect",
        "path": "/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/gpgx4",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-return-a-function-from-useeffect-to-clean-up-a-previous-effect-B1UtMuRtS/scikit-learn-return-a-function-from-useeffect-to-clean-up-a-previous-effect-B1UtMuRtS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8380416,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876412,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-return-a-function-from-useeffect-to-clean-up-a-previous-effect/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/11-after-useeffect-timeout?fontsize=14"
        }
      },
      {
        "id": 5306,
        "creator_id": 71775,
        "slug": "react-how-to-uselayouteffect-instead-of-useeffect",
        "title": "How to useLayoutEffect instead of useEffect",
        "state": "bundled",
        "summary": "The `useLayoutEffect` hook is very similar to `useEffect`, and it can be confusing to know which one to use. The difference lies in when each one runs, with `useEffect` running asynchronously after a render, and `useLayoutEffect` running synchronously, blocking the render from finishing until the effect is done. In this lesson you'll see the difference first hand, and learn when `useLayoutEffect` is the one to use.",
        "duration": 179,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] React has two different effect hooks. One of them is called useEffect and one of them is useLayoutEffect. To show the difference, I am going to call useEffect here and inside this effect, if the value state is , then we're going to set it to some new random number.\n\n[0:20] We'll call setValue to, I don't know, 10+math.random*200. We'll get something between 10 and 200-ish. We'll run this effect only when the value changes.\n\n[0:36] Right now, there's no way for value to change. I am going to add an onClick handler to this div. That's just when we click the div, we're going to call setValue to .\n\n[0:48] On the initial render, you can see that it rendered once, printed  and then this effect ran, and the value was  so it's set it to a new number. That's this 130...Whatever that we see here. Every time we click, you can see it's picking a new value and you can see in the console it says render  and then render that new value.\n\n[1:08] Each click sets to  and then it re-renders, the value has changed and it is  now so it gets a new value. The reason this effect is not in infinite loop is because we're checking if the value is  before we reset it. If you look closely, you can notice there's a flicker. You can see the value jump to  and then jumps to this new number.\n\n[1:29] Here's the difference between useEffect and useLayoutEffect. If we set this to set useLayoutEffect instead, then you'll see we got our value 43 and every time I click, you can see the value changes.\n\n[1:42] In the console, you can still see it says render  and then render the new value, but that flicker is gone. This is because useEffect and useLayoutEffect ran at different times. useEffect is going to run asynchronously after render is done and after the screen has been painted.\n\n[1:58] If we change this useEffect and we click the div, you can see how it paints once with  and then the effect runs and then we're setting a new value, which triggers another render. We effectively see two renders.\n\n[2:13] With the useLayoutEffect, this effect is going to run synchronously before paint. After this component is rendered, but before it gets painted to the screen, this effect is going to run and React is going to wait until it's completely done before it does the paint.\n\n[2:30] If that effect kicks off anymore state changes, it's going to do another state change and another re-render. That's why when we changed the value with useLayoutEffect, we don't get the flickering.\n\n[2:41] Which one should you use? Most of the time, useEffect is going to be the right choice because most effects aren't going to be doing something with a DOM and you won't get this flickering. If you do see flickering in your app, try useLayoutEffect instead.\n\n[2:54] Just be aware that anything inside these effects will block rendering, so try to keep this code minimal and fast.",
        "casting_words_order": "zeEV",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect",
        "path": "/lessons/react-how-to-uselayouteffect-instead-of-useeffect?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-how-to-uselayouteffect-instead-of-useeffect?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/rhayf",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-how-to-uselayouteffect-instead-of-useeffect-BJCW7_RFB/scikit-learn-how-to-uselayouteffect-instead-of-useeffect-BJCW7_RFB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8384512,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876413,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-how-to-uselayouteffect-instead-of-useeffect/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/12-after-uselayouteffect?fontsize=14"
        }
      },
      {
        "id": 5307,
        "creator_id": 71775,
        "slug": "react-refactor-a-react-class-to-use-hooks",
        "title": "Refactor a React Class to Use Hooks",
        "state": "bundled",
        "summary": "With Hooks providing a simple way to write stateful function components, you might be tempted to rewrite some of your old classes into hooks to simplify them a bit! In this lesson we'll walk through refactoring a simple class component to use Hooks.",
        "duration": 107,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We have this small counter component here where we can increment and decrement the number and it's implemented right now as the class component. It's got some state and there's a couple handlers and the buttons call these handlers when you click them.\n\n[0:13] Let's see what this component would look like if we refactored it to use hooks. Write a function called counter. It's not going to take any props and from this function, we're going to return pretty much the same thing within this render function. We'll take all of this and move it up here.\n\n[0:29] We have a few things here that won't exist in this function anymore. There's no this.state, there's no this.decrement or increment. We're going to need to create some state to hold this count.\n\n[0:39] We'll import the useState hook from React and at the top of the component, we'll call useState and pass in our initial state, which is , which is the same as our initial counter here. This is going to return that array of two items, so it will structure that into a count and set count. Now instead of this.state.count, we can just render out count.\n\n[1:01] Now, for the click handlers, we could write these inline as just arrow functions. This one could call setCount to count-1, but to keep the structure looking the same as the class, we can pull these out into arrow functions up here. We could have a decrement function that just does this. Then we can pass in decrement to onClick.\n\n[1:23] Similarly, we can have an increment function, and it'll add 1 to the count. We can pass in increment into our onClick handler. Now we'll go down and comment out this whole class component. Since we're still rendering out counter down here, everything should work. Save it, and we can try it out.\n\n[1:42] It still works great. Now we've got a function component that's equivalent to the old class.",
        "casting_words_order": "zeEX",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks",
        "path": "/lessons/react-refactor-a-react-class-to-use-hooks?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-refactor-a-react-class-to-use-hooks?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/9azc2",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-refactor-a-react-class-to-use-hooks-ryOt7uCFS/scikit-learn-refactor-a-react-class-to-use-hooks-ryOt7uCFS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8386560,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876414,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-a-react-class-to-use-hooks/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/13-after-refactor-class-to-hooks?fontsize=14"
        }
      },
      {
        "id": 5308,
        "creator_id": 71775,
        "slug": "react-refactor-lifecycles-with-closures-to-use-hooks",
        "title": "Refactor Lifecycles with Closures to Use Hooks",
        "state": "bundled",
        "summary": "One of the common \"gotchas\" when working with Hooks (especially useEffect) is that JavaScript closures can cause stale values. In this lesson we'll refactor a class component that has existing lifecycle methods and learn how to solve some tricky problems with setInterval and closures within multiple `useEffect` hooks.",
        "duration": 679,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] This app here has a countdown component. It's responsible for counting down this timer. We can change the slider to set a time and then it will start counting down.\n\n[0:10] Once it gets down to zero, if we started maybe three, it will stop. If you go over to the countdown component, we can see it's receiving the start time as a prop. As we changed the slider, the value is being passed down into this component. Then, it can start counting down.\n\n[0:30] This class component has a piece of state that says, \"How many seconds are on the timer?\" When the component mounts, resetting up the countdown with the prop that was passed in from this slider here, we set the state to however many seconds the slider says to and if it's more than zero, we start counting down and every second we got to run this interval code.\n\n[0:53] If over zero, we'll just subtract one from the state and one through a zero, you clear the interval. This timer's being set up when the component mounts. It's also being updated when the component updates. As we change the time, we're going to set up a countdown again and only if the start time has changed. Finally, when the component unmounts, we're going to clear that interval.\n\n[1:18] Let's see how we can refactor this to be a function component using hooks. We'll see how to change these lifecycle methods into useEffect calls. Up top, we're going to import useState and useEffect from React. We'll create that new component right here. We're going to call it countdown. As a prop, it's going to get the start time, same as the class.\n\n[1:42] We're going to need some state to hold the number of seconds. We'll call useState and pass in zero as our initial value. We'll destructure the array that it returns into seconds and setSeconds.\n\n[1:55] As far as rendering something, we're going to return the same thing that the class did. We'll just copy this div from down here and paste that into our new component. We can change this.state.seconds to just seconds because we have that variable now.\n\n[2:09] We need to set up this countdown after the component mounts. We can use the useEffect hook to do that. We'll call useEffect and pass in a function. This function's going to run after the component mounts and after the component updates. It's a combination of didMount and didUpdate.\n\n[2:25] Let's try just moving our setup countdown code into this function. We'll paste this into useEffect. Let's see what we need to change. We don't have this anymore. We don't have setState. We have setSeconds. We can pass in a new value, which will be start time. That's coming in from props.\n\n[2:43] If the start time is greater than zero, we're going to set up this interval and save the handle into a timer variable.\n\n[2:50] Here, again, we don't have this. We'll just have to create a variable for this. We'll call it timer and say timer=set interval. We don't have this.state.seconds. Since we're using the updater form, we can keep using that here. We'll call setSeconds. We'll pass an updater function that gets the old value as an argument, and then subtract one from that old value.\n\n[3:13] When we clear the interval, we're just going to clear timer instead of this.timer and then we can try this out and see what happens. Let's comment out the class countdown. Now we'll be using a new function. It starts at 30, and it doesn't count down. It does kind of count down.\n\n[3:28] When we change that value, you can see it sort of flickers and then gets its new value right away. That's because this useEffect is being called on every render. Every time we call setSeconds, it's going to rerender, which is going to run the Effect again. We're getting into an infinite loop here.\n\n[3:46] We need to pass the second argument to useEffect, which is the dependency array. We only want this effect to run when the start time changes. Every time the start time changes, we're going to recompute this stuff. We'll pass start time into this array.\n\n[4:00] Now we're starting at 30. If we drag the timer around, it seems like it's set up a timer for every single drag we made. Now, it's counting down by a lot. That's not right. The problem here is that we need to be able to clean up that timer before every render, because every time the start time changes, like when we drag this slider, it's going to rerun this effect and set up a new interval.\n\n[4:26] What's happening right now is as we drag the slider, say maybe 10 numbers up, it's setting up 10 more intervals, and then they'll kick off and subtract from the value which is not what we want.\n\n[4:39] We can clean up from the previous effects by returning a function. In here, we'll call clear interval, and pass in the timer to clear. This return value is a little bit like component will unmount because it will run before the component unmounts. It also runs before every Effect runs. Before we set up a new timer, it's going to clear the old one.\n\n[4:59] Let's try this out now. We start at 30. Still not counting down. If we drag the value around, that starts the timer. This seems to be working right. Still it's not starting right where the component first renderers. Let's figure out how to fix that.\n\n[5:16] With the previous class implementation, once the component mounted, we set up the countdown with the prop start time. That set the state in terms of the timer. In our function component, we're sort of doing the same thing, but we're initializing seconds to zero.\n\n[5:31] The first time this effect runs, start time's going to be 30. It's going to set the seconds to 30. That start time is greater than zero, so it's going to set up this timer. This interval is a closure. This function here is going to latch the value of seconds.\n\n[5:47] By the time this interval runs one second later, seconds will not be greater than zero, because it latched to the initial value. Let's pass in our start time as our initial value here and try this out. Now we can see the timer starts right away.\n\n[6:05] As you drag the slider, it restarts. If we drag down to some smaller number and let it count down to zero, it doesn't stop. What's going on there? The problem now is that this value of seconds is still latching the one from state.\n\n[6:25] If we put a console log in here, we can say, \"Tick seconds.\" You open up the console. We can see it just keeps saying, \"Tick 30,\" even though this number is different. That explains our problem. Once we get down to a value of, say, three, or four, it just takes four.\n\n[6:48] Even though it goes below zero, even though the actual state is below zero, this value is stale. We need to be able to fix this. The problem is that this value is being latched. We can move it inside our updater function. Instead of making the if outside the updater, we can move the if into the updater.\n\n[7:10] We still need to be able to clear the interval. Let's try that, though. We'll change that seconds into a function body here. It will return this previous minus one. We can move the if inside here, so we have the latest value of the second. We could check if the previous one is greater than zero, then we'll subtract one.\n\n[7:31] Otherwise, we're just going to return that previous value. We'll remove this else. We'll figure that out in a second. Here we go. Now we're still ticking at seconds up here. If we move this tick into inside our setter, we can see that it starts counting down.\n\n[7:57] If we get rid of this console log, then we're going to see that it works. If we move this down to, say, three or four, let this count down. Once it gets to zero, it stops. The timer is still ticking away. Even if it's not updating the value, it's still running. We haven't cleared it out.\n\n[8:19] Previously, we had that if where once we hit zero, we clear the interval, but we don't have that anymore. In this case, we could leave it. The result is the same. The timer has stopped. If we want to be able to clear the interval, once the seconds hits zero, we can't really do it inside this effect. This effect only runs when start time changes.\n\n[8:40] If we add seconds as a dependency, it's going to give us that infinite loop. We're going to set seconds, and then seconds will change, it will set seconds again. Let's try making a second effect. We'll have a useEffect that only runs when the seconds change.\n\n[8:54] In our dependency array, we'll pass seconds. This will run on every tick. If seconds is zero, then we can stop that timer. We don't have that timer variable in scope anymore. To be able to share this timer between the two effects, we can introduce a ref that lives outside the effects and holds their value.\n\n[9:15] Let's import the useRef hook. Before we call these effects at the top, we're going to create that timer by calling use ref. This will create a piece of state that exists between renders, but that we can change without causing a re-render.\n\n[9:29] We'll get rid of the timer variable here. Then when we set the interval, we'll set timer.current to the value. When we clear it, we can clear timer.current. The last place to use the timer is down in the cleanup function here, which will also refer to timer.current.\n\n[9:47] We can see that thing is counting down. If we drag this down to some smaller value, we can see it stops at zero, still. We can put a console log inside here to make sure that this is working. Let's drag down to three or four again. In a little, let's stop at zero. We can see the interval stops.\n\n[10:10] To recap what we've done, we've got the useEffect that runs on Mount and on Update. We've been able to combine the code from componentDidMount and componentDidUpdate into one place.\n\n[10:22] We're also handling the unmount case by clearing off this interval. First, we're clearing the interval before we set up a new one each time. Its effect is only going to run when the start time changes, which is when we drag the slider. At the time we've chosen is greater than zero, we'll set up the interval.\n\n[10:38] We moved the if logic inside the update or function here so that we didn't have to depend on that stale value. That's because we're inside a closure here. Anytime you're using nested functions, it's good to watch out for stale state.\n\n[10:52] Finally, we want to be able to clear that interval once the seconds reaches zero. We couldn't do that within this effect. We created another effect that only runs when the seconds changes. We're using that to clear the interval.\n\n[11:04] To be able to share that value between these two effects, we're using the useRef hook to create a ref, which means we need to update the value with timer.current instead of just timer so that the value can persist between renderers and so that we don't close over this timer variable.",
        "casting_words_order": "zeEZ",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks",
        "path": "/lessons/react-refactor-lifecycles-with-closures-to-use-hooks?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-refactor-lifecycles-with-closures-to-use-hooks?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/rdgxs",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-refactor-lifecycles-with-closures-to-use-hooks-SktkVdAtS/scikit-learn-refactor-lifecycles-with-closures-to-use-hooks-SktkVdAtS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8387584,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876415,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-lifecycles-with-closures-to-use-hooks/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/14-after-refactor-lifecycles-to-hooks?fontsize=14"
        }
      },
      {
        "id": 5309,
        "creator_id": 71775,
        "slug": "react-cache-values-with-the-usememo-hook",
        "title": "Cache Values with the useMemo Hook",
        "state": "bundled",
        "summary": "React provides the `useMemo` hook for caching values between renders. In this lesson you'll learn how to work with `useMemo` to reduce how often an expensive value is computed.",
        "duration": 140,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] This app has a single component called demo with a single piece of state called count. This count is just here so that we can re-render the app by clicking this button here. We can see which components re-rendered because the React DevTools is highlighting updates for us, because that's turned on in the Components tab under the gear, and Highlight Updates is checked here.\n\n[0:23] This component is calling this generateData function, which creates an array of 10,000 items, fills it with 0s, maps over each of those items to turn each of the 0s into random numbers, and then runs it through a filter to find the numbers less than .5.\n\n[0:38] Then we're using performance.now to measure how long this operation takes, and we're printing it out here. It's taking a couple milliseconds.\n\n[0:46] Right now, this function's going to run every time the component renders. If I click re-render, you'll see generated data in the console, and we get a new set of numbers.\n\n[0:56] If we wanted to cache this data between renders, we could use the useMemo hook. We'll import useMemo from React and then we can wrap our call to generateData with the call to useMemo. useMemo takes the function that it's going to call for you to return the data.\n\n[1:13] We could do it like that or since we're just calling this generateData function directly, we could just pass generateData as the function, either way it works, but let's leave it like this. As it is, useMemo is not going to do anything very useful here. It's going to call this on every render. You can see we're getting new numbers still.\n\n[1:35] UseMemo takes the second argument. This is similar to useEffect where we can pass an array of dependencies to tell React when this useMemo should be recomputed. If we pass an empty array here, we're telling React to never regenerate this after the first time.\n\n[1:52] Now, every time we click re-render, we can see the list re-renders, but the numbers stay the same. It seems a little bit faster and we don't see generated data being printed out in the console.\n\n[2:08] The useMemo hook is useful anytime you need to cache some data between renders or anytime referential equality is important. If you always want this data object to be the same between renders, useMemo will help you do that.",
        "casting_words_order": "zeE8",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook",
        "path": "/lessons/react-cache-values-with-the-usememo-hook?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-cache-values-with-the-usememo-hook?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/nve9k",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-cache-values-with-the-usememo-hook-By1KrOCYB/scikit-learn-cache-values-with-the-usememo-hook-By1KrOCYB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8388096,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876416,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-values-with-the-usememo-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/15-after-useMemo?fontsize=14"
        }
      },
      {
        "id": 5310,
        "creator_id": 71775,
        "slug": "react-initialize-usestate-with-a-function",
        "title": "Initialize useState with a Function",
        "state": "bundled",
        "summary": "A lesser-known feature of the `useState` hook is that you can pass a function as its initial value, and React will only call that function once, at initialization time. This is a good technique to use when your state initialization is computationally intensive. In this lesson you'll learn how to initialize state with a function, and how it differs from `useMemo`.",
        "duration": 62,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We have this call to useMemo here, which is taking a function that calls a function. It calls it with no arguments. We could simplify this to just pass the function itself to useMemo. This will work the same way.\n\n[0:14] Another nice trick that React provides is that you can do the same thing with useState. If we wanted to store this data in state, instead of using useMemo, we could call useState and pass this generateData function as our initial value.\n\n[0:30] If we pass a function to useState as the initial value, it's going to call that function, but it'll only do it once. We can save that in data and we'll call the setters setData even though we're not going to be changing it.\n\n[0:43] If we try this, we'll see generateData got called once, but if we re-render, it doesn't regenerate. If you need to initialize useState with a slow operation, like generating some data or filtering a big list, you can pass a function to useState and it'll only do that initialization once.",
        "casting_words_order": "zeE6",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function",
        "path": "/lessons/react-initialize-usestate-with-a-function?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-initialize-usestate-with-a-function?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/bmjve",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-initialize-usestate-with-a-function-HJBUvdAYH/scikit-learn-initialize-usestate-with-a-function-HJBUvdAYH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8388352,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876417,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-initialize-usestate-with-a-function/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/16-after-initialize-useState-with-function?fontsize=14"
        }
      },
      {
        "id": 5311,
        "creator_id": 71775,
        "slug": "react-cache-callback-functions-with-the-usecallback-hook",
        "title": "Cache Callback Functions with the useCallback Hook",
        "state": "bundled",
        "summary": "React provides the `useCallback` hook for caching functions between renders. In this lesson you'll learn how to work with `useCallback` to optimize a component by preserving referential equality between renders.",
        "duration": 225,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] In this demo component here, we have one piece of state called count and a button that when we click it, increments the count.\n\n[0:06] Every time we increment the count, demo is going to rerender and the button is going to rerender. We can see that happening in the console. A common way to optimize React components is to prevent them from rerendering when their props haven't changed.\n\n[0:21] Even though this button component is...they're both as fast as you can get and it really doesn't need to be optimized at all. It's a good example here. We can wrap this in a call to React DOM memo. A React memo is a function that takes a function component and it will return a new component that's only going to render when the props are changed. Let's try this out.\n\n[0:42] We click the button. You can still see that both demo and the button are re-rendering even though we've wrapped the button in React memo. That's because the onClick prop is being passed, this function here. This function is being created on every render.\n\n[0:59] Again, I want to stress that this is not actually a performance problem. I wouldn't go to great lengths to prevent this kind of thing, but in the interest of showing how to prevent this if you need to, we'll go through the exercise of replacing this function with one that isn't going to change every time.\n\n[1:13] One way to do this is to move this function out into its own variable. We'll call it increment and paste that here and then pass increment into the onClick prop and try this. This is going to work the same way because we're still recreating a function on every render.\n\n[1:30] To fix that, we can import the useCallback hook from React. We can wrap this function in a call to useCallback. What useCallback is going to do is return a function that just passes through to calling this one, but as this warning says here, the way we're calling useCallback here isn't going to do anything.\n\n[1:49] When we click the button, you still see that both components are rendering. That's because useCallback takes a second argument which works similar to the one in useEffect. It's going to be an array of dependencies that this callback depends on.\n\n[2:03] To prevent useCallback from recreating this function every time, we'd like to pass an empty array or an array of things that don't change very often here, but we can't really do that here because this function does depend on this variable called count.\n\n[2:16] If we save this now and try it out, we're going to get a warning that we're missing this count dependency. If we click this now, you'll notice the count is stuck at one. That's because this function is frozen in time, with the old count of zero.\n\n[2:31] Every time we click it, it's just adding one to zero over and over again. To fix that bug, we'd have to pass count into here. Now we're back where we started, because every time we click this, the count changes and it recreates the callback and re-renders the button.\n\n[2:46] How we actually fix this is instead of passing a value here, we can pass a function and it's going to receive the old count and return whatever the new value should be. We can say old-count and add one to it.\n\n[2:59] Now our callback here doesn't depend on any variables and scope except setCount, but the setter functions returned from viewState don't change between renders. We can leave that one out and we can remove count from this array.\n\n[3:12] This means the callback is only going to be created once. Now when we click the button, we only see the demo is rendering and button is not rendering, which means that our callback is the same function between renders.\n\n[3:25] You'll want to use useCallback any time you need a function to be referentially equal between renders. It's not a super common need, but if you're trying to optimize renders of expensive components, or you're writing custom hooks that return a set of functions that should behave like the one from viewState being stable between renders, then useCallback is a good tool for that.",
        "casting_words_order": "zeE4",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook",
        "path": "/lessons/react-cache-callback-functions-with-the-usecallback-hook?pl=using-react-hooks",
        "http_url": "http://app.egghead.af:5000/lessons/react-cache-callback-functions-with-the-usecallback-hook?pl=using-react-hooks",
        "http_short_url": "http://app.egghead.af:5000/s/kpre7",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-cache-callback-functions-with-the-usecallback-hook-S1Nsv_RFr/scikit-learn-cache-callback-functions-with-the-usecallback-hook-S1Nsv_RFr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
        "series_row_order": 8388480,
        "series": {
          "title": "Using React Hooks",
          "description": "React version 16.8 added Hooks, a set of functions that allow you to add state and side effects to function components. In this module you'll learn how to use Hooks in your components! Starting with `useState`, we'll cover how to add simple and complex state to your functions. From there we'll look at using `useReducer` to handle more complex state. You'll learn how to write reusable custom hooks, too. And we'll talk about how hooks work behind the scenes to demystify the \"magic\". Finally we'll look at `useEffect` and learn how to \"think in effects\" by converting a few class components to functions with hooks, and learn how to use the `useMemo` and `useCallback` hooks to optimize your components.",
          "duration": 3908,
          "slug": "using-react-hooks",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/using-react-hooks",
          "http_url": "http://app.egghead.af:5000/courses/using-react-hooks",
          "path": "/courses/using-react-hooks",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/thumb/PureRectMod_3_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/full/PureRectMod_3_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/348/landscape/PureRectMod_3_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 876418,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-cache-callback-functions-with-the-usecallback-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/4-Hooks/17-after-useCallback?fontsize=14"
        }
      }
    ],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/using-react-hooks/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 3,
    "resource_id": "using-react-hooks"
  },
  {
    "type": "playlist",
    "id": 432451,
    "title": "API Requests in React",
    "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
    "slug": "api-requests-in-react",
    "published": true,
    "updated_at": "2021-02-13T13:51:07.319-06:00",
    "created_at": "2019-10-14T16:30:59.344-05:00",
    "duration": 3259,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/square_480/PureRectMod_5_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/square_280/PureRectMod_5_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/square_256/PureRectMod_5_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/square_128/PureRectMod_5_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/square_64/PureRectMod_5_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/square_32/PureRectMod_5_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/thumb/PureRectMod_5_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/full/PureRectMod_5_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/451/landscape/PureRectMod_5_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/api-requests-in-react",
    "path": "/playlists/api-requests-in-react",
    "http_url": "http://app.egghead.af:5000/playlists/api-requests-in-react",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/api-requests-in-react/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/api-requests-in-react/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/react-basics-of-rest-and-http?pl=api-requests-in-react",
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432451/users/353304/toggle_save",
    "items": [
      {
        "id": 5324,
        "creator_id": 71775,
        "slug": "react-basics-of-rest-and-http",
        "title": "Basics of REST and HTTP",
        "state": "bundled",
        "summary": "Before we start in on making API requests, it'll be helpful to understand the terminology. In this lesson we'll go over how HTTP requests work, what REST and CRUD are, important HTTP verbs to know (`GET/POST/PUT/PATCH/DELETE`) and how response codes work.",
        "duration": 216,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] HTTP is the protocol of the web. Every time you visit a website or make a fetch request your browser is sending an HTTP request to a server.\n\n[00:10] In the network tab of the DevTools you can click on a request and then inspect the headers and the response data that came back. If we look at the headers for this Reddit request you can see the URL. You can see it was a GET request. You can see the server responded with the status code of 200.\n\n[00:26] If you scroll down you can see the full set of headers that came back with a response and the ones that went up with the request. An actual HTTP request looks like this. There's a method, in this case, GET. There's a path, in this case slash, meaning the root or index path.\n\n[00:43] There's the HTTP version, usually 1.1, and then followed by any headers in a key colon value format. Other common HTTP methods are POST, PUT, PATCH and DELETE, but GET and POST are probably the most common ones you'll see.\n\n[00:57] A post request might look like this where we're posting to the //usersurl@myapp.com and we have to tell the server how long the content is going to be. In this case,15 bytes. Then the headers are followed by an empty new line. If we need to pass any data up with the request, we can put that in the body. Here we've got a JSON Object.\n\n[01:16] As far as apps are concerned, HTTP requests are usually performing CRUD operations. CRUD stands for create, read, update and delete. These four operations make up the bulk of most REST APIs. Each of the operations has a corresponding method that usually goes along with it.\n\n[01:32] For creating resources usually use a post request, for reading things, you use, GET, for replacing or updating resources, you use PUT or PATCH and for deleting them, you use DELETE. Most of these methods do some modification to something on the server except for GET.\n\n[01:49] GET is special in that it's supposed to be idempotent which means it shouldn't change anything. If you find yourself designing an API, avoid using GET when you want to make some change especially a destructive one because browsers can cache them and search engines might stumble upon them too.\n\n[02:05] You don't want something like that to accidentally delete something from your system. Every HTTP response comes with the status code. 200 means this response was OK. There are lots of different codes that the server can use to tell you what happened.\n\n[02:18] Response codes are three-digit numbers between 100 and 599. The 100s are informational and not very common. Sometimes you'll see switching protocols in relation to WebSocket, but for the most part, we don't see 100s very often.\n\n[02:31] 200s are probably the most common and it's what we all hope for. The most common ones are 200 or just generally OK and 201 to indicate a resource was created. 300s are redirects. The most common ones you'll see are 301 and 302 which is the server telling your browser to redirect to another URL.\n\n[02:48] 400s are client errors and these are unfortunately pretty common. There are also a lot of different 400 codes, but 400 bad request, 401 unauthorized and good old 404 not found are probably some of the most common.\n\n[03:02] Some of the less common ones are 418 I'm a teapot and 451 unavailable for legal reasons. Lastly the 500s are server errors. 500 itself is the most generic internal server error, 502 bad gateway is another common one and there's a handful of others.\n\n[03:19] You might notice that 200, 400 and 500 are the most generic of the three codes, where 200 is merely OK, 400 is any sort of bad request and 500 is any sort of internal server error. That makes these three the most common. To figure out what actually happen, you'll have to look at the response body.",
        "casting_words_order": "zeJT",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http",
        "path": "/lessons/react-basics-of-rest-and-http?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-basics-of-rest-and-http?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/gvf70",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-basics-of-rest-and-http-SkYHuQHqH/react-basics-of-rest-and-http-SkYHuQHqH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": -1048575,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874395,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-basics-of-rest-and-http/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5328,
        "creator_id": 71775,
        "slug": "react-finished-product-first-the-pet-store-app-we-ll-be-building",
        "title": "Finished Product First: the Pet Store App We'll Be Building",
        "state": "bundled",
        "summary": "We're going to build a Pet Store app that lets you list pets, add and edit them, and remove (adopt) them. Here we'll have a look at the finished app and how to approach building it.",
        "duration": 42,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We're going to build this pet adoption setter app. We have a list of pets here, just the one right now. We can click on a pet to edit it. We can change their name and hit Save. This is persisted to the server. We can also add a new pet. We can upload a photo, give the cat a name, choose the kind, and hit Save. That's saved to the server as well.\n\n[00:27] Finally, we'll implement the adopt feature where if we click the house after this confirmation, the pet is removed from the list. This app will cover fetching a list of pets from the server, updating a pet, creating a new one, and removing one from the list.",
        "casting_words_order": "zeJX",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building",
        "path": "/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/7yqv1",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-finished-product-first-the-pet-store-app-we-ll-be-building-H1ld6249S/scikit-learn-finished-product-first-the-pet-store-app-we-ll-be-building-H1ld6249S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 2097152,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874396,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-pet-store-app-we-ll-be-building/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5326,
        "creator_id": 71775,
        "slug": "react-set-up-a-rest-server-with-json-server",
        "title": "Set up a REST Server with json-server",
        "state": "bundled",
        "summary": "We're going to build a Pet Store app that lets you list pets, add and edit them, and remove (adopt) them. Here we'll lay the groundwork by setting up a server to store the list of pets and  be able to perform CRUD operations (Create, Read, Update, Delete) on that list.",
        "duration": 101,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Right now, our pet store is showing two pets but none of the functionality really works yet. This data is hard coded. Inside index.js, we're importing the pets from a file. It's just a static array with two objects with name, kind, photo, which is Base64 encoded and some ID.\n\n[00:18] Let's modify this to fetch the pets from a server instead of pulling them in from file. For this app, we have a server.js file already set up. We're using JSON Server and passing in a JSON file that will act as our database. JSON Server is going to read this db.json file and set up a set of routes for us.\n\n[00:38] We'll have a /pets where we can get a list of pets. We can also post to create pets, hash input to update them, and delete to remove them. We also have a bit of error handling code to make sure that we're passing on valid data. Other than that, we're pretty much deferring to JSON Server.\n\n[00:57] Now the server is going to be loading db.json, but we don't have one of those files yet. Let's create db.json in the root of our project. In here, it needs to be an object. All the top-level keys in this object are going to be endpoints in our API.\n\n[01:12] We'll have one called pets. That's going to be an array. We can copy the existing pets that we have from pets.js. We'll take these two objects here and paste them into our database file. Now we can open up our console.\n\n[01:25] In the first tab, we've got our React app dev server running. We're going to make a new tab to start our API server. First, we're going to npm install json-server. Then we can run node server.js to start it up, and we're ready to make requests.",
        "casting_words_order": "zeJZ",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server",
        "path": "/lessons/react-set-up-a-rest-server-with-json-server?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-set-up-a-rest-server-with-json-server?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/w0jet",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-set-up-a-rest-server-with-json-server-S1m633E5H/scikit-learn-set-up-a-rest-server-with-json-server-S1m633E5H.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 6815744,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874397,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-set-up-a-rest-server-with-json-server/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/03-after-server-setup"
          }
        }
      },
      {
        "id": 5331,
        "creator_id": 71775,
        "slug": "react-fetch-a-list-of-data-with-useeffect-and-promises",
        "title": "Fetch a List of Data with useEffect and Promises",
        "state": "bundled",
        "summary": "Starting with a static list of pets in the shop, we'll modify app to fetch the list from a server. In this lesson we'll be using the `useEffect` hook to kick off the data fetch to our `json-server` back end, then use Promises to handle the response.",
        "duration": 125,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] In the console here, I have our React Dev server running and in the second tab, I have our API server running. Let's replace these static pets by fetching data from the server. We're going to import the useEffect hook from React and inside our component, after we've initialized their state, we'll call useEffect and pass a function.\n\n[00:21] Since this function is going to run after our component renders, this is the right place to do our data fetching. We can call fetch, which is a built-in browser API to make API requests, we'll pass in our URL and fetch is going to return a promise.\n\n[00:35] There's two ways we can deal with this. We can either chain off the promise with .then or we can use async/await. For now let's chain off with .then. We'll pass the function that takes the response and parses it as JSON by calling res.json. We can chain off of that with another .then and we'll pass a function that's going to take our pets and call setPets with that array of pets.\n\n[00:58] Calling set pets is going to trigger a rerender, and we should see our pets here.\n\n[01:03] Let's also initialize our state to an empty array. We can remove that import. Before I save this, let's open up the network tab of the browser console and keep an eye on this as we save.\n\n[01:15] Once I hit Save, we're going to see we get kind of infinite requests here. What's going on is that useEffect runs after the component renders. Sometime later, the fetch comes back, calls set pets, and triggers another rerender which calls the useEffect again, and so we get this Internet loop of requests.\n\n[01:37] The way we can fix this is by passing the second argument to useEffect as an empty array. With that in place, we only get the single request and we get our pets displayed.\n\n[01:48] What's going on here is that the empty array is telling this effect to only run after the component mounts, and then never again, effectively saying the effect depends on nothing, but there's nothing to synchronize with. It's always going to run once, but then the empty array will prevent it from running again.",
        "casting_words_order": "zeJ8",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises",
        "path": "/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/d34m3",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-fetch-a-list-of-data-with-useeffect-and-promises-ryRC62E9S/scikit-learn-fetch-a-list-of-data-with-useeffect-and-promises-ryRC62E9S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 7077888,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874398,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-promises/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/04-after-fetch-with-promises"
          }
        }
      },
      {
        "id": 5332,
        "creator_id": 71775,
        "slug": "react-fetch-a-list-of-data-with-useeffect-and-async-await",
        "title": "Fetch a List of Data with useEffect and async/await",
        "state": "bundled",
        "summary": "The `useEffect` hook doesn't care whether you use Promises or async/await to fetch data, but if you use async/await, there are a few things to be aware of. You can't, for instance, make the effect function itself async. In this lesson we'll look at the right way to fetch data inside `useEffect` with async/await.",
        "duration": 116,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We have this call to fetch and we're using promise chaining to deal with a response. Let's see how we could use async/await instead of chaining off the promise like this. I'm going to leave this code here, so you can see the symmetry between async/await and promises.\n\n[00:15] The first thing we'll do is call fetch up here. Since that returns a promise, we can await that promise. That will cause the code to stop at this line until the fetch returns and it's going to return a response, so we can take the response and put it into a variable.\n\n[00:30] If we save this now, we're going to get an error because we can't use the await keyword outside an async function. Your first inclination might be to make this function async by writing async right here.\n\n[00:43] We can try this, and it does work, but we're going to get a warning from React that tells us not to pass async functions to useEffect. It tells us what we can do instead, to put the async function inside the effect. Let's rewrite our code to do that instead.\n\n[00:58] We can wrap this call inside a function. We can call it getData, move our await inside here and then make this function async. Now we can get rid of the async keyword out here and we can call our getData function right here.\n\n[01:15] It's OK that we're not waiting for getData to finish because we just need to kick it off. Sometime later, this will return, and we can run our setting code. Let's finish out the rest of this. We can create a variable called pets and await res.json. After this finishes, we can call setPets with that array of pets. Now we'll comment out this fetch code down here and save this and we can see it still works.\n\n[01:42] The big takeaway here is if you want to do async/await inside a useEffect, you need to write an async function and put that inside the effect function, instead of making the effect function itself async or as we saw before, you can always just use promise chaining.",
        "casting_words_order": "zeJ6",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await",
        "path": "/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/g7fvp",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-fetch-a-list-of-data-with-useeffect-and-async-await-SkjqRhVcr/scikit-learn-fetch-a-list-of-data-with-useeffect-and-async-await-SkjqRhVcr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 7733248,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874399,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-fetch-a-list-of-data-with-useeffect-and-async-await/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/05-after-fetch-with-async-await"
          }
        }
      },
      {
        "id": 5334,
        "creator_id": 71775,
        "slug": "react-display-a-loading-indicator",
        "title": "Display a Loading Indicator",
        "state": "bundled",
        "summary": "We can provide a better user experience by showing a loading indicator while the data is loading. In this lesson we'll add a loading indicator with `useState`.",
        "duration": 151,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Let's add a loading indicator so that when the pets are loading, we don't just see nothing. To do that, we can create a new piece of state called is loading, and will have a setter called set loading. We'll initialize that with use state with the value of false.\n\n[00:15] Now we need to set loading to true before we start fetching data, and set loading to false after we're done. Before we kick off our fetch inside our get data function, we can call set loading with true. After the response comes back, we parse out the pets, then we set the pets, we can call set loading to false.\n\n[00:35] Now we can see this. The app still works the same way because we're not doing anything with this loading flag. We're just setting it. Down where we render the component, underneath the header, we can write an expression that checks is loading.\n\n[00:48] If it's true, we can render it div with a class of loading. Otherwise, we want to render these two components right here, list and a button. We're going to have to wrap this in a tag. I'm going to move this down here and then we can wrap this in a fragment.\n\n[01:08] Now we can save and we can see we have our loading indicator before the pets appear. There's one small problem with how we're setting our loading indicator back to false and that's that if a fetch or the JSON parsing fails, it's going to throw an error. Loading will never be set to false.\n\n[01:24] That might be OK if an error is unexpected and you want the app to crash, but if we want to handle it, we should wrap this in a try catch. We can wrap all this in a try block and if an error occurs, we'll catch the error and then we can set loading to false in the catch block.\n\n[01:44] To see how this might work for promises, we can comment out our async-await version and comment back in our promise version. Similarly, we want to call setLoading to true before we hick off the fetch.\n\n[01:57] We can put that line of code before fetch and then we want to setLoading to false, whether it succeeds or fails. We could do that in the finally block. We can chain off of the last then with a finally and pass in a function. In here, we can call setLoading to false. We can save and see it works the same way.\n\n[02:17] One thing to know is that in situations like this where you call two setters, one right after the other, React is only going to re-render the component once. It will actually batch this up and perform one render with pets being this and loading being false.",
        "casting_words_order": "zeHT",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator",
        "path": "/lessons/react-display-a-loading-indicator?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-display-a-loading-indicator?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/6zsxq",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-display-a-loading-indicator-rkmqJTV5H/scikit-learn-display-a-loading-indicator-rkmqJTV5H.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8060928,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874400,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-loading-indicator/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/06-after-loading-indicator"
          }
        }
      },
      {
        "id": 5335,
        "creator_id": 71775,
        "slug": "react-display-a-modal-dialog-using-react-modal",
        "title": "Display a Modal Dialog Using react-modal",
        "state": "bundled",
        "summary": "To be able to add pets to our shop, we need a form to input their data, and somewhere to display that form. In this lesson we'll install a library for creating modal dialogs, and display a dialog when the Add Pet button is clicked.",
        "duration": 147,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] When we click this add a pet button, we'd like to pop open a modal dialog with a form that will let the user type in the name and upload a photo for the pet.\n\n[00:09] To do that, we're going to install a library called React Nodal. MPM install, React Modal, start our div server back up. We can go and import that model dialogue. We'll import it as modal. We'll pull it in from react div modal.\n\n[00:26] The way this modal library works is we can render the modal somewhere in our app, like down here. We can put some content inside it. When we save this, we won't see anything yet. That's because the model requires a prop called is open to tell it whether to display or not. We can pass in true. There, we're going to see that modal.\n\n[00:45] To be able to show and hide this, we're going to need to make a piece of state and pass that state in as VS open flag. At the top of the component, we'll create a piece of state then we'll call it isNewPetOpen and the setter will be setNewPetOpen. Then we'll call useState and pass in our initial value of false. Now we can pass this flag into the modal.\n\n[01:12] When we click the add a pet button, we want to turn that state true. onClick for this button will pass a function and it's going to call setNewPetOpen to true. Now when we click the button, modal shows up, but we have no way out yet.\n\n[01:29] To do that, we need to pass another prop to the modal. It's called onRequestClose and we'll pass in a function that will call setNewPetOpen to false. Now we can click add a pet, and we can click away from it, and we can go back in, and we can hit escape and both ways close the modal.\n\n[01:48] There's one more thing to take care of. After we're going to get this warning that the app element is not defined and we have to call modal.setupElement to set it up. This is so that when the modal is open, screen readers won't see the content behind it.\n\n[02:03] To fix this, we can go down to where we're rendering the app and before we render the app into this root element, we'll save this off into a variable. We can pass that back in and we can follow the instructions here by calling modal.setupElement in passing in that element. Now we can save this and we've gotten rid of the warning and the modal still works.",
        "casting_words_order": "zeHV",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal",
        "path": "/lessons/react-display-a-modal-dialog-using-react-modal?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-display-a-modal-dialog-using-react-modal?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/kjt1c",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-display-a-modal-dialog-using-react-modal-H1vNeTEcB/scikit-learn-display-a-modal-dialog-using-react-modal-H1vNeTEcB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8224768,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874401,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-display-a-modal-dialog-using-react-modal/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/07-after-add-modal"
          }
        }
      },
      {
        "id": 5337,
        "creator_id": 71775,
        "slug": "react-create-a-new-pet-form",
        "title": "Create a New Pet Form",
        "state": "bundled",
        "summary": "Inside the modal dialog, we need a form to input the pet's data. In this lesson we'll create a component to hold the modal and the form, and create fields for the pet's Name and Kind.",
        "duration": 382,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We need to add a form to this modal dialog, and it's being rendered right down here. Rather than add all that state and complexity right here, we're going to pull this out into a new file. We'll create a file called newpetmodal.js. In here, we'll import React and create a component called NewPetModal. Then we can render out that modal right here.\n\n[00:24] Then we'll need to change the way these props work because we don't have these variables in Scope anymore. To make this a little bit more generic, we'll pull in a prop called isOpen and another called onCancel. Then we'll pass these props in directly to the modal. Now, we can go back over to index and render that new pet modal here.\n\n[00:46] Then we can pass isOpen equal to isNewPetOpen. onCancel, we will pass that function that calls setNewPetOpen to false. Now we just need to import newPet modal at the top. We also need to copy our import of modal into our newPet modal file. This should work the same way. We click add a pet, it opens up. We can click away and it closes.\n\n[01:16] Let's fill out the body of this modal now. We're going to have a heading that says newPet and then we'll have a form with a class name of pet form. We're going to want inputs for the name of the pet and the kind of pet and also the photo.\n\n[01:33] Let's start with a label for the name input. It will say name, and then we'll have the input with a type of text, ID of name corresponding to the say she mail for. We'll pass a value of name and onChange, we can take the event and call setName with e.target.value.\n\n[01:57] This is the controlled input pattern using the name state that we don't have yet. Let's add that at the top of this component. We're going to need to rewrite this as a regular function body and returning this modal.\n\n[02:11] Then we'll need to import the useState hook from React. Up top, we can create our state so we'll have name and setName then we'll call useState and pass in our initial value of empty. Let's save and try this out. Make sure we're on the right track.\n\n[02:27] We open up add a pet and we've got our name field now. It said new pet, awesome. Let's duplicate this for the kind of pet. The label will be for kind, name of a kind. Instead of a regular input, we're going to use select input. The name is going to be kind and the ID is going to be kind corresponding with a label.\n\n[02:50] Select inputs can be controlled the same way as regular inputs, so we can pass in a value with some piece of state that we don't have yet. onChange, that's a function that's going to call setKind with the new value. Up top, we'll create that state, we'll call it kind and the setter will be setKind.\n\n[03:12] To make this select work, we're going to have to pass in some options. I'm just going to paste in some options here where the default will say choose a kind and then we'll have a drop down that'll let us pick cat or dog. Let's save this and try it again. We'll click add a pet and now we have name and we have kind.\n\n[03:31] Let's add a couple buttons to this modal. Underneath the select, we'll have one button that will cancel and this will just close the modal. We're going to give this button a type of button and when that's clicked, we'll call that onCancel function from props. Let's try that. We click cancel, the modal closes.\n\n[03:55] We'll add one more button for saving, this one's going to be a type of submit and we'll say save. Right now, that's not going to do very much. It's going to submit the form, which is going to refresh the page.\n\n[04:08] Now we've got the beginnings of a form where we can type in the name, then we can choose a kind and we can either save or cancel. If we open it back up, well, it remember the name and the kind, but it would be better if we'd reset this to empty once we clicked cancel.\n\n[04:25] The reason that's sticking around is because this new pet modal, which owns the state for name and kind is actually always being rendered inside index JS. We see the new pet modal here and even though we're passing it of conditional flag that tells it whether to show or hide, this component is always going to render. React is going to call it even if isOpen is false.\n\n[04:49] Because React is going to render this component, the state is going to be retained between those renders. Even if we cancel, we're just setting isOpen to false, but that doesn't reset the state.\n\n[05:00] Here we have a few options. We could move this state out of this component and move it up so that the app owns it, which should look like putting the state up here and then passing it down. Or we could wire up something in this component with the useEffect hook and then might ran that effect when isOpen changes from false to true and reset the state.\n\n[05:22] The simplest option is to conditionally render this component. Over an index where we rendering it down here. Instead of rendering it all the time, we can wrap this in an expression and only render it if is new pet opened is true.\n\n[05:39] When this is true, we're going to render this component. When this is false, we're not going to render anything at all, which will unmount the component. It's going to reset all the state that way.\n\n[05:50] If we're going to use it, that way, we don't really need to pass use open anymore, which means we could just pass true into the modal. What this means in practice is that if new pet model is rendered, then we're definitely going to see a modal.\n\n[06:04] Let's save this. We can click add a pet and it pops it open. If we type a name into the box and pick a kind and hit cancel, now that component is unmounted. All of its state just disappeared. When we click add a pet again, we're starting with a blank slate again.",
        "casting_words_order": "zeHX",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form",
        "path": "/lessons/react-create-a-new-pet-form?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-create-a-new-pet-form?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/cw04c",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-create-a-new-pet-form-ry-6gaE5S/scikit-learn-create-a-new-pet-form-ry-6gaE5S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8306688,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874402,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-new-pet-form/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/08-after-new-pet-name-kind"
          }
        }
      },
      {
        "id": 5340,
        "creator_id": 71775,
        "slug": "react-use-a-file-input-to-upload-an-image",
        "title": "Use a File Input to Upload an Image",
        "state": "bundled",
        "summary": "We'd like users to be able to upload a picture of their pet. In this lesson we'll add a file input to the form and learn how to load a file from disk when the user selects one.",
        "duration": 183,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Let's say I add another input to this form. It'll let us upload a photo with the pet. We'll put it at the top of the form. Then we'll have a label. It'll be for a photo and it'll say Photo.\n\n[00:11] Then we'll have an input of type file. It's going to have an ID of Photo to associate with the label. To be able to get the selected file out of this input we're going to use a ref because file inputs can't be controlled inputs. We'll import the useRef hook from React and we'll make a ref called Photo Input by calling this ref.\n\n[00:33] Then we can pass this photo input variable in as our ref prop. When we try this now, we can see we've got our choose file button. We can pick a photo and the file name appears here but we don't see any picture yet because we don't have an image displayed.\n\n[00:49] To display the image, we're going to need a piece of state to hold the image. Let's call that a photo and the setter will be setPhoto and we'll initialize it with useState to null. Then above the label, if the photo has been set, we can render an image tag parsing in the source of that photo.\n\n[01:10] We'll also give this image an alt text of the pet, so it's clear to screen readers what this image is. Let's save this and we can try it out and we still don't see anything, even after we pick a file.\n\n[01:27] The last step is to react to a change on this input and then update the photo state with that file. To do that, we'll supply the onChange handler to the input. When that's called, we'll call a function called updatePhoto.\n\n[01:41] We can write our updatePhoto function here. That's not going to take any arguments because we don't need to do anything with the inputs event. We do need to grab the file out of that input, which we can get that from photoInput.current.files zero.\n\n[01:58] Just to be safe, in case files is not set, we can check this before we pull that value out of the array. If files is something, then will pullout first element of it. If we were able to find a file, then we can read that file.\n\n[02:15] To do this, we can create a file reader, which we'll call reader and we'll call new file reader. This is API that's built in to browsers and to read in that file, we just need to call reader.readAsDataURL and pass in the file. The way we get the value out is by assigning an onloadend handler to that reader.\n\n[02:38] That's just going to be a function that gets called as soon as the reading is done. It doesn't get called with anything, but once this is called, it'll mean the reader has a result on it.\n\n[02:46] We can call set photo with reader.result. That's going to update our state and rerender with that image. We can save this now and click add a pet. Now we'll pick a file, and there's our picture.",
        "casting_words_order": "zeJ4",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image",
        "path": "/lessons/react-use-a-file-input-to-upload-an-image?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-a-file-input-to-upload-an-image?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/vz30j",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-a-file-input-to-upload-an-image-S1Hdma4qH/scikit-learn-use-a-file-input-to-upload-an-image-S1Hdma4qH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8347648,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874403,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-file-input-to-upload-an-image/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/09-after-upload-photo"
          }
        }
      },
      {
        "id": 5342,
        "creator_id": 71775,
        "slug": "react-implement-saving-pet-data-locally",
        "title": "Implement Saving Pet Data Locally",
        "state": "bundled",
        "summary": "The New Pet form currently doesn't do anything when you click Save, so in this lesson we'll remedy that by adding a pet to our local list of pets. This will lay the groundwork for making the call to the server.",
        "duration": 167,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] When we open our addPet modal and hit save, right now, it just refreshes the page. Let's add on submit handler to our form to intercept that event and we can do our own saving logic. We'll pass an on submit prop. We'll call a function called submit. We can write that function up here. It's going to take the event.\n\n[00:22] The first thing we'll do is call it event.prevent default. This will keep the page from refreshing. The next thing is to call our save function.\n\n[00:30] What we're going to do is take a prop called onSave. We're going to have our app component inside index.JS be responsible for the actual saving part because it owns the pets. It's got the array of pets here. We'd like to put the logic in here to add pets to that array.\n\n[00:48] Let's add up a function called addPet and it won't do anything right now, but we can pass this down into our newPet modal. I'll pass the onSave prop, then pass in addPet. We also don't need this isOpen prop anymore.\n\n[01:03] Let's go back to newPet modal and we can take our onSave prop and call it in our submit handler. We call onSave and we'll pass an object that describes the pet with the name, the kind and the photo.\n\n[01:16] Eventually, this onSave function is going to be asynchronous so it's going to return a promise and it could fail. As a first pass, we're just going to add pets directly to our array here without making a server call.\n\n[01:27] To simulate it more closely, I'm going to make this function an async one so that we can return a promise from here, even though we're not going to make a fetch call yet. We're going to accept that object with the name, and kind and photo.\n\n[01:39] Then we can call setPets and we need to pass in a new array that has all the existing pets plus a new one with the name, the kind, and the photo. We also need to give it a unique ID, which eventually will be coming from the server. For now, we can call math.random to just generate a unique ID.\n\n[01:58] Let's save this and try it out now. We'll click add a pet and choose a photo, maybe this one, type in a name, choose a kind and hit save. We can see the modal didn't disappear, so maybe this isn't working. Try to save again. In the background, we can see that it actually is adding that new pet, but we haven't cleared the modal.\n\n[02:20] Because the app component is the one controlling whether the modal to show or hidden, the place to close it is in our addPet function. We can call set newPet open to false after we're done setting up pets. Then we can save and try again. Now it works.\n\n[02:40] Right now, we're just adding this to our local copy. If we refresh the page, that new pet is going to go away because it's not being saved to the server.",
        "casting_words_order": "zeKy",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally",
        "path": "/lessons/react-implement-saving-pet-data-locally?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-implement-saving-pet-data-locally?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/q9kfs",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-implement-saving-pet-data-locally-SyMmjT45r/scikit-learn-implement-saving-pet-data-locally-SyMmjT45r.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8368128,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874404,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-implement-saving-pet-data-locally/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/10-after-save-locally"
          }
        }
      },
      {
        "id": 5343,
        "creator_id": 71775,
        "slug": "react-use-http-post-to-save-the-pet-to-the-server",
        "title": "Use HTTP POST to Save the Pet to the Server",
        "state": "bundled",
        "summary": "The app is currently saving the pet locally, but it's not persisted to the server. In this lesson we'll add the HTTP POST call to save the pet data, and refresh the list. We'll also implement a saving state, disable the buttons while the save is under way, and display any errors that the server returns.",
        "duration": 515,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Let's modify our addPet function to actually persist this to the server. Since we're going to have a few different API calls like this fetch to get the pets and another fetch to save the pets, I'm going to create a new file called API.JS where we can put all of our API calls.\n\n[00:15] Let's first export a function called listPets. We can go back to our app component and take this fetch from here and replace it with a call to listPets. We can move that code into our listPet function by returning that call to fetch. To make it work we'll have to import that listPets function at the top of our file here, so we can import listPets from our API file. We can see it's still working.\n\n[00:46] Let's add another function to our API file. This one's going to be called createPet and it's going to take a pet as an argument. Similar to listing, we're going to return a call to fetch and we'll use the same URL, but where this fetch made a get request to this URL, we're going to make a post request with this one.\n\n[01:05] We can supply a second argument to fetch and we give it a method of post. Since we're going to be passing a JSON, we have to give it a headers key and pass in the content type header and set that to application JSON.\n\n[01:20] In the body key, we can pass along the data by calling JSON.stringify on our pet. If this succeeds, we're going to use .then to get the response and parse the response as JSON. This function is going to return a promise with an array of pets.\n\n[01:38] There's just one problem with this, that's not the way fetch handles errors is that if an error happens like a 400 or a 500, it's going to pass that through to the then handler, instead of throwing error. We need to handle errors before we parse the response.\n\n[01:54] We're going to paste the function up here called handleErrors. It will take a response and if that response was not OK, it will parse that body and throw that as an error, otherwise, it will pass it along.\n\n[02:06] We can just stick this handle errors function in our chain by first doing .then handleErrors. If the word passing the handleErrors function here, this is the same thing as taking the response and calling handleErrors with the response. This is just shorthand.\n\n[02:23] Just make sure not to call the function here because we don't want to pass the result of that function. We want to pass the function itself. Now that we have our createPet method, we can go over to our app component and import createPet and we can call it down in our addPet function.\n\n[02:40] We'll call a createPet and this object here that we're receiving is actually the pet that we need to post up so we can rename this object to pet and pass that right into our function.\n\n[02:50] Once this request succeeds, we're going to have our new pet so we can add this to our array of pets. We can call setPets with a new array including all the existing pets plus this new pet. This pet that comes back from the server is going to have its own unique ID, auto incremented so we don't need to generate one.\n\n[03:12] Now we can get rid of our setPet codes down here and we're going to move this call to close the modal inside our then handler after setting pets. Then if the server takes a couple seconds to do this that we won't close the modal until it's done.\n\n[03:26] Let's save this and we can try it out. Click add a pet, choose a photo, type a name, choose kind and hit save. It didn't work, so let's open up the console and see what went wrong. We got a 400 response from the server and we also got this unexpected token less than and JSON error, which means that we were trying to parse HTML as JSON.\n\n[03:51] If we go and look at our network tab and try to save again, we can see the response come back, we got our bad request. The error we got back is actually an HTML page and it's complaining about some missing node module. Let's go fix the server and close this, then we'll open up the terminal and go over to our server.\n\n[04:20] We can see the error right here. If you scroll up to the top of it, we found cannot find module in codings. Post up this, I'll do NPM install, JSON server and then startup the server with nodeserver.js. We can try hitting save again and now it works.\n\n[04:41] Somehow, node module got confused, but it's all fixed now and we have our new pet. If we refresh the page, we can see we have three now. This is being persisted to the server.\n\n[04:51] Let's click add a pet again, then we'll leave all these things blank and hit save. Now nothing happens. Let's open up the console again and we again got a 400 bad request. This is because we're missing some fields. If we got to network, we're on the save again, we can see our bad request here and the response said the name can't be blank and the kind has to be cat or dog.\n\n[05:17] The server is giving us useful errors, we're just ignoring them and not displaying them here. Let's do something about that. Let's first make sure we're returning the result of this function because this is what our modal is going to be calling. It needs to be able to receive that error.\n\n[05:34] Over in our new pet modal, as a result of calling on save, we might end up with an error. We want to catch that error. To be able to show that error, we need to save it into state. Let's create a piece of state for errors. We'll call it errors. We'll have a set errors, set or function. We can call use state and initialize that to null.\n\n[05:56] Now in our catch handler, we can call set errors with the error from the server. This was that object with the name and kind keys. We can use this directly to highlight the fields that were broken. Let's also log out the error so we'll have something to look at in case it goes wrong. This is a step in the right direction, we're saving errors, but we're not displaying them anywhere yet.\n\n[06:19] Let's go down to our form. Underneath the name input, we're going to add an expression here that checks if errors is set, so if it's not null. End of errors.name is set, then we're going to render an error here. We'll have a div with the class name of error. We can render out errors.name.\n\n[06:41] We'll do the same kind of thing for the kind field. Underneath the select box, we can check errors.kind, and render out errors.kind. The photo is optional, so there won't be any errors for that field. Let's save this. We can click on a pet, hit save. Then we can see, we get named can be blank, and kind must be cat or dog if the error's working.\n\n[07:04] If you notice, there was a delay before these errors appeared. In this case, that's because our server has a hard-coded delay of 350 milliseconds just to simulate that server might take a little while. What we should do is disable the form while it's being submitted.\n\n[07:20] Let's create another piece of state. We'll call it saving. The setter will be set saving. We'll call use state, and saving will initially be false. Before we call on save, we want to call set saving to true. After the save is done, we want to call set saving the false. Inside our catch handler, we can call set saving to false.\n\n[07:45] We could put this in a final E block, or in event handler as well, but because the model is going to disappear, as soon as the saving is done successfully, we'll just leave it in the cache handler. Let's save this.\n\n[07:58] Now we've got our saving flag, but we're not doing anything with it yet. Let's go down to the buttons of form and we can disable these buttons when saving is true. We'll pass the disabled prop equal to saving. when saving is true, this button will be disabled. We'll put the same prop on the save button. There, we can click out and pet, hit save.\n\n[08:19] Now we can see the buttons get disabled while the save's in progress. Let's make sure it's still works when we actually supply valid inputs. We'll pick a picture, tip a name, peer kind, and hit save. The pet appears. Hit refresh, the pet's still there.",
        "casting_words_order": "zeKu",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server",
        "path": "/lessons/react-use-http-post-to-save-the-pet-to-the-server?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-http-post-to-save-the-pet-to-the-server?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/d03w3",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-http-post-to-save-the-pet-to-the-server-BkGrICN5S/scikit-learn-use-http-post-to-save-the-pet-to-the-server-BkGrICN5S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8378368,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874405,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-post-to-save-the-pet-to-the-server/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/11-after-post-to-server"
          }
        }
      },
      {
        "id": 5345,
        "creator_id": 71775,
        "slug": "react-use-http-put-to-update-the-pet-on-the-server",
        "title": "Use HTTP PUT to Update the Pet on the Server",
        "state": "bundled",
        "summary": "In this lesson we'll save the updated pet data to the server so that the data will persist across page refreshes. We'll create a new component for the Edit modal and its form. You'll also get to see some debugging to track down the cause of a missing property in the PUT calls to the server.",
        "duration": 603,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] We'd like to be able to click on a pet and be able to edit that pet's fields. To do that, we'll need three things. We're going to need a dialogue for being able to edit the pet. We're going to need some state to control whether that dialogue is open or not. We'll need a new API call to be able to save that pet to the server.\n\n[0:17] Let's start with the state. We could create a Boolean like we have for this new pet open. We also need to track the currentPet. If we clicked on Watson here, we'd want to record that Watson was clicked and open up Watson in the editor.\n\n[0:30] We can create one piece of state that does double duty there. We'll call it currentPet and set currentPet. We'll call us state and initialize it to null. If there is no currentPet set, then we won't show the editor, but when you click on a pet, we'll set the currentPet which will show the editor. That takes care of the state.\n\n[0:52] Let's wire up the state so that when we click a pet, we can open the editor. We'll click into our pet component here and you can see it's expecting an onEdit prop. When we click the pet name, it's going to call that onEdit prop.\n\n[1:07] Back over to index, we can pass our onEdit prop, then we'll pass a function here that will call set currentPet with this pet right here. We can save that and it won't do anything yet because we're setting the state, but we don't have an editor to show.\n\n[1:23] Let's deal with the editor dialog now. It's going to be really similar to newPet modal. I'm going to copy this import and change new to edit and go create a file called editPet modal. I'll copy everything from the newPet modal and paste it in here. Now we can rename newPet modal to editPet modal.\n\n[1:49] The form is going to be pretty much the same, but there's a couple differences. We want to say editPet instead of newPet and we want to initialize this state to whatever pet is passed in, whatever that currentPet is instead of empty.\n\n[2:05] Let's accept a pet prop, then we'll initialize name to pet.name and the kind to pet.kind and photo will be pet.photo. The errors and saving, we can leave alone. Initializing these three pieces of state will make sure that our inputs reflect the currentPet.\n\n[2:23] Let's save this and we'll go back over to our index file and we can render the editPet modal down at the bottom. We'll do the same thing as with newPet modal where we render this thing conditionally if currentPet is set. If currentPet is true, we're going to render editPet modal. On cancel, we're going to close it by calling set currentPet to null. On save, we can call savePet, which is a function that doesn't exist yet.\n\n[2:53] Let's go up here and we'll just create the savePet function and it's going to be an async function and take a pet. We'll make that API call here, but first let's save this and make sure the dialog works. We missed the closing tag, so let's go down here and close out this element.\n\n[3:13] Now when we click on a pet's name, we get an error because we forgot to pass the pet into the modal. Let's pass the pet prop then we can pass currentPet as the value. Let's try it again. Click a pet and now we see editPet and all of the details are filled in. We can cancel.\n\n[3:32] Our save button isn't going to do anything yet because it's just calling that empty function. Actually, because that function doesn't return, we're just stuck in this saving state forever.\n\n[3:42] Let's fill in our API call now. We've done the dialog and we're going to add a function to our API file called updatePet. Let's go into that file and it's going to be very similar to createPet so I'm going to copy this function and rename it to updatePet.\n\n[4:01] It will still take a pet, but instead of doing a post, it's going to do a put to replace this pet on the server. The URL's going to be different because we have a specific pet that we want to replace.\n\n[4:12] Instead of putting two just /pets, we need to put two /pets/setPetsID. We're going to need to make this a template string and now we can use expressions in here, so we can use pet.ID as part of that route.\n\n[4:29] We're still sending JSON and we still want a string of ID for the entire pet and send it up in a body. The URL handling and the response are going to be the same as well. The server's going to return that newPet object.\n\n[4:41] Let's save this file and we'll go over to our index file and we can call updatePet from inside our savePet function. This is going to look similar to addPet. We're going to return a call to updatePet and pass in the pet that we got as an argument.\n\n[4:59] Once the response comes back with the updated pet, we can take that pet and then we call setPets to update our local array of pets. Just to make sure we avoid stale data, we'll write the update our form, but we'd pass a function that gets the existing array of pets that returns the new value.\n\n[5:17] Here we can take the pets and call map. We want to ran through the list of pets and mostly leave them alone, but we want to replace the specific updated one with its new version.\n\n[5:28] We'll take each pet and if that pet ID is the same as the updated pet ID, then we're going to return the updated pet. Otherwise, we're going to leave the pet alone. What will happen here is if our updated pet was, say, what's in here, then we're going to map over the pets. If we first hit what's in, we're going to replace what's in with whatever we changed. If we got to mittens here, that won't match the updated pet and we'll leave the mittens alone.\n\n[5:55] After we're done setting the pets, we want to clear out the current pet. We'll call set current pet to null, which is going to close that at edit dialog. Let's save this and then we can click on the pet's name, change the name and hit save.\n\n[6:12] It did do something, but it didn't close the modal, so let's open up the console and see if we got any errors. We got a status of 404. Let's go to the network tab, we'll make it a bit bigger and try this request again.\n\n[6:28] We can see the request went to /pets/undefined, which is not what we wanted. This should be a pet ID, some sort of number. If we click on this, we got an empty response. If we click over to the headers tab, we can see what the request look like.\n\n[6:44] The request payload was good, it had a kind and a name and a photo, but it's missing the ID. That might be because the server isn't sending us an ID in the first place because the server is based on that db.json file. Let's go over to DB JSON and make sure that it has an ID and both of these pets do have ID's so that seems good.\n\n[7:08] Next, let's look at the pets that we're actually receiving. If we refresh the app, you see our get to /pets and if we click into the response, we can see we're getting an array with two objects and they both have IDs. It does seem like we should be getting the ID when we're posting the pet back up. We certainly have it locally. Let's look through the code to figure out what's going on now.\n\n[7:36] Let's go into the update pet function. Before we make the call, let's log out the pet. We'll save that and we'll go over to our console and try editing one and hitting save. We see we're logged out of pet and that pet doesn't have an ID.\n\n[7:56] This pet we're receiving here doesn't have an ID, which means this pet, that saved pet it's receiving doesn't have an ID. Let's look up into our pets array and we can inspect this in the app if we used the React developer tools.\n\n[8:11] We can click over to the components and let's make this a little bit larger. Then we can click on our app, then we can see in our hooks we have this piece of state. It's an array that has two objects in it. These are our pets and they both have IDs.\n\n[8:28] This gives us confidence that list pets is working and it is returning an array of pets that have IDs and this set pets is working correctly. We're tracing this further. Maybe the current pet doesn't have an ID.\n\n[8:40] Let's go down to where we're setting the current pet, which is right here. When we set the pet, let's turn this into a function with a body and we can put in a console log right here. Then we'll log out set and that pet.\n\n[8:55] We'll go over to the console and when we click on one of this pet names, we can see we get set and this one does have an ID. Current pet does have an ID and the current pet should be being passed into the edit pet modal right here.\n\n[9:12] We'll drill into the edit pet modal. Begin it's calling on save and so maybe the way it's calling on save is incorrect. We have our unsave function and when we submit the form, we're calling on save with this object that has name, kind and photo and it doesn't have the ID. That's what I get for copy-pasting the new pet modal into edit pet modal.\n\n[9:33] Let's change this so that we pass in a copy of the existing pet and then override the name, kind and photo with the new values. This will make sure that if pet has an ID, then that ID is going to end up in here. In the future, if we add any new properties to pet, those will get included, too. Let's save this now and we can go try again.\n\n[9:55] We'll click on mittens, change the name and hit save. Now we can see it's updated here. If we refresh, that update is persistent.",
        "casting_words_order": "zeH8",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server",
        "path": "/lessons/react-use-http-put-to-update-the-pet-on-the-server?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-http-put-to-update-the-pet-on-the-server?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/t07zg",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-http-put-to-update-the-pet-on-the-server-Bk-TvCEcS/scikit-learn-use-http-put-to-update-the-pet-on-the-server-Bk-TvCEcS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8383488,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874406,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-put-to-update-the-pet-on-the-server/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/12-after-put-to-update"
          }
        }
      },
      {
        "id": 5346,
        "creator_id": 71775,
        "slug": "react-refactor-new-and-edit-forms-into-one",
        "title": "Refactor New and Edit Forms into One",
        "state": "bundled",
        "summary": "The \"New Pet\" and \"Edit Pet\" forms are very similar, so in this lesson we'll look at how to refactor them into one form component and DRY up the code.",
        "duration": 226,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We have this edit pet modal and we have a new pet modal. Both of these files are really similar. They have the same form. They have the same submit logic, for the most part, and they have similar state. The only real difference is the heading and how the state is initialized.\n\n[00:19] Let's refactor some of the common code here out into a separate component. We'll make one called pet form. In here, we're going to import React and create a component called pet form. Into here, we're going to copy the form from edit pet modal. We'll take everything from form down to here, cut this out, then paste it into pet form.\n\n[00:43] We can return that form and save this to format the file. Now, this form relies on the submit function and a bunch of state. Let's go back over to edit pet modal then we'll take more of this. We'll take out submit and move that over. We'll take the update photo function and move that over.\n\n[01:07] We can take all of the state, we can see VS Code is telling us that none of these are used anymore. We'll cut all these out and paste them in pet form. The pet form also needs some props. It's going to take the pet for the initial values. It's going to take an on save function, and it'll take on cancel.\n\n[01:29] We're also going to need to import use state and use ref from React. Now we can go over into edit pet modal, and clean up some of this empty space. We can import our pet form and render that pet form right here.\n\n[01:43] We need to pass through the pet that we received as a prop. We can also pass through the onCancel prop and the onSave prop. For the edit case, this should work great. You can click on a pet, change its name, hit save, and it's updated. That makes sense because all the pet forms code was taken from edit pet modal.\n\n[02:04] We need to make some changes to adapt it to new pet modal. Let's get rid of most of the code here because a lot of it is already in pet form. You don't need that. We don't need to submit handler. We don't need this form. We also don't need use state and us ref.\n\n[02:21] We could import that form from our component file and render that pet form down here. We'll pass it onCancel and onSave. We're not passing in the pet prop because we don't have a pet yet here. In pet form, we need to handle the case when pet is undefined. Otherwise, accessing properties on pet is going to fail. If we click add a pet right now, that's exactly what's going to happen.\n\n[02:50] Before we pass the pet into this pieces of state, we can create a variable called intialPet, which we'll use the pet if it's already set. If it's not, we'll initialize it to an object with a name that's empty, a kind that's also empty and a photo that's null. Now, instead of pulling these properties from pet, we can pull them from initialPet. Now we can click add a pet and we can create a new one and that still works fine.\n\n[03:26] To recap, we've created this pet form component by moving the common code out of new pet modal and edit pet modal and adapting this new component to be able to deal with pet being undefined. We've left the edit and new component in charge of their modals and their header. Each of them deals with its own unique aspects and outsources the rest to pet form.",
        "casting_words_order": "zeKw",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one",
        "path": "/lessons/react-refactor-new-and-edit-forms-into-one?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-refactor-new-and-edit-forms-into-one?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/jqp6t",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-refactor-new-and-edit-forms-into-one-BJzkqCV9S/scikit-learn-refactor-new-and-edit-forms-into-one-BJzkqCV9S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8386048,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874407,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-refactor-new-and-edit-forms-into-one/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/13-after-create-PetForm"
          }
        }
      },
      {
        "id": 5348,
        "creator_id": 71775,
        "slug": "react-use-http-delete-to-remove-a-pet-from-the-server",
        "title": "Use HTTP DELETE to Remove a Pet from the Server",
        "state": "bundled",
        "summary": "Adoption day is here at last! In this lesson we'll send the DELETE request to the server when the user clicks on the Adopt button and confirms their decision.",
        "duration": 136,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Let's add the ability to remove a pet from the list like when they get adopted. When you click the house button will remove them from the list. We're going to need a new API call for deleting a pet. The code's going to be similar to our existing fetch calls here with some kind of method.\n\n[00:16] I'm going to copy the one for update pet. I'll paste it and call it delete pet. You'll need a console log. To delete a pet, we do need to supply its pet ID so the URL's correct. The method is going to be delete. We don't need to send the body to delete a pet.\n\n[00:33] Let's delete the body key. That means we don't need the headers because we're not sending any JSON in our error handling and parsing the response can see the same. In our index file, we can import this delete pet function.\n\n[00:48] We'll need to wire up a quick handler to this button to call our delete pet API. We'll go down to our pet component here, and click into this. We can see it accepts an on remove prop. When we click that adopt button, it's going to call on remove.\n\n[01:04] In index, we can pass a prop called onRemove. When that's called, we want to do a little bit of work before we call our delete function. We'll make a function called remove pet and parse in the pet. Then we can go create our remove pet function.\n\n[01:20] It's going to take the pet that's being removed. We're going to use the browsers confirm dialog to make sure that the user actually wants to remove this pet. We can save the result of this in a variable. If they click OK to this dialog, the result is going to be true.\n\n[01:34] We can check if the result was true, then we'll call our delete pet API, and pass in the pet. Once that succeeds, we can remove that pet from our local list by calling set pets. We'll pass in the updater form where we get the existing array of pets.\n\n[01:51] We can call pets.filter. Then we'll take each of the pets and compare its ID against the one that's being removed. We're going to keep all the pets that don't match the one being removed. Let's save this now. We'll click the adopt button. If we hit cancel, the pet stays here. If we click OK, the pet's removed. If we refresh, we can see that was persisted to the server.",
        "casting_words_order": "zeJ0",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server",
        "path": "/lessons/react-use-http-delete-to-remove-a-pet-from-the-server?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-http-delete-to-remove-a-pet-from-the-server?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/r6t0a",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-use-http-delete-to-remove-a-pet-from-the-server-SJGbsREqB/scikit-learn-use-http-delete-to-remove-a-pet-from-the-server-SJGbsREqB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8387328,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874408,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-http-delete-to-remove-a-pet-from-the-server/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "github": {
            "repo": "pure-react-lessons-code",
            "user": "dceddia",
            "branch": "master/5-API-Requests/14-after-delete-pet"
          }
        }
      },
      {
        "id": 5350,
        "creator_id": 71775,
        "slug": "react-reverse-engineer-an-api-and-display-data-with-react",
        "title": "Reverse-engineer an API and Display Data with React",
        "state": "bundled",
        "summary": "Sometimes you need to interact with an unfamiliar API, and there is little to no documentation on how it works. In this lesson we'll use the Reddit API as a case study and reverse-engineer the data format using Chrome's Developer Tools. Once we understand the data, we can fetch it and display it inside an app.",
        "duration": 149,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Lecturer: [00:00] If you add .JSON to the end of a reddit URL you'll get a JSON response like this one. This works for any subreddit, so we could try it with our JavaScript, for instance.\n\n[00:11] The response is pretty hard to interpret. Let's try to reverse engineer this JSON response and get something that we could display in an app. We'll open up the DevTools and go over to the Network tab and rerun the request. If we expand this, we'll see that our response was this text here.\n\n[00:29] We can go to the Preview tab and then we've got path JSON that we can drill down into. If we know nothing about this API but we want to display reddit posts and their titles, we could start clicking through here and try to figure out where the titles are.\n\n[00:44] We'll drill into data, because it's the only place we can go. We've got some after and before keys. I'm not sure what these are. If we drill into children, this looks promising because it's an array. These things have a kind, but still no title. Let's drill in one level further into data again, and now, we're getting somewhere.\n\n[01:08] We scroll through all of this content, you see og:title and og:description, and these look promising. There's also a permalink. It'd be nice if we could get this data in a variable so we could play around with it.\n\n[01:24] If we go to the top and right-click this object and click store as a global variable, it will open up this console and give us a temporary variable pointing to this object. Now, we can try accessing the data.\n\n[01:36] We can say tempthree.data.children. Now, it gives us all the children, so we want to map over the children. For each child, print out the child and will give us this array of objects.\n\n[01:50] We need to drill further into this, but we lost out of complete. If I expand this, we can see each one of these children has a data key, so we need to drill into child.data and that will give us the actual Reddit post.\n\n[02:04] Let's try child.data here, and that will give us an array of objects. Each one of these, is going to have the data we want. We can try again, child.data.title, and now we've got both a bunch of post titles.\n\n[02:20] Now that we know the shape of this data and we have an expression to pull out what we want from it, we can copy this and put it into our React app or wherever we need to access the data.",
        "casting_words_order": "zeJ2",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react",
        "path": "/lessons/react-reverse-engineer-an-api-and-display-data-with-react?pl=api-requests-in-react",
        "http_url": "http://app.egghead.af:5000/lessons/react-reverse-engineer-an-api-and-display-data-with-react?pl=api-requests-in-react",
        "http_short_url": "http://app.egghead.af:5000/s/ama2a",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-reverse-engineer-an-api-and-display-data-with-react-HJHaOXB5H/react-reverse-engineer-an-api-and-display-data-with-react-HJHaOXB5H.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
        "series_row_order": 8388096,
        "series": {
          "title": "API Requests in React",
          "description": "Not long after getting started with React, you'll want to pull in some data from an external source, whether that's your own API or someone else's. In this module we'll be building a Pet Store where we can view a list of pets in the adoption center, add new pets, edit their names and photos, and delete (er, adopt) them.\n\nWe'll start with a static app with hardcoded data and refactor it piece-by-piece until all the data is coming and going from an API server.",
          "duration": 3259,
          "slug": "api-requests-in-react",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/api-requests-in-react",
          "http_url": "http://app.egghead.af:5000/courses/api-requests-in-react",
          "path": "/courses/api-requests-in-react",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/thumb/PureRectMod_5_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/full/PureRectMod_5_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/350/landscape/PureRectMod_5_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874409,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-reverse-engineer-an-api-and-display-data-with-react/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      }
    ],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/api-requests-in-react/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 4,
    "resource_id": "api-requests-in-react"
  },
  {
    "type": "playlist",
    "id": 432445,
    "title": "React Context for Application State",
    "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
    "slug": "react-context-for-application-state",
    "published": true,
    "updated_at": "2021-02-13T13:51:07.130-06:00",
    "created_at": "2019-10-14T16:31:32.987-05:00",
    "duration": 3449,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/square_480/PureRectMod_6_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/square_280/PureRectMod_6_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/square_256/PureRectMod_6_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/square_128/PureRectMod_6_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/square_64/PureRectMod_6_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/square_32/PureRectMod_6_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/thumb/PureRectMod_6_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/full/PureRectMod_6_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/445/landscape/PureRectMod_6_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/react-context-for-application-state",
    "path": "/playlists/react-context-for-application-state",
    "http_url": "http://app.egghead.af:5000/playlists/react-context-for-application-state",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/react-context-for-application-state/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/react-context-for-application-state/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/react-finished-product-first-the-app-we-re-building?pl=react-context-for-application-state",
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432445/users/353304/toggle_save",
    "items": [
      {
        "id": 5358,
        "creator_id": 71775,
        "slug": "react-finished-product-first-the-app-we-re-building",
        "title": "Finished Product First: the App We're Building",
        "state": "bundled",
        "summary": "In this module we're building a simple email client. Here we'll walk through how the app will work, the components and files involved, and the features we'll be implementing.",
        "duration": 150,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] This app here is a Create React App project. We've got this root component that's rendering either main page or login page. Login page is what we're looking at right now. If we log in with Dave and secret, we'll be taken to our main page, which is going to be a little email client-type app.\n\n[00:16] We've got a header here, a mailbox that's empty, and this little logout button that we click on and log back out. Let's go through the components in this app. We've got the root that renders these two components. We've got the login page that needs this on login prop that it's going to call when we click the button.\n\n[00:33] If we drill into login page, you can see it's got state for our two fields here. When we click the button, it's going to call this submit function from the form. That's going to call login, which is in our API file.\n\n[00:48] Once that login finishes, it's going to call the on login prop, which will go back to index, and is going to set that user, which will rerender the app into main page with the current user.\n\n[00:59] Before we look at main page, let's look at this API file and this login function real quick. You can see we've just got a fake user here and some fake emails that we'll be getting later on. For now, we have this login function that takes the username and password and just checks them, and either resolves with that user or rejects with an error. If we get the username or password wrong, we'll get this error here.\n\n[01:22] Let's go back over to our root component. After login succeeds, this user piece of state is going to have that user in it. Then we're going to render the main page once user is set. Inside main page, we take the current user. On logout, we pass those both into the header and the message list.\n\n[01:41] Main page isn't really using these props. It's just passing them through to its child components. I'll log back in over here. This is the message list component down here. We've got the header up here. We'll drill into header. It's getting these two props and it's passing them along to user menu, which is this thing right here. We can drill into that.\n\n[02:01] The menu has some state to keep track whether it's open or closed. We've got this toggle menu function that flips it back and forth. We're using useEffect to setup an event listener on the document so we can hide the menu when you click away from it.\n\n[02:15] If we go back up to the header and then back again to main page, we can take a look at message list. All that's doing right now is just rendering out this text with the current user's name.\n\n[02:27] That's an overview of all the components in the app so far.",
        "casting_words_order": "zeIk",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building",
        "path": "/lessons/react-finished-product-first-the-app-we-re-building?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-finished-product-first-the-app-we-re-building?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/dvx5v",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-finished-product-first-the-app-we-re-building-Syem304qH/scikit-learn-finished-product-first-the-app-we-re-building-Syem304qH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": -2097151,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874262,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-finished-product-first-the-app-we-re-building/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5359,
        "creator_id": 71775,
        "slug": "react-avoid-prop-drilling-with-react-context",
        "title": "Avoid prop drilling with React Context",
        "state": "bundled",
        "summary": "Passing data deep through a React app usually involves tedious passing of props or a complex solution like Redux. Here you’ll learn how to simplify an app that’s currently passing data with props by refactoring it to use React’s Context API.",
        "duration": 352,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] My root component is passing down its user object and these log in and log out functions to main page and log in page. The main page is just taking these props and forwarding them along to header and message list. Header is forwarding them along to user menu.\n\n[00:15] This is a pretty standard pattern in React, passing props down through components. That is how you get data around, but it can be a pain to have to manually forward this data throughout your component tree.\n\n[00:26] If we open up our React DevTools we can see the components laid out in a tree here. Of these components, only user menu and message list need this current user. Only the user menu needs this on logout prop. We can simply this and eliminate the prop drilling by introducing React context.\n\n[00:46] We're going to create a new context to pass down this user. I'm going to make a new file called UserContext.JS. We'll import React and call it React.createContext. This is going to return an object which we can put in a variable. We'll call it user context.\n\n[01:04] This context object has two parts to it. There's a UserContext.Provider and a UserContext.Consumer. These are like a matched pair. We can feed data into the provider and get it back out from the consumer or the useContext hook.\n\n[01:22] Let's see how that works. First, we're going to export this context as the default and we can go over to our index and import that user context. This will give us the access to the provider and the consumer. We only need the provider here.\n\n[01:38] We're going to wrap the main page in UserContext.Provider and pass in a prop to the provider called value. Into this value, we can pass whatever we want. We're going to pass this user object.\n\n[01:52] What this will do is make the user available to main page and everything below it in the tree which, if you look at the devtools again, we can see that that's going to be main page, header, user menu and message list.\n\n[02:05] All of these will be able to use the user contexts consumer or the use context hook to access that user. Let's drill down into these user menu and message list components and pull out that user from context. We go into main page, and we don't need the user here.\n\n[02:21] Now we'll go into message list. Here, we're actually pulling something off that user prop. One way we can get that user out of context is to import the context and then wrap the contents of the component with the UserContext.Consumer.\n\n[02:41] If we try this as is, and then log back in, we're going to get this error that render is not a function. That's because the consumer uses the render props pattern, which means that it expects that its child is going to be a function.\n\n[02:55] If we wrap this in a function that returns the content, that's going to make this happy again. This function is going to receive one argument, which is the value that was parsed in to the provider here. We can call it whatever we want here. Let's just call it user. We can use that user right here. Now, we don't need this prop more.\n\n[03:16] We can save this and log in. Now we've got an error, because we forgot to save index. Let's save this and log in again. Now this works again. You can see in the component tree, the message list now has this Context.Consumer inside it.\n\n[03:37] Let's look at the user menu component now. We can use context to pull the user in for that one. We'll go into main page, header, and user menu. Again, we'll need to import user context. Instead of using the consumer, we can try out the useContext hook.\n\n[03:55] All we need to do to pull up the value is call useContext, and parse in the entire user context object, not just the consumer. This is going to return that value. We can put it in a variable called user and change where we're using current user down below. We don't need the current user prop anymore.\n\n[04:17] Let's try this out. We can log in. You can see the user avatar is still showing up. If we look at the component tree, the user menu doesn't have a context consumer inside it, because we didn't have to change what we were rendering, we were just able to call this hook function and pull out that value.\n\n[04:36] We can go back up through our tree and remove that current user prop. Starting at user menu, we don't need the current user into user menu anymore, which means we don't need to receive it in header. We can go up to main page.\n\n[04:53] We don't have to parse that user into header anymore and we don't need to parse the user into message list, which means we don't need to receive that prop in main page. We can go back to our root component. We don't have to parse current user in here anymore, either.\n\n[05:09] If we log in, you can see we're getting the user through context, and everything is still working. To recap, we've created a context and we've put that in a file, so that we're able to import it from multiple places in the app. Some places need the provider and some places need either the consumer or the whole context.\n\n[05:28] In index, we're using the provider to provide a value to this whole subtree of the app. It's everything from main page on down. Then within that subtree, we're able to import that context file and either use the useContext hook to pull out the value or, like in message list, we can use the user context consumer to get that value using the render props pattern.",
        "casting_words_order": "zeIi",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context",
        "path": "/lessons/react-avoid-prop-drilling-with-react-context?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-avoid-prop-drilling-with-react-context?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/x776e",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-avoid-prop-drilling-with-react-context-rkvK2CV5B/react-avoid-prop-drilling-with-react-context-rkvK2CV5B.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 2097153,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874263,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-avoid-prop-drilling-with-react-context/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/01-after-pass-data-with-context?fontsize=14"
        }
      },
      {
        "id": 5360,
        "creator_id": 71775,
        "slug": "react-allow-children-to-update-parents-with-a-callback-from-context-in-react",
        "title": "Allow Children to Update Parents with a callback from Context in React",
        "state": "bundled",
        "summary": "A Context Provider can only accept a single value, but it can be of any type. When you need to pass multiple values through Context, group them into an object. Here we’ll learn how to pass data along with a callback function for updating the data, so that children will be able to update their parents.",
        "duration": 242,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] For passing down this userObject through context it would be nice to be able to pass the user along with these two functions that login and logout the user.\n\n[00:09] We can combine all of three of these things into an object. We can just take it in a variable called value. We can have the user, login, and logout and then pass this value into the context.\n\n[00:22] Then we can rearrange things a bit so that this provider is wrapping both main page and login page. Then we can pass everything down without having to manually pass the props.\n\n[00:31] Let's make this surround everything here. Inside of this expression if the user is logged in then we're going to render main page, otherwise we'll render login page. We can surround this whole thing with the context provider.\n\n[00:48] Let's save that. The login page is still going to work, but if we log in, the app is going to be a bit broken because we've changed the format of this value. All the places that we're just expecting a user, now we're getting this object with a user and login and logout. Let's go fix those spots.\n\n[01:05] We're going to main page and into header and user menu and what we're calling useContext here to pull out a user, we can now destructure that user from that value object. Then we can jump back up to main page and go into message list.\n\n[01:24] Here where we're getting the user, we can destructure this argument as well by pulling out the user from that object. Now if we log in, everything should be working again.\n\n[01:35] Now let's go back over to our user menu component which is receiving that onLogout prop. We don't need this anymore because we can pull out logout from our context.\n\n[01:45] Of course, the name doesn't match so we could go through this component and find where we're using onLogout and rename it or we could rename it as we're destructuring it by using the colon and giving it a new name.\n\n[01:58] Now, we don't need this prop anymore and user menu will work the same way. We'll save user menu and go back over to our header component. Now we don't need to pass this onLogout prop into user menu at all.\n\n[02:11] We also don't need to receive it in header which means we can jump back into main page and we don't have to pass it into header and we don't have to receive it in main page. We go back to our root and we going to remove the onLogout prop from main page. That's a bit cleaner.\n\n[02:27] Let's jump into log in page and we'll do the same thing. Here, we're getting the onLogin prop and calling onLogin down here. To be able to access that login function from Context, we can import userContext, and we can also import the useContext hook. Then we can call useContext with userContext and destructure that value and pull out the login function.\n\n[02:53] Here, we have a conflict, because our API function is called login, and so is this one. We'll use that rename trick again to rename this to onLogin, and that'll solve that problem.\n\n[03:04] Another way to solve this would be to import the API module under its own namespace. We could say import * as API, and then instead of just calling login, we can call api.login, and that would work just as well.\n\n[03:19] Either way, we can get rid of the onLogin prop now and we can go back to our root component and remove onLogin here as well. Now this component is nice and simple, and all this root component is really doing now is managing the user state handling login and logout.\n\n[03:34] Let's login and make sure everything still works. We can see we're getting the user in the header and in the body here, and the login page worked too.\n\n[03:44] As a recap, we're passing in a value object into the Context. Inside that object, we can pass as many things as we want. We're passing our user along with the functions that'll let us change that user. Then we modified our components to use the functions from Context, which means we don't have to manually pass them as props.",
        "casting_words_order": "zeIg",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react",
        "path": "/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/nr51k",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-allow-children-to-update-parents-with-a-callback-from-context-in-react-B1DfaRVcB/react-allow-children-to-update-parents-with-a-callback-from-context-in-react-B1DfaRVcB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 5636096,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874264,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-allow-children-to-update-parents-with-a-callback-from-context-in-react/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/02-after-pass-actions-through-context?fontsize=14"
        }
      },
      {
        "id": 5361,
        "creator_id": 71775,
        "slug": "react-manage-the-logged-in-user-state-with-context",
        "title": "Manage the Logged-in User State with Context",
        "state": "bundled",
        "summary": "A common use case for global state is to keep track of the \"logged-in user\" in an app. In this lesson you'll learn how to create a Provider component to contain that state and make it available with the Context API.",
        "duration": 131,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Our root component here is responsible for the user state, and logging in and logging out that user, and also passing it down with this user context provider.\n\n[00:10] Let's pull all the user-related functionality out into the user context. In our user context file right now, all we're doing is creating a context and exporting it. What we can do is create another component in here. We can call it user provider. This user provider component can be responsible for holding on to the user and its changed functions.\n\n[00:33] We can take all of this stuff here and cut it out of here and paste it into user provider. We can also move over our user context provider rendering section over to here as well. We can return this. To make it generic, we don't really want to conditionally render main page or login page. We're just going to render whatever is passed in as children here.\n\n[00:58] We'll take the children prop. We'll need to import use state now. We're also going to export this user provider function. Now over an index, we can import the user provider. We can use that user provider instead of user context provider. We don't have to pass a value because the user provider is handling all that user stuff for us.\n\n[01:25] Now, because the user provider doesn't depend on anything in here, we can move it up one level so that it'll be wrapping the root component instead of being inside the root component. We still need access to the current user inside root. We can import the use content hook from React.\n\n[01:47] At the top of this component, we can call use context and pass in our user context. That's going to return that object with the user and login and log out. All we need from it is the user property. We don't need us state anymore.\n\n[02:04] If I fix this typo, then the app's going to render. We can log in. Everything still works.",
        "casting_words_order": "zeIe",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context",
        "path": "/lessons/react-manage-the-logged-in-user-state-with-context?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-manage-the-logged-in-user-state-with-context?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/gnyvs",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-manage-the-logged-in-user-state-with-context-ryKaTCN9r/react-manage-the-logged-in-user-state-with-context-ryKaTCN9r.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 7077888,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874265,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-the-logged-in-user-state-with-context/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/03-after-create-provider-component?fontsize=14"
        }
      },
      {
        "id": 5362,
        "creator_id": 71775,
        "slug": "react-create-a-context-wrapper-with-a-custom-hook",
        "title": "Create a Context Wrapper With a Custom Hook",
        "state": "bundled",
        "summary": "A single Root component responsible for multiple kinds of data like current user, language setting, and theme will become messy and hard to work with. One way to fix this is to move related logic and data into one place,https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/04-after-custom-hooks-for-context?fontsize=14along with a Context Provider to get the data out. In this lesson we’ll create a custom hook to let us access the current user throughout the app.",
        "duration": 274,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [0:00] My root component needs access to the user object from the context. To do that, we have to import the useContext hook, import the context, then combine those two things to get the user. Or if we wanted to, we could use the userContext consumer to pull out the user that way.\n\n[0:17] We can make this even nicer with a custom hook. If we go over to our userContext file we can create a new function called useUser, and we're going to export this function. We'll take that line of code from our root component right here and move it into this useUser function and then return the user from here.\n\n[0:38] We'll need to import the useContext hook in this file. Now we can go over to our root component and pull in that new useUser hook. Now, instead of root having to know the structure of this object and that the key is called User, we can just create a variable called User and call our User hook to pull out the value.\n\n[1:01] Now we don't need the context anymore, and we don't need useContext up here. We're still getting the user, it's a little bit easier to read, and there's one last thing to remember, that the key inside that object is called User. We can name it whatever we want right here without having to rename it during destructuring.\n\n[1:19] Let's log in to make sure it still works. Then we can go to other places in the app that need the user like inside our message list where we're using the userContext consumer right now to pull out that user. We can simplify this by importing the useUser hook from userContext.\n\n[1:37] Then we'll need to change this into a function body with braces. Up top, we can pull out of that user by calling useUser. Now we don't need this consumer anymore, and we can just return this content. The other place we needed the user was inside our main page header and user menu. Here were pulling out of the user and the logout functions from this context.\n\n[2:04] We could leave this alone or we could use our useUser hook to get the user out of the Context, but that leaves this logout function. To get this value, we can either leave this alone or we could add a new custom hook that'll give us the actions. Either way is fine, but I'll you how to do that.\n\n[2:24] We'll create a custom hook called useUser actions. Similar to the other hook, we are going to call useContext, and we're going to destructure that value. This time will pull out login and logout. We can return those here. We can export this function and then go over to user menu.\n\n[2:48] We'll import useUser and useUserActions. Now we can replace our call here with useUserActions. We don't need the useContext hook anymore. Let's try this out. Everything is still working.\n\n[3:06] To recap here, we've created a couple of custom hooks inside our userContext file so all of the user-related stuff is bundled together at one file. We have the user state, we have these actions, and they're all being passed down through this user context provider.\n\n[3:22] Since we've centralized everything here, it's really easy to use this user provider component and just provide the user that way. All the state management is handled right here.\n\n[3:33] For other parts of the app, like the menu and the message list, that need to access the user, we've created these custom hooks to make it really easy to pull out just the user or the user's actions. We're still exporting the whole context as the default in case some part of our app wants to use the context that way.\n\n[3:51] This is up to you. If you wanted to enforce that people use your context through your custom hooks and your custom provider functions, then you could keep this context private by not exporting it.\n\n[4:02] In this case, if we take this out, we're going to get some errors because our login page still depends on that user context. We have the choice of either leaving the export here, or we can use our useUser actions hook in the login page instead. Then we don't need access to the whole context.\n\n[4:21] While you can do it either way, I usually like to err the side of exposing less of the API and making it more explicit. This will make it easier to change the shape of this object or the names of these properties as the app grows.",
        "casting_words_order": "zeJk",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook",
        "path": "/lessons/react-create-a-context-wrapper-with-a-custom-hook?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-create-a-context-wrapper-with-a-custom-hook?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/w3c12",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-create-a-context-wrapper-with-a-custom-hook-HJ0GC0N9r/react-create-a-context-wrapper-with-a-custom-hook-HJ0GC0N9r.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 7733248,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874266,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-context-wrapper-with-a-custom-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/04-after-custom-hooks-for-context?fontsize=14"
        }
      },
      {
        "id": 5364,
        "creator_id": 71775,
        "slug": "react-use-multiple-context-providers-in-the-same-app",
        "title": "Use Multiple Context Providers in the same app",
        "state": "bundled",
        "summary": "When you have two unrelated kinds of data such as a current user and a currently-selected email, it’s common for some parts of the app to need the user and some other parts of the app to need the email. One way to do this is to create multiple Contexts, each with its own Provider and Consumer (or custom hook), and use each one to distribute one kind of data to the slices of the app that need it. In this lesson we’ll pass user data and email data to separate subtrees using two separate Contexts, using `useState` to manage the state in our EmailProvider.",
        "duration": 443,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We're going to add a second context to this app to manage emails, so that when we log in, we'll be able to see some emails here. Before we do that, I'm going to go into our userContext and make a small change to our initial user here. Instead of starting off null, I'm going to pull in a fake user from our API file.\n\n[00:19] This will let us skip having to log in every time. Now, when the app loads, we start off with the mailbox. Let's create our email context now. We'll make an emailcontext.js. We'll import React and call it React.createContext. We'll store that value in emailContext.\n\n[00:38] Then we'll create an exported function called email provider, and it's going to take the children prop. Inside here, we can render our emailContext.provider, and render the children inside it. We'll need to pass the value to this provider that it can make available to its children, but first, let's create some state.\n\n[00:59] To do that, we can either use the use state hook and manage state that way, or we can use the use reducer hook and manage state that way. Either way will work, but in this lesson, we're going to use state. We'll cover use reducer in another lesson.\n\n[01:14] We'll need four pieces of state here. We're going to have one for emails, with the setter calls that emails. We'll call use state and initialize that to an empty array. Then we'll have one called loading that will keep track of our loading state. Then we can have set loading setter, and call use state for that and initialize that false.\n\n[01:35] We'll also have one to keep track of errors, and a setter to set the error. We'll initialize that one to null. Lastly, we'll have one called currentEmail with setCurrentEmail as the setter. We'll initialize that to null as well.\n\n[01:51] When this provider first mounts, we're going to fetch emails. To fetch the emails, we need the use effect hook from React. We'll call use effect and pass in a function. We only want this function to run once when the component mounts.\n\n[02:06] We'll pass the second argument as an empty array here. Inside here, we need to call fetchEmails, which is going to come in from our API file. We'll import fetchEmails from API, and call fetchEmails here. That returns a promise. We can chain off of that promise.\n\n[02:23] Once the emails come back, we can call setEmails with those emails. If the request failed, we can handle that in the catch handler and take the error, and call setError to save that into state. We also need to keep track of when the emails are loading and when they're finished. Before we kick off the fetch, we're going to call setLoading to true. We'll also reset the error to null, in case there was an error.\n\n[02:48] Once the emails come back or fail, we need to setLoading to false. We could do that in both of these handlers here or we can write a finally handler, and parse it a function that will call setLoading false. Whether this succeeds or fails, finally is going to run, and so we'll always setLoading false.\n\n[03:06] We have our state and we're fetching emails. Now it's time to pass this value down to the provider. We'll create a variable called value to hold all this state. It's going to have emails, loading, error, and current email.\n\n[03:23] We'll also parse down the set current email function, so that child components like our message list here will be able to pick an email from the list and tell our context which ones should be selected. We can go back over to our index file and our root component, and import that email provider from our email context file.\n\n[03:44] Then we can surround our root component with an email provider. Now that email data is available to the entire app, we'll go back over to our email context and create a way to expose this context to the rest of the app.\n\n[03:59] We could either export the entire email context, or we can encapsulate that logic here and make it a little bit easier for the rest of the app by importing the useContext hook and writing a custom hook that will make this context available.\n\n[04:12] Below the email provider, I'll create an exported function called useEmail. It'll return the value from useContext that we get from parsing in the email context. This is going to be the value object that we parsed into the provider.\n\n[04:26] We can go back over to route and then we can drill into where we want to display the emails inside main page and into message list. We'll import that useEmail hook that we made in emailContext and then we can call that inside our message list component.\n\n[04:41] That's going to return an object with emails, loading, and error, and we'll also want setCurrentEmail. Based on the state here, we need to decide what to render, because what we have right now should only be showing up when the inbox is empty.\n\n[04:57] One way to do this is to write an expression using the ternary operator. We can check if there was an error, then we'll display an error message. Otherwise, if loading was true, then we'll display a loading message. If neither error nor loading is true, but emails.length is 0then we'll display this mailbox as empty message.\n\n[05:22] Finally, if none of that is true, that means we have emails, and we can render out a list. Inside that list, we can map over the emails from state, take each email, and render out a component called email.\n\n[05:34] We'll pass in a key with the email's ID along with the email itself. OnClick prop, that'll call setCurrentEmail with that email. Below here, I'll paste a component called email that takes those two props and displays a list item with subject and preview.\n\n[05:54] I'm not putting this in a separate file here, because this is pretty tied to message list. We don't really need to use it anywhere else in the app and it's a pretty small component. Let's make sure we close the expression here. Now we can save this and try it out. We can see we get emails.\n\n[06:09] The last feature to add is to actually implement the setCurrentEmail so it will display that current email once you click on one. To do that, we're going to go into our main page component. What we'll do is import the useEmail hook from our emailContext.\n\n[06:23] It'll change this function into one with braces and a return. We can call useEmail here and pull out the current email from the value. Now we can check. If there's an email selected, we can show that email. If there isn't one selected, we'll show the message list.\n\n[06:40] For this, I'm going to import a component called message viewer. If we look at message viewer, we can see it's using that current email along with the setter function, and it's displaying the contents of the email. If we click the back button, it's going to reset the current email to null, which will clear it out and take us back to the list.\n\n[06:58] Let's render this message viewer inside main page. We can check right here if current email is set, then we'll render message viewer, otherwise, we'll render the message list. We don't have to pass the email to message viewer, because it's using the hook to pull out the email itself.\n\n[07:14] Let's save main page. We can try this out. If we click on an email, we can see it shows up. If we click on back, we go back to the list.",
        "casting_words_order": "zeJi",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app",
        "path": "/lessons/react-use-multiple-context-providers-in-the-same-app?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-multiple-context-providers-in-the-same-app?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/wr8s6",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-use-multiple-context-providers-in-the-same-app-BkmEfgS5B/react-use-multiple-context-providers-in-the-same-app-BkmEfgS5B.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 8060928,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874267,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-multiple-context-providers-in-the-same-app/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/05-after-multiple-contexts-EmailContext?fontsize=14"
        }
      },
      {
        "id": 5366,
        "creator_id": 71775,
        "slug": "react-manage-context-state-with-the-usereducer-hook",
        "title": "Manage Context State with the useReducer Hook",
        "state": "bundled",
        "summary": "When it comes to managing state in a Context Provider component, the two options are `useState` and `useReducer`. In this lesson we'll refactor an existing EmailProvider component to use the `useReducer` hook to manage its state. ",
        "duration": 333,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Right now, this email provider is using use state to keep track of state. Let's replace this with use reducer instead. We'll import the use reducer hook. I'm going to comment out what we have so far.\n\n[00:13] Here, I'm going to call use reducer and pass in a reducer function that we'll write in a second, and our initial state as the second argument. This one object is going to contain all the pieces of state. We're going to have emails which is initialized to an empty array. We'll have loading which starts off false. We'll have error which starts off null. We'll have current email which is also null.\n\n[00:38] Use reducer is going to return an array with two elements, same as use state does. The first element is the actual state, which we can just call state. The second is the dispatch function that's going to call our producer and allow us to update the state.\n\n[00:54] Let's write the reducer. Since it doesn't need to depend on anything inside this component, we can write it outside the component. We'll call our reducer. It's going to take a state and an action. The way this works is we'll call dispatch and pass in an argument and that argument is going to come out as the action.\n\n[01:12] Let's write the reducers. Assuming the action is going to have a type property so we can switch on that type. The different types of actions we're going to handle are, begin, success, error and select email.\n\n[01:28] We're also going to have a default case that just returns the state as it is. Before we fill out these actions and decide what to return, let's go down to where we're actually going to use them so we have a little more context around how this is going to work.\n\n[01:44] Inside our effect where we're fetching emails, currently we've got all these calls to set state. Instead of those, we're going to dispatch an action. These two changes will be part of the begin action so we can dispatch an object with the type of begin.\n\n[02:00] Then when the fetch succeeds and we have some emails to set, we can dispatch the type of success. There would be an object with the type of success. We also need to pass along the emails so we can put those into the action as well and when there's an error we'll dispatch an error action.\n\n[02:19] An object with the type of error and it will pass along the error. We can remove the finally handler because all the logic is going to be centralized in this reducer, we can handle setting loading to false in both the success and error cases.\n\n[02:37] Let's fill these out. When we begin, we're going to return an object, because state is an object, and we need to return an object. We need to update this immutably. We can't just mutate state and then return it. We need to return a new object. We'll copy in everything from state using the spread operator, and then we can override properties as we need. We'll set loading to true, then we'll set error to null to reset it.\n\n[03:02] That's all we need for begin. We can write success. We're going to also return an object. We're going to copy in the state. Here, we need to set loading to false. Remember, we're also parsing in the emails into this action, so we need to incorporate those into our state.\n\n[03:19] We'll replace emails with the emails in the action. For the error case, we can return an object. We'll copy in state again, then we'll set loading to false. We'll also update the error field based on action.error. The last thing we need to do is be able to select an email.\n\n[03:40] Here, we're returning a new state, copying in all the existing state, and we'll replace current email with the one in the action. We haven't dispatched this one from anywhere yet. Let's go handle that. In the old SetState version, we had a set current email setter function that would set this directly.\n\n[04:01] That's important, because set current email was being parsed down through the value of this provider, so that consumers of this context can use that set current email function to update the email. We need to include this, but now we need to write our own. We'll write a function called set current email. It's going to take an email.\n\n[04:21] What we'll do is dispatch an action with a type of select email, then we'll parse along that email in the action. This is what's going to be handled up here in the select email case. We have our state set up, we have our reducer set up, and we have all of our setter calls replaced with dispatches.\n\n[04:41] The last thing we need to do is parse these things down through the provider. We don't have emails loading, error, and current email in scope anymore, these are all just part of state. We can copy in state. We'll also parse through the set current email function from here.\n\n[04:58] If we save this now, the app should refresh, and it works the same. When the component mounts, we dispatch type of begin. That sets loading to true and error to null. If we refresh, you can see the loading indicator there for a second.\n\n[05:13] Once the emails come back, we get success, which sets loading to false, and then inserts the emails, which is what we see here. If we click on an email, that dispatches the select email action and sets the current email. Finally, we can hit back, and that clears it out. Now we can remove this commented out useState code.",
        "casting_words_order": "zeIc",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook",
        "path": "/lessons/react-manage-context-state-with-the-usereducer-hook?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-manage-context-state-with-the-usereducer-hook?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/db4qk",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-manage-context-state-with-the-usereducer-hook-H1ij7gH5r/react-manage-context-state-with-the-usereducer-hook-H1ij7gH5r.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 8216576,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874268,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-manage-context-state-with-the-usereducer-hook/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/06-after-context-state-with-useReducer?fontsize=14"
        }
      },
      {
        "id": 5368,
        "creator_id": 71775,
        "slug": "react-use-the-useeffect-hook-to-periodically-fetch-data",
        "title": "Use the useEffect Hook to Periodically Fetch Data",
        "state": "bundled",
        "summary": "If you need to periodically poll for new data, the `useEffect` hook combined with `setInterval` can be a good way to make it work. In this lesson we'll use this combo to fetch new emails every few seconds within the EmailProvider component, and update the reducer to handle this new action.",
        "duration": 178,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We're going to add a feature to our email provider that will fetch new emails every few seconds. First, I'm going to import fetch latest emails from our API file. We need to set up a timer, which means we're going to need another effect.\n\n[00:14] We have our effect right now that fetches emails when this component first mounts. We're going to write a second effect, and we'll pass in our function. Here, we will create a timer and call setInterval. Every three seconds, we'll call a function called refresh, which we're going to write up here.\n\n[00:36] Before we do that, let's return a cleanup function from this effect. It will call clearInterval and pass in that timer. This will make sure that we don't get duplicate timers. When the component rerenders, it's going to clear out the old one and then start a new one again.\n\n[00:51] Let's write the refresh function. It won't take any arguments inside here as long as we aren't currently loading new emails. We'll call fetch latest emails. That will return a promise, so we can chain off the promise and take those new emails as long as there is at least one of them.\n\n[01:11] If email's length is greater than zero, then we'll dispatch an action with the type of add emails and pass along the emails that we just got. Our reducer is going to need to handle this action and add these emails to our list. We also only want to set up this timer when the user is already logged in.\n\n[01:32] To do that, we need access to the current user so we can import the useUser hook from our user context. Then at the top of our email provider, we can get that user by calling useUser. In our new effect down here, we'll check if that users is set before we set up this interval. We'll save now.\n\n[02:00] I'll go over to our API file and change it so our initial fetch gets fewer emails. In the fetch emails function, we're going to return fake emails, which is a list of three instead of lots of them, so we can see our list grow over time. Nothing is going to happen yet because we're not handling this action.\n\n[02:23] Let's go add this action to our reducer and then we can add our emails to the list. We'll handle the case when we get the add emails action, and we're going to return the new state that's an object. Then we'll copy in all the existing state.\n\n[02:37] We can't just push the new emails onto the existing array. This needs to be an immutable update, so we're going to replace emails with a new array that has a copy of all the existing emails from state, plus all the new ones that are going to be in action.emails. Let's save that. Now, every few seconds, we should see some new emails appear.",
        "casting_words_order": "zeIa",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data",
        "path": "/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/s1d81",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-use-the-useeffect-hook-to-periodically-fetch-data-BkKoNxS5H/react-use-the-useeffect-hook-to-periodically-fetch-data-BkKoNxS5H.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 8306688,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874269,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-the-useeffect-hook-to-periodically-fetch-data/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/07-after-fetch-emails-setInterval?fontsize=14"
        }
      },
      {
        "id": 5370,
        "creator_id": 71775,
        "slug": "react-use-react-context-to-display-notifications-e493506e",
        "title": "Use React Context to display notifications",
        "state": "bundled",
        "summary": "A common kind of “global” data is a toast or popup notification that appears in the corner of the screen when some event happens. Allowing a deeply-nested component to surface a notification using props can be painful, but Context makes it much easier. In this lesson we’ll see how to dispatch a notification from a deeply-nested component and display it at the root level.",
        "duration": 378,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We have new emails showing up every few seconds. It would be nice to display some notifications like a little popup in the right corner when new emails come in. To do that, we're going to add another new context called notifyContext.\n\n[00:15] In here, we're going to import React call a react.createContext and save that off into a variable called notifyContext. Then we'll create a component called notifyProvider that's going to handle this state for the notifications. We'll need to import useState from React. For state, we're only going to have an array of messages. We'll have a setMessages function to update it.\n\n[00:43] We'll call useState and pass in our empty array as the initial value. We'll start off with no email notifications and then we'll be able to add them later on. From this provider, we need to return that notify context.provider. Inside here, we need a wrapper div to be able to show the notifications. I'll have a div with a class of notifications-wrapper. Inside of there, we'll have an unordered list.\n\n[01:11] We're going to map over those messages from state. For each message, we'll render out a notification, passing in a key with the message's ID. The message itself is an onClose prop. It'll be called when we click the X in the corner. Here, we're going to call a removeMessages with that message.\n\n[01:36] We need to create this notification component. Then I'm going to paste that in down here. That's going to take that message and the onClose prop, it'll have a little X which is the &times in the corner, and it'll show the message text.\n\n[01:49] Then we need to write this removeMessages function. Inside the provider, we can write remove message, which is going to take a message. Then we'll call setMessages, and we're going to use the updater form.\n\n[02:03] We'll pass in a function that takes the existing messages and filters them, messages.filter. We'll call each one M. We're going to remove the ones that aren't equal to the message that was passed in.\n\n[02:17] The last function we need is a way to add messages. We're going to need to be able to pass this addMessage function down through our provider so that other parts of the app can add messages to be displayed. Let's write the add message function.\n\n[02:33] It'll take some text, and we'll call setMessages. Again, we'll pass the updater form that takes the existing messages and returns a new array with a copy of everything that we already have plus a new object to describe this message.\n\n[02:48] We're going to give this thing a random ID with math.random, and we'll set its text property equal to this value that was passed in. That's all the functionality. You've got a way to add messages and way to remove them when you click little X.\n\n[03:03] Now, we need to pass these down through our provider. We'll pass in the value prop and a variable called value, which we'll create right here. It's going to be an object with messages themselves in the addMessage function that will let other parts of the app add messages to be displayed. We won't pass down the removeMessages function since the only place we can use it is right here where we're clicking that close button.\n\n[03:31] The last thing we need in this file is a way to access this context from other components. We can either export the whole context, or we can write a custom hook. We'll make one call of useNotify. It is going to call useContext, pass in our notify context, and just return that value so that components can call useNotify and they'll have access to the messages and the addMessage function.\n\n[03:58] Let's import the useContext hook from React, export the notifyProvider, and export the useNotify hook. Now our notification system is set up. Let's open up our root component in index.js. We'll import the notifyProvider from our notifyContext file, and then we'll wrap everything with that notifyProvider.\n\n[04:27] That will give our entire app access to add notifications. We've got a typo in notifyContext on line 20. This should be an error function that takes M and checks it against the message. Our component isn't rendering anything, so to figure out why, our only change was this notifyProvider.\n\n[04:49] If we look down where we're rendering things, we're render out this div, but we're not rendering all of these contents that we need to display. To fix that, we can accept the children prop in this provider. They will render the children underneath this div.\n\n[05:10] Now we can see our inbox again. Emails are showing up, but we're still not getting notifications because we haven't called the addMessage function anywhere. Let's go to our email context. This is where we're fetching the latest emails every few seconds.\n\n[05:26] Down in this refresh function where we call fetch latest emails and we add them to the list, this would be a good place to call that notify function and make a message appear. Let's import the useNotify hook up top. We'll import useNotify from our notification context.\n\n[05:47] Then in our email provider, we can call useNotify, and that's going to return an object. One of the keys in that object is addMessage. Now this email provider has the ability to dispatch notifications. We can call addMessage right here and pass in some text. This will say how many emails arrived and pluralize that string for us. Now when new emails, come in we can see notifications showing up.",
        "casting_words_order": "zeIB",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e",
        "path": "/lessons/react-use-react-context-to-display-notifications-e493506e?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-react-context-to-display-notifications-e493506e?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/a9gh7",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-use-react-context-to-display-notifications-e0fd4689-SkPESer9B/react-use-react-context-to-display-notifications-e0fd4689-SkPESer9B.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 8347648,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874270,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-react-context-to-display-notifications-e493506e/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/08-after-notifications?fontsize=14"
        }
      },
      {
        "id": 5388,
        "creator_id": 71775,
        "slug": "react-periodically-clean-up-notifications-with-useeffect-and-setinterval",
        "title": "Periodically Clean Up Notifications with useEffect and setInterval",
        "state": "bundled",
        "summary": "The notifications dispatched by our app have to be closed manually. In this lesson, we will modify our NotificationContext to close them automatically with the help of `useEffect` and `setInterval`.",
        "duration": 166,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] We have a lot of notifications stacking up here, and you have to close them manually. If we wait long enough we're going to have tons of them on the screen. Let's modify this notification context to clean up its own notifications after some delay.\n\n[00:15] For that, I'm going to import the useEffect hook because we're going to need to do something on an interval. Inside our notify provider, somewhere before we render the content, we can call our useEffect hook and pass in a function.\n\n[00:32] We're only going to set this function up when the component mounts. We'll have a timer set up that, when this mounts, every couple of seconds, will clear out old messages.\n\n[00:42] To do that, we can create a timer and call setInterval. It's going to call a function called cleanup every two seconds. Then we're going to return the cleanup function from useEffect that will clear the previous interval. This will make sure that, when the component unmounts, this interval will be stopped.\n\n[01:04] Now we can write that cleanup function right here. We'll get the current time and store it in a variable called Now by using new date.getTime. This will give use a big number in milliseconds since 1970. Then we can update the messages by calling setMessages.\n\n[01:24] We'll pass a function here to get the existing messages and then call messages.filter. We're going to remove old ones. Inside here, for each message, we can check the current time against the time that message was added. If that's less than three seconds, we'll keep it. If it's older than three seconds, we'll get rid of it.\n\n[01:46] The only other thing we need to do is add this addedAt property to our messages because right now, they just have ID and text. They don't have any timestamp. We'll add the addedAt property, and that will be a new date.getTime. Each of them will now have a timestamp.\n\n[02:05] Now if we save, we should get some messages. It seems like we're not. I think the problem is that our interval here is running every two seconds, but our emails are being fetched every three seconds in emailContext. Since three seconds was the timer we were using for the expiration, they're showing up and then this is cleaning them up immediately.\n\n[02:31] Let's make it clean up less frequently. We'll just set this to six seconds. Now we should start to see some notifications come in and emails arrive. There's a couple. Now we can see the old notifications disappear.",
        "casting_words_order": "zeJg",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval",
        "path": "/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/4nzez",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-periodically-clean-up-notifications-with-useeffect-and-setinterval-rJAzUerqr/react-periodically-clean-up-notifications-with-useeffect-and-setinterval-rJAzUerqr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 8364032,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874271,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-periodically-clean-up-notifications-with-useeffect-and-setinterval/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/09-after-cleanup-notifications?fontsize=14"
        }
      },
      {
        "id": 5372,
        "creator_id": 71775,
        "slug": "react-create-a-wrapper-to-contain-the-providers",
        "title": "Create a Wrapper to Contain the Providers",
        "state": "bundled",
        "summary": "As the number of Providers grows, it can start to look messy to have them all wrapped around the root component. You have the option to clean this up by grouping all of the providers into one file, and in this lesson you'll learn how to do that.",
        "duration": 93,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Our root component here is wrapped with three different providers. We've got notifications, the user provider, and email provider.\n\n[00:07] As the number of providers grows, this might get a bit unwieldy. One thing we could do is combine these into a single provider. We can write a component called providers, and have it take the children prop.\n\n[00:22] Inside this component, we can just render out all of the providers and put children in place of root. Now, instead of using these three, we can just use this single providers component to wrap through component.\n\n[00:44] This works the same way. We can move this out into a separate file if we wanted. We could make a providers.js and move this function over there. Then we'll need to import React and export this function.\n\n[01:03] We're also going to need to import these providers. We can move those over from index. We'll pull in all of these and paste those right here. We don't need the use user hook. We just need the providers.\n\n[01:16] In our root component, we can clean these up and import our providers component, and then render that here. The app works the same way. We've hidden away some of this complexity in its own file.",
        "casting_words_order": "zeJc",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers",
        "path": "/lessons/react-create-a-wrapper-to-contain-the-providers?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-create-a-wrapper-to-contain-the-providers?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/5pfzk",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-create-a-wrapper-to-contain-the-providers-rymhUerqr/react-create-a-wrapper-to-contain-the-providers-rymhUerqr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 8382464,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874272,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-create-a-wrapper-to-contain-the-providers/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/10-after-wrap-providers?fontsize=14"
        }
      },
      {
        "id": 5376,
        "creator_id": 71775,
        "slug": "react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf",
        "title": "Performantly render a large list of items with React Context",
        "state": "bundled",
        "summary": "One tripping point with Context is that it will automatically re-render the subtree under a Provider whenever that Provider’s value changes, which can lead to performance problems if you aren’t careful. In this lesson you’ll learn what to watch out for, and a simple trick for avoiding unnecessary re-renders to keep your app running smoothly. You'll also learn how to use `React.memo` to optimize individual function components.",
        "duration": 615,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] Right now, the app loads three emails when it first starts up, and then it fetches new emails every three seconds. We're going to change it to fetch new emails every one second.\n\n[00:10] In our API, we're going to change that initial set of emails from fake emails to lots of emails. This is going to be 2,000 random emails. This will stress the performance of our app a little bit.\n\n[00:25] Now that we're rendering these 2,000 emails and adding three more every second or so, if I scroll, you can see when we load some more, everything gets a little bit frozen. We can dig into this performance problem if we open up the React profiler for the React dev tools.\n\n[00:45] I'll make this a little bit bigger. We can record a snapshot of what's going on in this app. Hit record, wait for a couple updates to happen, and then stop recording. Now we can see all of the renders that happened during that time.\n\n[01:00] We had seven of them. They're all pretty tall in this little window here. They're all near the top of this box. If we click on each of the renders, we can see what happened during that specific render and so we can look at this largest one and we can see message list was taking up most of the time.\n\n[01:19] That makes sense because the message list was rendering these 2,000 emails. Let's see how we can optimize this by making some changes to how we're using our context. We can also see on the console that we're getting these set interval warnings that handlers took too long.\n\n[01:36] We're going to try to fix these, too. The first thing we can look at is our message list component and that's rendering out these 2,000 some odd emails. For each one of those, it has to render this email component.\n\n[01:50] If we go over to the DevTools and click on this little gear and turn on highlight updates when components render, we can see that as we get updates, we're getting everything blinking at the same time.\n\n[02:03] All the emails are blinking and that means they're all rendering even though these haven't changed at all. There's really no reason to re-render these ones. Let's change the email component by wrapping it with React.memo.\n\n[02:20] What this is going to do is make it so that this email component will only re-render when its props change. The only trouble with this is that the email prop won't change and the ID won't change, but we're making this new function every time.\n\n[02:33] We're just going to cause this to re-render. We can optimize this by not making a new function every time and just passing down the set current email function and then modifying this onClick prop here to call onClick with the email that we have.\n\n[02:52] We're just moving this function call down here. Now, this should be able to be memoized. We can turn on our updates again. When emails arrive, you can see things are flashing, but only really the top and the whole app is flashing, but not the individual emails. That's better, but it's still pretty slow.\n\n[03:15] You drag around or try recording another snapshot, we're going to see the performance is still not that great. Let's go a little further. If we look into our root component, we've got this provider's component that's giving us the notifications, the user, and the email. We need to optimize each of these contexts.\n\n[03:36] We're going to go to the email provider, look down where we're rendering the email context provider, and passing in that value. The way context works is the provider is going to render all of its consumers or all of its, say, useContext invocations, whenever we change this value.\n\n[03:55] Anywhere that uses use email is going to re-render whenever we can supply a new value here. On line 98, where we're creating this value object, we're creating a brand new one every single time we get new emails. Every second, we're creating a new value object, which is triggering everything to re-render.\n\n[04:14] We can optimize this by memoizing this value, basically cashing it, and only recreating it when we have to. To do that, we can import the useMemo hook from react and wrap this object with a call to useMemo. UseMemo takes a function that produces a value. Inside this function, we can return our object.\n\n[04:45] The first time we call this, useMemo is going to return this new object, and so value will have this. The next time we call it, it's going to do it again. We can prevent that if we supply the second argument to useMemo.\n\n[04:58] This works similar to the argument for useEffect, where we want to say, only recompute it when certain things change. When do we want to recompute this value? We basically need to recreate it whenever state changes or set current email changes.\n\n[05:13] We can pass state here and set current email. If we look at how these two variables are being created, set current email is being set to this brand new function every time we render. That's going to cause this useMemo to recompute the value every single time, so we haven't really fixed anything here.\n\n[05:32] We need to go another step further and memoize this function, and only recreate it when some of its dependencies change. For that, there's another hook called useCallback. We'll import the useCallback hook. We can wrap our function with useCallback.\n\n[05:53] Again, we need to supply the second argument to useCallback, which tells it when to regenerate this function. This function depends on dispatch. That's it. It's getting the email as a prop. The only thing it depends on is dispatch.\n\n[06:08] The dispatch function is actually stable between renders. This is the same from the first render to the last. We don't have to worry about that at all. We can parse the empty array here, and effectively saying this callback depends on nothing. We'll only get one copy of it ever.\n\n[06:25] That solves our problem. Now we're memoizing this object. We're only going to recreate it when state changes. We need to go apply these same changes to all of our context now. Let's go over to the user provider. We'll import useMemo and useCallback.\n\n[06:43] We can wrap the value with useMemo. Then we'll parse the function. We can write the shorthand that returns the object like this. We need the second argument to tell useMemo when to compute this value. This object depends on user, login, and log out.\n\n[07:01] Again, the user isn't going to change very often, but these two functions are going to change on every single render. We need to wrap these with useCallback. Parse in our callback function as the first argument. This callback depends on set user. Similar to the dispatch function, this is only going to be created once.\n\n[07:23] This will be stable between every render. It's going to be the same function. We can parse the empty right here. We'll do the same thing for log out and parse in the empty array. Now, this context is optimized, too.\n\n[07:36] One more, we need to do notifications. Let's open up our providers. We'll go into our notify provider. We'll import useMemo and useCallback. We can wrap the functions with useCallback. We'll also wrap remove message with useCallback.\n\n[07:56] The reason they depend on nothing is because set messages is one of those setters that isn't going to change between renders. Because we've parsed the updater form here, instead of depending on this array of messages here, that means that this function is self-contained.\n\n[08:14] It's going receive the value that it needs to work on. It doesn't need to depend on anything in the surrounding scope. We can parse the empty array here, which makes these easier to optimize. The last one we need to do is wrap the value in a useMemo.\n\n[08:30] We'll pass the function that returns this object. The second argument is going to be messages and add message. That's all of our contexts optimized. Now, if we go and look at the console, we can see we're not getting those warnings anymore about set intervals taking too long, which means that things are probably a bit snappier.\n\n[08:55] We can still try dragging around and see how it does. While it's not completely perfect, it's a lot better than it was. We can go over to our profiler tab, click record, wait for a couple of these email updates to happen, and hit stop.\n\n[09:12] Now you can see that when the emails come in, we do need to re-render quite a bit of stuff. These renders take longer. The renders in between where the notifications are being cleaned up, we don't need to render as much, because we only need to re-render this small list of notifications, and we can leave the rest of the app alone.\n\n[09:33] To recap what we've done, the context providers take a value. They're going to re-render their consumers or their useContext hooks every time this value changes. The way we'd written it, we were parsing in new values every single time, causing the whole app to re-render when anything changed.\n\n[09:52] What we've done is optimized this value in all of the context by using useMemo to generate that value only when certain things change. This is a recursive process. We have to go through all of these things and make sure these are optimized.\n\n[10:08] We've gone and wrapped the functions with useCallback so that these functions will only be recreated once as well.",
        "casting_words_order": "zeJB",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf",
        "path": "/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/q7zew",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-performantly-render-a-large-list-of-items-with-react-context-fd5ce032-rJqbvxScr/react-performantly-render-a-large-list-of-items-with-react-context-fd5ce032-rJqbvxScr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 8386560,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874273,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-performantly-render-a-large-list-of-items-with-react-context-78f36dcf/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/11-after-optimize-performance?fontsize=14"
        }
      },
      {
        "id": 5392,
        "creator_id": 71775,
        "slug": "react-use-a-context-outside-of-its-matching-provider",
        "title": "Use a Context Outside of its Matching Provider",
        "state": "bundled",
        "summary": "You may run into a case where you have a generic component that can consume a Context, but doesn’t require that Context in order to work. On the flip side, you may want to validate that a component is always used inside a required parent Context. In this lesson we’ll see how to set a default value on a Provider and access that default in the Consumer, as well as how to validate that a Consumer is used correctly, by checking the value it receives and throwing an error if it is missing.",
        "duration": 94,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": false,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Instructor: [00:00] In this app, we have a context called color that we're using to pass around this color. Our fancy button component is using the useContext hook with that context to get the color out, and it's using it as the class name.\n\n[00:13] Down in the app component, we're rendering the fancy button once outside of any context, and then three more times. One's red, one's green, and one's blue.\n\n[00:22] If we open up the Dev tools and go to the elements tab, and drill in to look at our components here, we can see that these three have red, green, and blue as a class, and this top one has undefined as a class.\n\n[00:35] That's because this fancy button up here is not inside a context. When it calls useContext, this color is undefined. That's why it renders out undefined here. That's because we haven't passed the value into create context, so the default is undefined.\n\n[00:49] Even without a value, it does work, but if we wanted to provide a default value, we could pass one into create context. Now you can see the top button gets the default color. If we look at it in the elements inspector, we can see that it has the class black now.\n\n[01:04] You might have a different situation where it doesn't ever make sense to use context outside of its matching provider. In that case, you can check the value before using it by checking if its type is undefined. If it is, throw an error.\n\n[01:20] Now if we remove this default and we use this button outside of the provider, we'll get this error. We can fix our code by either removing the button entirely or moving it into the provider.",
        "casting_words_order": "zeLN",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider",
        "path": "/lessons/react-use-a-context-outside-of-its-matching-provider?pl=react-context-for-application-state",
        "http_url": "http://app.egghead.af:5000/lessons/react-use-a-context-outside-of-its-matching-provider?pl=react-context-for-application-state",
        "http_short_url": "http://app.egghead.af:5000/s/v4jnn",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider/next_up",
        "tag_list": [
          "free"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-use-a-context-outside-of-its-matching-provider-Syt1tVIqH/react-use-a-context-outside-of-its-matching-provider-Syt1tVIqH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": false,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
        "series_row_order": 8387584,
        "series": {
          "title": "React Context for Application State",
          "description": "In many cases, teams reach for Redux as the de facto choice for state management. But sometimes, Redux is overkill. In those cases, the React Context API might suit your needs perfectly.\n\nIn this module, we’ll build a simple email client using the React Context API to pass data throughout the app. You’ll learn how to create a context, how to pass data deeply through an app without manually passing props all over the place, and how to group related data and logic using simple wrapper components. We’ll also cover practical applications like using Context to display and manage notifications and how to maximize performance with Context.",
          "duration": 3449,
          "slug": "react-context-for-application-state",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/react-context-for-application-state",
          "http_url": "http://app.egghead.af:5000/courses/react-context-for-application-state",
          "path": "/courses/react-context-for-application-state",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/thumb/PureRectMod_6_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/full/PureRectMod_6_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/351/landscape/PureRectMod_6_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 874274,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-use-a-context-outside-of-its-matching-provider/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        },
        "code": {
          "plunker_url": "https://codesandbox.io/embed/github/dceddia/pure-react-lessons-code/tree/master/6-Context/12-after-context-default-value?fontsize=14"
        }
      }
    ],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/react-context-for-application-state/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 5,
    "resource_id": "react-context-for-application-state"
  },
  {
    "type": "playlist",
    "id": 432577,
    "title": "Async React with Suspense [WIP]",
    "description": "Suspense and Concurrent mode are fundamentally changing the way React applications can be developed. Pure React will be updated to reflect those changes!\n\nThis module will be available when Suspense and Concurrent Mode are finalized in early 2020.\n\nPurchasers of Pure React PRO will be invited to exclusive live stream events and early access as this content is developed.\n\n",
    "slug": "async-react-with-suspense-wip",
    "published": true,
    "updated_at": "2021-02-13T13:53:37.135-06:00",
    "created_at": "2019-11-05T13:56:02.136-06:00",
    "duration": null,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "Suspense and Concurrent mode are fundamentally changing the way React applications can be developed. Pure React will be updated to reflect those changes!\n\nThis module will be available when Suspense and Concurrent Mode are finalized in early 2020.\n\nPurchasers of Pure React PRO will be invited to exclusive live stream events and early access as this content is developed.\n\n",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/square_480/async-react-with-suspense_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/square_280/async-react-with-suspense_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/square_256/async-react-with-suspense_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/square_128/async-react-with-suspense_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/square_64/async-react-with-suspense_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/square_32/async-react-with-suspense_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/thumb/async-react-with-suspense_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/full/async-react-with-suspense_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/577/landscape/async-react-with-suspense_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/async-react-with-suspense-wip",
    "path": "/playlists/async-react-with-suspense-wip",
    "http_url": "http://app.egghead.af:5000/playlists/async-react-with-suspense-wip",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/async-react-with-suspense-wip/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/async-react-with-suspense-wip/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432577/users/353304/toggle_save",
    "items": [],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/async-react-with-suspense-wip/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 6,
    "resource_id": "async-react-with-suspense-wip"
  },
  {
    "type": "playlist",
    "id": 432544,
    "title": "Build a Complete React App [WIP]",
    "description": "Let's put together everything we have learned into a single, robust, real-world React app!\n\nThis module will be available when Suspense and Concurrent Mode are finalized in early 2020.\n\nPurchasers of Pure React PRO will be invited to exclusive live stream events and early access as this content is developed.",
    "slug": "build-a-complete-react-app-wip",
    "published": true,
    "updated_at": "2021-02-13T13:52:45.342-06:00",
    "created_at": "2019-11-05T13:57:01.425-06:00",
    "duration": null,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "Let's put together everything we have learned into a single, robust, real-world React app!\n\nThis module will be available when Suspense and Concurrent Mode are finalized in early 2020.\n\nPurchasers of Pure React PRO will be invited to exclusive live stream events and early access as this content is developed.",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/square_480/build-a-complete-react-app_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/square_280/build-a-complete-react-app_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/square_256/build-a-complete-react-app_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/square_128/build-a-complete-react-app_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/square_64/build-a-complete-react-app_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/square_32/build-a-complete-react-app_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/thumb/build-a-complete-react-app_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/full/build-a-complete-react-app_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/544/landscape/build-a-complete-react-app_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/build-a-complete-react-app-wip",
    "path": "/playlists/build-a-complete-react-app-wip",
    "http_url": "http://app.egghead.af:5000/playlists/build-a-complete-react-app-wip",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/build-a-complete-react-app-wip/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/build-a-complete-react-app-wip/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432544/users/353304/toggle_save",
    "items": [],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/build-a-complete-react-app-wip/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 7,
    "resource_id": "build-a-complete-react-app-wip"
  },
  {
    "type": "playlist",
    "id": 432511,
    "title": "Pure React Interviews",
    "description": "Exclusive Pure React Bonus Content",
    "slug": "pure-react-interviews",
    "published": true,
    "updated_at": "2021-02-13T13:52:51.390-06:00",
    "created_at": "2019-11-04T14:07:41.301-06:00",
    "duration": 15713,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "Exclusive Pure React Bonus Content",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/square_480/pure-react-logo_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/square_280/pure-react-logo_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/square_256/pure-react-logo_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/square_128/pure-react-logo_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/square_64/pure-react-logo_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/square_32/pure-react-logo_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/thumb/pure-react-logo_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/full/pure-react-logo_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/511/landscape/pure-react-logo_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/pure-react-interviews",
    "path": "/playlists/pure-react-interviews",
    "http_url": "http://app.egghead.af:5000/playlists/pure-react-interviews",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/pure-react-interviews/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/pure-react-interviews/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/egghead-dave-ceddia-interviews-ali-spittel?pl=pure-react-interviews",
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432511/users/353304/toggle_save",
    "items": [
      {
        "id": 5384,
        "creator_id": 9671,
        "slug": "egghead-dave-ceddia-interviews-ali-spittel",
        "title": "Dave Ceddia interviews Ali Spittel",
        "state": "bundled",
        "summary": "As a coding bootcamp instructor, both in-person and online, Ali knows a thing or two about helping students learn most effectively. We sat down to chat about how to learn full-stack development, how to break down learning challenges into chunks, wrapping your head around functional programmming, and getting unstuck from the neverending cycle of tutorials.",
        "duration": 1683,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Dave Ceddia: [00:00] Hey, everyone. I am Dave Ceddia. Today, I get to talk to Ali Spittel. Ali, thanks for talking to me.\n\nAli Spittel: [00:05] Hey, thanks for having me.\n\nDave: [00:07] Can you tell everyone a little bit about yourself?\n\nAli: [00:09] Totally. I originally was a software engineer, well, not original, but for a while, I was a software engineer. About two and a half years ago, I transitioned over to teaching people how to code at General Assembly where I'm one of their leading instructors now and distinguished faculty members.\n\n[00:27] I just love the experience of bringing people from Hello World to professional software engineers, like magical to me. On top of that, I do a lot of blogging and speaking, and stuff like that, too.\n\nDave: [00:42] Awesome. You get the podcast,, [inaudible] Ladybug Podcast.\n\nAli: [00:45] Yes, awesome podcast. All of the types of...\n\nDave: [00:47] Lots of things going on.\n\nAli: [00:49] Just a couple.\n\nDave: [00:51] Yeah, very busy. What was your on-ramp into React in the first place?\n\nAli: [00:58] My on-ramp into React...I started React right in React in 2015 or so. Way back in the day. Probably like you, too.\n\nDave: [01:08] Early days.\n\nAli: [01:09] The create class days, right?\n\nDave: [01:11] Yeah. Good old days.\n\nAli: [01:14] I was working for a startup. They had shiny object syndrome like no other, which for a company, can maybe not be the best. For me as a developer, it was amazing because I got to learn all these things right when they were coming out like React, and View, and Redux a couple of months after it came out. All these things right from the beginning.\n\n[01:40] I was working production React then, and had a lot of fun with it. Now I get to teach people React, too.\n\nDave: [01:46] That's perfect. This feels like there's that, I don't know, funny push and pull or something, with if you find an employer does have this shiny object syndrome thing, it's sort of resume-driven development at that point. You get to see lots of cool new things.\n\nAli: [02:03] Yeah, for sure.\n\nDave: [02:05] Maybe that's good for them. I don't know. I worked at a similar place. We kept hopping around from product to product, and we built it in the new hotness and the new [inaudible] . It was a good learning experience though.\n\nAli: [02:18] Yeah, totally.\n\nDave: [02:19] How did you go from being a developer to getting into teaching?\n\nAli: [02:26] I started with guest lecturing for data science. That same startup that I was talking about, I worked in between web development and data science. I was building web apps to automate a lot of data science processes. I started off teaching data science classes on data visualization and Python, and all that.\n\n[02:46] Then they had a web development opening at General Assembly. At that point, it was web development. Now it's software engineering. They asked me to do a [inaudible] teach for it. From there, it moved on to teaching full time.\n\n[03:03] That being said, stepping back a couple of years. When I was in college, I went to a liberal arts college. They make you take you classes across majors despite having one field that you're tailored into. That's how I got into computer science in the first place, was just having an extra credit hour that I had to fill up.\n\n[03:24] At the same time, I was taking education classes. At that point, I was an education minor before I left school to become a software engineer. I had that more formal education background on as well. I went through my shadow semester at a local junior high school. There, I was able to implement the Hour of Code and got to teach a lot of middle school math and things like that.\n\n[03:52] I guess my teaching background goes back to college. From there, just getting involved in the community as well, and teaching one-off workshops and all of that that you get dragged into as well. It's so much fun. It totally exponentially grows.\n\nDave: [04:08] Yeah, it's awesome. You're teaching full time now, right?\n\nAli: [04:12] I'm back to teaching full time.\n\nDave: [04:16] Did you end up starting your blog and stuff around the same time, or was that a precursor to the teaching?\n\nAli: [04:25] I started the blog a couple of months after I started teaching. It was originally a way of just keeping my skills fresh, because I wasn't pushing out production code anymore. I was like, \"How can I keep learning new things and challenging myself despite teaching the same coding contents to people over and over again.\"\n\n[04:45] The blog blossomed from there. It ended up switching over to teaching a lot of beginner stuff as well, just because that's what I do in my day job. I really resonate with that level of programmer in some ways, just because it was difficult for me. Writing about that tends to work well for me.\n\nDave: [05:08] That's awesome. You released an eBook on this recently, right? How you learn to code.\n\nAli: [05:13] Yeah. All the things that I wish that I knew before I started programming. The advice that I wish I had been given at the beginning of my career, that programming is actually hard. Just because you have bugs doesn't mean you're failing at it. That's just part of it. It doesn't mean you're a bad programmer. Dealing with impostor syndrome.\n\n[05:37] All of those things are things that I didn't know about when I was starting out, and I wish that I had, so I wrote all those into a little mini eBook.\n\nDave: [05:47] That's awesome. Are there some common patterns that come up again and again? While you're teaching, do you see students getting stuck in certain ways? What do you think are some of the ways that people get stuck commonly, and how do you get people out of those defaults?\n\nAli: [06:04] One of the biggest things is dealing with the problem-solving process in general. It's not even like the syntax or anything like that. Especially if you have...Most of the people that I teach are career changers.\n\n[06:16] A lot of people who are coming from very formulated jobs, like if A happens, I follow this script and I help people out in this way, like customer service or something along those lines, or if they have come from a really micromanaging background where they're not given safe places to fail, it becomes really hard to break out that mindset and be able to try these things.\n\n[06:39] A lot of programming is risk taking and just writing some code, and breaking down the problems into smaller ones, and solving them all logically, but also at some point, you just have to start writing and see what happens. I think that that is something that really catches people at first.\n\n[07:01] Another thing that definitely catches people is the conceptual breakdowns of everything as well. I think that some people want to get hung up on syntax, and I try so hard to emphasize that that's not what anybody should get hung up on. They can always look that up. They can make cheat sheets for themselves.\n\n[07:23] All of this syntax stuff, there are ways to get around. The conceptual stuff is where everybody should be focused on when they're starting out, because that's what transfers from language to language, and that's what is actually important, not whether there's a curly brace, or bracket, or anything like that.\n\n[07:43] That stuff will come, and at some point will be such second nature that you don't even have to think about it. When you're starting out, focusing on the concepts is super, super important. Getting them to focus on that and work through it, for sure, is sometimes hard.\n\nDave: [08:00] Like starting with pseudo code and that kind of thing. It does seem like the problem solving and stuff. You can always learn the syntax, and you'll probably end up learning multiple languages and everything, and you get that side. Eventually it sinks in.\n\nAli: [08:12] Totally. The problem-solving and the pseudo code is something that I always try to emphasize and help people with that. Also, just breaking the problem into bite-size chunks where you can solve each problem easily enough. That can be intimidating as well.\n\nDave: [08:29] I think that's a common problem. I don't know if maybe it's more common now with web development, because there's so many different pieces of this like the backend, frontend, and even within those, there's lots of pieces. I think people try to learn everything at once.\n\n[08:46] Sometimes, a lot of tutorials present it that way. It's like you build your backend, now you build your frontend, now add Redux to it. At the end, you've got like 10 different technologies, and it's like, \"What did I learn here?\"\n\nAli: [09:00] Chris [inaudible] has this awesome talk about workforce tech developers now. It's all just about how frontend development with HTML and CSS and a bite of JavaScript, and now it's GraphQL, and making requests to the backend, and dealing with all of the performance stuff.\n\n[09:19] Frontend development is way more than it used to be, and just to be a frontend developer, you have to be essentially a full stack developer, the wild world that now is frontend development.\n\nDave: [09:32] I think it's really easy to get stuck in that. What do you suggest people do to get out of that cycle of too much stuff?\n\nAli: [09:47] I think one main piece of it is to write a learning path for yourself and stick to it. That can involve someone, but for the most part, I think the idea of learn some sort of backend framework, learning some sort of frontend framework, and then the fundamentals of HTML, CSS, JavaScript, loops, functions. Those types of things.\n\n[10:13] Learning all that is the way to go. The concepts from framework to framework transfer.\n\n[10:20] The component-based architecture, that's going to benefit you no matter if you learn React, Vue, Angular, or anything like that. Same with the back end frameworks. For the most part, you have a model, you're connecting to a database, and you have a controller, where you're passing data to the view.\n\n[10:39] Even if it's not called that, that's essentially the architecture that falls into place here. No matter what, even if you're trying to become a frontend developer, knowing enough backend to get by so that you can at least talk to backend developers, and you're speaking the same language, that is my advice.\n\n[10:58] Another thing is to not get in the cycle of tutorials. I see so many people who do 18 different tutorials on something. It's so tempting to do that, because there's so many great ones out there. They all explain things differently, so you may feel like you don't get something completely, because you're still learning something from another tutorial.\n\n[11:16] You're not actually learning anything from that. You're learning the fast fact-based knowledge, but you're not writing code yourself. Make sure that you're completing projects and getting your learning in order to build stuff in order to be able to recite it.\n\nDave: [11:35] That is a missing piece in a lot of people's path. So easy to just follow tutorials. It feels like you're learning things. Especially with video tutorials, if the instructor is good, if they're doing their job right, you come away feeling like, \"Hey, I got this. This is great.\"\n\n[11:53] Then once you go to an editor to try it out yourself, it's like, \"OK, I forget how to begin. I don't even know the first line.\"\n\nAli: [12:01] It's so tough.\n\nDave: [12:02] It's crazy how that knowledge just vanishes. I feel like breaking things down seems like an important thing, too. People trying to learn backend and front at the same time is tough. Trying to focus on one, it's probably easier.\n\n[12:22] If you focus on JavaScript first, HTML, CSS, and then learn React, then get into components and everything.\n\nAli: [12:31] Totally. What I normally do for the boot camp is...I've tried these different ways over time, but normally start out with the frontend fundamentals, so HTML, CSS, JavaScript. Do that for three weeks, which in boot camp time is forever.\n\n[12:46] [laughter]\n\nAli: [12:47] Self-teaching time, three weeks is not a lot with boot camps. From there, they do a project until we do that. From there, move on to Express on the backend. They're still in JavaScript world, but it's more backend, learning about node, and all that. From there, React. You learn that for a bit.\n\n[13:13] In between, we usually use as a project. The end, I normally teach Python. The reason why I do second language is not for the second language itself necessarily. It's showing that moving from one language to another one to know one isn't super difficult. It's something that is pretty approachable.\n\n[13:33] Again, it also brings us back to the fundamentals of learning what a loop is again, and looking at that from square one for people who may be struggling a little bit more.\n\nDave: [13:42] That's cool. Trying to map the syntax over and stuff like that, like, \"Hey, this is this is how you write it in Python, but it's the same concept.\" It's cool.\n\nAli: [13:51] Yeah. I don't know. I think it helps.\n\nDave: [13:53] I think that's good. It feels like a superpower. Once you learn a couple of languages, it gets really easy to pick up more of them I think, at least in the same family. Jumping from imperative to functional is a whole other ball of wax.\n\nAli: [14:09] That was so hard for me when I [inaudible] functional.\n\nDave: [14:12] Yeah, me too. Not like that at all.\n\nAli: [14:15] Lower level languages, too. Moving back to C or something like that, I'm like, \"Wow, this is a different world.\"\n\nDave: [14:24] I came in through C. I did that for a while before I got into the JavaScript and everything. I don't know. JavaScript is similar enough, I guess. You use all the complexity of memory management and stuff.\n\n[14:39] I feel like JavaScript is really good on-ramp to functional programming because you can do it either way. It's kind of imperative where you can write chained loops, maps and filters, and all that kind of stuff.\n\nAli: [14:57] My JavaScript library is React and Redux based on this functional paradigm. That definitely helps, too.\n\nDave: [15:05] That was what finally got me doing functional programming I think. Getting into React. Prior to that, my exposure was in school. I didn't like it at all. It was Scheme or ML or something, and it was awful.\n\nAli: [15:20] The syntax for me for functional languages still throws me. I love the concepts of functional programming. I totally incorporate them. People think of functional programming and object-oriented programming as these totally opposed paradigms, but I think that you can still combine them in ways and take the ideas of both in some ways and still have immutable data structures and all of that.\n\n[15:46] But then moving to the functional syntax was the hardest part for me. Elm is the one that I have worked with the most. I don't know if you've worked with Elm at all.\n\nDave: [16:00] Only a tiny, tiny bit.\n\nAli: [16:02] It's really cool. They've got the Redux rewind feature built into the language. You can time travel through your debugging and all that, which is awesome. But the really hard part is the syntax of it, and then also that it has changed so much over time.\n\n[16:24] The SEO hasn't kept up with the changing. You find a lot of answers that just don't work anymore. That's the other challenge, but it's a really cool language. Would recommend it to anybody who's looking for something fun to try out.\n\nDave: [16:41] I've played around with Elixir a little bit. Have you touched Elixir at all?\n\nAli: [16:44] Yeah, with Phoenix?\n\nDave: [16:45] Yeah. That's a pretty cool language. It's like Ruby-ish, but it's functional but it looks a little bit like Ruby.\n\nAli: [16:51] Yeah, that's true. It is a fun one.\n\nDave: [16:56] Less intimidating than the super...I don't know, like Haskell or...\n\nAli: [17:01] Clojure? Yeah.\n\nDave: [17:03] Yeah. One of those ends in parenthesis. Back to something we were talking about earlier -- learning front and then backend. It seems important to focus on one at a time, but like you were saying, teaching people both, that's really cool because then you get to build an entire app yourself. You have the skills to do everything.\n\nAli: [17:28] I agree with that. The ability to talk to the developers on your team about anything too, that's an underrated piece of it. Understanding how things could act in all of that. I started off in the Python world and just knew Python when I was starting out. Well, I knew C++ too, but probably was not even that professionally.\n\n[17:55] Working in that Python world for a while, it helped a lot when I was moving over to JavaScript. The fact that I had a language under my belt, but then also that I could write a backend myself if I needed to, or communicate to anybody on my team about that world, even though I was working mostly on frontend code.\n\nDave: [18:18] That's really helpful. Knowing how rest works and everything, the MVC on the backend, and that kind of stuff.\n\nAli: [18:27] Knowing how difficult or easy things are, too. That's one thing that's really hard as a developer, especially if you're working with designers, non-technical managers, or something along those lines, is like, \"Yeah, sure.\" It looks like you're moving this one piece of the page over a couple [inaudible] , but it really means that everything is going to get messed up.\n\nDave: [18:50] Some of those [inaudible] , there's some features like that, that are like, \"Yeah, this will just be a really simple number to calculate.\" Then turns out, no, that's a huge database query.\n\n[18:59] That is interesting, actually. There's designers and PMs that tend to ask for features that are difficult to implement. The front end and backend don't know how hard things are on each side. You get the same problem again.\n\nAli: [19:24] Totally.\n\nDave: [19:27] Stuck on tutorial's pain, it seems like a super hard problem to beat. What do you suggest people do to get out of that cycle?\n\nAli: [19:44] It's mostly building stuff and challenging yourself to build stuff. Do one to two tutorials on this thing that you're trying to learn, potentially take notes or find a cheat sheet. There are usually cheat sheets for everything online. I really like those.\n\n[20:00] You could make one yourself as well. Once you have that, use that as your reference. You can still google things when you're stuck, but instead of starting at zero with another tutorial, try to google individual things when you need them instead of trying to start from scratch all over again whenever you're stuck.\n\n[20:22] I forgot where I was going. Another piece of it is to focus on learning one thing at a time. Instead of trying to put everything together at once, you're focusing on that one thing. Also, if you are using tutorials, to actually write the code out yourself instead of blindly copying and pasting. Writing things from scratch is going to help it stick better.\n\n[20:54] You're going to have to actually look through every piece of the puzzle instead of looking at chunks of the puzzle all at once.\n\nDave: [21:01] I super agree with that. I've been telling people to do that for a while. It's one of the main things I say in the book, is, \"You have to type out the examples. Don't just copy and paste them. You won't learn anything.\"\n\nAli: [21:11] That's probably one of the benefits of having paper books, even for programming.\n\nDave: [21:20] That's true, actually. I hadn't really thought about that. The way people learn programming now is so different from how I learned it when I was a kid. We didn't have the Internet, really. We had dial up and it wasn't good. There weren't resources. There were no tutorials. It was books. You had to type it all out.\n\nDave: [21:43] Sometimes it was like, \"Here's this fun game in C,\" and it was 30 pages of code. Like, \"I guess, I need to type it all out.\"\n\nAli: [21:51] My first ever programming assignment, they gave us Python code on a piece of paper. We had to type whatever was on that piece of paper to the computer. It was like, \"Oh, my goodness, this is wild.\" It's my first assignment.\n\n[22:07] I didn't learn to code that, that long ago. It was early 2014. Even since then, it's changed so much. There's so many better resources out there now it's unreal.\n\nDave: [22:25] It seems like the balance of taking advantage of the resources and also knowing when to step back and put in the work yourself.\n\nAli: [22:35] Knowing your learning style is so important, too. Some people are going to learn better with somebody at the front of the classroom at least at first, some people are going to learn better from videos. I learn best from reading. The documentation's my first stop, usually, if I'm trying to learn something, but for so many people video is the way to go.\n\n[22:54] So many resources are out there in that format now. I think just knowing that about yourself and knowing what's going to stick, what's going to resonate, what piece you learn best that is just a huge piece of the puzzle to start out with.\n\nDave: [23:09] Definitely. I think one of the troubles people try to get away from tutorials and do their own projects and then the next question is like, \"What do I build?\" Like, \"Build a real hard...\" Do you have any suggestions what to build?\n\nAli: [23:29] I love building games for a lot of reasons. First one, that it's fun, but the second thing is that there's so much logic involved in building a game. Whereas if you're building a user interface like a CRADA, there's not that much logic that goes into it. It gets to be pretty much the same.\n\n[23:48] Have one of those on your portfolio. Do that at some point because that's what you're going to be building at work. If you're building a game and you're budding all this heavy logic in, that's showings so much further knowledge than you'll probably even be using at work.\n\n[24:03] Once you can do the logical extreme, you can tailor back and do something easier as well. So many different game options that you can build. You can build like a Tic-tac-toe is the fun one. I had to do that one in the school.\n\n[24:19] A Sudoku solver, that's a lot of math. I love the game Set which is pattern recognition. That's a fun one to build out. I did...there's this game Flood and you start with one pixel that's a color and then you'd have to fill out the pixel colors. That one's fun. If you remember the game 2048 from a couple of years ago?\n\nDave: [24:44] Yeah, I remember that.\n\nAli: [24:45] I was writing the code for that. That was challenging but fun.\n\nDave: [24:48] That could be pretty tricky. I remember it came out and then they were tons of clones. I remember just the volume of clones made me think like, \"This is too really easy to write.\" I think I looked into it for a little bit it was not really easy.\n\nAli: [25:01] No, because you have to think about all of the tiles are moving or not moving. Every single round, every single one either moves or not moves. Building up the algorithm for that is pretty tricky.\n\nDave: [25:13] I feel that's a fun application of algorithms. Like building [inaudible] is a terrible application, but building games is fun.\n\nAli: [25:21] Totally agree. Simon is another one that I built a lot and I use queues for that and so data structures within the wild.\n\nDave: [25:32] I started building this little zombie game a couple while ago. I didn't get super far with it. It's based on...There is some old flash game called Zombie 4 or something.\n\n[25:42] You'll hear this little colored dot and you shoot the zombies in the other dots and they all try to swarm you. It's trying to build that in the browser. It's fun because you get to play with canvas and collision detection and all kind of stuff.\n\nAli: [25:54] So much fun. That's awesome.\n\nDave: [25:57] I feel games are cool. I think also building little tools for yourself. Maybe that comes later once you know what the solutions bases, what's possible or something.\n\nAli: [26:09] I totally, totally think that if you're interested in the thing, you're going to be so much more likely to stick to working on it. Especially if your pretty first job having a sawed portfolio and stuff that is complete and is polished goes a huge way. I think doing stuff that appeals to you that would solve a problem that you have is so important.\n\n[26:36] Another piece of advice for that would be to build something that stands out, too. Like to-do lists, they're great because you have to have full credit for it and it's a pretty standard application.\n\n[26:53] I feel like almost everybody has built a to-do list at some point and so it doesn't stand out as much. I had a student who made a generative art application that every time you clicked on a button it builds a new tree.\n\nDave: [27:07] That's cool.\n\nAli: [27:08] It's like cherry tree and every time it has different branches and flowers and stuff like that. To me, that stand out so, so, so much more than a to-do-list application. It's something that I still remember a couple years after this was built. Whereas maybe something else doesn't jump off the bridge as much.\n\nDave: [27:27] I think that's important, too. You've got the curriculum and you've got the apps that you're supposed to build through a portfolio that kind of thing, but then to go outside of that a little bit. Build something fun and a few have built.\n\nAli: [27:39] Totally, totally.\n\nDave: [27:43] Thanks Ali. This has been fun. Where can people find you online?\n\nAli: [27:49] I am ASpittel on the social medias. Twitter and DEV are the ones that I use most often. Then my website is alispit.tel.\n\nDave: [28:00] Awesome. Thank you. This has been fun.\n\nAli: [28:02] Thanks.",
        "casting_words_order": "zeLV",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel",
        "url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel",
        "path": "/lessons/egghead-dave-ceddia-interviews-ali-spittel?pl=pure-react-interviews",
        "http_url": "http://app.egghead.af:5000/lessons/egghead-dave-ceddia-interviews-ali-spittel?pl=pure-react-interviews",
        "http_short_url": "http://app.egghead.af:5000/s/5gnr0",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_480/eggheadlogo.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_280/eggheadlogo.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_256/eggheadlogo.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_128/eggheadlogo.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_64/eggheadlogo.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_32/eggheadlogo.png",
        "icon_url": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1567198446/og-image-assets/eggo.svg",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-launch-ali-spittel-By9nbbI9S/scikit-learn-pure-react-launch-ali-spittel-By9nbbI9S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "tags": [],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
        "series_row_order": -8257535,
        "series": {
          "title": "Pure React Interviews",
          "description": "Exclusive Pure React Bonus Content",
          "duration": 15713,
          "slug": "pure-react-interviews",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-interviews",
          "path": "/courses/pure-react-interviews",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875306,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-ali-spittel/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5387,
        "creator_id": 9671,
        "slug": "egghead-dave-ceddia-interviews-emma-wedekind",
        "title": "Dave Ceddia interviews Emma Wedekind",
        "state": "bundled",
        "summary": "Have you wondered what it would be like to move countries for a job? Emma Wedekind did just that, moving from her home in the US to Germany. We discuss the interview process, logistics, and some good strategies for standing out in the job market -- whether you have dreams of moving abroad or not.",
        "duration": 2197,
        "plays_count": 0,
        "published_at": "2019-10-30T08:50:05.763-05:00",
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": null,
        "casting_words_order": null,
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-emma-wedekind",
        "url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-emma-wedekind",
        "path": "/lessons/egghead-dave-ceddia-interviews-emma-wedekind?pl=pure-react-interviews",
        "http_url": "http://app.egghead.af:5000/lessons/egghead-dave-ceddia-interviews-emma-wedekind?pl=pure-react-interviews",
        "http_short_url": "http://app.egghead.af:5000/s/y6fv9",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-emma-wedekind/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_480/eggheadlogo.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_280/eggheadlogo.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_256/eggheadlogo.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_128/eggheadlogo.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_64/eggheadlogo.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_32/eggheadlogo.png",
        "icon_url": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1567198446/og-image-assets/eggo.svg",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-launch-emma-wedekind-B1dnNzr5S/scikit-learn-pure-react-launch-emma-wedekind-B1dnNzr5S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-emma-wedekind/transcript",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-emma-wedekind/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "tags": [],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-emma-wedekind/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
        "series_row_order": -8060927,
        "series": {
          "title": "Pure React Interviews",
          "description": "Exclusive Pure React Bonus Content",
          "duration": 15713,
          "slug": "pure-react-interviews",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-interviews",
          "path": "/courses/pure-react-interviews",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875307,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-emma-wedekind/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-emma-wedekind/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5383,
        "creator_id": 9671,
        "slug": "egghead-dave-ceddia-interviews-kent-c-dodds",
        "title": "Dave Ceddia interviews Kent C. Dodds",
        "state": "bundled",
        "summary": "Ever feel like you *should* be testing your apps... but aren't sure where to start? Or maybe you've got some tests, but they're a mess and they break constantly? Kent and I chatted about how to fix that! We discuss how to get started testing React apps (and other frameworks too), talk about the concept of the Testing Trophy and which kinds of tests are most important to focus on and get into why 100% test coverage is not as important as some believe (plus what to do instead).",
        "duration": 2267,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Dave Ceddia: [00:00] Hey, everybody. I'm Dave Ceddia. \r\n[00:00] Today I get to talk to Kent C. \r\n[00:00] Dodds. Kent, thanks for chatting \r\n[00:00] with me.\r\nKent C. Dodds: [00:06] Yeah, thanks for having me on. \r\n[00:00] Happy to be here.\r\nDave: [00:08] Awesome. Could you tell everyone \r\n[00:00] a bit about yourself?\r\nKent: [00:12] Sure. Like you said, my name's \r\n[00:00] Kent C. Dodds. I am an Egghead \r\n[00:00] instructor. I created \r\n[00:00] testingjavascript.com, a self-\r\n[00:00] paced workshop. It's like \r\n[00:00] everything I know about testing. \r\n[00:00] Biggest thing on the Internet \r\n[00:00] about testing JavaScript. I'm \r\n[00:00] also an instructor on Frontend \r\n[00:00] Masters. I'm a full-time teacher, \r\n[00:00] educator, JavaScript engineer, \r\n[00:00] work for myself.\r\n[00:00] I like to \r\n[00:00] teach people JavaScripts, teach \r\n[00:00] a lot of React, dabble a bit in \r\n[00:00] Babel and ESLint, like AST-type \r\n[00:00] stuff, and a lot of open source \r\n[00:00] stuff around testing, React, \r\n[00:00] JavaScript, and Node. Just all \r\n[00:00] over the place there.\r\nDave: [01:03] Awesome. You seem to be very \r\n[00:00] prolific with writing, and \r\n[00:00] courses, and open source. Looks \r\n[00:00] like a ton of stuff.\r\nKent: [01:13] I do a fair amount, yeah.\r\n[01:16] [laughter]\r\nKent: [01:16] Also, I blog a lot too. I didn't \r\n[00:00] mention that. I have a weekly \r\n[00:00] blog that's got over 100 posts \r\n[00:00] on it now. I'm pretty busy.\r\n[01:29] [laughter]\r\nDave: [01:29] You're known as the expert on \r\n[00:00] JavaScript testing now, since \r\n[00:00] testingjavascript.com. I know \r\n[00:00] this because I was in React \r\n[00:00] Boston recently, and two talks \r\n[00:00] that covered testing were both \r\n[00:00] crediting testingjavascript and \r\n[00:00] testing trophy idea behind what \r\n[00:00] they were discussing.\r\n[00:00] How did \r\n[00:00] you end up here? Where did you \r\n[00:00] testing journey start? Were you \r\n[00:00] all about writing tests from day \r\n[00:00] one or did you grow into it?\r\nKent: [01:55] Testing for me, when I started \r\n[00:00] work at a company here in Utah \r\n[00:00] called Domo, I was working with \r\n[00:00] a bunch of really smart \r\n[00:00] engineers, all doing JavaScript \r\n[00:00] frontend stuff with backbone. \r\n[00:00] None of us really did much \r\n[00:00] testing at all. I was an intern \r\n[00:00] at the time.\r\n[00:00] We had one \r\n[00:00] engineer, Joe [inaudible] , who \r\n[00:00] was really into testing, and was \r\n[00:00] trying to get people to start \r\n[00:00] testing. Nobody would do it, but \r\n[00:00] I was the intern. I would do it \r\n[00:00] over I was told. Joe was like, \"\r\n[00:00] Come here. I'm going to pair \r\n[00:00] program with you and I'm going \r\n[00:00] to teach you how to do some \r\n[00:00] testing stuff.\"\r\n[00:00] That introduced \r\n[00:00] me to the idea. At the time I \r\n[00:00] was working on some side \r\n[00:00] projects, open source libraries, \r\n[00:00] and that kind of thing. I \r\n[00:00] thought, \"You know what? Every \r\n[00:00] single time I release a new \r\n[00:00] version of this library, I have \r\n[00:00] to run through a bunch of manual \r\n[00:00] steps to make sure I didn't \r\n[00:00] break anything. That's really \r\n[00:00] painful. Maybe I could use this \r\n[00:00] testing thing to automate lots \r\n[00:00] of that?\"\r\n[00:00] I dove into that and \r\n[00:00] got really hooked on how awesome \r\n[00:00] it was that I could make a \r\n[00:00] change, and I would just know \r\n[00:00] that I didn't break anything. In \r\n[00:00] particular, what I was writing \r\n[00:00] was a pure function. Albeit a \r\n[00:00] pretty complicated one with lots \r\n[00:00] of features, but because it was \r\n[00:00] a pure function, it was really \r\n[00:00] easy to test.\r\n[00:00] I saw a huge \r\n[00:00] amount of value in writing these \r\n[00:00] tests because I wouldn't break \r\n[00:00] anything as I was adding \r\n[00:00] features and fixing bugs to this \r\n[00:00] library. Ever since then, I just \r\n[00:00] decided every one of my open \r\n[00:00] source projects is going to have \r\n[00:00] code coverage. My libraries are \r\n[00:00] all going to have a hundred \r\n[00:00] percent code coverage.\r\n[00:00] That's \r\n[00:00] really how I got into testing \r\n[00:00] just in general. It kind of \r\n[00:00] became a natural thing that I do \r\n[00:00] in projects in general. It's \r\n[00:00] just testing is a really great \r\n[00:00] way to be able to know that I am \r\n[00:00] releasing something that is \r\n[00:00] going to work.\r\n[00:00] I won't have to \r\n[00:00] do some extra work, after the \r\n[00:00] fact, to fix whatever bugs I \r\n[00:00] introduced. It's been all about \r\n[00:00] confidence for me. It's worked \r\n[00:00] out really nicely.\r\nDave: [04:04] Yeah, that's awesome. I think \r\n[00:00] that's a huge thing. I think \r\n[00:00] approaching testing from the \r\n[00:00] standpoint of like, \"This is a \r\n[00:00] benefit to me. I write these \r\n[00:00] tests. Then I have this great \r\n[00:00] confidence that my code's going \r\n[00:00] to keep working.\"\r\nKent: [04:16] Yeah, exactly.\r\nDave: [04:18] It's sort of self-perpetuating \r\n[00:00] at that point. You want to write \r\n[00:00] the test because you want to \r\n[00:00] know your code is going to work. \r\n[00:00] It seems like the JavaScript \r\n[00:00] community hasn't always had \r\n[00:00] testing in its DNA. I feel like \r\n[00:00] you're sort of helping push that \r\n[00:00] forward. I think the Ruby on \r\n[00:00] Rails community has always been \r\n[00:00] about testing. Elixir is sort of \r\n[00:00] about that and everything.\r\nKent: [04:40] Yeah, they've taken it a bit to \r\n[00:00] an extreme a lot of them, like \r\n[00:00] way beyond the originators. At \r\n[00:00] DHH is like, \"Whoa, whoa, whoa, \r\n[00:00] folks. Let's back peddle a \r\n[00:00] little bit. That TDD-thing is \r\n[00:00] kind of cool, but you're going a \r\n[00:00] little bit too far with that.\"\r\n[00:00] I try to take a really pragmatic \r\n[00:00] and practical approach to \r\n[00:00] testing. I certainly don't think \r\n[00:00] that applications need 100 \r\n[00:00] percent code coverage. In fact, \r\n[00:00] I think that it's harmful to \r\n[00:00] target 100 percent code coverage \r\n[00:00] for applications.\r\n[00:00] I want to \r\n[00:00] make that distinction between \r\n[00:00] myself and a lot of other \r\n[00:00] testers who I feel like they \r\n[00:00] give some of the testing \r\n[00:00] community a bad reputation, \r\n[00:00] because it's like testing or \r\n[00:00] you're a terrible engineer. I \r\n[00:00] absolutely don't feel that way.\r\n[00:00] I have maybe some unique \r\n[00:00] perspectives around testing, but \r\n[00:00] I feel like it's less dogmatic \r\n[00:00] and more pragmatic.\r\nDave: [05:44] I think that's a really good \r\n[00:00] attitude, a really healthy \r\n[00:00] attitude to have towards it. \r\n[00:00] It's easy to feel like it has to \r\n[00:00] be all or nothing, or if you're \r\n[00:00] not testing, you're terrible, or \r\n[00:00] whatever. That was definitely \r\n[00:00] the unspoken thing in the Rails \r\n[00:00] community. Felt like if you're \r\n[00:00] not testing, what are you doing?\r\n[00:00] I think it's easy to feel that \r\n[00:00] way, though. There's a balance \r\n[00:00] between nobody's testing, or \r\n[00:00] everybody's testing, and you \r\n[00:00] feel like you have to. You \r\n[00:00] mentioned 100 percent code \r\n[00:00] coverage doesn't have to be the \r\n[00:00] goal. You don't have to strive \r\n[00:00] for that. Do you have a feeling \r\n[00:00] for what a minimum viable set of \r\n[00:00] tests is, where to focus testing \r\n[00:00] effort?\r\nKent: [06:30] There's a great talk that was \r\n[00:00] given at a SAR/JS as last year, \r\n[00:00] 2018, by Aaron Abramoff, not \r\n[00:00] related to Dan. He actually \r\n[00:00] works at Facebook. He works on \r\n[00:00] the JESS project as a \r\n[00:00] contributor. He gave a great \r\n[00:00] talk about testing culture at \r\n[00:00] companies. He talked a bit about \r\n[00:00] code coverage.\r\n[00:00] He shows this \r\n[00:00] graph that -- I'll try to draw \r\n[00:00] it the right way -- as your \r\n[00:00] coverage increases, the value \r\n[00:00] that it provides you decreases. \r\n[00:00] There's a really long tail. \r\n[00:00] There's somewhere on that \r\n[00:00] spectrum that's the sweet spot \r\n[00:00] for you. It really depends on \r\n[00:00] your situation and the type of \r\n[00:00] app that you're building.\r\n[00:00] If \r\n[00:00] you're writing software for \r\n[00:00] airplanes or for medical \r\n[00:00] equipment, then code coverage \r\n[00:00] there is probably a lot more \r\n[00:00] valuable, because a bug in \r\n[00:00] production means people die. \r\n[00:00] That's not great. If you're \r\n[00:00] writing software for the \r\n[00:00] marketing page or the about page \r\n[00:00] of your app or whatever, that \r\n[00:00] page doesn't need code coverage \r\n[00:00] probably at all, or maybe just a \r\n[00:00] very little bit.\r\n[00:00] Just pull up \r\n[00:00] the page to make sure that it \r\n[00:00] showed stuff. That's about as \r\n[00:00] all that you need on there. It \r\n[00:00] really just depends. That's the \r\n[00:00] problem with code coverage as a \r\n[00:00] metric in general, is that it's \r\n[00:00] a totally incomplete metric that \r\n[00:00] people seem to interpret as some \r\n[00:00] measurement for code quality and \r\n[00:00] for confidence in their app, \r\n[00:00] when it's just a metric that \r\n[00:00] says, \"These lines run during \r\n[00:00] your test.\"\r\n[00:00] That's all that it \r\n[00:00] tells you. It doesn't tell you \r\n[00:00] how much of the important parts \r\n[00:00] of your app are being covered. \r\n[00:00] The utilities file that's used \r\n[00:00] in literally every file of your \r\n[00:00] app is probably more important \r\n[00:00] than the one component that's \r\n[00:00] this one off for this page that \r\n[00:00] doesn't matter.\r\n[00:00] The lines get \r\n[00:00] counted the same in the code \r\n[00:00] coverage report. If we had such \r\n[00:00] a thing, I would like to have a \r\n[00:00] tool that measured use case \r\n[00:00] coverage, where we are saying, \"\r\n[00:00] Hey, we have X number of use \r\n[00:00] cases in our application, and \r\n[00:00] those use cases are 90 percent \r\n[00:00] covered.\"\r\n[00:00] That would give us, \r\n[00:00] not only a better metric, but \r\n[00:00] also a better way to think about \r\n[00:00] how we write our tests. It would \r\n[00:00] guide our tests better. Often, \r\n[00:00] if we're chasing code coverage, \r\n[00:00] we're going to be writing tests \r\n[00:00] that aren't very good, anyway.\r\n[00:00] It would be also nice if that \r\n[00:00] report somehow could tell us of \r\n[00:00] the top 50 most important parts \r\n[00:00] of our app, 40 of those are \r\n[00:00] covered well. Then we've got \r\n[00:00] another 50 parts of our app that \r\n[00:00] aren't important, and only five \r\n[00:00] of those are covered. We're like, \"\r\n[00:00] I better get that last 10 of the \r\n[00:00] most important things. I don't \r\n[00:00] really care about those things \r\n[00:00] that aren't important.\"\r\n[00:00] Those \r\n[00:00] are more qualitative-type things. \r\n[00:00] It's hard to measure those kinds \r\n[00:00] of things. That's what I'm \r\n[00:00] thinking when I'm writing tests. \r\n[00:00] I use the code coverage report \r\n[00:00] as not really a metric for \r\n[00:00] something that I'm targeting \r\n[00:00] necessarily. Unless it's an open \r\n[00:00] source library, then 100 percent \r\n[00:00] code coverage is easy and it's \r\n[00:00] totally worth it.\r\n[00:00] In an app, \r\n[00:00] it's not exactly a target, but \r\n[00:00] it gives me a sense of how \r\n[00:00] things are going. If you have \r\n[00:00] two percent code coverage, then \r\n[00:00] absolutely, you're not covering \r\n[00:00] the most important parts of your \r\n[00:00] app. It can help in that way.\r\n[00:00] When I'm writing my test, I'm \r\n[00:00] not thinking about the lines \r\n[00:00] that I'm testing. I'm thinking \r\n[00:00] about the use cases that I'm \r\n[00:00] developing confidence in. That \r\n[00:00] helps you write better tests, \r\n[00:00] when you're thinking about your \r\n[00:00] tests in that way.\r\nDave: [10:33] That'd be really interesting, to \r\n[00:00] have tools that take that stuff \r\n[00:00] into account, like being able to \r\n[00:00] annotate certain components or \r\n[00:00] certain files is like, \"This is \r\n[00:00] important. This is the checkout \r\n[00:00] page. Everything here has to \r\n[10:46] work.\" [laughs]\r\nKent: [10:46] The tools that we have actually \r\n[00:00] do have the ability for you to \r\n[00:00] mark certain parts or certain \r\n[00:00] files as extra important or to \r\n[00:00] give them specific coverage \r\n[00:00] thresholds. All the tools have a \r\n[00:00] way to say, \"Hey, if we drop \r\n[00:00] below 70 percent code coverage \r\n[00:00] in this project, then it would \r\n[00:00] fail to build,\" or whatever.\r\n[00:00] They also have the ability to \r\n[00:00] say, \"These files in particular, \r\n[00:00] I want to pull those out of the \r\n[00:00] main coverage report. I'm going \r\n[00:00] to put them into this other \r\n[00:00] coverage threshold bucket where \r\n[00:00] these need to be 90 percent \r\n[00:00] covered at least.\"\r\n[00:00] That's \r\n[00:00] actually something that I show \r\n[00:00] how to do in testingjavaScript.\r\n[00:00] com, is how you say, \"Hey, we've \r\n[00:00] got some files that are a little \r\n[00:00] bit more important, so we're \r\n[00:00] going to make sure that those \r\n[00:00] don't drop below a certain \r\n[00:00] threshold, because they're extra \r\n[00:00] important.\" We do have that.\r\n[00:00] It \r\n[00:00] does take a little bit of manual \r\n[00:00] tinkering to make that work. It \r\n[00:00] would be cool if we had some \r\n[00:00] tools that could somehow manage \r\n[00:00] to get that qualitative \r\n[00:00] capability. By the time that \r\n[00:00] we're capable of making tools \r\n[00:00] like that, our computers will be \r\n[00:00] programming themselves anyway.\r\n[11:59] [laughter]\r\nKent: [11:59] It won't matter.\r\nDave: [12:02] If only the computer could think \r\n[00:00] for itself. It would solve all \r\n[00:00] these problems.\r\n[12:06] [laughter]\r\nKent: [12:06] Exactly. Just the whole category \r\n[00:00] of problems goes away. We don't \r\n[12:12] [inaudible] .\r\nDave: [12:12] Then probably robot overlords or \r\n[00:00] something. I don't know. \r\n[12:14] [laughs]\r\nKent: [12:14] We're worrying about other \r\n[00:00] things.\r\n[12:22] [laughter]\r\nDave: [12:22] On testingjavaScript.com, you've \r\n[00:00] got this testing trophy that \r\n[00:00] suggests where you should focus \r\n[00:00] your efforts in terms of types \r\n[00:00] of tests. Could you talk a \r\n[00:00] little bit about how that how \r\n[00:00] that works, how you came up with \r\n[00:00] it?\r\n[00:00] It's a departure from the \r\n[00:00] old...everyone was saying about \r\n[00:00] unit tests form the bottom of \r\n[00:00] the pyramid. It's an interesting \r\n[00:00] take on that.\r\nDave: [12:50] I honestly don't remember \r\n[00:00] exactly where it came from. \r\n[00:00] Integration tests, I feel better \r\n[00:00] about those. I'd actually \r\n[00:00] already written the blank post \r\n[00:00] titled \"Write tests. Not too \r\n[00:00] many. Mostly integration,\" which \r\n[00:00] was based on a tweet from \r\n[00:00] Guillermo Rauch.\r\n[00:00] I think I \r\n[00:00] actually came up with this while \r\n[00:00] I was writing the blog post. In \r\n[00:00] any case, the testing pyramid \r\n[00:00] has unit test at the bottom, \r\n[00:00] then you have integration test \r\n[00:00] in the middle, and then end to \r\n[00:00] end at the very top.\r\n[00:00] First off, \r\n[00:00] I thought, \"You know what, that \r\n[00:00] pyramid is missing something \r\n[00:00] really important. It's missing \r\n[00:00] static testing software, like \r\n[00:00] ESLint, and static types, like \r\n[00:00] TypeScript.\" Part of the reason \r\n[00:00] that it's missing that layer is \r\n[00:00] because the testing pyramid was \r\n[00:00] created at a time where type \r\n[00:00] free languages or dynamically \r\n[00:00] typed languages were not really \r\n[00:00] as popular.\r\n[00:00] It was all Java, .\r\n[00:00] NET, or C# and whatever. Of \r\n[00:00] course, it's going to be \r\n[00:00] statically typed. What else is \r\n[00:00] there?\r\nDave: [14:06] [laughs]\r\n[14:06] [crosstalk]\r\nKent: [14:06] Now, we live in a world where \r\n[00:00] there's several programs that \r\n[00:00] are dynamically typed. There are \r\n[00:00] definitely benefits to having \r\n[00:00] static types. Especially for the \r\n[00:00] dynamically typed languages, \r\n[00:00] having a static code analysis \r\n[00:00] with the ESLint is important. \r\n[00:00] Those are absolutely testing \r\n[00:00] tools.\r\n[00:00] They eliminate a \r\n[00:00] category of bugs just like \r\n[00:00] testing does. It's important to \r\n[00:00] include it in our testing \r\n[00:00] strategy. I included that. I \r\n[00:00] shrunk the unit testing piece I \r\n[00:00] made and largened the \r\n[00:00] integration testing section. End \r\n[00:00] to end, I left about the same \r\n[00:00] and maybe made it a little bit \r\n[00:00] bigger.\r\n[00:00] When I was doing that, \r\n[00:00] I just made a graphic of this. I \r\n[00:00] looked at the graphic, and I'm \r\n[00:00] like, \"That looks like a trophy.\" \r\n[00:00] That's where the trophy came \r\n[00:00] from. I didn't think, \"Oh, it \r\n[00:00] should be the trophy.\" I just \r\n[00:00] thought, based on the shape \r\n[00:00] changes that I want to make to \r\n[00:00] the pyramid, that looks like \r\n[00:00] this trophy.\r\n[00:00] A lot of people \r\n[00:00] have tried to invert the pyramid, \r\n[00:00] and they're like, \"It's ice \r\n[00:00] cream shape,\" or, \"There's the \r\n[00:00] diamond,\" or whatever, because \r\n[00:00] they want more integration tests. \r\n[00:00] I like the trophy. It sounds \r\n[00:00] cooler. That's the basic story \r\n[00:00] of where that came from.\r\n[00:00] Actually, going back on the \r\n[00:00] pyramid, Martin Fowler has this \r\n[00:00] blog post about the pyramid. \r\n[00:00] He's the one who came up with it. \r\n[00:00] At the very bottom of that blog \r\n[00:00] post, it says, \"The pyramid was \r\n[00:00] created due to the tools that we \r\n[00:00] have at the time.\" I wish that I \r\n[00:00] could explain that that section \r\n[00:00] better.\r\n[00:00] Basically, he's said, \"\r\n[00:00] Here are the assumptions upon \r\n[00:00] which I'm creating this pyramid.\" \r\n[00:00] Many of those assumptions are no \r\n[00:00] longer true. The assumption is \r\n[00:00] that integration tests are slow \r\n[00:00] and flaky, end to end tests are \r\n[00:00] also slow, flaky, problematic, \r\n[00:00] really hard to set up, and hard \r\n[00:00] to maintain.\r\n[00:00] When there's an \r\n[00:00] error, it's really hard to \r\n[00:00] determine the root cause. That's \r\n[00:00] still true, especially for end \r\n[00:00] to end tests, but integration \r\n[00:00] tests, less so. The tools that \r\n[00:00] we have for these things have \r\n[00:00] vastly improved. Given that, and \r\n[00:00] the fact that what we're really \r\n[00:00] going for is confidence.\r\n[00:00] The \r\n[00:00] higher up the testing pyramid or \r\n[00:00] the testing trophy you go, the \r\n[00:00] more confidence you get out of \r\n[00:00] those tests that you're writing. \r\n[00:00] Given that that's what we're \r\n[00:00] going for, then you'd think, \"\r\n[00:00] Well, we should just do end to \r\n[00:00] end test. If that's where we get \r\n[00:00] all of our confidence, then yes.\"\r\n[00:00] There is a cost associated to it \r\n[00:00] as far as writing those tests, \r\n[00:00] maintaining them, identifying \r\n[00:00] the root cause. That's why we \r\n[00:00] have a spectrum. Given the tools \r\n[00:00] that we have today, integration \r\n[00:00] testing is that sweet spot where \r\n[00:00] we can have really great \r\n[00:00] confidence and also the speed \r\n[00:00] benefits, the ease of \r\n[00:00] identifying where the root cause \r\n[00:00] is.\r\n[00:00] It's basically like the \r\n[00:00] pyramid, except our tools have \r\n[00:00] enabled us to write a higher \r\n[00:00] level of tests and get the same \r\n[00:00] kinds of benefits that we \r\n[00:00] appreciated about unit tests \r\n[00:00] with more confidence. The end \r\n[00:00] result as well is that you \r\n[00:00] actually end up writing fewer \r\n[00:00] tests. The tests that you do \r\n[00:00] write are easier to maintain \r\n[00:00] through refactorings.\r\n[00:00] You're in \r\n[00:00] a much better situation just in \r\n[00:00] general. That's where the \r\n[00:00] testing trophy came from. That's \r\n[00:00] my philosophy around that, is \r\n[00:00] that when your tests resemble \r\n[00:00] the way your software is used, \r\n[00:00] then they can give you more \r\n[00:00] confidence. With that, you can \r\n[00:00] write your tests to resemble the \r\n[00:00] way your software is used a lot \r\n[00:00] better with an integration test \r\n[00:00] than you can with the unit test.\r\nDave: [18:08] That seems like the crux of \r\n[00:00] testing JavaScript, React \r\n[00:00] Testing Library, and the other \r\n[00:00] spinoff libraries from that. The \r\n[00:00] idea of, instead of testing the \r\n[00:00] internals of a component, you're \r\n[00:00] testing as the user would use it \r\n[00:00] kind of thing.\r\nKent: [18:24] Remembering in particular, that \r\n[00:00] the developer is a user. When \r\n[00:00] we're testing a component, and \r\n[00:00] maybe that component has four or \r\n[00:00] five other children components \r\n[00:00] that it's rendering to do its \r\n[00:00] job, the developer/user doesn't \r\n[00:00] know anything about those other \r\n[00:00] components.\r\n[00:00] The developer/user \r\n[00:00] just knows, \"If I rented this \r\n[00:00] component with this prop, this \r\n[00:00] callback, or whatever, that \r\n[00:00] callback's going to get called.\" \r\n[00:00] Your test is going to do that \r\n[00:00] rendering. It's going to \r\n[00:00] interact with it like it's an \r\n[00:00] end user who's clicking on \r\n[00:00] buttons.\r\n[00:00] Then it will make \r\n[00:00] assertions on those callbacks \r\n[00:00] just to say, \"Hey, if I was a \r\n[00:00] developer, then I would expect \r\n[00:00] these functions to get called.\" \r\n[00:00] That's what your test looks like, \r\n[00:00] not only in the way that it \r\n[00:00] interacts with your component, \r\n[00:00] but also in the assertions that \r\n[00:00] it makes, are very much like \r\n[00:00] your developer and end user.\r\nDave: [19:16] That makes a lot more sense from \r\n[00:00] a confidence standpoint than \r\n[00:00] just knowing that you tested \r\n[00:00] every line of the components or \r\n[00:00] all the if branches or whatever.\r\nKent: [19:25] When you do stuff like that, \r\n[00:00] you're introducing a third user. \r\n[00:00] When you're writing a React \r\n[00:00] component, you only really care \r\n[00:00] about two users. You care about \r\n[00:00] the developer that's going to be \r\n[00:00] rendering your components, so \r\n[00:00] they need to know what props \r\n[00:00] they are.\r\n[00:00] That's a contract \r\n[00:00] that you're making. If you \r\n[00:00] change the prop name, then the \r\n[00:00] developer has to go and update \r\n[00:00] that. The test can make sure \r\n[00:00] that you don't make a typo there \r\n[00:00] or you don't change something \r\n[00:00] without knowing about it.\r\n[00:00] If \r\n[00:00] you change one of those things, \r\n[00:00] then you should have to update \r\n[00:00] your test. If your test passes \r\n[00:00] when you change your prop name, \r\n[00:00] that's a problem, because you \r\n[00:00] didn't cover that that use case. \r\n[00:00] On the other side, you have your \r\n[00:00] end user who's clicking on \r\n[00:00] buttons.\r\n[00:00] You have a button that \r\n[00:00] says, \"Log in,\" and then you \r\n[00:00] change that to, \"Sign up for our \r\n[00:00] newsletter,\" that totally \r\n[00:00] changes the user's expectations. \r\n[00:00] Your test should fail when that \r\n[00:00] happens, because that that \r\n[00:00] should be an intentional thing \r\n[00:00] that changes.\r\n[00:00] The end user \r\n[00:00] should be taken into account \r\n[00:00] when you're writing your test as \r\n[00:00] well. The one user that should \r\n[00:00] not be taken into account, and \r\n[00:00] that we often do, is what I call \r\n[00:00] the test user. The test user is \r\n[00:00] interacting with your component \r\n[00:00] in a way that neither of those \r\n[00:00] other two users are doing.\r\n[00:00] We \r\n[00:00] saw this a lot with Enzyme, \r\n[00:00] where you could get the instance \r\n[00:00] of the component, start calling \r\n[00:00] methods on that component, and \r\n[00:00] stuff like that. What you do \r\n[00:00] there is you introduce a new \r\n[00:00] user, where changes to the \r\n[00:00] component will break the test.\r\n[00:00] That makes sense, because let's \r\n[00:00] say you have an accordion, you \r\n[00:00] say, \"Let's set the open index.\" \r\n[00:00] That's a method in your \r\n[00:00] component. You start testing \r\n[00:00] that method directly and then \r\n[00:00] you refactor to change that \r\n[00:00] method name, so your test breaks.\r\n[00:00] That contract with the test user \r\n[00:00] has been violated. Therefore, \r\n[00:00] you need to update your test. \r\n[00:00] That makes sense, except that we \r\n[00:00] don't care about the test user. \r\n[00:00] They're useless. They exist for \r\n[00:00] themselves. They're just dead \r\n[00:00] weight.\r\n[00:00] If you can avoid that \r\n[00:00] test user and focus on the end \r\n[00:00] user and developer user, which \r\n[00:00] are the ones that actually do \r\n[00:00] matter, and use your component \r\n[00:00] the same way that they do, then \r\n[00:00] not only do you not have to \r\n[00:00] worry about keeping your code \r\n[00:00] updated for that test user, and \r\n[00:00] maintaining that test user \r\n[00:00] contract, but you also make sure \r\n[00:00] that if you make refactorings to \r\n[00:00] your component, it should behave \r\n[00:00] the same.\r\n[00:00] It should have the \r\n[00:00] same API, just the \r\n[00:00] implementation's different, that \r\n[00:00] your refactor worked. If you \r\n[00:00] refactor it, your tests are \r\n[00:00] still passing, then you refactor \r\n[00:00] worked. You should be confident. \r\n[00:00] That's the whole idea behind \r\n[00:00] testing in general.\r\n[00:00] Writing \r\n[00:00] your tests that resemble the way \r\n[00:00] your software is used by those \r\n[00:00] two users is the most important \r\n[00:00] piece of advice that I could \r\n[00:00] give anybody about writing tests. \r\n[00:00] That's the way you should be \r\n[00:00] thinking about it when you're \r\n[00:00] starting to write your test, \r\n[00:00] you're like, \"What are the use \r\n[00:00] cases that these two users have? \r\n[00:00] How can I make sure that those \r\n[00:00] use cases don't break in the \r\n[00:00] future?\"\r\nDave: [22:35] I think that's super key. I've \r\n[00:00] heard questions about, \"How do I \r\n[00:00] test hooks components, because I \r\n[00:00] can't check their state anymore?\" \r\n[00:00] Well.\r\nKent: [22:46] Welcome to a better world.\r\nDave: [22:50] Right now, I feel better, but \r\n[00:00] it's definitely better.\r\nKent: [22:54] That's true. It's definitely an \r\n[00:00] adjustment for people who are \r\n[00:00] used to testing internal state. \r\n[00:00] The interesting thing is that \r\n[00:00] lots of other software worlds, \r\n[00:00] they have classes that they \r\n[00:00] instantiate themselves and the \r\n[00:00] framework isn't calling into the \r\n[00:00] class.\r\n[00:00] It actually does make \r\n[00:00] sense for us to test those \r\n[00:00] classes or those object \r\n[00:00] instances the way that we do. In \r\n[00:00] our world, we're not calling \r\n[00:00] componentDidMount, we're not \r\n[00:00] calling componentWillUpdate, did \r\n[00:00] update, or any of those things. \r\n[00:00] It's really the framework that's \r\n[00:00] going to be calling it.\r\n[00:00] Some \r\n[00:00] people feel uncomfortable doing \r\n[00:00] a full render of our component, \r\n[00:00] because it's like, \"Well, isn't \r\n[00:00] that like testing React?\" Yeah. \r\n[00:00] Sort of. I actually don't care \r\n[00:00] so much about whether I'm \r\n[00:00] testing the tool that I'm using. \r\n[00:00] I want to make sure it works.\r\n[00:00] If React releases a bug, then my \r\n[00:00] test could catch it. That'd be \r\n[00:00] pretty cool. I typically am not \r\n[00:00] testing things that React is \r\n[00:00] doing. I'm testing things that \r\n[00:00] my component is doing based on \r\n[00:00] what React is doing with it. I'm \r\n[00:00] not sure exactly how we got so \r\n[00:00] into testing implementation \r\n[00:00] details. I think it's mostly \r\n[00:00] because of our tools.\r\n[00:00] It's \r\n[00:00] unfortunate that tools that \r\n[00:00] encouraged testing \r\n[00:00] implementation details became so \r\n[00:00] mainstream for so long, because \r\n[00:00] beating that inertia is very \r\n[00:00] hard, but I'm working on it.\r\nDave: [24:35] I feel like maybe test-driven \r\n[00:00] development pushes people that \r\n[00:00] way, too. Because it's so \r\n[00:00] incremental, you end up being \r\n[00:00] like, \"OK, I'm going to add this \r\n[00:00] one line, then I'm going to add \r\n[00:00] this one line to my test,\" or \r\n[00:00] vice versa.\r\n[00:00] You progress that \r\n[00:00] way, where you're testing every \r\n[00:00] little detail, but you're \r\n[00:00] missing the forest for the trees.\r\nKent: [24:54] I think that makes a lot of \r\n[00:00] sense. Actually, when I'm doing \r\n[00:00] test-driven development...\r\n[00:00] Honestly, I don't do that a \r\n[00:00] whole lot. I don't do test-\r\n[00:00] driven development very often. \r\n[00:00] Because often, I don't really \r\n[00:00] know what the end result is \r\n[00:00] going to be like.\r\n[00:00] Honestly, if \r\n[00:00] I take a second to stop and \r\n[00:00] think about it, I probably do. \r\n[00:00] When I'm doing test-driven \r\n[00:00] development, I am thinking in \r\n[00:00] terms of use cases, not in terms \r\n[00:00] of features, necessarily. When \r\n[00:00] you think about use cases rather \r\n[00:00] than lines of code, then you're \r\n[00:00] way better off.\r\n[00:00] Another mistake \r\n[00:00] that I see people do that tends \r\n[00:00] to lead people to implementation \r\n[00:00] details is breaking out their \r\n[00:00] tests into two or three line \r\n[00:00] things. You have 50 tests that \r\n[00:00] each do one or two things. I \r\n[00:00] find that while there's some \r\n[00:00] value in that, because if one of \r\n[00:00] those breaks, you know exactly \r\n[00:00] what feature is broken, there's \r\n[00:00] a little bit of value there.\r\n[00:00] Our testing tools are so good \r\n[00:00] now that even if you combined \r\n[00:00] all of those things into one \r\n[00:00] test, you'd be able to really \r\n[00:00] quickly identify what thing \r\n[00:00] broke anyway. By putting the \r\n[00:00] tests into smaller bits, it's \r\n[00:00] way easier to get into testing \r\n[00:00] implementation details.\r\n[00:00] You're \r\n[00:00] not thinking about use cases \r\n[00:00] there necessarily. You're \r\n[00:00] starting to think about \r\n[00:00] implementation, which naturally \r\n[00:00] leads into testing \r\n[00:00] implementation details, leading \r\n[00:00] you to false negatives and false \r\n[00:00] positives in your tests that \r\n[00:00] make your tests less reliable \r\n[00:00] and easier to break on accident.\r\n[00:00] You introduce that test user and \r\n[00:00] then the tests exist for \r\n[00:00] themselves, which is super \r\n[00:00] annoying for anyone.\r\nDave: [26:48] It never feels fun when you're \r\n[00:00] writing a test and it feels like \r\n[00:00] you're writing the same code \r\n[00:00] again, except for [inaudible] . \r\n[00:00] Why am I writing this? I know I \r\n[00:00] already wrote it.\r\nKent: [26:57] Exactly. I've definitely seen \r\n[00:00] people, they have a utility in \r\n[00:00] this file that they're testing. \r\n[00:00] They copy that utility to their \r\n[00:00] test. They run that utility in \r\n[00:00] the test to make sure that \r\n[00:00] output's the same. It's funny, \r\n[00:00] but I've seen it. It happens \r\n[00:00] without you thinking. It happens \r\n[00:00] when you're not being \r\n[00:00] intentional about the way that \r\n[00:00] you're writing your tests.\r\n[00:00] I've \r\n[00:00] heard that sentiment a lot. Like, \"\r\n[00:00] I just feel like I'm rewriting \r\n[00:00] the same code that I just wrote \r\n[00:00] when I test.\" That's a huge red \r\n[00:00] flag for, \"Oh, you're testing \r\n[00:00] implementation details on.\"\r\nDave: [27:34] I feel like certain things, so \r\n[00:00] when I say certain things, I \r\n[00:00] mean Redux Saga, lend themselves \r\n[00:00] to that kind of [inaudible] . \r\n[00:00] It's like, \"I write these three \r\n[00:00] lines and in the test, I write \r\n[00:00] these three lines.\" Sure, it's \r\n[00:00] easy to test, but what are you \r\n[00:00] testing there? You're just \r\n[00:00] writing the same line thrice.\r\nKent: [27:52] I heard a lot of people going on \r\n[00:00] about Redux Saga, how easy it is \r\n[00:00] to test. I just go, \"That sounds \r\n[00:00] cool, \" for a long time. Finally, \r\n[00:00] I looked into it because Redux \r\n[00:00] Thunk is not easy to test.\r\nDave: [28:05] Async stuff is difficult to test.\r\nKent: [28:08] I wrote a little utility to make \r\n[00:00] it easier. Even with that, it's \r\n[00:00] not easy, so I went to Redux \r\n[00:00] Saga. I'm like, \"Oh. This is why \r\n[00:00] it's easy to test, but that is \r\n[00:00] not giving you confidence.\"\r\nDave: [28:20] It's straightforward, but it's \r\n[00:00] not very useful.\r\nKent: [28:22] Exactly. Here's the trick. Lots \r\n[00:00] of your people watching this are \r\n[00:00] probably Redux users. The trick \r\n[00:00] is you don't test Redux. You \r\n[00:00] pretend your app isn't using \r\n[00:00] Redux. You just use the \r\n[00:00] component. Somewhere in your \r\n[00:00] component, there's a dispatch \r\n[00:00] happening, there's an action \r\n[00:00] creator being called.\r\n[00:00] Whatever \r\n[00:00] button you're clicking to \r\n[00:00] dispatch that action, that's \r\n[00:00] what your test should do. You \r\n[00:00] click that button and boom! You \r\n[00:00] got action creator tested. You \r\n[00:00] got your reducer tested. You \r\n[00:00] dispatch all your middleware. \r\n[00:00] It's all getting tested because \r\n[00:00] you clicked on that button.\r\n[00:00] Now, \r\n[00:00] you can swap Redux for literally \r\n[00:00] anything else and you're set. \r\n[00:00] It's way better to pretend that \r\n[00:00] you're not using Redux. \r\n[00:00] Certainly, there are some \r\n[00:00] situations like, \"This is a \r\n[00:00] pretty big-edge case, but we \r\n[00:00] have the code for it because it \r\n[00:00] is a case. It's hard to simulate.\" \r\n[00:00] In those cases, a unit test \r\n[00:00] might make sense or like in a \r\n[00:00] reusable library, unit testing \r\n[00:00] at a granular level makes sense.\r\n[00:00] I'm telling you, integration \r\n[00:00] tests are going to get you way \r\n[00:00] better off from the perspective \r\n[00:00] of somebody who wants to be able \r\n[00:00] to build an application, ship it \r\n[00:00] with confidence, and refactor \r\n[00:00] that application as changes come, \r\n[00:00] as they always do.\r\nDave: [29:45] Integration test is like the 80/\r\n[00:00] 20 of testing. You gain most the \r\n[00:00] benefit. You don't have to test \r\n[00:00] all the middle stuff, just test \r\n[00:00] if the button works and it'll \r\n[00:00] flow through all of the other \r\n[00:00] stuff. If it's broken, then it \r\n[00:00] will break.\r\nKent: [29:58] Exactly. I have to acknowledge \r\n[00:00] the fact that if it's broken, \r\n[00:00] then it will break, and it will \r\n[00:00] take you a second or two longer \r\n[00:00] to figure out what it is that's \r\n[00:00] broken. When you're comparing \r\n[00:00] that second or two versus having \r\n[00:00] to write several hundred of \r\n[00:00] tests that you have to change \r\n[00:00] anytime you refactor anything, \r\n[00:00] you earn back that time really \r\n[00:00] fast.\r\n[00:00] It's a no-brainer. I \r\n[00:00] don't want to say it's a no-\r\n[00:00] brainer because it's like me \r\n[00:00] insinuating that people who \r\n[00:00] disagree with me have no brains. \r\n[00:00] I don't want to suggest that.\r\nDave: [30:36] It's not the intention.\r\nKent: [30:39] It makes a lot of sense to me.\r\nDave: [30:43] Yeah, I think that...I'm not \r\n[00:00] sure where I was going to go \r\n[00:00] with that.\r\n[30:51] [laughter]\r\nDave: [30:51] Testing is...\r\n[30:53] [crosstalk]\r\nKent: [30:53] Yeah, sorry. I can be a little \r\n[00:00] bit long-winded. Testing is \r\n[00:00] something that I have tons of \r\n[00:00] thoughts in here about. I \r\n[00:00] regurgitated all of my thoughts \r\n[00:00] about it in testingjavascript.\r\n[00:00] com. It's really resonated with \r\n[00:00] people which is super rewarding.\r\nDave: [31:12] I was going to ask you where \r\n[00:00] would you suggest people get \r\n[00:00] started with testing? What sorts \r\n[00:00] of tests maybe would work for \r\n[00:00] first steps into testing? I \r\n[00:00] think that there's kind of this \r\n[00:00] feeling like, \"Well, I can't \r\n[00:00] write all the tests. So why \r\n[00:00] bother?\"\r\nKent: [31:29] Yeah, definitely. If you're in a \r\n[00:00] project that doesn't have any \r\n[00:00] testing at all, then...If you're \r\n[00:00] looking for something really \r\n[00:00] small, there's kind of different \r\n[00:00] approaches.\r\n[00:00] If you're looking \r\n[00:00] for something small to just get \r\n[00:00] started, then I have one \r\n[00:00] suggestion. If you're looking \r\n[00:00] for, \"Where can I get the \r\n[00:00] biggest bang for my buck because \r\n[00:00] I don't got a lot of time for \r\n[00:00] this? I want to have something \r\n[00:00] in place so I'm confident that \r\n[00:00] I'm not totally breaking my \r\n[00:00] whole app.\"\r\n[00:00] The biggest bang \r\n[00:00] for your buck that you could do, \r\n[00:00] that would just make a big \r\n[00:00] difference, is adding one end \r\n[00:00] test. That goes through the most \r\n[00:00] important flow of your app. I \r\n[00:00] would recommend using Cypress \r\n[00:00] for that.\r\n[00:00] You just log in. You \r\n[00:00] go through add products to your \r\n[00:00] cart, whatever, go through the \r\n[00:00] whole check-out process. You can \r\n[00:00] run that in production. Now, I \r\n[00:00] don't know how much money you \r\n[00:00] have on your credit card, but \r\n[00:00] you probably wouldn't want to \r\n[00:00] use the production credit card \r\n[00:00] thing. There are various things \r\n[00:00] that you can do to subvert that.\r\n[00:00] Having just one test will make \r\n[00:00] sure that, \"OK, my compilation \r\n[00:00] is working. The app actually \r\n[00:00] loads. The app is communicating \r\n[00:00] with the back-end properly.\" All \r\n[00:00] of these things. You get tons of \r\n[00:00] value out of that one test that \r\n[00:00] you can just have run in \r\n[00:00] production every hour or \r\n[00:00] something. It wouldn't hinder \r\n[00:00] anybody else's experience in \r\n[00:00] developing the app. It could \r\n[00:00] just run on its own.\r\n[00:00] That's a \r\n[00:00] fairly simple thing that you can \r\n[00:00] do that can give you a ton of \r\n[00:00] value right from the get-go. \r\n[00:00] Then if you want to if you're \r\n[00:00] like, \"No, no, no. I've got time \r\n[00:00] for this. This is important to \r\n[00:00] me. I want to make sure we are \r\n[00:00] testing this.\" Then doing that \r\n[00:00] first actually might still be a \r\n[00:00] good idea. Getting the tooling \r\n[00:00] set up for some of this testing \r\n[00:00] is normally the biggest barrier \r\n[00:00] to getting testing going.\r\n[00:00] The \r\n[00:00] first tooling that I would set \r\n[00:00] up in a project is ESLint. I \r\n[00:00] would start introducing \r\n[00:00] TypeScript. That's a really \r\n[00:00] impactful change actually. \r\n[00:00] ESLint is pretty minimal. That \r\n[00:00] one's not a huge impact. You can \r\n[00:00] get that. I would recommend \r\n[00:00] doing that in one pull request, \r\n[00:00] just get it added. Disable a \r\n[00:00] bunch of rules. Then enable them \r\n[00:00] over time, so that you can \r\n[00:00] iterate to a cleaner code base, \r\n[00:00] whatever.\r\n[00:00] Also, I strongly \r\n[00:00] advise don't just enable rules \r\n[00:00] willy-nilly. Most of the rules \r\n[00:00] in the React plug-in are bad. I \r\n[00:00] would not enable those. What I \r\n[00:00] recommend is there's a ESLint \r\n[00:00] config for Create React app. I \r\n[00:00] think it's called eslint-config-\r\n[00:00] react-app. Turn that one on and \r\n[00:00] don't really bother with too \r\n[00:00] much more.\r\n[00:00] That one is \r\n[00:00] fantastic. Really, really good \r\n[00:00] stuff. Thoughtful rules that are \r\n[00:00] enabled in that one.\r\nDave: [34:20] Totally agree.\r\nKent: [34:23] Get ESLint in there. TypeScript, \r\n[00:00] that's a big conversation with \r\n[00:00] your team. Whole category of \r\n[00:00] bugs are gone. Prettier, that's \r\n[00:00] also a conversation with your \r\n[00:00] team. Anybody who disagrees with \r\n[00:00] you cares way too much about \r\n[00:00] code formatting. It actually is \r\n[00:00] a testing tool.\r\n[00:00] That's why I \r\n[00:00] included it, because it will \r\n[00:00] reformat your code to something \r\n[00:00] that looks funny if your code \r\n[00:00] isn't doing what you think it is. \r\n[00:00] That can really help you. It \r\n[00:00] speeds you up a lot. Get \r\n[00:00] Prettier in there.\r\n[00:00] Getting the \r\n[00:00] testing tools like Jest set up. \r\n[00:00] I think this is the heart of \r\n[00:00] what you were looking for in \r\n[00:00] this question. That first test \r\n[00:00] is going to be a really simple \r\n[00:00] unit test of a utility function \r\n[00:00] in your project. Getting the \r\n[00:00] tooling all set up so you can \r\n[00:00] run that first test is the \r\n[00:00] hardest part of the whole \r\n[00:00] process. Then it's overtime, \r\n[00:00] adding new tests.\r\n[00:00] All the \r\n[00:00] things I talked about, I show \r\n[00:00] you how to do it all in \r\n[00:00] testingjavascript.com. If you're \r\n[00:00] wanting to get into it, I assume \r\n[00:00] that you know nothing about \r\n[00:00] testing. We actually build the \r\n[00:00] Jest testing framework in the \r\n[00:00] course.\r\n[00:00] The first module, we \r\n[00:00] build Jest, albeit a very simple \r\n[00:00] version of Jest, just so that \r\n[00:00] people understand the \r\n[00:00] fundamentals of testing. We also \r\n[00:00] build Jest mocking capabilities. \r\n[00:00] That's a whole another module. \r\n[00:00] As much as we want to represent \r\n[00:00] reality, sometimes reality is \r\n[00:00] hard to test for.\r\n[00:00] I don't have \r\n[00:00] a million dollars on a credit \r\n[00:00] card that I can charge to my \r\n[00:00] account. You need to mock stuff \r\n[00:00] sometimes. I show you how to do \r\n[00:00] that. Then I have this really \r\n[00:00] big, long thing about testing \r\n[00:00] React. I've got a big thing \r\n[00:00] about testing Node, so Node \r\n[00:00] backend. Using Cypress to test \r\n[00:00] things.\r\n[00:00] Also, it's not just \r\n[00:00] React, but if you're using \r\n[00:00] Angular, Backbone, Dojo, even \r\n[00:00] Svelte, and Vue, I've got stuff. \r\n[00:00] Basically, React is an \r\n[00:00] implementation detail. React \r\n[00:00] Testing Library helps you in \r\n[00:00] testing that implementation \r\n[00:00] detail, but the bulk of your \r\n[00:00] test should look exactly the \r\n[00:00] same, regardless of what \r\n[00:00] framework you're using.\r\n[00:00] I have \r\n[00:00] a whole module that shows you, \"\r\n[00:00] Here are 10 other frameworks. \r\n[00:00] Observe the fact that the test \r\n[00:00] substance looks exactly the same \r\n[00:00] between all these frameworks.\" \r\n[00:00] There's a lot in there. To get \r\n[00:00] back to your original question, \r\n[00:00] getting that first really small \r\n[00:00] unit test of a pure function, \r\n[00:00] once you cross that finish line, \r\n[00:00] then it becomes a lot easier \r\n[00:00] from there to add more tests.\r\nDave: [37:16] Awesome. Thanks, Kent. This has \r\n[00:00] been awesome. It's covered so \r\n[00:00] much useful stuff.\r\n[37:21] [laughter]\r\nDave: [37:21] I feel like this is a mind-\r\n[00:00] blowing amount of testing \r\n[00:00] information.\r\nKent: [37:25] [laughs] Thanks for having me on, \r\n[00:00] Dave.\r\nDave: [37:27] If you're watching this and you \r\n[00:00] want to learn more about testing, \r\n[00:00] check out testingjavascript.com. \r\n[00:00] Super valuable resource. Thanks, \r\n[00:00] Kent, for being here.\r\nKent: [37:36] Thank you. Good luck on your \r\n[00:00] workshop. Viewer, I hope that \r\n[00:00] it's really helpful for you. \r\n[37:45] [laughs]\r\nDave: [37:45] Thanks. Bye.\r\nKent: [37:46] See yah.\r\n",
        "casting_words_order": "zeLT",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds",
        "url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds",
        "path": "/lessons/egghead-dave-ceddia-interviews-kent-c-dodds?pl=pure-react-interviews",
        "http_url": "http://app.egghead.af:5000/lessons/egghead-dave-ceddia-interviews-kent-c-dodds?pl=pure-react-interviews",
        "http_short_url": "http://app.egghead.af:5000/s/y7jze",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_480/eggheadlogo.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_280/eggheadlogo.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_256/eggheadlogo.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_128/eggheadlogo.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_64/eggheadlogo.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_32/eggheadlogo.png",
        "icon_url": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1567198446/og-image-assets/eggo.svg",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-launch-kent-c-dodds-S1yzbZI5H/scikit-learn-pure-react-launch-kent-c-dodds-S1yzbZI5H.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "tags": [],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
        "series_row_order": -7700479,
        "series": {
          "title": "Pure React Interviews",
          "description": "Exclusive Pure React Bonus Content",
          "duration": 15713,
          "slug": "pure-react-interviews",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-interviews",
          "path": "/courses/pure-react-interviews",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875308,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-kent-c-dodds/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5382,
        "creator_id": 9671,
        "slug": "egghead-dave-ceddia-interviews-shawn-swyx-wang",
        "title": "Dave Ceddia interviews Shawn swyx Wang",
        "state": "bundled",
        "summary": "How can you stand out as a developer, while also staying on top of the latest interesting tech? I got to chat with swyx (a.k.a Shawn Wang)\nabout how to build your personal brand as a developer, how to decide what to focus on, and how to market yourself as a developer in an authentic way. Swyx is well known for learning in public, too, and we talk a bit about how that can be an avenue for leveling up your career.",
        "duration": 2668,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Dave Ceddia: [00:00] Hey, everyone. I'm Dave Ceddia, and today I get to talk to Shawn Wang, better known as \"SWYX\" on the Internet. Shawn, thanks for joining today.\n\nShawn Wang: [00:07] Hey, everyone. Thanks for having me, Dave.\n\nDave: [00:09] Thanks for being here. Could you tell everyone a little bit about yourself, like your background, and stuff?\n\nShawn: [00:15] Sure. A quick background. Born and raised in Singapore. Came to the US for college about 10 years ago, and studied finance. Essentially had a career in finance for about six years. Burned out, almost died from stress, and eventually decided to learn to code.\n\n[00:38] I did a boot camp about two years ago and then got really, really deep into React. Now I'm here.\n\nDave: [00:49] How did you end up getting into React? What got you into React?\n\nShawn: [00:55] When you learn to code there's so many technologies. It's very confusing how to pick what to learn, because everyone thinks their thing is the best. I actually got going pretty far, and the most with Vue. It was simpler to pick up. I think the tool chain was a little bit more opinionated.\n\n[01:18] Then eventually, what I realized was that jobs are all in React. I was like, \"It doesn't matter what I prefer. It matters more about what I can get paid for.\" It was very clear that React was the dominant one.\n\n[01:37] It was never the choice like, \"Oh, maybe Vue is up and coming. Maybe it takes over React. Maybe I should just invest in the thing that's on the way up instead of the thing that's currently dominant.\"\n\n[01:48] Long story short, I tried it out and I got over the hump, whatever it was, that was holding me back. I don't even remember now. I was good enough with it. Eventually, by the time I went into the boot camp, most boot camps teach React. I don't think there's any boot camps teaching Vue.\n\n[02:09] I was doubling down on that, and got my first job out of the boot camp. That basically seals the deal, when you're paid to know and use a framework. You have no choice but to get really good at it.\n\nDave: [02:23] Yeah, it makes sense. It makes it kind of an easy choice, I guess. Maybe not easy, easy is the wrong word. But it makes it the primary choice.\n\nShawn: [02:30] It simplifies the choice because no one's using Vue yet...not no one, but not a lot of people are using Vue yet.\n\nDave: [02:37] Definitely smaller at work.\n\nShawn: [02:38] Yeah.\n\nDave: [02:41] You seem to be known for learning in public online. You're always doing cool new things. You recently rewrote your blog and spelt in Svelte and Sapper. Do you always up on the new check and play around with it? How do you make time for all of it and how do you decide which things to play around with?\n\nShawn: [03:01] I definitely don't play around with everything. I also don't want to give people the impression that this is something that everybody can do. I don't have kids. My parents half the world away. I don't have that active of a social life. This is hobby time for me. I definitely do spend a disproportionate amount of free time playing around with toys.\n\n[03:33] I also want to mention that I got started with the learning public thing way before anything I did in my current job. I work in [inaudible] as the developer DX engineer. That allows me a lot of free time to write content because that's viewed as part of my job. Right now, it is part of my job to go play with stuff.\n\n[04:03] I just want to make clear that that's not necessary to do this whole learn in public thing. In my previous job, I was a regular front-end dev, working on a design system. I was just doing talks and blog posts on nights and weekends. Trying to basically learn in public when work out some stuff.\n\n[04:25] For example, when... [laughs] We just talked about this before this call. When the [inaudible] demo came out with [inaudible] React, I stayed up all night going through the demo, annotating it. I put it out on dev two the next day. I got code review from [inaudible] . It was just a really good way of internalizing all the lessons and the points being made. Suddenly overnight, you're essentially one of the few experts.\n\n[04:59] [laughter]\n\nShawn: [05:00] Just because no one else has the time to go over it. Obviously, you lack experience in context, but you can make up for that by just talking with people as a result of learning in public, which I think is pretty cool.\n\nDave: [05:14] That's awesome. There's that quote about the best to figure out how you're wrong is to be wrong in the Internet or something. I'm butchering it, but... [laughs]\n\nShawn: [05:22] Yeah. Cunningham's Law. It absolutely is true, and in fact, the more you do this, the more you find that it actually...It doesn't happen often enough. I put myself out there. I want people to teach me, to correct me, and a lot of times, you just get silence.\n\n[05:40] You know this, so in fact, people worry about two things when it comes to learning in public, A, people worry that they don't know anything and they just get yelled at or corrected by people smarter than them, or, B, people will be like, \"Nobody reads my stuff.\" You can't have it both ways.\n\n[06:05] [laughter]\n\nShawn: [06:09] Some people will read it, some people won't, and I think the best you got to do is just learn in public for yourself, because ultimately, the one person who will read 100 percent of your stuff is you. Hopefully, if you make something useful for yourself, future you might benefit, and people who are in the same journey as you definitely will benefit.\n\n[06:31] Over time, you will just grow that audience. Soon enough, you have a different set of problems on your hand than nobody reading your stuff.\n\n[06:41] [laughter]\n\nDave: [06:43] It is funny how a lot of things seem to work that way. There's the one extreme where, \"Oh, this isn't enough\" kind of thing, like, \"Nobody's reading my stuff,\" or \"My blog post is too short,\" or whatever.\n\n[06:57] Then there's the other extreme where it's like, \"Way too many people are reading it,\" or \"I'm getting all these angry comments that I got things wrong\" or whatever. There's never a middle ground.\n\nShawn: [07:07] There's no middle ground, everyone.\n\nDave: [07:08] It seems like part of the art.\n\nShawn: [07:10] Yeah, well, that's a little bit how I guess personal branding works. I guess we're talking a little bit about that on this call. People want to believe a story. They want to either know that you're a beginner and you're just reaching out or that you're an expert. There's no middle story of \"Eh. I'm trying.\" That's where most of us are.\n\n[07:35] Yeah, I don't know what to say about that. Honestly, I guess where I'm at personally is that...and by the way, for those people who want to learn more about learning in public, I've done a couple of full talks about this on my site, on my YouTube. You can definitely go check that out.\n\n[07:55] Because there's a whole philosophy to how best to get started and what levels at which you want to choose. It definitely isn't for everyone, but I think is the fastest way to learn, period. It just so happens that it might help others. It's not an act of charity. There is a lot of self-interest going into this thing.\n\n[08:16] Anyways, so now I have the opposite problem, where I think people think I know more than I do, and so it's a struggle to constantly not let them down. I think that's the other part of the effectiveness, which is there's this inbuilt feedback loop, that once you've done a thing, people naturally ask you what's the next thing.\n\n[08:42] Eventually you're going to have to try to answer that, or have an answer to that. You do the work and then put out the next thing and the next thing. I think that's a very powerful...Sometimes you want to turn it off, even. You just want to go, \"I just want to chill out for a month or so.\"\n\n[09:01] I definitely credit that with getting access to people, getting jobs. I still get really amazing inbound jobs, just because people are aware of my interests and my work. I think a lot of it comes down to planting a flag on \"This is what I'm interested in right now.\"\n\n[09:23] Then people come inbound to you who generally agree or want to learn more. I think that's very different from a lot of what developers do, which is outbound marketing, when they want a job or when they want to get something done. They reach out not on their terms.\n\n[09:43] It's no surprise that it's usually harder going and less fulfilling or rewarding. I think if you can figure out the thing that you're really super-interested in, and just dig into that, people will generally gather around you to help out.\n\nDave: [10:01] Yeah.\n\nShawn: [10:02] I'll talk a little bit about the Sapper and Svelte thing. I actually don't spend that much time playing around new tech. I always refer to this as tracing your directed graph of influencers. Everyone has the people that they look up to, like the Dave Ceddias of the world. Then you ask yourself, who does Dave Ceddia look up to? Then you follow that. Then you trace that going back a few steps.\n\n[10:39] These are essentially the prime movers in our ecosystem. Open source doesn't just show up out of nowhere. There are people involved. They have backgrounds, they have themes, and interests. If you follow the people working in cool stuff, you generally find worthwhile stuff to work on.\n\n[11:05] That's not to say that someone without an existing reputation or record can't make something awesome. It's just there's more chance of it being noise. [laughs] I tend to be more interested in frameworks. I tend to be more interested in JavaScript rendering, speed, and JAMstack and that kind of stuff.\n\n[11:33] That seems to be what I'm also reasonably good at figuring out as well. That's why I went from React into focusing more into Gatsby. Then from Gatsby, started looking more into Svelte and Sapper. I think it also matters that I started speaking a lot more in conferences. About a year ago, I gave my first conference talk in React-ally.\n\n[12:02] You've spoken in conferences. That gets you on a temporary peerage, I'd like to call it, with other speakers even though you haven't done anything as cool as they have but you're all speakers. That familiarity is really cool, and you build that over time. The more you see these people at conferences, the more they become your friends.\n\n[12:24] I'm friends Rich Harris. There's only so much I could ignore him before I was like, \"All right, I have to try his framework. I can't keep saying I haven't tried it yet.\" That was essentially it. Then realizing that...\n\n[12:47] The performance people got through to me. For me, I used to be OK with saying as long as it's a green on my Lighthouse scores, I'm fine. I think the performance people got through in a sense that they're like, even then, even if your Lighthouse is green, if you're not just doing that much on your page, you probably shouldn't have that much JavaScript.\n\n[13:14] That's a difference of maybe a couple hundred kilobytes of JavaScript all the way down to single digits. I was like, \"Yeah, that probably makes sense.\" Lighthouse has a lot of credibility. It comes from Google and it's part of the web performance toolkit. A lot of people stop there and don't really ask the hard question about what could be better about that?\n\n[13:44] That's what really got me into Svelte. You saw the blogpost that I did about static Svelte and how I reduce my own blog from 200 KB down to 9. That's interesting.\n\n[14:00] The other thing that's cool about Svelte, I hope I don't turn people off of React now, but these are evolving stories. You should be aware of the competitor ecosystems. The thing that's cool about Svelte is that it has an inbuilt styling solution and it has inbuilt animation. It has a first-party routing, state management, and server-side and static rendering.\n\n[14:32] These are not different teams. These are all the same team, first-party. For example, that's a different story than Gatsby, which is external to React, so they can't affect any internals if they need to, or if you press with Vue. It's the same team. It's a part-time project by this guy who works at The New York Times.\n\n[14:57] What would happen if we poured a bit more juice on this thing, like give it a real go? It might be a very, very powerful framework in the future. Part of me playing around with this is having the security of I could get a React job anytime I wanted, having that ability to go, \"OK. I roughly know what I'm doing here. Let's look at the adjacency.\"\n\n[15:27] That is absolutely a privilege. It's interesting. I think it would be better for the Web. There's stuff that needs to be built in it that I could do. That's why I'm spending some time in it.\n\nDave: [15:40] That's cool. Svelte is exciting. I've played around with it a little bit and written maybe one or two posts on it so far. I'd like to get more into it. The performance was my on-ramp into Svelte too. It was my on-ramp into React because I was doing Angular 1.\n\n[15:57] Our app had gotten super slow. We're trying to figure out how can we optimize it. Around then when I played with React. I was like, \"Wait. This thing's way faster. I can cut out this whole chunk of Angular stuff and slide in React.\" It's super fast. Svelte was the same story again. It's like, \"Hey, look. It's even faster and tinier.\"\n\n[16:17] It's all fun to play with. There's something satisfying about knowing that you're starting from the smallest possible thing. Anything that you build is going to be small, but fast by a fault.\n\nShawn: [16:30] Totally. I think React still has advantages, especially in the ecosystem, but also in the runtime. These very much are all pursuing different goals. React is shipping the ultimate UI runtime that runs on any platform.\n\n[16:50] For React, the more interesting story to me is React Native. It's no secret that the React Native team is three times the size of the React team. Svelte has been spending the last couple of months working on the React Native team.\n\n[17:09] It seems like there's some point in the future where something like a React Native Web or React Native DOM becomes more of the standard React's Web offering platform. You can reuse the same code base among Web, Android, and iOS. That's definitely something no one else is doing. That seems like something worth pursuing for React, for sure.\n\nDave: [17:37] Yeah, I think so. React, even Magus right now, if you want to write code for Native and Web, the code looks different, but the concepts carried over very well. If you understand how React works, you can take the ideas and one-way data flow, JSX, and props and state, and go build a React Native app.\n\n[17:57] You're suddenly a Native [inaudible] using the same skills. That's super powerful.\n\nShawn: [18:02] The marketing tagline is \"Learn once, write everywhere.\" That's supposed to be better than the old paradigms of write once, run anywhere.\n\nDave: [18:11] Like the Java. Java's prophecy didn't quite play out. [laughs]\n\nShawn: [18:17] My hot take is what we actually want is still write once, run anywhere. That's why we emphasize code reuse a lot in React data projects, but whatever floats your boat, whatever suits your application needs.\n\n[18:33] Don't necessarily get too hung up on labels. The emerging story that React is trying to push, especially in terms of mobile web, is going to be the dominant story for React over the next two, three years.\n\n[18:48] For everyone who hasn't checked it out, check out Rick Hanlon's talk at React Finland talking about the untouchable web and mentioning how a lot of the way that browser interactions for web apps on mobile are done are quite bad [laughs] in terms of defaults. They have an explicit intention to do a better job.\n\n[19:12] I think their hiring decisions recently as well has supported that thesis. If you corner them, they're not going to say anything about it, but it seems like that's the overall mega trend that's happening to React.\n\nDave: [19:28] It's interesting. We've got the Suspense and Concur mode coming at some point. That should be interesting too. That's a whole other dimension to React and performance story.\n\nShawn: [19:43] We've definitely been kept in suspense for almost two years now, but it's fine. It's going to be an improvement developer experiencing and user experience. It generally is making something super easy that would be otherwise very hard to coordinate. That's because React is growing into more of a framework.\n\n[20:07] I think everybody realizes that now. There's this old line that React is just a library. It's less and less true by the day. I think that's fine. That's what we wanted anyway. It just took us a while to get there. It took us a while to explore the right APIs. For that, React will be stable. React 16 passed the two-year-old birthday a while ago. There was no fanfare. It was just that's just how it is.\n\n[20:36] I think that's great for building a lot of great apps. There's definitely a lot more to worry about than just the framework. There's all the other stuff that we deal with as front-end developers. I'm also thankful for that, for sure.\n\nDave: [20:54] React has done a great job of keeping the slow and steady progress and keeping backwards compatibility the whole time.\n\n[21:01] I was giving a talk recently at React Boston and talking about how React has maintained this backwards compatibility the whole way through. You can still use createClass if you want. You have to install the module now, but you can still use that code.\n\nShawn: [21:18] Prop types.\n\nDave: [21:20] Yeah, prop types still work. They add these things. They don't really take them away and everything they've changed is most part additive. There was a couple of breaking changes, but it's not too bad.\n\nShawn: [21:33] Absolutely. One of my better talks this year was how you can rewrite a clone of React in 30 lines of JavaScript, and it's not a real clone. The moral of the story is that a lot of the things that people appreciate about React is, one is the language design, the usage of JSX, the usage of hooks, the composition of the components.\n\n[21:57] A lot of it is very superficial. I wish that when people learn React, they dive a little bit more into the other stuff like if React can ship the same API as React for 3 kilobytes instead of 30, then the question must be, what is the remaining 27 doing?\n\n[22:24] If people don't know, that's fine. You don't need to know that for your job. When someone asks why use React, a lot of the boring answers have to do with the external API, and the more interesting answers come to do with what does the runtime actually give you, because React, its 90 percent about the runtime.\n\n[22:45] For me, my answer is the event system and the reconciler, specifically the fiber reconciler, which gives us things like the dev tools, which with the recent filtering capabilities and with concurrent mode as well, that is all fiber.\n\n[23:02] The event system is more about cross-browser compatibility and speed. Why do we have synthetic event pooling. A lot of people don't know. They don't have to know. When people ask you about why choose React, those are the real answers, because everything else can be cloned.\n\n[23:21] I could write a wrapper on Vue that clones that API. It doesn't matter. It's more about the runtime.\n\nDave: [23:29] Yeah. The groundwork they're laying with concurrent mode and everything, or fiber leading to concurrent mode, it's interesting. React has moved the whole web development community in this direction of components. It's like everything is components now.\n\n[23:50] Even if React is not the dominant framework three years from now, something being components-based feels like it probably will be...seems like a natural way to build for the web.\n\nShawn: [23:59] Absolutely. SOL is also components as well. I think what it looks like actually is that people want single-file components. I have a personal interest. It's so weird because it's just a format. We could write...\n\nDave: [24:15] [laughs] Talk about superficial API. It's just like one file or more than one file?\n\nShawn: [24:19] Yeah, but It really is very nice. [laughs] When I write in Vue and I write in Svelte, and I can add a style there and I know that it's scoped, there is a place for everything. I don't have massive JSX pyramids of doom. It's a logic thrown everywhere. All the calculation is here. The template is here. That looks nice. It's easy to find things. There's something there.\n\nDave: [24:56] There is something, is there?\n\nShawn: [24:59] Maybe that will come to React as well. The background to this is I have worked on the Webpack loader for React single-file components. It does exist. I just haven't pushed it yet just because I don't know if people want this.\n\n[25:13] Again, I just talked about the superficiality of people. People appreciate superficial things. That's what we focus on first, because it's the easiest to see. I don't know. It's also possibly in the future of React.\n\nDave: [25:29] Interesting experiment. It seems like the sort of thing that the community would be divided on. [laughs] Some people love it and some people would not love it.\n\nShawn: [25:38] Absolutely. React gets a lot of flak because it is the most dominant framework. A lot of times, if you just substituted React for something for something else, then they would get the flak. A lot of these incidental, that's nothing to do with React but the people have faulted. React bears that cross because it is the dominant framework. [laughs] It is what it is.\n\nDave: [26:05] [laughs] Yeah, I think so. Do you feel like you...? You'll probably be using React for a while for the near future.\n\nShawn: [26:17] Actually, I don't know. I honestly don't know. Right now, where I'm at is I'm using Svelte for sites and React for apps. It is actually very easy to add React onto an existing Svelte app. If I [inaudible] bring it in. That's where I'm at right now. If I ever do have to change jobs that has a more stronger dependency on React, then I'll absolutely go there.\n\n[26:50] My concerns are not so much on framework choice right now. I'm working on broader ecosystem stuff. I spent a lot of the year this year on Node JS just in general and CLI tooling. I'm doing a workshop on Egghead on Node CLI because I was the primary dev on Netlify Dev, which is the CLI experience for Netlify. There's just a lot more to learn than just running frameworks.\n\n[27:24] I definitely feel a little bit cooped up. I helped to moderate the r/reactjs subreddit. That's an awesome place to be and learn about React, but I do see a lot of the same questions again and again. Those are valid because we're growing 10 percent every two months. There's always new people.\n\n[27:45] For me personally, the places that I grow more probably will be in the stuff I haven't done yet. I want to build more Svelte stuff. In December, I want to do my first real React Native app, which I haven't actually made anything with React Native. I've done some demos, but nothing real. I want to actually go through with that.\n\nDave: [28:08] Same for me. I've played with Expo a little bit, but I was tired of that. Nothing too serious.\n\nShawn: [28:16] All these things are entire careers. It's really hard to get deep. I think I'm in an explore phase of my dev life right now. There's explore and expand two modes. You can absolutely search between them.\n\n[28:38] In fact, with the learn in public stuff, I had the original learn in public essay. I was to write a follow-up talking about how people can learn in public. I identified three gears of learning in public. One is an explorer. You're just going a mile wide and an inch deep.\n\n[28:58] The middle phase is where most of us are. It's where you and I are. We're connecting. We're connecting existing knowledge with two other people and being educators, or we're connecting different fields like, \"Hey, what about the intersection of React and TypeScript?\"\n\n[29:15] That was me for most of last year. Now people regularly still benefit the React and TypeScript cheat sheet that I run. The final phase is mining. I still worry about that name because...Basically you're digging deep and you're doing things that no one else has done.\n\n[29:40] A lot of us don't spend a lot of time there. You're mostly connecting existing fields and sharing knowledge, and learning in public that way. Some of the best and untapped resources can come from just going solo and going way deeper than anyone else [inaudible] can afford to, just because you're obsessed by that problem.\n\n[30:12] You found something super valuable and you just keep digging to it. People start applauding. This I totally positive some because everyone wants you to succeed, because no one else is doing it.\n\n[30:30] It's the people like the...What's his name? Paul Henschel. He's the guy who does Spring React-Three-Fiber. He's currently the only animation guy in React. There's Matt Perry as well who does frame motion, but he's the only guy pushing the bounds on React animation. Good for him, and he's mining that. The rest of us will just try to catch and up and teach stuff or whatever.\n\n[31:00] I hope to find something to mine someday. I want to plant my flag. I want to say, \"This is my domain.\" That would be a worthwhile thing to do for me for long, long time. That's a form of learning in public, just like all the others.\n\n[31:21] We're supposed to about marketing yourself as a developer. A lot of it is planting your flag. Saying this is the thing I do. You might be a newb at it, you might be the world expert in it. People come to whoever is holding themselves out to be interested in that thing.\n\n[31:41] On your blog, when you blog about React, people come to you as a React expert, and you naturally build expertise that way. I never lie. I never misrepresent myself. To me, the only way for me to have any confidence in any of the things I do is to put myself out there, be wrong or just have my words, have my demos, have my code just run over by other people and then myself.\n\n[32:20] The sheer confidence that you get from just having screwed up before is irreplaceable. [laughs]\n\nDave: [32:30] Yeah, it is.\n\nShawn: [32:32] That's really valuable. That's the only thing I'm doing for marketing. I don't do any SEO. I don't have a YouTube channel, even though I'm thinking about it. I don't think I'm the type for YouTube. Maybe I'm just the guy on Twitter.\n\n[32:49] I'm definitely growing my blog. I do have a blog presence. I think that's a way to scale your words. [inaudible] this idea that you only have so many words in your fingers for the remainder of your life, so you should use them wisely and you should reuse them.\n\n[33:09] As a developer, you have one super power, which is you don't have to pay WordPress to host stuff. You can host things on your site for as long as you live, probably even longer. You should just do that your entire life. That should compound. I'm ashamed that it took me 30 years to figure this out, but I'm here.\n\n[33:37] [laughter]\n\nShawn: [33:38] My favorite example is Chris Koyer. When he started CSS-tricks, he probably wasn't one of the world's foremost authorities on CSS tricks. But how do you become a foremost authority on CSS tricks? You just blog about it for 15 years. You just don't have a choice but to be the world expert.\n\n[33:56] [laughter]\n\nDave: [33:58] You grow into it. There's definitely that aspect of, you put words out there that help people and that are at least right in some direction, then people will start to see you as an expert even if you don't feel like it. You put stuff out there, and people will go, \"Hey, Shawn, what about React?\" or, \"Dave, what about React?\" and like, \"They must know what they're doing.\"\n\n[34:21] [laughter]\n\nDave: [34:23] You feel like you have no idea what you're doing. [inaudible] out there.\n\nShawn: [34:27] I spent all of a month on Svelte, and now I'm starting to get requests for workshop, like doing a typical workshop. I'm like, \"No, dude. There are people who have been doing this for three years, let them do it.\" That's how marketing works. It's always about...\n\n[34:45] This is a flaw, or this is mental...I don't...There's a mental bias, there's a cognitive bias -- that's the word I'm looking for -- which is, whatever is at the tip of your tongue, you confuse that with the best.\n\n[35:01] Which is why advertising works. As long as it's the first thing you think about, or the first two or three things you think about, that's it. That's all the room you have in your head for who the expert is, what their trusted brand is. Once you're there, then people trust you and opportunities come to you that way.\n\n[35:26] The secret, as a developer, is it doesn't take a lot to get there. The vast majority of developers are what Scott -- again, Scott Hanselman -- dark matter developers, they consume code and they don't put anything out. They don't publish any open source. They're not on Twitter.\n\n[35:43] That's fine, that's a way to live. I think they struggle with marketing, though, because there's no active presence of anywhere that people can look them up. We always punch things into Google when we look them up. If you put that bit of effort out there to do the blog post, the workshop...\n\n[36:07] It doesn't have to be these traditional things, it could be cartoons. Some of my favorite examples are Lin Clarke and Julia Evans, who do cartoons. Those are superpowers that you and I don't have. They give you more reach and it's like, \"Ah, if only I could draw.\"\n\n[36:27] Then they're perceived as experts. Good for them, because they're putting themselves out there and people definitely benefit from them. It's a self-realizing thing. You put yourself out there and you eventually become the expert, whether you like it or not, from feedback, from doing it for a long time.\n\n[36:47] I think that's very organic and authentic way to do it. Honestly, I don't know any other way.\n\nDave: [36:53] I think that's the way you do it. It's not about your fancy ads you can run or whatever, you're just, consistent effort over time. It doesn't even have to be super consistent. Every now and then, blog about what you learned or something like that.\n\nShawn: [37:11] I don't even care about this as a thing for developers. I just think this is a thing that everybody should do. What is the reason that we do interviews? It's because we don't know that person that well. If you're going to hire you buddy who you know for 20 years, you don't have to interview them. You just know them.\n\n[37:35] The Internet lets us put ourselves out there, in a controlled way. You don't have to reveal your whole life, but to establish a track record that anyone can look up and say, \"Yeah, this is stuff they worked on before. This is how they behave, especially asynchronously.\"\n\n[37:56] I think working asynchronously with people on GitHub and open source is the only reference I need for assessing whether I can work with you remotely. If you want a remote job, just work on GitHub.\n\n[38:11] [crosstalk]\n\nDave: [38:15] right?\n\n[38:16] [laughter]\n\nShawn: [38:16] I pitch this as if you do this, you never have to interview again. That's fairly powerful.\n\nDave: [38:25] Absolutely. That's very powerful.\n\nShawn: [38:30] That's my spiel. What are your thoughts? I don't know if you have your own marketing thoughts. You've done a lot more than I have.\n\nDave: [38:39] I agree with everything you've said. That idea of putting yourself out there and doing it consistently over time, being helpful over time just...I don't know. My whole strategy is be helpful on the Internet, and eventually that has turned into an audience. It took a while. I started four, five years ago now, but it does grow. It's like a slow snowball.\n\n[39:10] People have this misconception that there's that hockey stick moment where your career takes off. I think that can happen, but that's not how it normally happens. It's way more commonly like a couple hits a day, 10 hits a day.\n\n[39:26] Eventually, your blog traffic grows. That huge spike thing where you're like, \"Oh, I'm going to get to the top of Hacker News, then suddenly I'll be well known.\" It fades very quickly.\n\nShawn: [39:39] I was so braced for this when I did my first conference talk. I was like, \"Oh, I'm going to be famous now.\" I was so pumped about it. For six months, in my Twitter bio, I was like, \"React Rally speaker,\" and then my regular job. [laughs]\n\n[39:56] Then it just came and went and it was no big deal. I think I did an OK job, but it was definitely like, \"Yes, first talk done. You can speak at conferences now.\" But then also you just have to keep going, and again and again.\n\n[40:15] I like that actually, because I think that...I always tell this to people. Your first talk is going to suck. Your first blogpost, your first project is going to suck.\n\nDave: [40:24] That's fine. So is everything.\n\nShawn: [40:25] Do you want less people to see you sucking [inaudible] more time to just work on your craft with the skin in the game. Eventually, you'll get good somewhere. Then people will see you more then. [inaudible] .\n\nDave: [40:39] Exactly works out that way. You have no audience and you're publishing things that are super great. By the time you have an audience, they'll be a lot better. The flipside to that is once you have it an audience...Some people think like, \"Gee, if only I had a few thousand Twitter followers from day one.\"\n\nShawn: [40:55] Oh, yeah.\n\nDave: [40:55] You don't really want that because you realize that you're just terrified to put anything out there. If you grow it slowly over time, you get used to hitting send to 100 people on an email list, and 500, and 1,000. You slowly build up the mental fortitude or whatever to send out those emails and deal with the replies and all that kind of stuff. That's another skill that's learned over time.\n\nShawn: [41:23] Learning your public also is a...This isn't on our list of things to discuss but I also want to get this out there that a lot of people ask for mentors like, \"Will you be my mentor?\" It's like a job description or something. I don't think it works well that way because it's so open-ended. It is a job that you're not paying for.\n\n[41:43] It's just, you don't have enough money to pay for some of these people. Mentorship's available when you work with people on the stuff that they care about, and they just naturally want to help you for free. That's just how it's always worked. That's how it will work.\n\n[42:04] Obviously, we always need more mentors. Mentors can help especially with people who are underrepresented and have more barriers in getting started. Rather than a formal mentorship program, I like engaging on things that they want.\n\n[42:24] I don't care who you look up to, all of them have something that they want done that they don't have time for. All you got to do is raise your hand. Most people don't.\n\n[42:33] [laughter]\n\nShawn: [42:35] That's it. If you want line by line code review on your code, go contribute to React. There has only been, what, a couple of hundred people that have done that ever?\n\nDave: [42:48] Yeah, there is less competition than you think for these things. People aren't out there clamoring to contribute.\n\nShawn: [42:57] Totally. Mentorship is like, I don't know, it's not marketing, it's more just getting free mentorship. I don't know, that's valuable. Obviously, then that also plugs you into social networks that bring more opportunities, whether it's work, or business, or just learning and social stuff.\n\n[43:22] For me, all these things are the same bucket. It's just learning your public. It just comes with it. It's a nice single philosophy to capture everything and that's what I try to do. To be clear, I don't do this every day. Right now, I actually even think I'm going through a dry spell. It's hard to keep up every day.\n\nDave: [43:44] Absolutely.\n\nShawn: [43:44] I don't want people to think that I'm a perfect model for this, but when I'm doing it, I'm at my best. It's been extremely powerful.\n\nDave: [43:59] That's awesome. Thanks, Shawn. I think we'll leave it here. Thank you so much for doing this. This has been great chatting. Where can people find you online and what you're up to?\n\nShawn: [44:08] Cool. I'm @swyx on Twitter, and 6.i0 on the web. That's mostly where I hang out. You can probably sign up for my newsletter. That basically is a monthly update of what I'm doing. That's how you keep in touch.\n\nDave: [44:23] Awesome. All right. Thanks, Shawn.\n\nShawn: [44:26] Thanks, Dave.",
        "casting_words_order": "zeLR",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang",
        "url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang",
        "path": "/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang?pl=pure-react-interviews",
        "http_url": "http://app.egghead.af:5000/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang?pl=pure-react-interviews",
        "http_short_url": "http://app.egghead.af:5000/s/jkxjs",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_480/eggheadlogo.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_280/eggheadlogo.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_256/eggheadlogo.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_128/eggheadlogo.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_64/eggheadlogo.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_32/eggheadlogo.png",
        "icon_url": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1567198446/og-image-assets/eggo.svg",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-launch-shawn-swyx-wang-rkjTxb85B/scikit-learn-pure-react-launch-shawn-swyx-wang-rkjTxb85B.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "tags": [],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
        "series_row_order": -6995967,
        "series": {
          "title": "Pure React Interviews",
          "description": "Exclusive Pure React Bonus Content",
          "duration": 15713,
          "slug": "pure-react-interviews",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-interviews",
          "path": "/courses/pure-react-interviews",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875309,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-shawn-swyx-wang/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5381,
        "creator_id": 9671,
        "slug": "egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks",
        "title": "Dave Ceddia interviews Eve Porcello and Alex Banks",
        "state": "bundled",
        "summary": "Everyone's always talking about GraphQL and how great it is, and if you haven't tried it yet, I think you might want to after watching this interview! Eve and Alex teach GraphQL & React full-time, so I sat down with them to chat about how to get started with GraphQL, how to introduce it into an existing app with a REST API (without throwing away all your existing work), and why GraphQL is such a great fit for building full-stack applications today.",
        "duration": 1476,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Dave Ceddia: [00:00] Hey everyone. I'm Dave Ceddia. \r\n[00:02] Today I get to talk to Eve \r\n[00:03] Porcello and Alex Banks. Thanks, \r\n[00:05] guys, for being here.\r\nEve Porcello: [00:07] Thanks for having us.\r\nAlex Banks: [00:08] Yeah.\r\nDave: [00:10] Could you guys tell everyone a \r\n[00:12] little bit about your \r\n[00:13] backgrounds and how you got into \r\n[00:15] React and stuff?\r\nEve: [00:17] Sure. Who wants to start? My \r\n[00:21] name is Eve Porcello. This is \r\n[00:24] Alex Banks. We run Moon Highway. \r\n[00:27] We're a curriculum development \r\n[00:29] company based in Northern \r\n[00:30] California. We basically create \r\n[00:33] materials for software engineers. \r\n[00:35] A lot of JavaScript and Node and \r\n[00:37] React and now GraphQL.\r\nAlex: [00:40] We got into React because we've \r\n[00:41] actually been teaching for a \r\n[00:42] long time. We were teaching Node.\r\n[00:44] js as well as being a part of \r\n[00:49] the on-boarding program at Yahoo. \r\n[00:51] When they killed YUI we were \r\n[00:53] like, what are we supposed to \r\n[00:54] use now? We had all these \r\n[00:55] training files.\r\nDave: [00:56] Oh, no.\r\nAlex: [00:56] All the front end was built out \r\n[00:58] of YUI and [inaudible] . They \r\n[01:00] were like, React. I had never \r\n[01:01] heard of it. Actually, when you \r\n[01:02] went to look for it you couldn't \r\n[01:03] find it on any of the graphs and \r\n[01:04] everything. It was still in \r\n[01:05] really early stages.\r\n[01:07] When I \r\n[01:07] started using it, I didn't like \r\n[01:09] it for like two hours because \r\n[01:11] didn't want to use any pre-\r\n[01:11] processors and stuff like that \r\n[01:13] in our classes. Then, it hit me \r\n[01:15] that this is going to be big. I \r\n[01:17] fell in love with it but also, \r\n[01:19] it really reminded of what we \r\n[01:21] were trying to do in web \r\n[01:22] development in the '90s with XML.\r\n[01:25] The JSX syntax and building \r\n[01:26] components and reusing the \r\n[01:29] components and everything, it \r\n[01:29] just felt like, this is what we \r\n[01:30] wanted to do and it never really \r\n[01:32] happened. I realized that this \r\n[01:34] is going to be huge and we're \r\n[01:35] all going to be building UIs \r\n[01:37] like this. We hitched our wagon \r\n[01:39] to the React train very early. \r\n[01:42] It's been a joyride ever since.\r\n[01:45] [laughter]\r\nDave: [01:45] That's awesome. That must have \r\n[01:46] been like 2013, 2014 or \r\n[01:48] something.\r\nAlex: [01:49] Yeah.\r\nDave: [01:50] React, I felt the same kind of \r\n[01:52] thing. I was initially pretty \r\n[01:54] apprehensive about it. I was \r\n[01:55] using Angular so the separation \r\n[01:58] of concerns was still a thing. I \r\n[02:02] didn't want, but like Html and \r\n[02:04] learning JavaScript, that looked \r\n[02:05] terrible.\r\n[02:08] [laughter]\r\nDave: [02:08] But then once I tried it out I \r\n[02:09] was like, oh, actually this is \r\n[02:10] great. Making components is the \r\n[02:12] way to go. It's...\r\n[02:16] [crosstalk]\r\nAlex: [02:16] have everything there too.\r\nEve: [02:17] Yeah, totally.\r\nDave: [02:19] It's great. You wrote a book \r\n[02:23] about React, right? You have, \"\r\n[02:25] Learning React.\"\r\nAlex: [02:26] Mm-hmm.\r\nEve: [02:27] That came out in 2017. Now we're \r\n[02:31] redoing pretty much all of it to \r\n[02:35] enhance it for all of the new \r\n[02:37] stuff.\r\nAlex: [02:38] We're doing a ground up rebuild \r\n[02:39] of that book. There are chapters \r\n[02:40] we literally just deleted the \r\n[02:42] whole chapter and restarted.\r\n[02:46] [laughter]\r\nDave: [02:46] It's changed a lot. I wrote my, \"\r\n[02:50] Pure React\" book in 2016 and \r\n[02:52] it's the same kind of thing. \r\n[02:53] I've updated it a couple of \r\n[02:54] times and just wholesale deleted \r\n[02:56] things.\r\n[03:01] [laughter]\r\nDave: [03:01] How did you get into GraphQL? \r\n[03:05] For somebody who hasn't heard of \r\n[03:06] GraphQL, or maybe has heard of \r\n[03:09] it but hasn't used it at all, \r\n[03:10] what is GraphQL? Why should \r\n[03:12] people be excited about it?\r\nAlex: [03:15] GraphQL is a query language for \r\n[03:16] your API. It's a new way to \r\n[03:18] think about how we actually send \r\n[03:20] and receive data between the \r\n[03:21] client and the server. I'll \r\n[03:24] answer the question. We can talk \r\n[03:25] more about GraphQL in a second, \r\n[03:26] but I'll tell you about how we \r\n[03:27] got into it because it's pretty \r\n[03:27] similar. It's really just \r\n[03:29] following the React road map.\r\n[03:31] Eventually, once we were writing \r\n[03:33] everything about React we were \r\n[03:34] like, we might want to put some \r\n[03:35] Relay stuff in this course too \r\n[03:37] because Relay's a big deal. Then \r\n[03:38] we looked at Relay and we were \r\n[03:39] like, oh no, there's a whole \r\n[03:42] other mountain of stuff here \r\n[03:44] that we need to learn.\r\n[03:45] The \r\n[03:45] first thing that we picked out \r\n[03:46] of the mountain was GraphQL. We \r\n[03:48] realized GraphQL isn't \r\n[03:49] necessarily Relay. It was \r\n[03:50] something separate. We didn't \r\n[03:51] understand that necessarily at \r\n[03:53] first, but then we were like, \r\n[03:49] we're not going to focus on \r\n[03:55] Relay at all because this \r\n[03:56] GraphQL stuff is a big enough \r\n[03:58] learning chunk. Let's just take \r\n[03:59] that on now.\r\n[04:01] In the process of \r\n[04:02] doing that, that led to \r\n[04:04] everything else. We started \r\n[04:05] using Apollo as opposed to Relay \r\n[04:07] because the learning curve on it \r\n[04:09] was a little bit easier for our \r\n[04:10] students to actually start \r\n[04:11] building full stack applications \r\n[04:13] using GraphQL.\r\nEve: [04:15] GraphQL itself is a query \r\n[04:17] language and it's also a schema \r\n[04:19] definition language. Those are \r\n[04:20] the core features that are part \r\n[04:22] of the GraphQL spec. Everything \r\n[04:24] on top of that is implementation. \r\n[04:27] If you have those fundamentals \r\n[04:29] in your hand pretty early on you \r\n[04:31] can really go in a lot of \r\n[04:33] different directions.\r\n[04:34] GraphQL \r\n[04:35] touches pretty much every role \r\n[04:37] on the team. If you have data in \r\n[04:39] your application you're going to \r\n[04:40] need to have some understanding \r\n[04:42] of GraphQL. That's what's \r\n[04:44] exciting for me because my \r\n[04:46] background is in product \r\n[04:47] management and UX design and \r\n[04:49] things like that.\r\n[04:50] If I had had \r\n[04:51] GraphQL versus having to try to \r\n[04:55] figure out how do I ping every \r\n[04:56] REST endpoint with Postman to \r\n[04:58] figure out where the data is \r\n[05:00] coming from. Where are the \r\n[05:01] fields? Those types of things. I \r\n[05:03] would have been so hooked up by \r\n[05:04] GraphQL. I really think a lot of \r\n[05:08] people can benefit from it no \r\n[05:09] matter what your job role is.\r\nAlex: [05:12] It is declarative. That's the \r\n[05:13] natural progression from React. \r\n[05:15] REST and the concept of putting \r\n[05:18] endpoints together, that worked \r\n[05:19] really well with MVC. It was \r\n[05:20] like, just go ahead and attach \r\n[05:22] your model to a REST endpoint. \r\n[05:24] Then we changed the way that we \r\n[05:25] thought about apps. We changed \r\n[05:26] the way that we think about \r\n[05:27] approaching applications.\r\n[05:28] It's \r\n[05:31] this declarative ecosystem that \r\n[05:32] leads to GraphQL, because it's \r\n[05:34] like, why don't we have a \r\n[05:35] declarative way for fetching our \r\n[05:36] data, too? That's why they fit \r\n[05:36] together nice. It all works \r\n[05:38] together in a similar ecosystem \r\n[05:40] from that standpoint.\r\nDave: [05:42] I haven't used a GraphQL much \r\n[05:46] myself, really, just hello world \r\n[05:48] and that level of exploring it. \r\n[05:51] It seems so powerful. I've \r\n[05:55] worked with rest APIs, having to \r\n[05:56] make five different API calls \r\n[05:58] and stitch things together. \r\n[06:01] [laughs]\r\n[06:01] You get that get that \r\n[06:03] waterfall problem, where you're \r\n[06:04] like, \"Well, I can't request all \r\n[06:05] of it at once. I've got to \r\n[06:06] request one, and then second one, \r\n[06:07] and the next one.\" It's messy \r\n[06:11] and it's slow.\r\n[06:15] [laughter]\r\nDave: [06:15] GraphQL [inaudible] .\r\n[06:17] [laughter]\r\nAlex: [06:17] GraphQL's all this stuff. It's \r\n[06:18] all the right stuff that we're \r\n[06:19] trying to do a software. It's a \r\n[06:21] type system. It's a type system \r\n[06:22] for your API. If you're a \r\n[06:24] believer in type systems and all \r\n[06:25] the benefit that you get from \r\n[06:26] that, your API gets all the \r\n[06:28] benefits from using a type \r\n[06:29] system.\r\n[06:29] I also like to think \r\n[06:30] about it as webpack in a weird \r\n[06:32] way. We went to this world where \r\n[06:34] everything was a monolith and we \r\n[06:35] broke it all up into packages \r\n[06:37] and dots. [laughs] I say dots, \r\n[06:40] because every talk in Silicon \r\n[06:41] Valley for a while was one big \r\n[06:42] circle and then the next screen \r\n[06:44] was 1,000 little circles.\r\n[06:46] [laughter]\r\nEve: [06:46] All these little microservices.\r\nAlex: [06:48] We've gone the process of \r\n[06:49] breaking everything up. When we \r\n[06:50] did that with our JavaScript \r\n[06:52] code, we realized, \"OK, so at \r\n[06:54] the end, we need something that \r\n[06:55] will put everything back \r\n[06:56] together into your custom one \r\n[06:58] package.\"\r\n[06:59] That's what webpack \r\n[06:59] does. It goes, it grabs all of \r\n[07:01] the JavaScript modules that \r\n[07:02] you're using, and it puts it \r\n[07:02] into one package, so you can sit \r\n[07:04] in one load out. GraphQL's like \r\n[07:06] that for your data. You're \r\n[07:08] asking for data from all of \r\n[07:09] these different types across \r\n[07:10] your domain.\r\n[07:11] When you actually \r\n[07:12] make those requests, the server \r\n[07:14] goes and grabs all of those \r\n[07:15] different types and packages \r\n[07:16] them back together in one data \r\n[07:18] response. You get one little \r\n[07:20] file that contains just the data \r\n[07:22] you need and nothing else. It's \r\n[07:23] similar to a lot of things. \r\n[07:25] There's a lot of good reasons to \r\n[07:26] use it, because the good stuff \r\n[07:27] that we're doing in software is \r\n[07:28] being baked into it.\r\nDave: [07:31] I saw recently a service, I \r\n[07:35] forget the name of it now, but \r\n[07:36] it was a GraphQL API on top of \r\n[07:38] other APIs. It would let you \r\n[07:39] query Twitter, GitHub, and \r\n[07:41] Facebook and stuff.\r\nAlex: [07:42] OneGraph. [laughs]\r\nEve: [07:43] OneGraph.\r\nDave: [07:44] OneGraph. Cool. Looks really \r\n[07:46] cool.\r\nEve: [07:47] That's what's so cool, is that \r\n[07:49] since graph databases are thing, \r\n[07:53] GraphQL came out. A lot of folks \r\n[07:54] associate GraphQL with being a \r\n[07:57] database. It's really a way of \r\n[07:59] orchestrating your data from all \r\n[08:01] sorts of different sources.\r\n[08:02] We \r\n[08:03] have data in databases. We have \r\n[08:04] it in different microservices \r\n[08:06] all over the place. GraphQL \r\n[08:08] becomes this layer on top of all \r\n[08:09] of those data sources that puts \r\n[08:12] everything in one place so that \r\n[08:13] you can query it in one place. \r\n[08:14] It also just makes everything \r\n[08:17] make more sense. It brings a lot \r\n[08:20] of organization to the table.\r\nDave: [08:21] A nice, cohesive tie all the \r\n[08:25] data together into one API. If \r\n[08:28] you had a magical API that was \r\n[08:29] your ideal API, you can build \r\n[08:31] that...\r\n[08:34] [crosstalk]\r\nAlex: [08:34] Where the edge of it all is \r\n[08:36] right now, is if you actually \r\n[08:37] build the microservices out on \r\n[08:39] GraphQL, we can automatically \r\n[08:40] put those together and \r\n[08:42] automatically stitch those. \r\n[08:44] Again, GraphQL's a type system. \r\n[08:45] You get all of the benefits of \r\n[08:46] using that.\r\nDave: [08:49] The type system part seems like \r\n[08:51] a huge advancement from rest, \r\n[08:53] too. There probably were like \r\n[08:55] the back end would change \r\n[08:56] something and then we didn't \r\n[08:58] update the front end code. It's \r\n[08:59] sending us something new or it's \r\n[09:01] like wrap now or something.\r\n[09:04] [laughter]\r\nDave: [09:04] Everything would just break.\r\n[09:05] [laughter]\r\nEve: [09:05] Totally.\r\nDave: [09:06] Being able to get that compile \r\n[09:07] times was super cool. [laughs] \r\n[09:10] Where does the complexity lie? \r\n[09:16] It seems like it makes the front \r\n[09:20] end a lot easier, because you \r\n[09:21] can ask for exactly what you \r\n[09:22] want, and you get exactly what \r\n[09:23] you need.\r\n[09:25] Does it shift some of \r\n[09:27] the complexity to the back end, \r\n[09:29] or how does that work in \r\n[09:31] practice?\r\nAlex: [09:31] It does. It's a different \r\n[09:32] approach to how you do it, but \r\n[09:34] it's not necessarily just that \r\n[09:35] it makes the front end easier. \r\n[09:37] One of the neat things about \r\n[09:38] GraphQL is when we used to teach \r\n[09:40] React, Redux, and those things, \r\n[09:42] we were really only dealing with \r\n[09:43] the front end, and occasionally \r\n[09:44] fetching some data from an \r\n[09:45] endpoint.\r\n[09:46] You don't really get \r\n[09:47] involved in the over complexity \r\n[09:49] of that. When you start working \r\n[09:50] with GraphQL, you do have the \r\n[09:51] learning curve of learning how \r\n[09:52] to send queries, mutations, and \r\n[09:54] those things from the front end, \r\n[09:55] but you start building full \r\n[09:57] stack applications from the get \r\n[09:58] go.\r\n[09:59] The whole idea of GraphQL \r\n[10:00] is now the back end and your \r\n[10:01] front end are extremely \r\n[10:02] integrated. The applications \r\n[10:05] that we build now when we teach \r\n[10:06] React with GraphQL, they're a \r\n[10:08] little bit more complex, but \r\n[10:09] they're full stack applications.\r\n[10:11] The back end is just a different \r\n[10:12] way. You're still handling http \r\n[10:14] requests like you are with REST. \r\n[10:16] It's just a different way of \r\n[10:18] thinking about it. I would say \r\n[10:19] there's a little bit of a \r\n[10:20] learning curve to shifting your \r\n[10:22] thinking, but once you shift \r\n[10:24] your thinking it's not really \r\n[10:25] any different than building an \r\n[10:26] Express server with REST.\r\n[10:28] We \r\n[10:28] started using GraphQL about two \r\n[10:29] years ago and I haven't built a \r\n[10:31] RESTful server with Express \r\n[10:35] since. I've been able to do \r\n[10:36] everything that we need to do \r\n[10:37] using GraphQL and I'm just as \r\n[10:39] fast. I would actually be slower \r\n[10:40] at building an Express server \r\n[10:42] with get, end, post endpoints \r\n[10:44] with REST than I am with GraphQL \r\n[10:46] now.\r\n[10:46] They're still just \r\n[10:46] functions. With Express you have \r\n[10:48] a route. It goes to a function. \r\n[10:49] With GraphQL you have a field \r\n[10:50] and a query that goes to a \r\n[10:51] function. Once you wrap your \r\n[10:53] head around that, it's all about \r\n[10:54] how fast you can crank out \r\n[10:55] functions.\r\nDave: [10:56] Sort of the same kind of thing. \r\n[10:59] Instead of adding a new endpoint \r\n[11:00] you just add a new field and \r\n[11:02] implement how to get the data.\r\nEve: [11:04] Exactly.\r\nAlex: [11:05] The place everybody goes \r\n[11:05] immediately is caching and \r\n[11:07] batching with databases and all \r\n[11:08] that stuff. Those are all \r\n[11:09] complexities that have to be \r\n[11:11] solved on the back end no matter \r\n[11:12] what you use.\r\n[11:13] REST makes the \r\n[11:14] caching thing a little easier, \r\n[11:15] so there are some complexities \r\n[11:16] with caching on the back end but \r\n[11:18] there's also solutions being \r\n[11:19] built for this stuff all the \r\n[11:21] time as well.\r\n[11:21] We always talk \r\n[11:24] about with back end developers, \r\n[11:25] they're really concerned about \r\n[11:26] batching and caching between the \r\n[11:28] back end and your database. We \r\n[11:31] say, \"OK, we have introduced \r\n[11:32] some complexities there but the \r\n[11:34] thing is, we've taken that \r\n[11:35] complexity totally away from the \r\n[11:36] front end.\"\r\n[11:37] I would rather deal \r\n[11:39] with latency between my back end \r\n[11:40] and my database and trying to \r\n[11:41] improve performance there than \r\n[11:43] deal with it between the client \r\n[11:44] and the server because there's a \r\n[11:45] bunch of wildcard stuff that I \r\n[11:47] can't control in that \r\n[11:48] environment.\r\nDave: [11:49] Yeah, at least with the back end \r\n[11:50] you control all the pieces.\r\n[11:54] [laughter]\r\nDave: [11:54] One server instead of however \r\n[11:55] many different kinds of clients \r\n[11:57] and networks in the way and \r\n[11:59] everything.\r\nEve: [11:59] Exactly. Some of those clients \r\n[12:01] are really slow to do all that \r\n[12:03] processing. Moving that stuff to \r\n[12:05] the server, filtering, sorting, \r\n[12:07] and all that is really nice for \r\n[12:09] speeding up your applications. \r\n[12:12] Before you even worry about \r\n[12:15] batching or caching you might \r\n[12:16] not even need it because that \r\n[12:17] architectural shift is a big \r\n[12:20] deal for performance.\r\nDave: [12:22] If you were recommending to \r\n[12:26] people who have done a bit of \r\n[12:27] React now and maybe they're sort \r\n[12:28] of looking to move on from there, \r\n[12:30] what to do next. How would you \r\n[12:32] suggest getting started with \r\n[12:33] GraphQL?\r\nAlex: [12:36] Learn GraphQL first. GraphQL is \r\n[12:38] its own language. It's a query \r\n[12:40] language for your API. There's a \r\n[12:41] query language and a schema \r\n[12:43] design language so that you can \r\n[12:44] design the APIs. That's \r\n[12:46] completely language agnostic too.\r\n[12:48] A lot of the stuff that's \r\n[12:49] happening in GraphQL is \r\n[12:50] happening in the JavaScript \r\n[12:51] world, but you can build GraphQL \r\n[12:52] servers in any language. You can \r\n[12:53] communicate with GraphQL servers \r\n[12:55] from any client. Understanding \r\n[12:57] how a GraphQL itself works is \r\n[13:00] going to be so beneficial in the \r\n[13:01] long run because it's its own \r\n[13:04] language.\r\nEve: [13:05] Really understanding the query \r\n[13:06] language particularly if you are \r\n[13:08] coming from a React background, \r\n[13:10] you're going to need to pump all \r\n[13:12] that data into your components. \r\n[13:13] Really understanding how the \r\n[13:15] queries work and how to attach \r\n[13:16] that to your components.\r\n[13:18] Apollo \r\n[13:19] has some really nice tools for \r\n[13:20] that with Apollo React Hooks, \r\n[13:22] which has just come out. That's \r\n[13:23] something that is really fun to \r\n[13:26] work with because it's so fun to \r\n[13:29] create a query that'll get all \r\n[13:31] the data, then you'll see your \r\n[13:33] data show up in your components. \r\n[13:35] It's a really nice next step \r\n[13:37] from learning about React stuff.\r\n[13:42] [crosstalk]\r\nAlex: [13:42] You can send a GraphQL query \r\n[13:44] with a fetch request. It's just \r\n[13:46] an http request. There are tools \r\n[13:47] that definitely make it easier \r\n[13:49] and there are tools that really \r\n[13:50] make your client more powerful, \r\n[13:52] like the Apollo Client or \r\n[13:53] something like that.\r\n[13:54] You can \r\n[13:54] actually get started getting the \r\n[13:55] data into your React Apps with \r\n[13:57] GraphQL today. Learning to send \r\n[13:59] those first couple queries isn't \r\n[14:00] really that difficult.\r\n[14:02] Really \r\n[14:03] understanding what you can do \r\n[14:04] with queries and mutations and \r\n[14:06] subscriptions is going to unlock \r\n[14:07] all of this power to build full \r\n[14:08] stack apps, but query and data \r\n[14:10] from a GraphQL endpoint is \r\n[14:12] something that you can do in 30 \r\n[14:13] minutes.\r\nDave: [14:16] That's awesome. That's true, I \r\n[14:18] hadn't even thought about that. \r\n[14:19] You just send a fetch right in \r\n[14:21] and it sends you back JSON and \r\n[14:23] so you're off to the races then, \r\n[14:25] right.\r\nAlex: [14:26] Yeah.\r\nEve: [14:26] Start mapping. Yeah.\r\n[14:32] [laughter]\r\nDave: [14:32] That's cool. That fits in with \r\n[14:33] the strategy after it worked \r\n[14:38] through it. With this React \r\n[14:40] course it's just focusing on \r\n[14:41] React. Learn React and then \r\n[14:43] everything else will be easier. \r\n[14:44] GraphQL slothed into that. \r\n[14:47] Basically, learn GraphQL and \r\n[14:48] then you can bolt it to whatever \r\n[14:49] you want, whether that's React \r\n[14:51] or Stealth next week or whatever.\r\n[14:56] [laughter]\r\nEve: [14:56] Exactly.\r\nDave: [15:02] Maybe you're on an existing team \r\n[15:04] or you're joining a team that \r\n[15:05] isn't using GraphQL yet and you \r\n[15:08] would like to add it in. It \r\n[15:10] seems like it's becoming more \r\n[15:15] widespread now. GraphQL is \r\n[15:16] pretty well adopted.\r\n[15:18] Maybe a \r\n[15:19] couple of years ago it was more \r\n[15:20] like, that's a neat thing but \r\n[15:22] we're not using that yet. It's \r\n[15:23] too new, or something. For some \r\n[15:28] teams, if they already have a \r\n[15:29] REST API, how could they start \r\n[15:31] using GraphQL and layer that on \r\n[15:34] top?\r\nEve: [15:35] Yeah. Pretty immediately. That's \r\n[15:39] how a lot of huge organizations \r\n[15:41] like Twitch and Netflix and \r\n[15:43] others have started their \r\n[15:44] process of migrating to GraphQL, \r\n[15:47] is taking a GraphQL server, \r\n[15:49] creating types and then using \r\n[15:51] resolver functions on this \r\n[15:53] GraphQL server to go get that \r\n[15:55] data from a REST API.\r\n[15:57] What you \r\n[15:58] get from that is nice developer \r\n[15:59] tooling because you'll be able \r\n[16:00] to send those queries, mutations \r\n[16:02] and subscriptions using \r\n[16:05] something called the GrapQL \r\n[16:06] Playground, which is a really \r\n[16:07] nice thing for developers to \r\n[16:10] work with.\r\n[16:10] That's a good first \r\n[16:11] step versus tearing everything \r\n[16:13] down. That was a big \r\n[16:15] conversation two years ago. \r\n[16:16] GraphQL is here to destroy REST \r\n[16:19] and you can't use a REST anymore, \r\n[16:22] it's dead. That's not really how \r\n[16:25] that works in production. REST \r\n[16:27] isn't dead. You can totally use \r\n[16:29] both together and they work \r\n[16:30] really nicely together.\r\nAlex: [16:31] So much of what's happening with \r\n[16:34] GraphQL feels very similar to \r\n[16:36] React. I remember when we first \r\n[16:38] started learning React it was \r\n[16:39] the same thing. People weren't \r\n[16:40] necessarily ready to go to \r\n[16:42] production with it.\r\n[16:42] Then, when \r\n[16:43] everybody started going to \r\n[16:44] production with it, Airbnb, \r\n[16:46] Netflix, Facebook. When all of \r\n[16:48] these big companies got behind \r\n[16:50] it, it just opened the wave and \r\n[16:52] it happened everywhere. That's \r\n[16:53] exactly what's going on with \r\n[16:54] GraphQL right now. It's the same \r\n[16:56] thing, [inaudible] PayPal, \r\n[16:58] Netflix, Airbnb.\r\n[17:01] [laughter]\r\nAlex: [17:01] We're going to see an explosion \r\n[17:01] of this. The other thing that's \r\n[17:02] similar is moving to it. If you \r\n[17:04] remember, when we first started \r\n[17:06] adopting React, they were like, \"\r\n[17:07] Hey, just put one React \r\n[17:08] component in your page. You \r\n[17:10] don't have to build a whole \r\n[17:11] single page.\" It wasn't a Create \r\n[17:12] React App.\r\n[17:14] [laughter]\r\nAlex: [17:14] Use it with Angular. Just go \r\n[17:16] ahead and put one component in \r\n[17:17] your page.\r\nDave: [17:18] Yeah, that was my intro to it.\r\n[17:21] [laughter]\r\nAlex: [17:21] That's how people got hooked. \r\n[17:23] Then it was the next component \r\n[17:24] they built off of React. The \r\n[17:25] next component they built off of \r\n[17:26] React. Then when they were \r\n[17:27] having fun they were like, \"OK \r\n[17:28] we're going to go no more \r\n[17:29] Angular. Let's just rebuild this \r\n[17:30] whole thing with React.\"\r\n[17:31] That's \r\n[17:33] on you. You were having fun. You \r\n[17:34] wanted to do that. You wanted to \r\n[17:35] redo your whole site with it \r\n[17:36] because of that.\r\n[17:37] GraphQL is the \r\n[17:37] same way. It's an end point. If \r\n[17:40] you have a REST API already, on \r\n[17:42] the exact same URL you can throw \r\n[17:44] up another endpoint slash \r\n[17:46] GraphQL. It doesn't even have to \r\n[17:48] be slash GraphQL. You can't to \r\n[17:49] name the endpoint whatever you \r\n[17:50] want just like you can with a \r\n[17:51] REST server.\r\n[17:51] Literally, on the \r\n[17:52] exact same server you're sending \r\n[17:53] get, post, put, delete requests, \r\n[17:55] you can have a GraphQL endpoint \r\n[17:57] that handles one type, the next \r\n[17:59] feature you need to build.\r\n[18:00] You \r\n[18:01] can try it out with one little \r\n[18:02] thing. Maybe you have comments, \r\n[18:03] or something like that. You can \r\n[18:05] build a little GraphQL endpoint \r\n[18:06] for just handling user comments \r\n[18:08] and stuff. Your whole REST API \r\n[18:10] can work at the same time right \r\n[18:12] alongside of it.\r\n[18:13] What will \r\n[18:14] happen in that process is you \r\n[18:15] say, \"OK, well we're just going \r\n[18:16] to start building new features \r\n[18:18] out of GraphQL and adding them \r\n[18:19] additionally to the REST \r\n[18:21] endpoint.\" Then when it's time \r\n[18:22] to rebuild the REST feature, or \r\n[18:24] when it's time to fix the REST \r\n[18:25] feature we won't do it in REST.\r\n[18:28] We'll just go ahead and move \r\n[18:30] that feature into our GraphQL \r\n[18:31] that we already have set up. You \r\n[18:33] slowly move away from using REST \r\n[18:36] on your whole API if that's what \r\n[18:37] you want to do. Otherwise, they \r\n[18:39] work hand in hand, side by side.\r\nDave: [18:45] That's cool. It totally fits the \r\n[18:51] way REACT...The React like \r\n[18:53] planted a little seed and then \r\n[18:56] grow from there.\r\nAlex: [18:58] Yeah.\r\n[19:00] [laughter]\r\nEve: [19:00] Getting a little taste of it and \r\n[19:02] then rolling it out everywhere, \r\n[19:03] being addicted to GraphQL just \r\n[19:05] like we all are [inaudible] .\r\n[19:09] [laughter]\r\nDave: [19:09] If you were trying to learn \r\n[19:15] GraphQL now, what are some good \r\n[19:16] resources they can go to to \r\n[19:18] start learning?\r\nAlex: [19:20] We have a playlist on Egghead. \r\n[19:22] It's 31 minutes and we build a \r\n[19:25] full stack application with \r\n[19:28] Apollo and React. If you're like, \"\r\n[19:29] Oh, I need to use this next week,\" \r\n[19:31] that's a good place to start.\r\n[19:32] Obviously, we have a GraphQL \r\n[19:35] book. That's a really good place \r\n[19:37] to start because the book \r\n[19:37] focuses mostly on GraphQL. You \r\n[19:40] can come to it from a Java \r\n[19:41] background or something like \r\n[19:42] that and really learn.\r\nEve: [19:47] I have a query language class on \r\n[19:49] Egghead as well, if you want to \r\n[19:50] start without any JavaScript at \r\n[19:52] all you can just start with the \r\n[19:54] web browser and get started \r\n[19:56] writing queries, mutations and \r\n[19:58] subscriptions. There's also a \r\n[20:00] lot of good resources all over \r\n[20:02] the place.\r\n[20:03] Howtographql.com is \r\n[20:04] a really great resource. It's a \r\n[20:05] free website. It's kind of a \r\n[20:08] choose your own adventure type \r\n[20:09] website, depending on what you \r\n[20:11] are most interested in. It \r\n[20:13] equips you with the fundamentals \r\n[20:15] and then you can go down all \r\n[20:16] sorts of different tangents \r\n[20:17] depending on what you work on, \r\n[20:19] if you're a back end developer \r\n[20:20] or if you work on the front end.\r\nAlex: [20:22] OneGraph is a great place too.\r\nEve: [20:26] OneGraph is great too.\r\nAlex: [20:28] There are GraphQL wrappers \r\n[20:30] around all of the popular APIs, \r\n[20:31] but it's really pretty easy to \r\n[20:33] query and get started with. In \r\n[20:34] fact, it's kind of easier to \r\n[20:35] work with OneGraph than it is to \r\n[20:37] work with the actual third party \r\n[20:38] APIs in most cases.\r\n[20:40] It's a fun \r\n[20:41] place to start to learn what \r\n[20:42] it's like to send queries and \r\n[20:43] mutations and see data and \r\n[20:45] figure out how to attach your \r\n[20:46] tokens to those queries so you \r\n[20:48] can see your data and stuff like \r\n[20:49] that.\r\nEve: [20:50] The OneGraph approach is really \r\n[20:52] cool because you can, as you \r\n[20:53] said, send a query but it \r\n[20:54] collects data from all sorts of \r\n[20:56] different sources. If you wanted \r\n[20:58] to see what Spotify song you \r\n[21:02] were listening to when you \r\n[21:03] committed a GitHub project to \r\n[21:06] [inaudible] or fun little things \r\n[21:07] like that.\r\n[21:09] The idea is that \r\n[21:10] GraphQL allows you to get data, \r\n[21:14] to aggregate data sources from \r\n[21:16] all over. I love working with it. \r\n[21:18] It's really cool to be able to \r\n[21:20] do that kind of thing.\r\nDave: [21:22] That's really cool. I'll have to \r\n[21:23] check that out. That one graph \r\n[21:24] sounds awesome. It seems like \r\n[21:27] you could...I guess the APIs \r\n[21:29] would differ a little bit for \r\n[21:31] each one, but at least it's \r\n[21:33] easier probably to learn the \r\n[21:34] general structure of how an API \r\n[21:36] works. Then they're all similar, \r\n[21:38] right, more so than having to go \r\n[21:40] and learn.\r\nAlex: [21:41] Yeah, it's all documents. \r\n[21:42] GraphQL, that's the other thing \r\n[21:43] about it. When you go to the \r\n[21:44] Playground, unlike REST, it \r\n[21:45] tells you exactly what \r\n[21:46] everything is. What this \r\n[21:48] mutation is, what types get \r\n[21:49] returned. What these [inaudible] \r\n[21:50] are. How to use them. All of \r\n[21:52] that information's right there \r\n[21:53] in a way that it wasn't there in \r\n[21:55] Postman.\r\nEve: [21:56] You can literally hit ctrl + \r\n[21:59] space on the GitHub API which I \r\n[22:01] haven't personally memorized \r\n[22:02] every field that's part of that, \r\n[22:04] but it'll tell you exactly what \r\n[22:05] to type in, what's available. \r\n[22:08] It's really, really cool. That's \r\n[22:11] the type system part. We should \r\n[22:13] always point out, if you like \r\n[22:15] type systems you probably will \r\n[22:16] like GraphQL too.\r\nDave: [22:18] Yeah, if you don't like type \r\n[22:19] systems you'll probably like \r\n[22:20] them after using GraphQL.\r\n[22:21] [laughter]\r\nEve: [22:21] Exactly, yeah. You'll just like \r\n[22:25] GraphQL no matter what.\r\nDave: [22:26] Having the documentation built \r\n[22:29] into the API explorer is just \r\n[22:31] super cool. It's not even thing \r\n[22:33] that you have to do. You get \r\n[22:35] that for free, basically. You \r\n[22:37] stand up the server and, hey, \r\n[22:38] it's documented.\r\nEve: [22:40] Absolutely.\r\nAlex: [22:41] You have to write the \r\n[22:41] documentation.\r\nEve: [22:42] Yeah, that's annoying.\r\nAlex: [22:44] You do actually get all the \r\n[22:45] fields. A server will tell you \r\n[22:46] all the queries and mutations \r\n[22:47] you can run, but we always \r\n[22:49] encourage, you can actually \r\n[22:50] document. It's just putting \r\n[22:51] comments in your schema. Then, \r\n[22:53] clear instructions on every \r\n[22:55] field and everything come up. We \r\n[22:57] just found out the other day \r\n[22:58] that emoji icons work in that \r\n[23:00] too. That's super fun.\r\n[23:02] [laughter]\r\nEve: [23:02] If you take one thing away from \r\n[23:06] everything we've said about \r\n[23:07] GraphQL, it's that you should \r\n[23:09] document your API even though \r\n[23:10] you have good docs with GraphQL \r\n[23:13] out of the box, and you can add \r\n[23:15] emojis to it.\r\nDave: [23:17] Can you put emojis in the query \r\n[23:17] language too?\r\nAlex: [23:19] I don't think so.\r\nEve: [23:21] I don't think so.\r\nDave: [23:23] It seems like it would be a bad \r\n[23:23] idea.\r\n[23:26] [laughter]\r\nEve: [23:26] Just query a smiley face. Now \r\n[23:28] you've given me a project Dave.\r\n[23:33] [laughter]\r\nDave: [23:33] Just nested levels of happy, \r\n[23:35] happy, happy, sad, fire emoji.\r\n[23:39] [laughter]\r\nDave: [23:39] I think this has been awesome \r\n[23:43] guys. Thanks for taking the time \r\n[23:45] to chat with me today. Where can \r\n[23:47] people find you online if they \r\n[23:48] want to learn more about what \r\n[23:50] you're up to and your GraphQL \r\n[23:52] resources and that stuff?\r\nEve: [23:53] You can go to moonhighway.com. \r\n[23:56] That's where we have all of our \r\n[23:57] articles about GraphQL and \r\n[23:58] various other JavaScript related \r\n[24:01] topics. You can find all of the \r\n[24:04] links to our courses there as \r\n[24:05] well. You can find me online @\r\n[24:08] eveporcello and...\r\nAlex: [24:11] On Twitter I'm @MoonTahoe.\r\nDave: [24:14] Awesome.\r\nAlex: [24:16] I don't have an @alexbanks.\r\nEve: [24:17] There's more Alex Banks's than \r\n[24:17] there are Eve Porcellos in the \r\n[24:18] world so you'll have to go to \r\n[24:20] MoonTahoe for him.\r\nDave: [24:22] I went to Twitter and searched \r\n[24:24] for Alex Banks. It's like, hmm, \r\n[24:25] there's a lot of these.\r\n[24:27] [laughter]\r\nEve: [24:27] Yeah. Most of them are British \r\n[24:28] DJ's.\r\n[24:30] [laughter]\r\nDave: [24:30] Thanks again.\r\nEve: [24:34] Thank you Dave.\r\nAlex: [24:35] Thank you.\r\nEve: [24:35] Great talking to you.\r\n",
        "casting_words_order": "zeLX",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks",
        "url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks",
        "path": "/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks?pl=pure-react-interviews",
        "http_url": "http://app.egghead.af:5000/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks?pl=pure-react-interviews",
        "http_short_url": "http://app.egghead.af:5000/s/jy90p",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_480/eggheadlogo.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_280/eggheadlogo.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_256/eggheadlogo.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_128/eggheadlogo.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_64/eggheadlogo.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_32/eggheadlogo.png",
        "icon_url": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1567198446/og-image-assets/eggo.svg",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-launch-eve-porcello-and-alex-banks-ryDtlZ89B/scikit-learn-pure-react-launch-eve-porcello-and-alex-banks-ryDtlZ89B.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "tags": [],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
        "series_row_order": -5595135,
        "series": {
          "title": "Pure React Interviews",
          "description": "Exclusive Pure React Bonus Content",
          "duration": 15713,
          "slug": "pure-react-interviews",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-interviews",
          "path": "/courses/pure-react-interviews",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875310,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-eve-porcello-and-alex-banks/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5385,
        "creator_id": 9671,
        "slug": "egghead-dave-ceddia-interviews-mark-erikson",
        "title": "Dave Ceddia interviews Mark Erikson",
        "state": "bundled",
        "summary": "Redux has been a mainstay in the React community since it came on the scene in 2015 – but is it still relevant in light of newer React features like the Context API and Hooks? I sat down with Mark Erikson, one of the maintainers of Redux, to chat about the differences between Redux and Context, where data should be kept, and how the new Redux Starter Kit library can help cut down on Redux boilerplate.",
        "duration": 3274,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Dave Ceddia: [0:00] Hey everyone, I'm Dave Ceddia and today I get to talk to Mark Erikson who is one of the maintainers of Redux and an overall helpful person on the Internet. Mark, thanks for chatting.\n\nMark Erikson: [0:09] Hi, glad to be here.\n\nDave: [0:12] Thanks, so could you tell me a little bit more about your background and how you got into React?\n\nMark: [0:16] Sure. I'm a software engineer at a large, unnamed government contractor. I've been there long enough to work my way from being just another feature developer on a relatively small team, to being an unofficial tech lead within the team, to now actually leading an internal code infrastructure team, all within the same project.\n\n[0:44] Been at that company for 11 years now and on the project as a whole for about the last 8, which I realize is pretty rare in this industry.\n\nDave: [0:56] That's awesome.\n\nMark: [0:57] Oh boy, let's see. How did I actually get involved with React and stuff? Let's start at the very beginning, which is a very good place to start. My first web application was a project that I worked on back in 2011, 2012 which was actually built using something called GWT, or Google Web Toolkit which is a Java to JavaScript framework.\n\n[1:29] The sales pitch was, your backend is probably already written in Java so now you can write your frontend in Java too and share code between both sides. It's funny how the sales pitch is basically the same these days except you would want to use Node because your frontend is already written in JavaScript.\n\nDave: [1:50] Right.\n\nMark: [1:52] The flip side of what a lot of people are doing today. At the time I had a lot of desktop development experience, but I had no webdev experience at all. The app that I was building was meant to be a very desktop-like look and feel and behavior to it.\n\n[2:14] I was able to use a lot of my desktop experience with this Java toolkit to build something over the next couple of years. I had to use a little bit of JavaScript in there.\n\n[2:27] If the Java code needed to interact with a Java library like a jQuery or something like that, you had to write some Java that would wrap up the JavaScript so that it looks like you're calling a Java function but it's actually JavaScript inside.\n\n[2:47] I basically built that by myself in 2011-2012. Early 2013, I was shifted over to an adjacent team that was building a new app in JavaScript from day one. I'd just started reading about these things called JavaScript MVC frameworks, which were apparently all the rage or something.\n\n[3:10] I wrote up a little wiki article saying that we ought to try and research some of these as we were getting started. I got redirected to some other tasks. I came back a couple of months later and saw that there was a team churning away on cranking out a new client, and it was nothing but JQuery, and there were global variables everywhere, and it was awful, and I cried.\n\n[3:36] A few months later, we hit a pause point in development. We went out and researched Angular, Ember, and Backbone. I eventually was the one that said, \"OK, I think Backbone works best for our situation, because we've got this brand-new codebase that is already spaghetti, and we can convert it to Backbone incrementally and hopefully actually add some order to the chaos that we just created.\"\n\n[4:08] The first real serious JavaScript that I did was converting that JQuery stuff to Backbone in late 2013. Over the next year or so, I brought in various plugins for Backbone -- Marionette for lifecycles, Epoxy for data binding, started teaching the other people on my team how to use the Backbone stuff properly. By mid-2015, the codebase had basically been converted, and I was finally starting to grok the idea of actually driving your UI from your data.\n\n[4:43] It's funny, looking back at that Java GWT code I'd written, where it was like implementing the observer pattern so that the UI could get updated when the data changed, generating weird hashes of Java model fields to see if anything was different and so on.\n\nDave: [5:03] It's like change detection in Java...\n\nMark: [5:05] Exactly.\n\nDave: [5:06] on cases you run. Yeah.\n\nMark: [5:08] It's funny because I can look back there, and looking back at what I was doing then versus what I was doing in 2014 and '15 with Backbone versus how I would solve problems with React and Redux today. It's all trying to solve the same problem space. It's just that the technologies that exist and my understanding of the problem and the technologies has evolved over time.\n\n[5:39] By mid '15, I was onboard with this data-driven UI concept. I was really comfortable with Backbone, but I also found a lot of its limitations. I started thinking about, what would it be like to rewrite that GWT apps client in something more modern?\n\n[5:59] I'd heard about this React thing. I figured I would finally give it a shot. This was right after Redux had already come out so we've had a year of the Flux wars with Oltz and Marty and a whole bunch of other back-to-the-future pun named libraries coming out.\n\n[6:24] I was reading through blog posts and articles and just trying to get a general understanding of what is this React thing and how does it even work. In the process, I came across a set of chat channels called Reactive Flux which at the time were on Slack.\n\n[6:43] I just started hanging out there and working and trying to read and understand what was going on with these tools. Somewhere in the process, I started seeing some questions that, \"I know the answer to that one. I can chip in and help answer.\"\n\n[7:01] Then I started seeing questions where, \"Hey, I read a blog post about that the other day let me go back through my history and find a link to it and pasted in.\" I kept finding myself pasting the same links over and over so I started turning it into a list which got bigger and had categories.\n\n[7:21] By the end of the year, I was routinely answering questions about React and Redux even though I really hadn't even written any code within yet. I think the first real code that I wrote was December of '15, January of '16 when I finally had a chance to start prototyping rewriting that GWT app.\n\n[7:47] Where I actually started to get involved with community was early 2016. I was seeing the same questions being asked over and over on Reddit, Reactive Flux, Stack Overflow, GitHub issues. I filed an issue on the Redux repost saying, \"Somebody ought to write an FAQ page for the Redux docs.\"\n\n[8:11] I half suggested that I could. Dan said, \"Sure, go ahead.\" I had some free time on my hands so I did that over the next few weeks and I got that merged in and Dan gave me the comment rights. Now, at the time, I really didn't feel like I had any permission or privilege to actually go mess with the code at all.\n\n[8:40] I was just helping close issues that were obviously not useful or answering questions and so on. Dan got hired by Facebook to work on React itself. By that summer, he told myself and a guy named Tim Door, \"You're the maintainers now. Here's the keys, have fun.\"\n\n[9:04] It wasn't until a couple months later that I really started feeling like I actually was in a position to give my opinion on how the code should work and how the library should really be used.\n\n[9:19] There were a couple different issues that popped up where I had to dig through the code and really understand what it was doing in order to answer the questions correctly. One of which was a proposal to rewrite the React-Redux library entirely.\n\n[9:38] As I was helping guide that one through and it eventually became React-Redux Version 5, I finally started to actually feel like I was a maintainer. That was it. This was never anything that I set out to do deliberately.\n\n[9:58] It was kind of a happy accident in a way. I was just trying to learn things and in the process of learning and starting to help other people, I wound up getting involved and now it's basically most of my free time. [laughs]\n\nDave: [10:16] That's how these things go. Locked into it?\n\nMark: [10:19] I found a niche where it combines something that I know a lot about with my...I'm a generally helpful guy. I like answering questions and sharing information. It combines some different facets of my personality rather well.\n\nDave: [10:46] It's a good fit. It seems like over the years, Redux has gone through...we had the Flux wars, and Redux won. When I first got into Redux, my first intro to it was Dan Abramov's videos that I had, which are still free and still a good resource.\n\nMark: [11:05] Absolutely.\n\nDave: [11:07] I remember coming out of those, and thinking, \"OK, cool. I think I get it now, but I'm not sure how to actually use it.\" It was a bunch more trial and error to figure out how this actually fits in with React and what the patterns are.\n\n[11:29] Over the years, Redux has been declared dead a couple times. More than once.\n\nMark: [11:34] About every other week.\n\nDave: [11:35] There was the context API, there was some GraphQL article that went around that everyone said, like, \"Hey, here's GraphQL. You don't need Redux anymore.\" Then most recently, Hooks came out with useReducer and useContext.\n\n[11:50] It looks like, \"Hey, look, this thing does the same thing as Redux, maybe.\" There's a lot of confusion around that. I remember you wrote a blog post called \"Redux Not Dead Yet\" back in March of 2018. [laughs]\n\nMark: [12:03] It is still entirely accurate. I did make a couple updates to it later, especially to include some mentions of hooks as part of that.\n\nDave: [12:18] Do you still think Redux is relevant today? How do you think it's remained relevant for so long?\n\nMark: [12:24] I have a lot of thoughts on this topic. In addition to that blog post, I also did a talk at the Reactathon conference back in March of this year, 2019, where I addressed a lot of this issue. I showed some statistics about Redux usage and how it compares to other tools and technologies.\n\n[12:49] I talked through some reasons that you might want to use Redux. I can go ahead and go through those now. I'd also encourage people to try to look up that talk and watch it on YouTube, if you haven't had a chance.\n\n[13:06] First off, it's worth pointing out that lots of technologies go through different life cycles in a way. There's a chart that's known as the hype cycle diagram, where you've got...something comes out and everyone's all excited about it, and then it's like, \"Maybe this isn't quite as great as I thought it was. I hate the thing. Actually, this thing is useful. It's been replaced,\" and so on.\n\n[13:38] There is a natural rise and fall in usage of different technologies. Cobalt was a huge thing back in the day, and now it's basically only alive inside banks and enterprises. Java JSPs came and went. Angular 1 came and went. Nothing truly lasts forever. We certainly have seen some of that with Redux.\n\n[14:07] It came out and, like, Dan never really intended it to be the thing that took over frontend development. It was originally kind of a technology demo that he wanted to show off at a conference. But it really did work better than basically all of the other Flux libraries that came out in 2014 and '15, and it fits very well with React's own programming model.\n\n[14:39] It took off very well, and then on top of that, once it hit a certain critical mass, there became this assumption within the community that if you're using React, you have to be using Redux with it, and so you had all these blog posts saying, here's how you use React, here's how you use Redux.\n\nDave: [15:00] Right, it was just an assumption, like there was no choice, just like React, Redux, yeah.\n\nMark: [15:06] Not even discussing why you might want to use Redux, specifically, other than maybe just a throwaway sentence or two in umpteen thousand medium tutorials.\n\nDave: [15:19] Yeah.\n\nMark: [15:21] Partly because of the sunrise and probably because people had been using it for a while, then we started to see something of a backlash, where people were tired of seeing it mentioned all the time.\n\n[15:39] People were starting to run into certain pain points as they were using it in, say, larger applications. Maybe even asking, like, why do I need to use this in a really small application? This isn't providing me any real benefit.\n\nDave: [15:53] Yeah, right. It feels like it's lot of complexity to take on early on, if you're just getting started with React.\n\nMark: [16:02] At that point, the backlash kind of became a meme in and of itself, to the point that it's like, let's see, oh yes, it's time for the regularly scheduled monthly Twitter hate thread on Redux.\n\n[16:17] Then we start getting into the list of things that have been declared as Redux killers. GraphQL has become a big thing over the last couple years.\n\n[16:31] GraphQL, in and of itself, is just a protocol for formatting data requests to the server, and then handing those responses back. There are also assumptions on what kinds of tools you're using on both ends of that request. For example, if you're using GraphQL in a React app, the odds are you're probably using the Apollo GraphQL client.\n\n[17:00] Apollo, specifically, does a lot of work to make the API requests, tell you what the current loading status is of each request, normalize and cache the data inside of the client. These are all things that really overlap with many of the ways that you might be using Redux in an existing application.\n\n[17:26] Now, this does assume that you have a GraphQL backend as opposed to something REST-like, for example. But let's face it, a lot of people are using Redux primarily to cache fetched data from a backend. We recommend normalizing that data.\n\n[17:46] If that's most of what you were using Redux for in the first place, then, sure, Apollo and GraphQL mostly overlap with that. If you're using Apollo and GraphQL, you probably don't have much, if any, need for Redux directly.\n\n[18:05] Another thing is passing data down the component tree without explicitly passing props at every level. This was one of the reasons why a lot of people were using Redux in 2015 and 2016, especially because the old React context API was broken.\n\n[18:26] When the new context API came out in 16.3, its only purpose is to take some value and make it accessible to the entire component subtree under that. Again, if the only reason you were using Redux was to avoid passing data as props, well, that's literally what context is meant to do.\n\n[18:52] In fact, it's the only thing context is meant to do because context doesn't actually handle state updates for you. You can use it to pass down state, but you have to take care of what state is being put in there, how it's being updated, and so on.\n\nDave: [19:14] It's all manual. This Redux is built upon the original context API, right?\n\nMark: [19:19] Yeah.\n\nDave: [19:20] That's how it did the passing props naturally via the background. It was like its own thing.\n\nMark: [19:24] Right, again, if that was the only reason you were using Redux, then here is a thing that overlaps with that use case and could potentially replace it for that situation. Then we get into hooks, and hooks are great. People got really, really excited when they came out.\n\n[19:52] In some ways, hooks don't change anything because we could already have state and side effects in components. It's just now you can do that in function components as well as class components. On the other hand, they actually change a lot because it's easier to handle that state inside a component in a lot of ways.\n\n[20:20] There's this nifty little thing called a useReducer. \"Whoa, whoa, whoa, reducers are only a thing you can use in Redux, right? This useReducer totally replaces Redux, right?\"\n\nDave: [20:35] Yeah, that's a lot of developers' first experience. The reducer, I'd heard about it in college, and then again in Redux. This was like, \"Oh, OK.\" I can see how people would come into React and having never heard of a reducer before. If Redux is the first time you hear about, you're like, \"Oh, OK, that's a Redux thing and now React has it built in.\"\n\nMark: [20:59] There is some truth to it. You could technically use reducers with class components and setState, you just had to manually call the reducer yourself in the callback form of setState. Dan showed this a number of times in Twitter examples and whatnot. That's not quite the same thing as having it built in, named, and documented.\n\n[21:30] Yes, if you use the useReducer and useContext hooks, you can assemble something that looks and feels reasonably similar to Redux. A lighter weight version. Again, there's that partial overlap with the kinds of things that you can do with Redux.\n\n[21:57] Maybe you don't need to grab Redux right away on a project. You could get by with useReducer and useContext for a while until you hit certain limitations or want to accomplish some other things. It turns out that there are several limitations with this.\n\n[22:19] One of the biggest is the way that context relates to updating React components. A context can only hold one value. Maybe that value is an object that has a bunch of fields in it, but it can only hold one value. If you put a new value into the provider, every component that is subscribed to that context will be re-rendered, period.\n\n[22:49] If I have a component that only really needs part of the data from that context, or maybe some derived value from the context, there's no way to skip re-rendering those components. If you were to put all of your state into a context at the top of the component tree, you would probably be having a lot of different components rendering when they don't actually need to.\n\n[23:22] The React team's recommendation is to maybe split things into several different components or contexts. You might have one context that holds the current theme and another context that holds the current logged in user details or something, and maybe another context that holds some data fetched from the server.\n\n[23:48] You can do that. It totally works. Now you are having to keep track of updating several of these separately.\n\nDave: [23:57] You have to be a little more careful, definitely.\n\nMark: [24:01] Another limitation is that useReducer and useState don't give you the ability to track changes to the values over time or kick off other behavior based on what specifically was updated.\n\n[24:23] Now you can do some neat things with useEffect, but you can't do the centralized tracking and wrapping of behavior that you can with Redux. Yes, there is a lot of overlap, but there are a number of technical capabilities where Redux works differently and may work better in a number of situations.\n\n[24:55] The point I've been trying to emphasize really since I first wrote the FAQ was, it's about understanding the strengths and weaknesses of each of these tools. Understanding what your situation and your needs are and picking the tool that fits your situation the most.\n\n[25:19] Is Redux the right tool for every situation? Of course not. Do a lot of people use it without thinking about it because someone told them to? Yes. Certainly, this is someone who's a newer developer probably doesn't have the experience to be really thinking through the tradeoffs themselves.\n\n[25:43] In an ideal world, people would only pick Redux or GraphQL or Mobx or whatever because it's the best tool for their job, not just because someone told them to or they saw yet another medium post saying, \"This is the right way to do it.\"\n\nDave: [26:03] I think that's a skill you build over time to that's just knowing, being able to look at your own problems and being able to pick a tool that fits those problems instead of just picking maybe the biggest tool that will solve all the future problems you don't have to yet.\n\nMark: [26:19] Unfortunately, that really is something that only comes with experience.\n\nDave: [26:24] It really is. I think a lot of people see Redux and the Context API as interchangeable things. It really seems like you're saying that, for simple things you can use Context for more complex things maybe start to looking into Redux.\n\n[26:44] Is there a point where some specific use cases you think of it like, \"Oh, I should have definitely used Redux for this or definitely not used Redux for that?\"\n\nMark: [26:56] I can think of a few examples. Once one specific case is FormState. Most FormState really doesn't need to go in Redux. If you think about it, most forms, that data is fairly local. You're filling in some fields and the rest of the application doesn't care about what those work in progress values are as you're typing them in.\n\n[27:32] Maybe you care after the user hits the submit or the save button, but the rest of the app probably doesn't need to know that you've typed the first three characters of the first name or something. Most of the time, FormState probably should just stay within a component.\n\n[27:53] There are exceptions to that. I was working on an application, in fact, it was specifically that GWT application that I was rewriting, that had a lot of fairly complex relational data that was being kept in Redux.\n\n[28:16] Once you started editing an item, we actually needed to show both the original values in a couple places in the app and we needed to show the work in progress values, both in the form as you're editing them, and somewhere else.\n\n[28:35] To help visualize this, it was actually a geographical coordinates thing. Imagine a multi-point polyline displayed on a map with maybe a text label attached to it. There's a list on the left side that shows the names of all the current entries.\n\n[29:01] Once I start editing one of those entries, I want to have the text label update on the map as I'm typing something in in the form, or as I change the coordinates for a point, I want to see the shape of the line change on the map.\n\n[29:20] In that specific case, I had data that did need to be displayed in multiple places at once as I was editing the form. That is a good reason to put FormState in Redux, but a login form or something? No, it's not worth it.\n\n[29:45] Eric Rasmussen created the library ReduxForm, which has been very popular within the Redux community. He, himself would say, \"Now, you probably shouldn't be using this.\" In fact, he created two other form libraries. Final form is independent of React and then there's a React Final Form library specifically that wraps it. He would say at this point, \"Don't put your FormState in Redux.\"\n\nDave: [30:20] I think that the ReduxForm library, I used that for a little while at a past job. I think that came from that time period where a lot of people were saying, \"Put all of your state in Redux. It'll make it easier, because everything's in one place, and it's all centralized.\"\n\n[30:38] At that point, all you're really doing is making everything global. Now you just have to manage all that. It's just more work than it's worth.\n\nMark: [30:45] I have talked to a number of folks from different companies who have made a deliberate choice to literally put every variable in their application into Redux. It was for exactly the reasons you mentioned. They want to be able to see the history of everything changing.\n\n[31:05] They want to be able to do the time travel debugging or persist the state, and so on. It is a valid technical choice to do that. There's a difference between, again, deliberately choosing to do that for your situation and your team and blindly doing it because someone told you to.\n\n[31:30] Again, it's that understanding the tools, understanding the tradeoffs, and making the right choice for your situation. Tradeoffs is my favorite word these days.\n\nDave: [31:43] I know. The more you get into this stuff, the more it's like, there's no true answer for anything. That's all tradeoff. One thing's easier and the other thing's harder, whatever.\n\n[31:56] I think that's where we've arrived as a community or best practices around Redux, to if you have global data, or something that needs to be shared between a couple components that needs to be real time synced across the app, then Redux starts to be a good solution for that.\n\n[32:18] I think it's always been a good practice in React to try to keep the data as local through a component as you can. I was standing that whole period where you said to put it on Redux.\n\nMark: [32:32] Kent Dodds had an excellent blog post a few weeks ago about co-locating state. Basically, keep the state as close as possible to the components that actually need it. That is an excellent general principle to try to follow.\n\nDave: [32:52] It seems like one of the complexities with Redux that people run into is the writing reducers, especially the immutable update syntax. When you have multiple levels, as soon as you get past one or two, it becomes really painful to spread out each level and override properties faithfully.\n\n[33:11] If you miss one, then this causes weird bugs. We've got this new Redux Starter Kit library that comes bundled with a library called Immer, which makes the whole reducer thing a lot easier, and it also makes Redux setup in general easier. Can you talk a bit about Redux Starter Kit?\n\nMark: [33:32] Gladly. Quick observation on the immutability thing. I have certain articles that are my go-to paste-in answers for various forms of questions. For example, if someone asks, \"What is a control component?\" Then I'll paste in one of Gosher Aronex's posts about forms.\n\n[33:58] My two standard references on, \"What are immutable updates? How do you do them properly?\" are the \"Immutable Update Patterns\" page from the Redux docs, which I wrote, and the \"Complete Guide to Immutability in React and Redux,\" which you wrote.\n\nDave: [34:21] Thank you.\n\nMark: [34:23] It's a fantastic post. Redux was designed from day one to be a very, very small library that could be extendable. You can add middleware to the store, you can add store enhancers to add some more powerful capabilities like the Redux DevTools.\n\n[34:51] You can combine reducer logic in various ways, like maybe you've got a reducer that lets you undo previous changes. You can wrap that undoable reducer around any other reducer you've written to add that functionality.\n\n[35:14] Redux has a huge ecosystem. I've got a repository that's a catalog of all the Redux-related libraries and add-ons that I've found over the years. It's huge. There's thousands of them. The good news is that if you want to do something with Redux, there's probably an add-on out there that does what you want.\n\n[35:37] The downside is, is that you wind up having to do a lot of configuration and pulling pieces together in some probably custom way to set things up the way you want.\n\n[35:53] I'll give a specific example. The Redux docs talk about using middleware. If you want to use middleware, you have to import the applyMiddleware enhancer from Redux. You pass in, say, Redux Thunk, which is actually another thing you have to add to the store, really, just to be able to do some Ajax calls and then dispatch the result when you're done.\n\n[36:23] Let's just say we want to add Redux Thunk to the store. You have to add the Thunk package. You import the middleware, import applyMiddleware, create the middleware enhancer, and then pass it to createStore.\n\n[36:40] Not too bad yet, but now I want to turn on the Redux DevTools extension, so that I can see the change history of the store in the browser as I'm working on the program. The DevTools requires another enhancer, but you can only pass one enhancer to createStore, which means we now need to merge these two enhancers into a bigger one.\n\n[37:09] Now you have to import the compose function from Redux, and compose together applyMiddleware, and the DevTools enhancer, and pass that to the store.\n\nDave: [37:20] Do them in the right order and a lot of machinery.\n\nMark: [37:27] Ideally, this is something you're only doing once when you start the application, but it's an annoying set of steps to have to go through. If you're following the example that's on the DevTools extension docs, you're having to reference this weird window.__devtools extension, or compose thing in case it doesn't exist. It's ugly.\n\n[37:59] In a broader sense, part of the issue is that Redux is too flexible. There's too many choices to have to make. What Async middleware do I use? Do I use Thunk's, Saga's, Observable's, or something else? What is the difference between these? How do I decide?\n\n[38:25] Then we get into the problems, like you mentioned, with immutable updates, where writing correct immutable update statements for any nested data is a pain, and it's really easy to make a mistake. We've had a lot of people express interest over the years in some official package that would put together our recommended best practices and make it easier to do a lot of common tasks.\n\n[39:04] What are the common things people need to do? They want to set up the store, combine the reducers, add a couple middleware, especially Redux Thunk. They're probably going to want to turn on the Redux DevTools. Wouldn't it be great if there was one function that did all of that for you?\n\nDave: [39:27] Sounds amazing.\n\nMark: [39:29] Redux Starter Kit has a function called configureStore, which you just have to pass in your reducer function, or even the pieces that you would have passed to the combined reducer's function. It will automatically combine the reducers. It automatically sets up the Thunk middleware.\n\n[39:54] It adds a couple middleware to check for accidental mistakes, like mutating your data. It turns on the Redux DevTools extension with one function call. It does all that for you out of the box. It's our best practices built in.\n\n[40:18] What else do people commonly do? They rate reducers, where they look for some action type, they receive the state in the action, they calculate a new immutable state, and they return it. For some reason, a lot of people really hate switch statements. I'm still trying to figure out why.\n\n[40:40] The common alternative is some kind of a function that accepts a lookup table, which is just an object where the keys are Redux action type strings, like addTodo, and the values are reducer functions. You pass that object into some kind of a create reducer function and it looks up which function should be called for which action.\n\n[41:08] We have one of those, except it uses a library inside called Immer, which lets you write mutating statements in your code. It actually does the immutable updates correctly for you behind the scenes.\n\nDave: [41:27] Immer's super cool.\n\nMark: [41:28] Immer is amazing.\n\nDave: [41:29] Super game changer.\n\nMark: [41:33] This means that your reducer logic can be a lot shorter, a lot simpler, and a lot easier to read. What else do people do? They commonly write action types and action creator functions. We've all seen the examples in the Redux docs, where you have your capital letter screaming snake case, variable names, and strings, like const addTodo = addTodo.\n\n[42:05] It's repetitive. It's annoying. Now, like many other things, you aren't required to write your code that way. You don't have to define things as constants. You don't have to write things in uppercase, screaming letters.\n\n[42:26] It doesn't even matter what's inside the string, as long as your reducer logic can say, \"Hey, that is the type of the action that I care about.\" These are the examples that are in the Redux documentation, and therefore, this is what everybody has copied and pasted.\n\n[42:45] Then you have action creators. You wind up having to write a function for every action type. Then you have your three separate files, because we want to reuse the action types in both the action creator file and the reducer's file, which means we need to have the types in a third file, so we can import them in both places.\n\n[43:04] Again, you don't have to do multiple files, but it is the common pattern. Wouldn't it be great if there was something that autogenerated the action creators and the action types for you, so that you never have to write any of those again by hand?\n\n[43:26] Guess what? In Redux Starter Kit, we have a function called createSlice. You parse in the name of the slice, like to-dos, the initial state value, and then one of those objects full of reducer functions. It automatically generates the action types and the action creators. You never have to write them by hand ever again.\n\n[43:57] Could you? Yeah, but you don't have to. I've been using Redux Starter Kit on a couple projects at work over most of this year. It is amazing how much simpler it makes all the code. To top it off, Redux Starter Kit is already written in TypeScript by itself. It works great in TypeScript apps.\n\n[44:26] It automatically includes the createSelector function from the reselect library, which again, most Redux apps would probably be depending on anyway. If you just add Redux Starter Kit to your app, it pulls in the recommended set of packages that you would have added to your app anyway, except you don't have to list them separately.\n\n[44:53] It simplifies the store setup. It makes writing the Redux logic a lot simpler. It eliminates a lot of the common errors that you might make. I've been working on this on and off for about the last year and a half.\n\n[45:11] I am really, really excited, because in hopefully, about two days, I'm going to be publishing version 1.. Really, really, really seriously advertising it. I've been suggesting people use it a lot for the last year. Hey, version 1., definitely time to try it out.\n\nDave: [45:36] It's ready for prime time. By the time you're watching this, dear viewer, it should probably be out and accessible. Go check out Redux Stater Kit. Other than that, I think this has been awesome, Mark, thanks. Do you have any more things to say about Redux Starter Kit or where people can find you online?\n\nMark: [45:58] This actually leads into the next big task that I'll be trying to work on, which is going to be organizing a major rewrite of the Redux core documentation. The Redux docs are really good, and I don't just say that because I have contributed word sections. We've had lots of people tell us they're really good.\n\n[46:21] At the same time, the basic structure of the docs was written back in 2015. Frankly, it was a different era then. You'll see a lot of mentions in the docs of flux libraries, and how Redux compares to other flux libraries. They were written for a different audience.\n\nDave: [46:48] Yeah. It made sense in that time, but not so much now.\n\nMark: [46:52] These days, you've got people who are jumping straight into React and Redux, maybe even right after they started learning how to program, and they have no idea what a flux is.\n\n[47:10] Some of the tutorials have added too many warnings over time. They're points that you should be aware of, but we probably don't need to worry about this in the tutorial.\n\n[47:28] One of the biggest gaps in the current documentation is information on how to write real-world applications. We've got the basic tutorial, which is a to-do list. We've got the advanced tutorial, which I think does some fetching of data from Reddit, and then it's like, \"Bye, have fun.\"\n\n[47:51] We really need a large section with a lot of recommendations and guidelines for how to write serious, full-blown, production-grade Redux apps. As part of that, I really want to emphasize some of our recommendations on how to do things. The documentation is currently very unopinionated.\n\n\"[48:14] Here are five possible ways you could do this. Go figure it out for yourself which one works for you.\"\n\nDave: [48:22] Yeah, like, \"Good luck.\"\n\nMark: [48:24] There are still a lot of areas where it really is up to you, but there are certain patterns that we found probably work better in most situations, like using a feature folder structure, or even a ducks single file structure for your Redux logic, rather than having a reducers, actions, types folder approach.\n\n[48:52] I want to provide some recommendations along with why we recommend certain approaches. One aspect of that is that we are going to teach and encourage the use of Redux Starter Kit as the default recommended way to write Redux code. The first couple of tutorials will still be pretty much the same and still show doing things by hand.\n\n[49:24] I think the starter kit works best if you understand how to do it by hand and why there is a difference. One of my concerns with teaching the use of Redux Starter Kit is that with EMR, you are literally writing mutating code in your reducer functions, and if you aren't passing them to our magic create, slice, and create reducer, you really are mutating your Redux state. That's bad, and you shouldn't do it.\n\nDave: [50:00] You're not using EMR. [inaudible] .\n\nMark: [50:03] I can easily imagine a scenario where someone new comes into a team that has an existing codebase that's using Redux Starter Kit, and they're learning by looking at the existing code, and they see reducers that are saying state.todo*5.completed=true, and they think this is the right way to do it, and they don't realize that it only works if there is the magic inside.\n\n[50:34] How do you teach that? I don't really have a great answer for it, other than at least in the docs, we teach the basic principles and the by-hand approach first, then say now that you understand how to do this the long way, here's the simpler version. Now that you understand it, we recommend you use the shorter approach.\n\n[51:05] That said, this starter kit simplifies things so much that it is absolutely worth encouraging people to use it.\n\nDave: [51:17] I think it'll be awesome for new projects going forward and even if you find yourself in an old code base and you can't stand all the Redux boilerplate, pull in Starter Kit and I think it'll make it easier.\n\nMark: [51:29] One thing that a number of people have pointed out is that the name Starter Kit makes it sound like it's only good for beginners or it's only good for new projects.\n\nDave: [51:40] Right, it's not. It's good for everyone.\n\nMark: [51:44] The name was available at NPM. It is deliberately...It's modeled after Create React App, in a way. Create React App literally sets up a whole project for you, whereas Redux Starter Kit is just a few functions that you can use in any project. Again, the idea is that it's the best practices built in and it simplifies the process.\n\n[52:16] You can use Redux Starter Kit day one on a new project. Or, you can take an existing project and begin incrementally converting it by, say, switching the store setup logic to use configureStore or, swapping out the implementation of a single reducer to use createSlice.\n\n[52:39] It's also good for people who are relatively new or experienced people who have said, I just don't want to write another triple-nested spread operator ever again.\n\nDave: [52:53] Which is entirely logical.\n\nMark: [52:54] I don't want to write anymore triple-nested...\n\n[52:57] [crosstalk]\n\nDave: [52:57] I don't want to write those either. Not fun to write. Not fun to explain.\n\nMark: [53:05] I'm very excited about it. I will admit that I have been refreshing the download count charts on NPM. It's actually going up.\n\nDave: [53:17] Trending up. Good, good, good. Awesome.\n\nMark: [53:20] There are definitely people using it. Hopefully once it hits 1. and we actually start explicitly encouraging it's use in the docks, that will increase further.\n\nDave: [53:33] Awesome. I'm looking forward to that. Definitely, if you're watching this, check out Redux Starter Kit. Where can people find you online?\n\nMark: [53:44] You can generally find me under the handles @acemarke and @markerikson in most places. I'm @acemarke on Twitter, Reddit, Hacker News and the Reactiflux chat channels. I'm @markerikson on GitHub and Stack Overflow.\n\n[54:05] I have a blog at blog.isquaredsoftware.com. If you do a search, for example, the phrases idiomatic Redux or practical Redux, it will probably turn up some of my blog posts.\n\nDave: [54:23] Also, Redux's not dead yet.\n\n[54:24] [laughter]\n\nMark: [54:25] Including that post.\n\nDave: [54:27] Comes up first for that. Awesome. Thanks, again for chatting. This has been fun.\n\nMark: [54:33] Thanks for having me on.",
        "casting_words_order": "zeLP",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson",
        "url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson",
        "path": "/lessons/egghead-dave-ceddia-interviews-mark-erikson?pl=pure-react-interviews",
        "http_url": "http://app.egghead.af:5000/lessons/egghead-dave-ceddia-interviews-mark-erikson?pl=pure-react-interviews",
        "http_short_url": "http://app.egghead.af:5000/s/str4b",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_480/eggheadlogo.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_280/eggheadlogo.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_256/eggheadlogo.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_128/eggheadlogo.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_64/eggheadlogo.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_32/eggheadlogo.png",
        "icon_url": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1567198446/og-image-assets/eggo.svg",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-launch-mark-erikson-redux-and-context-HykSGZ8cr/scikit-learn-pure-react-launch-mark-erikson-redux-and-context-HykSGZ8cr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "tags": [],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
        "series_row_order": -2797567,
        "series": {
          "title": "Pure React Interviews",
          "description": "Exclusive Pure React Bonus Content",
          "duration": 15713,
          "slug": "pure-react-interviews",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-interviews",
          "path": "/courses/pure-react-interviews",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875311,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-mark-erikson/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5386,
        "creator_id": 9671,
        "slug": "egghead-dave-ceddia-interviews-swizec-teller",
        "title": "Dave Ceddia interviews Swizec Teller",
        "state": "bundled",
        "summary": "TODO apps. Ugh. When Swizec decided to learn React, he had a different idea in mind: build a data visualization with React and D3.js, and then write a book about it. In this interview we talk about how to keep up with the constantly-changing world of front end development, how to decide what to play around with, and what sorts of opportunities we see for improvements.",
        "duration": 2148,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Dave Ceddia: [00:00] Hey, everyone. I'm Dave Ceddia. \r\n[00:00] Today, I'm joined by Swizec \r\n[00:00] Teller. Swiz, thanks for being \r\n[00:00] here.\r\nSwizec Teller: [00:06] Hey, guys. Super excited to be \r\n[00:00] here.\r\nDave: [00:10] Thanks for coming. Could you \r\n[00:00] introduce yourself?\r\nSwizec: [00:13] I'm Swiz. I've been working with \r\n[00:00] React for a couple of years now. \r\n[00:00] I've published a couple of \r\n[00:00] versions of React for Data \r\n[00:00] Visualization, where I talk more \r\n[00:00] about the data visualization \r\n[00:00] side of React.\r\n[00:00] These days, I'm \r\n[00:00] trying to figure out how to \r\n[00:00] package React into a \r\n[00:00] comprehensive package with \r\n[00:00] serverless backends and JAMSTEC \r\n[00:00] front ends, and all of that cool \r\n[00:00] stuff that seems to be coming on \r\n[00:00] the horizon.\r\nDave: [00:41] That's fun stuff going from the \r\n[00:00] advanced. It feels like React \r\n[00:00] and D3 is kind of advanced stuff. \r\n[00:00] The serverless stuff is, too.\r\nSwizec: [00:51] Yeah, I think React and D3, I \r\n[00:00] mostly used D3 as a hook to \r\n[00:00] learn React, because I already \r\n[00:00] knew D3 before. I knew some data \r\n[00:00] visualization stuff. Adding \r\n[00:00] React seemed like a natural fit, \r\n[00:00] especially because I like how \r\n[00:00] React does composition, \r\n[00:00] components, and all of that \r\n[00:00] stuff.\r\n[00:00] It seemed, \"How about I \r\n[00:00] try to teach people React by \r\n[00:00] doing something that isn't a to-\r\n[00:00] do app?\" When I started doing \r\n[00:00] React and D3, nearly every \r\n[00:00] course you could find or every \r\n[00:00] tutorial was building a to-do \r\n[00:00] app. There was absolutely \r\n[00:00] nothing else out there done with \r\n[00:00] React.\r\n[00:00] It was almost like, if \r\n[00:00] you want to build a website you \r\n[00:00] use jQuery or Backbone. If you \r\n[00:00] want to build a to-do app you \r\n[00:00] use React. That's what it looked \r\n[00:00] like when I started.\r\nDave: [01:44] Right, yeah. D3 is a good angle \r\n[00:00] on that, then.\r\nSwizec: [01:46] Yeah, exactly. It was like, \"Hey, \r\n[00:00] you can do other stuff with \r\n[00:00] React and it totally works for \r\n[00:00] that.\"\r\nDave: [01:52] Yeah, I feel like there's still \r\n[00:00] a thing. To-do app is the \r\n[00:00] generic like, \"I have a new \r\n[00:00] framework. Here's the to-do app.\"\r\nSwizec: [01:59] Yeah. I don't know what it is \r\n[00:00] about to-do apps. One way I've \r\n[00:00] heard about is that a to-do app \r\n[00:00] is complex enough that it \r\n[00:00] actually shows you how the \r\n[00:00] framework works. But it's simple \r\n[00:00] enough that everyone knows what \r\n[00:00] a to-do app is, without having \r\n[00:00] to really think about it.\r\n[00:00] You \r\n[00:00] don't have to explain what \r\n[00:00] you're building. It's just, \"\r\n[00:00] We're building a to-do app,\" and \r\n[00:00] then you move on to the \r\n[00:00] framework, versus with a lot of \r\n[00:00] other approaches you're like, \"\r\n[00:00] Here's the business problem \r\n[00:00] we're solving.\" Then two hours \r\n[00:00] later, \"This is how we solved it.\"\r\nDave: [02:37] Yeah, you have to give people a \r\n[00:00] PhD on whatever domain knowledge \r\n[00:00] they need to be able to use the \r\n[00:00] app.\r\nSwizec: [02:42] Exactly. You have to explain so \r\n[00:00] many things. To-do apps, they \r\n[00:00] have their place, but personally, \r\n[00:00] I like...I've been enjoying the \r\n[00:00] recent trend where it's like, \"\r\n[00:00] Hey, let's build an Instagram \r\n[00:00] clone,\" or, \"Let's build a \r\n[00:00] Facebook clone or a Twitter \r\n[00:00] clone.\" It does seem more \r\n[00:00] interesting to me.\r\nDave: [03:03] Yeah, those are a lot more fun, \r\n[00:00] I think. There's always that \r\n[00:00] tension between something that's \r\n[00:00] small and easy to teach, versus \r\n[00:00] something that's comprehensive \r\n[00:00] and real world-y. If you were to \r\n[00:00] totally do it with React, like, \"\r\n[00:00] Let's build an Instagram clone \r\n[00:00] with the entire stack,\" it's \r\n[00:00] super overwhelming. [laughs] but \r\n[00:00] to-do app is boring.\r\nSwizec: [03:25] It's really hard to find good \r\n[00:00] examples. That's what I struggle \r\n[00:00] with a lot when I'm teaching, \r\n[00:00] too. Either I build something \r\n[00:00] that people are going to have \r\n[00:00] fun building, but then nobody \r\n[00:00] will get to the end and build it, \r\n[00:00] or we build a bunch of random \r\n[00:00] things that don't really fit \r\n[00:00] together, and then everyone's \r\n[00:00] like, \"OK, now what do I do?\"\r\nDave: [03:47] [laughs] It's like, \"What's the \r\n[00:00] next that's actually the easy \r\n[00:00] thing?\"\r\nSwizec: [03:51] Draw the rest of the owl.\"\r\nDave: [03:53] [laughs] Yeah.\r\n[00:00] Did you get into \r\n[00:00] React from the angle of teaching \r\n[00:00] from the very beginning, or did \r\n[00:00] you play around with it \r\n[00:00] beforehand?\r\nSwizec: [04:02] I have a pretty...or at least I \r\n[00:00] think it's an interesting story, \r\n[00:00] of how I got into React. It was \r\n[00:00] back in, I think it was 2015 or \r\n[00:00] something, maybe 2014. React was \r\n[00:00] a brand new framework. It just \r\n[00:00] got open sourced at the time. I \r\n[00:00] was in Europe, where nobody has \r\n[00:00] even heard of React before. It \r\n[00:00] was more like, \"React is this \r\n[00:00] new thing that just showed up.\"\r\n[00:00] Then, when I moved to the US, I \r\n[00:00] found out that people have been \r\n[00:00] using React since 2013 or even \r\n[00:00] earlier. By the time I heard it, \r\n[00:00] it was 2015. That's a different \r\n[00:00] topic.\r\nDave: [04:45] [laughs]\r\nSwizec: [04:45] A friend of mine was like, \"OK, \r\n[00:00] I've heard of this React thing, \r\n[00:00] and you have a data \r\n[00:00] visualization book with D3. How \r\n[00:00] about you write a book about \r\n[00:00] React and D3, because I wanna \r\n[00:00] learn and see if React is useful? \r\n[00:00] You already have an angle on D3.\" \r\n[00:00] I was like, \"That sounds useful. \r\n[00:00] That sounds like a good idea.\"\r\nDave: [05:05] [laughs] Interesting.\r\nSwizec: [05:05] I don't have any big long-term \r\n[00:00] projects right now, and React \r\n[00:00] seems cool. OK, let's go learn \r\n[00:00] React and write a book about it.\" \r\n[00:00] I wrote a super short...I \r\n[00:00] basically learned React in two \r\n[00:00] weeks with...I built a project \r\n[00:00] visualizing a data set of H1B \r\n[00:00] salaries using React.\r\n[00:00] Then I \r\n[00:00] wrote what was essentially a 3,\r\n[00:00] 000- or 4,000-word blog post. \r\n[00:00] Instead of making it as a blog, \r\n[00:00] I published it as a PDF or e-\r\n[00:00] published, or whatever back then, \r\n[00:00] on New Pub, I think. I'm not \r\n[00:00] sure if that still exists.\r\n[00:00] I \r\n[00:00] published it and it got a huge \r\n[00:00] response. When I launched my \r\n[00:00] data visualization it got on \"\r\n[00:00] Happy News\" front page for like \r\n[00:00] a day-and-a-half. It was near \r\n[00:00] the top. I had the bright idea \r\n[00:00] to add a link to it that said, \"\r\n[00:00] Hey, subscribe to emails. I'm \r\n[00:00] going to write a book about how \r\n[00:00] to build stuff like this with \r\n[00:00] React.\"\r\n[00:00] Something like 2,000 or \r\n[00:00] 3,000 people signed up for those \r\n[00:00] emails. Two weeks later I was \r\n[00:00] like, \"Here's the PDF. Do you \r\n[00:00] want to pay me like five bucks \r\n[00:00] for it, or maybe ten bucks?\" \r\n[00:00] People did, and that's how I \r\n[00:00] became a React instructor.\r\nDave: [06:25] That's awesome. You could learn \r\n[00:00] React to teach it, that's great.\r\nSwizec: [06:31] Yeah, at least in the beginning \r\n[00:00] for a while it seemed like \r\n[00:00] teaching React was the killer \r\n[00:00] feature of React. Everyone was \r\n[00:00] trying to teach React at the \r\n[00:00] time?\r\nDave: [06:41] Yeah. It was a such a paradigm \r\n[00:00] shift from what we were doing \r\n[00:00] then. I was doing Angular 1 and \r\n[00:00] React was a breath a fresh air.\r\nSwizec: [06:54] You know what?\r\nDave: [06:54] It was not good.\r\nSwizec: [06:57] It was great when it was \r\n[00:00] designed. It's just that it did \r\n[00:00] not stand the test of time.\r\nDave: [07:01] Yeah, it didn't scale at all. I \r\n[00:00] use \"scale\" very loosely. It was \r\n[00:00] really fun for the first two \r\n[00:00] weeks. Then it was like, \"Oh, \r\n[00:00] this is really...\"\r\nSwizec: [07:09] I remember Angular 1, you could \r\n[00:00] build a simple thing very, very \r\n[00:00] quickly and get it off the \r\n[00:00] ground super fast. Then \r\n[00:00] everything just fell apart \r\n[00:00] immediately. What I really like \r\n[00:00] about React is that the same \r\n[00:00] concept you use when you're just \r\n[00:00] starting out, just scale \r\n[00:00] infinitely.\r\n[00:00] No matter how many \r\n[00:00] developers you add to the team \r\n[00:00] or how big your product becomes, \r\n[00:00] you can still use the same React \r\n[00:00] patterns and they work. One of \r\n[00:00] my dreams starting out with \r\n[00:00] React was that we would evolve \r\n[00:00] an ecosystem similar to jQuery \r\n[00:00] plugins, where you could go to \r\n[00:00] GitHub and get a random React \r\n[00:00] component that does whatever you \r\n[00:00] need it to do, and put it in \r\n[00:00] your project.\r\n[00:00] You can do that, \r\n[00:00] because people watching this now \r\n[00:00] don't really remember what \r\n[00:00] jQuery plugins were like, but \r\n[00:00] they were pretty cool. You could \r\n[00:00] say, \"I need a toolbar,\" and you \r\n[00:00] would find 10 different plugins \r\n[00:00] that would make toolbars, or \r\n[00:00] drop downs, or whatever.\r\n[00:00] We've \r\n[00:00] kind of gotten there with React \r\n[00:00] by now. There's a lot of things. \r\n[00:00] One of my favorite examples of \r\n[00:00] that are react-spinners. You can \r\n[00:00] just npm install react-spinners \r\n[00:00] and you have loading components \r\n[00:00] for all sorts of different \r\n[00:00] situations. That's really cool.\r\nDave: [08:31] Yeah, and it feels like \r\n[00:00] competitive advantage for React. \r\n[00:00] It has all these really easy to \r\n[00:00] use components out-of-the-box. \r\n[00:00] No one wants to write another \r\n[00:00] date picker. It's not fun to \r\n[00:00] write, like npm install, \r\n[00:00] whatever the best React one is.\r\nSwizec: [08:49] Exactly. Npm install solved my \r\n[00:00] problem. That's one of the main \r\n[00:00] benefits, at least for me with \r\n[00:00] React, is that you can build \r\n[00:00] like legos, basically. You build \r\n[00:00] the basic components and then \r\n[00:00] you combine them together and a \r\n[00:00] site comes out. Especially, now \r\n[00:00] with...what's it called? The \r\n[00:00] buzz word escapes me...design \r\n[00:00] systems.\r\n[00:00] Ideally, I would never \r\n[00:00] have to think about design ever \r\n[00:00] again. My designer asked me, or \r\n[00:00] a front end team or something \r\n[00:00] builds a bunch of components. \r\n[00:00] Then whenever I have to build a \r\n[00:00] new app for my company, it \r\n[00:00] magically looks like it came \r\n[00:00] from my company. I didn't have \r\n[00:00] to write a single of CSS or \r\n[00:00] anything like that.\r\nDave: [09:41] That's the dream.\r\nSwizec: [09:43] That's the dream. That still \r\n[00:00] hasn't quite happened.\r\nDave: [09:47] Yeah, there's always \r\n[00:00] customizations and stuff you \r\n[00:00] want to make. You can get most \r\n[00:00] of the way there, and get like \r\n[00:00] 80, 90 percent of the way there \r\n[00:00] just in some of the framework, \r\n[00:00] or something.\r\nSwizec: [09:57] That's true. If we didn't have \r\n[00:00] React, we would never get there. \r\n[00:00] Like jQuery and Angular really \r\n[00:00] didn't quite scale in for that \r\n[00:00] kind of approach of legos, and \r\n[10:17] you could re-use them, and put \r\n[00:00] them together. I love that.\r\nDave: [10:15] It feels like React ushered in \r\n[00:00] the component age of front-end \r\n[00:00] development. Everything is \r\n[00:00] components now. There's React, \r\n[00:00] Angular, Vue, or Svelte. It's \r\n[00:00] all components.\r\nSwizec: [10:26] That's true. Before that, we \r\n[00:00] didn't really have components, \r\n[00:00] did we? We had jQuery functions. \r\n[00:00] You could use a jQuery function \r\n[00:00] to wrap and encapsulate a bunch \r\n[00:00] of behavior, but it wasn't \r\n[00:00] really a component. It's really \r\n[00:00] hard to use.\r\nDave: [10:44] Angular tried to do that with \r\n[00:00] directives. We've had web \r\n[00:00] components that are kind of like \r\n[00:00] that.\r\nSwizec: [10:51] I never understood directives. \r\n[00:00] People tell me that they're \r\n[00:00] useful, but I still haven't \r\n[00:00] found anyone who uses them in \r\n[00:00] production. I'm sure people do \r\n[00:00] use them in production. It's \r\n[00:00] just that I don't know \r\n[00:00] personally anyone who does.\r\nDave: [11:06] I feel the same. They seem neat, \r\n[00:00] but I'm not sure how to use them \r\n[00:00] or who uses them.\r\nSwizec: [11:12] I heard they're big in the Vue \r\n[00:00] community, but I also haven't \r\n[00:00] seen anyone in the Vue community \r\n[00:00] use them. They always build \r\n[00:00] their own versions.\r\nDave: [11:23] [laughs] Interesting.\r\nSwizec: [11:26] Have you done any Vue before? Is \r\n[00:00] that even interesting or \r\n[00:00] relevant?\r\nDave: [11:32] I haven't done Vue before, no. I \r\n[00:00] feel like I should try Vue, just \r\n[00:00] to know what it's like. It \r\n[00:00] reminds me of Angular 1, but \r\n[00:00] better maybe. I haven't tried it.\r\nSwizec: [11:44] I've been using Vue a little bit. \r\n[00:00] The syntax gives me really bad \r\n[00:00] memories of Angular 1. Other \r\n[00:00] than that, it's actually very \r\n[00:00] similar to React. You can use \r\n[00:00] all the same React patterns, \r\n[00:00] just the syntax is weird \r\n[00:00] sometimes.\r\nDave: [12:02] That makes sense. It's that \r\n[00:00] whole template first versus \r\n[00:00] JavaScript first thing. Vue and \r\n[00:00] Svelte go on the template side, \r\n[00:00] but it can work.\r\nSwizec: [12:12] At the end of the day, it's like \r\n[00:00] you said. Since React, \r\n[00:00] everything has components. \r\n[00:00] Everything is a component now, \r\n[00:00] and everyone uses the same idea \r\n[00:00] of...\r\n[00:00] I remember that famous \r\n[00:00] screenshot or photo from a talk \r\n[00:00] in one of the early React \r\n[00:00] conferences where it said the \r\n[00:00] old separation of concerns, and \r\n[00:00] you have CSS, JavaScript and \r\n[00:00] HTML, and the new separation of \r\n[00:00] concerns. It's like button, form \r\n[00:00] and so on. Everyone uses the \r\n[00:00] vertical integration now.\r\nDave: [12:45] Yeah, it works better, I think.\r\nSwizec: [12:49] I remember growing up as a web \r\n[00:00] developer, everyone was \r\n[00:00] promising me, \"In the future, we \r\n[00:00] will have div liners to build \r\n[00:00] your CSS and people who just \r\n[00:00] build your HTML. You're just \r\n[00:00] going to focus as a 'proper' \r\n[00:00] software engineer on the \r\n[00:00] JavaScript side.\" That never \r\n[00:00] happened.\r\nDave: [13:09] No. I remember that too, \r\n[00:00] thinking that at some companies, \r\n[00:00] they must have the front-end \r\n[00:00] developers just do the \r\n[00:00] JavaScript or something. They're \r\n[00:00] too closely linked to really \r\n[00:00] make that a reality.\r\nSwizec: [13:21] Yeah, exactly. There's so much \r\n[00:00] you need to do in CSS to have a \r\n[00:00] really properly functioning \r\n[00:00] button. You need to have the \r\n[00:00] correct classes or ids in HTML. \r\n[00:00] I've tried that.\r\n[00:00] Every time \r\n[00:00] I've given control of HTML to my \r\n[00:00] designers, it was more of a mess \r\n[00:00] than not because some ids or \r\n[00:00] class names made sense to them \r\n[00:00] and they didn't make sense to my \r\n[00:00] JavaScript. Or if they changed \r\n[00:00] them, my JavaScript broke and so \r\n[00:00] on. It's a mess.\r\nDave: [13:52] Yeah, it's tricky. Balancing the \r\n[00:00] two disciplines and signing \r\n[00:00] responsibilities to each \r\n[00:00] [inaudible] . I think the design \r\n[00:00] system thing is really how we \r\n[00:00] fix that. It seems like a good \r\n[00:00] way forward.\r\nSwizec: [14:06] Yeah, I think...\r\n[14:09] [crosstalk]\r\nSwizec: [14:09] Go on.\r\nDave: [14:10] I was going to say, it feels \r\n[00:00] like there is always new stuff \r\n[00:00] coming out, even though it's \r\n[00:00] variations on a theme. Now we've \r\n[00:00] got Svelte and there is Vue, and \r\n[00:00] all this stuff. How do you stay \r\n[00:00] on top of all that stuff?\r\nSwizec: [14:22] Right, how do I stay on top of \r\n[00:00] all that stuff? Honestly, I used \r\n[00:00] to be a lot better at staying on \r\n[00:00] top of all of that stuff, like \r\n[00:00] reading Reddit and \"Hacker News,\" \r\n[00:00] and newsletters. I feel like the \r\n[00:00] older I get, the more I realize \r\n[00:00] I just don't care anymore. React \r\n[00:00] is really great. It lets me do \r\n[00:00] everything I need to do.\r\n[00:00] If I \r\n[00:00] keep my thumb on the pulse on \r\n[00:00] Twitter a little bit, because \r\n[00:00] the React community is really \r\n[00:00] strong on Twitter, which I love \r\n[00:00] because Twitter is where I like \r\n[00:00] to waste my Internet time, I \r\n[00:00] find that I really find a lot of \r\n[00:00] things out from the grapevine \r\n[00:00] and see where things are moving.\r\n[00:00] I don't feel as pressured as I \r\n[00:00] used to to keep on top of all \r\n[00:00] the latest frameworks and the \r\n[00:00] latest JavaScript development \r\n[00:00] because, at the end of the day, \r\n[00:00] I just need to get my stuff done \r\n[00:00] and it works.\r\n[00:00] It was a lot more \r\n[00:00] important a couple of years ago \r\n[00:00] to keep really on top because we \r\n[00:00] were going through a huge \r\n[00:00] paradigm shift in the JavaScript \r\n[00:00] world where we were moving from \r\n[00:00] the old Angular and jQuery to \r\n[00:00] React and components, and we \r\n[00:00] were moving from ES2000 whatever, \r\n[00:00] ES5 to ES6.\r\n[00:00] The whole language \r\n[00:00] completely changed. It became \r\n[00:00] very different. Nowadays, each \r\n[00:00] year we get a new version of \r\n[00:00] JavaScript and it adds two or \r\n[00:00] three functions that you \r\n[00:00] probably will never actually \r\n[00:00] come across. Even if you do come \r\n[00:00] across them, it's going to be \r\n[00:00] like, oh yeah, in that one \r\n[00:00] situation in one small part of \r\n[00:00] my job I can use that new \r\n[00:00] feature. Awesome.\r\n[00:00] It's similar \r\n[00:00] with React. It's been very \r\n[00:00] stable. React 16 has been out \r\n[00:00] for, what, two years now? \r\n[00:00] Something like that. I don't \r\n[00:00] know if that's a good thing or a \r\n[00:00] bad thing, but it definitely \r\n[00:00] feels like the JavaScript world \r\n[00:00] has slowed down a little bit. \r\n[00:00] We're in an innovation lull.\r\n[00:00] There was a huge event with \r\n[00:00] React Hooks, and I spent some \r\n[00:00] time being on top of that, but \r\n[00:00] again, that was a big event that \r\n[00:00] changed a lot of people's \r\n[00:00] perspectives on React and how to \r\n[00:00] do JavaScript. Which means that \r\n[00:00] it was all over Twitter and \r\n[00:00] everyone was talking about it, \r\n[00:00] so it was very easy to keep \r\n[00:00] track of. You were like, \"Oh, \r\n[00:00] yeah. That new thing is \r\n[00:00] happening,\" because everyone is \r\n[00:00] talking about it.\r\n[16:57] [laughter]\r\nSwizec: [16:57] I feel like that's a good way to \r\n[00:00] stay on top of things. It feels \r\n[00:00] like potentially just being in \r\n[00:00] San Francisco or in the San \r\n[00:00] Francisco time zone also helps a \r\n[00:00] lot because, both in person and \r\n[00:00] virtually, you're surrounded by \r\n[00:00] people who try to be on the edge \r\n[00:00] and who are really passionate \r\n[00:00] and interested about JavaScript, \r\n[00:00] and the web, and all of that \r\n[00:00] stuff.\r\n[00:00] People tend to tweet and \r\n[00:00] talk about these things when \r\n[00:00] they're awake, so if you're in \r\n[00:00] the same time zone as all of the \r\n[00:00] other \"big names\" in the \r\n[00:00] industry, you will by osmosis be \r\n[00:00] able to keep track of everything \r\n[00:00] or just stay on top of it. I \r\n[00:00] don't really have a...\r\n[00:00] I used \r\n[00:00] to try to have an hour a day \r\n[00:00] where I would read news, or \r\n[00:00] newsletters, or articles about \r\n[00:00] this stuff. Now, I'm like, \"I \r\n[00:00] don't have time for that.\" When \r\n[00:00] I have a problem where I don't \r\n[00:00] know how to do something, I \r\n[00:00] google it.\r\n[00:00] Otherwise, I maybe \r\n[00:00] go to a conference to get a feel \r\n[00:00] for what's coming on the horizon. \r\n[00:00] That's always a good idea, going \r\n[00:00] to conferences. You get to see \r\n[00:00] talks from what's going to be \r\n[00:00] new in six months or whatever. \r\n[00:00] Other than that, just keep \r\n[00:00] solving interesting problems. \r\n[00:00] Then when you have an issue you \r\n[00:00] don't know how to solve, just \r\n[00:00] google for it.\r\n[00:00] Google is \r\n[00:00] surprisingly good at surfacing \r\n[00:00] new information. I think it \r\n[00:00] prefers new information than old \r\n[00:00] information. That also helps. \r\n[00:00] Today, I was doing some \r\n[00:00] TypeScript with React, which \r\n[00:00] I've never done before. I know \r\n[00:00] that TypeScript is becoming a \r\n[00:00] big thing because for the last \r\n[00:00] year, everyone in the React \r\n[00:00] community has been talking about \r\n[00:00] TypeScript a lot, so I gave it a \r\n[00:00] shot.\r\n[00:00] I was able to google how \r\n[00:00] to do stuff with TypeScript in \r\n[00:00] React. Unless you want to be \r\n[00:00] that person who writes the first \r\n[00:00] new block post on a new \r\n[00:00] technology, there's no need to \r\n[00:00] be at the bleeding edge all of \r\n[00:00] the time. Sometimes, you just \r\n[00:00] got to build something that \r\n[00:00] works.\r\nDave: [19:10] Yeah, you can't spend all your \r\n[00:00] time learning new stuff, right? \r\n[00:00] You got to build stuff.\r\nSwizec: [19:15] Exactly. When you think about it, \r\n[00:00] a lot of this new stuff that \r\n[00:00] we're learning and working with, \r\n[00:00] unless you are working on a \r\n[00:00] completely new codebase, when do \r\n[00:00] you think you're actually going \r\n[00:00] to get to use it?\r\nDave: [19:30] That's another whole thing. It's \r\n[00:00] like you are this cool, new \r\n[00:00] thing. You can't give your \r\n[00:00] company the switch or whatever.\r\nSwizec: [19:39] You're not going to go and \r\n[00:00] rewrite all of your 10,000 React \r\n[00:00] components to Hooks as soon as \r\n[00:00] Hooks come out, or your boss \r\n[00:00] would. I don't even know how \r\n[00:00] they would react if you came \r\n[00:00] with that proposal, but I'm sure \r\n[00:00] it wouldn't be a yes.\r\nDave: [20:00] Yeah, it's all going to work the \r\n[00:00] same. We're just going to take a \r\n[00:00] couple of weeks and rewrite all \r\n[20:07] the codes. [laughs]\r\nSwizec: [20:07] Let's just stop building \r\n[00:00] features for two weeks and just \r\n[00:00] rewrite everything to this new \r\n[00:00] and cool technology, right?\r\nDave: [20:12] [laughs] Right.\r\nSwizec: [20:14] I'm sure that's going to work \r\n[00:00] out.\r\nDave: [20:16] That would not go great. People \r\n[00:00] ask about like, \"Should I just \r\n[00:00] learn Hooks, or should I learn \r\n[00:00] Classes and stuff?\" I'm like, \"\r\n[00:00] You should probably learn both,\" \r\n[00:00] because there's enough code out \r\n[00:00] there. Not everyone just rewrote \r\n[00:00] their code overnight. Not every \r\n[00:00] app is new. You're going to run \r\n[00:00] into Classes.\r\nSwizec: [20:31] Yeah, but obviously, if you're \r\n[00:00] starting a new app right now, I \r\n[00:00] would recommend doing it with \r\n[00:00] Hooks, not with Classes.\r\nDave: [20:37] Yeah...\r\n[20:41] [crosstalk]\r\nSwizec: [20:41] That's basically how I keep up \r\n[00:00] with new technologies and stuff. \r\n[00:00] I keep a time on the pulse and \r\n[00:00] what people are saying in the \r\n[00:00] community and then try to find \r\n[00:00] excuses for new projects where I \r\n[00:00] can use these new technologies. \r\n[00:00] Otherwise, I just keep plodding \r\n[00:00] along and gently adding new \r\n[00:00] features where I can.\r\n[00:00] That's \r\n[00:00] one of the nice things with \r\n[00:00] React and Hooks. For example, \r\n[00:00] they work with Classes and class-\r\n[00:00] based components so you can mix \r\n[00:00] and match. That's a very long \r\n[00:00] answer to not really say a lot, \r\n[00:00] I feel like.\r\nDave: [21:23] I don't know. I feel like that's \r\n[00:00] a good approach though. Learn it \r\n[00:00] as it comes. Learn it as you \r\n[00:00] need it, and maybe keep a post \r\n[00:00] on Twitter or whatever, and dive \r\n[00:00] into things that look fun.\r\nSwizec: [21:35] Exactly. It's always nice to be \r\n[00:00] on a couple of newsletters from \r\n[00:00] people who are in the community \r\n[00:00] and read a couple of their posts \r\n[00:00] and see what they're talking \r\n[00:00] about.\r\n[00:00] That's usually a good \r\n[00:00] sign of things that are coming, \r\n[00:00] is keeping in proximity with the \r\n[00:00] rest of the community, I would \r\n[00:00] say. Don't go and isolate \r\n[00:00] yourself, but also don't try to \r\n[00:00] consume every single piece of \r\n[00:00] content that comes. Try to just \r\n[00:00] stay in touch.\r\nDave: [22:10] It does feel like things have \r\n[00:00] slowed down a lot in the \r\n[00:00] JavaScript community in the last \r\n[00:00] couple of years. It had made \r\n[00:00] huge strides. Now, it's calming \r\n[00:00] down a bit, but it feels like \r\n[00:00] there's still probably a lot of \r\n[00:00] unsolved problems and stuff \r\n[00:00] that's harder than it should be.\r\n[00:00] Do you feel like there's \r\n[00:00] opportunities for improvements? \r\n[00:00] You're seeing like big, glaring, \r\n[00:00] obvious things?\r\nSwizec: [22:36] That's always really hard. I \r\n[00:00] feel like a lot of big, glorious, \r\n[00:00] obvious things that are still a \r\n[00:00] problem with...Front-end \r\n[00:00] JavaScript in general feels \r\n[00:00] relatively solved right now. \r\n[00:00] It's more about how easy it is.\r\n[00:00] There's a lot of things where it \r\n[00:00] solves for the easy case. Then \r\n[00:00] when you want to do something \r\n[00:00] more complicated, it suddenly \r\n[00:00] blows up. Those things haven't \r\n[00:00] been quite solved yet. I feel \r\n[00:00] like we're still working on \r\n[00:00] being productive in a large \r\n[00:00] codebase.\r\n[00:00] When you have couple \r\n[00:00] of hundred thousand lines of \r\n[00:00] JavaScript, how to work with \r\n[00:00] that productively and not have a \r\n[00:00] bunch of null and undefined \r\n[00:00] errors everywhere. A big problem \r\n[00:00] is also engineers who come and \r\n[00:00] go from your team and then don't \r\n[00:00] have the context from what was \r\n[00:00] happening.\r\n[00:00] I have that problem \r\n[00:00] at my day job right now, where \r\n[00:00] we have a bunch of new people. \r\n[00:00] It feels like for them to be \r\n[00:00] productive in the codebase, they \r\n[00:00] would essentially need to know \r\n[00:00] the entire history of the \r\n[00:00] company over the last five or \r\n[00:00] six years to be able to know \r\n[00:00] what things actually mean. Those \r\n[00:00] are not technical problems.\r\nDave: [23:54] That feels like that's a... \r\n[23:57] [laughs]\r\nSwizec: [23:57] That's a people problem.\r\nDave: [23:58] People problem, it's like \r\n[00:00] everlasting one. Of course, your \r\n[00:00] company is like that too, where \r\n[00:00] the codebase is just sprawling, \r\n[00:00] and you really couldn't \r\n[00:00] understand all of it.\r\nSwizec: [24:05] Exactly. I think TypeScript is \r\n[00:00] an attempt to solve some of that. \r\n[00:00] At least you get really nice \r\n[00:00] autocompletion, you know what \r\n[00:00] functions are expecting to get \r\n[00:00] and return and stuff and that \r\n[00:00] sort of thing.\r\n[00:00] We are working \r\n[00:00] on that problem, but it's not \r\n[00:00] quite there yet. It still feels \r\n[00:00] like you are putting in a lot of \r\n[00:00] work. With TypeScript, you're \r\n[00:00] putting in a lot of work for \r\n[00:00] things that don't even end up in \r\n[00:00] your final code.\r\nDave: [24:38] Yeah. It's just like Guardrails. \r\n[00:00] TypeScript, sometimes, it feels \r\n[00:00] super helpful, and it catches \r\n[00:00] errors. Other times, it feels \r\n[00:00] like you're just writing types. \r\n[00:00] You know what it's going to be. \r\n[00:00] You just have to tell the \r\n[00:00] computer.\r\nSwizec: [24:53] Yeah, you just have to tell the \r\n[00:00] computer. You spent all this \r\n[00:00] time writing those types, and \r\n[00:00] then the first thing the \r\n[00:00] compiler does is throw them away \r\n[00:00] and then compile the rest of \r\n[00:00] your code, right?\r\nDave: [25:03] [laughs] Yeah. It feels like \r\n[00:00] authentication is one of those \r\n[00:00] things. It's painful. It's not \r\n[00:00] like it's unsolved, but it's not \r\n[00:00] easy.\r\nSwizec: [25:13] Authentication is super painful \r\n[00:00] because it requires a lot of \r\n[00:00] back-end stuff. I build the use \r\n[00:00] auth hook, which offers pretty \r\n[00:00] good ergonomics for \r\n[00:00] authentication, but it still \r\n[00:00] requires a provider in the \r\n[00:00] background. That's where it gets \r\n[00:00] tricky.\r\n[00:00] We'd use auth right now. \r\n[00:00] It uses Auth0 for the extra \r\n[00:00] authentication provider, which \r\n[00:00] is great if you're OK with using \r\n[00:00] those. If you want to use your \r\n[00:00] own or somebody else, then right \r\n[00:00] now, it's not easy.\r\n[25:57] [laughter]\r\nSwizec: [25:57] I wanted to say...I probably \r\n[00:00] shouldn't, but it's complicated \r\n[00:00] because there's so many little \r\n[00:00] tricky things with \r\n[00:00] authentication. If you're \r\n[00:00] building forms, it feels super \r\n[00:00] easy. Then immediately, it very \r\n[00:00] quickly blows up in your face, \r\n[00:00] and you realize, \"Oh, that's why \r\n[00:00] there are five different form \r\n[00:00] libraries for React.\"\r\nDave: [26:23] The easy case is super simple. \r\n[00:00] Then you realize, \"Oh, every \r\n[00:00] field needs like four different \r\n[00:00] flags. I've got to keep them all \r\n[00:00] updated.\"\r\n[26:28] [crosstalk]\r\nSwizec: [26:28] You have authentication. Then \r\n[00:00] how do you store it securely so \r\n[00:00] that people can't steal each \r\n[00:00] other's sessions? Then on top of \r\n[00:00] authentication, you have \r\n[00:00] authorization. OK, somebody has \r\n[00:00] a username and password. Does \r\n[00:00] that mean they should have \r\n[00:00] access to the admin or just to \r\n[00:00] their user profile?\r\nDave: [26:47] [laughs] Right, rather than like, \"\r\n[00:00] Do you load that code, or do you \r\n[00:00] just hide it?\"\r\nSwizec: [26:52] If you just hide it, that means \r\n[00:00] you're always sending all of \r\n[00:00] your code to the front-end, \r\n[00:00] which means they can find it, \r\n[00:00] and they can execute it. That \r\n[00:00] means that you have to do \r\n[00:00] authorization on the back-end as \r\n[00:00] well. Then you were in back-end \r\n[00:00] land. You probably don't want to \r\n[00:00] be in back-end land because \r\n[00:00] front-end is just so much nicer \r\n[00:00] to work with.\r\n[00:00] I feel like we \r\n[00:00] have a lot of opportunity for \r\n[00:00] growth in how to make large \r\n[00:00] teams productive together. \r\n[00:00] TypeScript is a good approach, \r\n[00:00] but it would be nice if it had \r\n[00:00] Guardrails at runtime as well. \r\n[00:00] Sure, you can write correct code, \r\n[00:00] but if you execute it \r\n[00:00] incorrectly at runtime, it's \r\n[00:00] still going to blow up.\r\n[00:00] Then \r\n[00:00] the other thing is having a nice \r\n[00:00] integration between the front-\r\n[00:00] end and the back-end that's \r\n[00:00] ergonomic to use.\r\nDave: [27:44] That seems like a tough one. \r\n[00:00] That's emerging. I don't know. \r\n[00:00] The boundary between systems is \r\n[00:00] tough.\r\nSwizec: [27:52] Yeah, the boundary between \r\n[00:00] systems is tough. GraphQL is a \r\n[00:00] pretty good approach to that. I \r\n[00:00] don't think it's the final \r\n[00:00] approach yet. I really like the \r\n[00:00] new platform as a service \r\n[00:00] provider. It's like Netlify, \r\n[00:00] ZEIT, and all of those.\r\n[00:00] I feel \r\n[00:00] like it's making it very easy to \r\n[00:00] be super productive as a front-\r\n[00:00] end engineer. You can pretty \r\n[00:00] quickly build the back-end that \r\n[00:00] just, \"Hey, I just need this one \r\n[00:00] function to run on the back-end.\" \r\n[00:00] These providers let you do that \r\n[00:00] relatively easily.\r\n[00:00] You can \r\n[00:00] write the function in JavaScript. \r\n[00:00] If you know how to write a \r\n[00:00] JavaScript function, you now \r\n[00:00] suddenly know how to do back-end \r\n[00:00] magic.\r\nDave: [28:33] It's awesome. [laughs]\r\nSwizec: [28:35] Yeah, but it's still not quite \r\n[00:00] there. That's the next approach, \r\n[00:00] is how to make the back-end as \r\n[00:00] easy to use as the front-end has \r\n[00:00] become in recent years. Easy is, \r\n[00:00] of course, relative. If you're \r\n[00:00] still learning React, it \r\n[00:00] probably doesn't feel that easy, \r\n[00:00] but I promise you, it's a lot \r\n[00:00] easier than what came before.\r\nDave: [29:03] Easy is always relative. I feel \r\n[00:00] like there's a lot of the \r\n[00:00] unspoken stuff that people just \r\n[00:00] assume, like you know how to use \r\n[00:00] a text editor. You know how to \r\n[00:00] use a terminal and Git. All \r\n[00:00] those things, they're table \r\n[00:00] stakes, I guess, but nobody \r\n[00:00] teaches them. You're expected to \r\n[00:00] figure it out.\r\nSwizec: [29:22] You just know, right? I feel \r\n[00:00] like a lot of us have been in \r\n[00:00] the industry for so long that we \r\n[00:00] forget that things that we think \r\n[00:00] are just there are knowledge we \r\n[00:00] have to learn. I started using \r\n[00:00] Git when GitHub was still new, \r\n[00:00] like seven, eight years ago. It \r\n[00:00] was really hard to pick up.\r\n[00:00] Now, \r\n[00:00] it's like, \"Of course, you just \r\n[00:00] do get to cherry-pick merge, and \r\n[00:00] then you have branches. You put \r\n[00:00] everything together, and it \r\n[00:00] works. Why are you even asking \r\n[00:00] me this silly question?\"\r\nDave: [29:58] It's easy, but it's the whole \r\n[00:00] mental model and learning all \r\n[00:00] that. I remember...\r\n[30:05] [crosstalk]\r\nSwizec: [30:05] Even committing to the files is \r\n[00:00] not easy. You have to commit, \r\n[00:00] and then you have to push.\r\n[30:10] [crosstalk]\r\nDave: [30:10] That's confused the hell out of \r\n[00:00] me when I was coming from SVN. \r\n[00:00] It's the same thing. SVN was \r\n[00:00] easy, and it was like, \"Why are \r\n[00:00] there two steps?\"\r\nSwizec: [30:19] What does it mean to commit \r\n[00:00] locally? Why would I commit \r\n[00:00] locally? I just wanted to be on \r\n[00:00] the remotely possible?\r\nDave: [30:27] [laughs] There's a lot to learn. \r\n[00:00] You're doing some serverless \r\n[00:00] stuff now, like try to make the \r\n[00:00] serverless side of things easier?\r\nSwizec: [30:34] Yeah. I've been trying to make \r\n[00:00] the serverless side easier. I've \r\n[00:00] mostly been trying serverless \r\n[00:00] for maybe a year now, something \r\n[00:00] like that -- maybe more than a \r\n[00:00] year. Basically, a while ago, I \r\n[00:00] tried to do a startup in 24 \r\n[00:00] hours as a challenge.\r\n[00:00] I \r\n[00:00] realized that with React and \r\n[00:00] serverless you actually can. \r\n[00:00] I've now built two or three \r\n[00:00] products completely from scratch. \r\n[00:00] None of them really went \r\n[00:00] anywhere, because I didn't do \r\n[00:00] the follow-up work that you \r\n[00:00] should do when you do something \r\n[00:00] like that.\r\n[00:00] I found that you can \r\n[00:00] launch a product from scratch \r\n[00:00] with the front end and the back \r\n[00:00] end in like 20 hours, which is \r\n[00:00] mind-blowing if you come from \r\n[00:00] the pre-serverless and the pre-\r\n[00:00] React era. It's just crazy. It's \r\n[00:00] live and in production and it \r\n[00:00] works. It would scale infinitely.\r\n[00:00] I started thinking, \"How can I \r\n[00:00] teach what I've learned over the \r\n[00:00] last year with serverless? How \r\n[00:00] can I make it so that it would \r\n[00:00] be easier for other front end \r\n[00:00] engineers to pick up these new \r\n[00:00] back end technologies?\" There's \r\n[00:00] not that many great resources \r\n[00:00] out there.\r\n[00:00] A lot of the \r\n[00:00] resources that I was able to \r\n[00:00] find are assuming that you've \r\n[00:00] already been doing back end for \r\n[00:00] 20 years, and you're using \r\n[00:00] serverless just because. \r\n[00:00] Actually, serverless is pretty \r\n[00:00] different than what we had \r\n[00:00] before. Especially if you've \r\n[00:00] never done back end, it's not \r\n[00:00] that obvious how to use it.\r\n[00:00] I \r\n[00:00] started this serverlesshandbook.\r\n[00:00] dev, where I'm going to try over \r\n[00:00] the next couple of months...It \r\n[00:00] might already have happened. I \r\n[00:00] don't know when you're watching \r\n[00:00] this interview. The idea is that \r\n[00:00] I'm going to be releasing a \r\n[00:00] chapter per week online, for \r\n[00:00] free.\r\n[00:00] It's pay what you want, \r\n[00:00] but it's essentially a free \r\n[00:00] resource for front end engineers \r\n[00:00] to pick up back end technologies \r\n[00:00] with the serverless approach. \r\n[00:00] The idea being that if you can \r\n[00:00] write JavaScript, I want you to \r\n[00:00] be able to also do back end code \r\n[00:00] and understand how the back end \r\n[00:00] works, how the systems integrate.\r\n[00:00] If you're a back end engineer it \r\n[00:00] might also help you pick up \r\n[00:00] serverless faster, rather than \r\n[00:00] going through technical \r\n[00:00] documentation for AWS, like I \r\n[00:00] had to. That was painful. I feel \r\n[00:00] like we're in the state with \r\n[00:00] serverless right now, where it's \r\n[00:00] gaining ground and is becoming \r\n[00:00] popular, but it's not easy yet.\r\n[00:00] Remember four or five years ago \r\n[00:00] when you were learning React, \r\n[00:00] you would search for React and \r\n[00:00] you would learn a lot from \r\n[00:00] comments on Stack Overflow \r\n[00:00] answers and from [inaudible] \r\n[00:00] issues, and stuff like that? \r\n[00:00] Serverless is in that stage \r\n[00:00] right now, where it's useable.\r\n[00:00] You can do a lot of great things \r\n[00:00] with it, but if anything goes \r\n[00:00] wrong, you are very quickly \r\n[00:00] looking at a two-year-old \r\n[00:00] comment on an unclosed GitHub \r\n[00:00] issue on a random repository \r\n[00:00] that used something similar that \r\n[00:00] you were doing, but is actually \r\n[00:00] not at all related to an \r\n[00:00] official repository of any sort. \r\n[00:00] I'm trying to make that easier \r\n[00:00] by actually having a curated \r\n[00:00] resource for serverless.\r\nDave: [33:56] That'll be awesome.\r\nSwizec: [33:58] Yeah. I hope it's awesome. It's \r\n[00:00] still early days. It seems like \r\n[00:00] there's a lot of interest, so \r\n[00:00] I'm going to put as much love \r\n[00:00] into it as I can. Yeah, it's \r\n[00:00] early days. I feel like right \r\n[00:00] now I'm at the perfect stage to \r\n[00:00] teach it, where it's still new \r\n[00:00] to me. I can still relate to the \r\n[00:00] pains and troubles.\r\n[00:00] It's one of \r\n[00:00] the hard things about teaching \r\n[00:00] is, once you've been doing \r\n[00:00] something for a while, you don't \r\n[00:00] really know what to point out \r\n[00:00] any more.\r\nDave: [34:29] Yeah, stuff fades into the \r\n[00:00] background. It becomes like the \r\n[00:00] assumed knowledge stuff. You \r\n[00:00] don't remember it.\r\nSwizec: [34:39] In particular, I'm writing a \r\n[00:00] serverless handbook also, \r\n[00:00] because I don't want future \r\n[00:00] Swizecs to have to go through \r\n[00:00] all of the pain that passed \r\n[00:00] Swizec. It's almost like notes \r\n[00:00] for future needs, so it's easier \r\n[00:00] to pick it up.\r\nDave: [34:53] It's a good plan. Thanks, Swiz. \r\n[00:00] This has been fun. It's been \r\n[00:00] great. Thanks for coming on and \r\n[00:00] chatting with me today.\r\nSwizec: [35:04] Thanks for having me. I hope \r\n[00:00] this was interesting. I hope \r\n[00:00] people really love your course, \r\n[00:00] and enjoy and learn a lot from \r\n[00:00] it.\r\nDave: [35:12] Thank you. Where can people find \r\n[00:00] you online?\r\nSwizec: [35:17] I am relatively easy to find \r\n[00:00] online. You can go on swizec.com, \r\n[00:00] S-W-I-Z-E-C.com, or often I \r\n[00:00] recommend people Google me. \r\n[00:00] Usually the first two or three \r\n[00:00] pages of Google results are \r\n[00:00] about me. It's one of the \r\n[00:00] benefits of having a unique name. \r\n[00:00] Also, the down side. If you go \r\n[00:00] too many pages in you might see \r\n[00:00] things I don't want you to see.\r\nDave: [35:44] All right, well, thanks for \r\n[00:00] chatting, Swiz. It's been great.\r\nSwizec: [35:47] Yeah. Bye.\r\nDave: [35:47] Bye.\r\n",
        "casting_words_order": "zeLL",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller",
        "url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller",
        "path": "/lessons/egghead-dave-ceddia-interviews-swizec-teller?pl=pure-react-interviews",
        "http_url": "http://app.egghead.af:5000/lessons/egghead-dave-ceddia-interviews-swizec-teller?pl=pure-react-interviews",
        "http_short_url": "http://app.egghead.af:5000/s/f4ya1",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_480/eggheadlogo.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_280/eggheadlogo.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_256/eggheadlogo.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_128/eggheadlogo.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_64/eggheadlogo.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/square_32/eggheadlogo.png",
        "icon_url": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1567198446/og-image-assets/eggo.svg",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-swizec-teller-interview-with-dave-ceddia-rJNwd7w9B/egghead-swizec-teller-interview-with-dave-ceddia-rJNwd7w9B.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/033/landscape/eggheadlogo.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "tags": [],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
        "series_row_order": 2795520,
        "series": {
          "title": "Pure React Interviews",
          "description": "Exclusive Pure React Bonus Content",
          "duration": 15713,
          "slug": "pure-react-interviews",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-interviews",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-interviews",
          "path": "/courses/pure-react-interviews",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/391/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875312,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/egghead-dave-ceddia-interviews-swizec-teller/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      }
    ],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/pure-react-interviews/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 8,
    "resource_id": "pure-react-interviews"
  },
  {
    "type": "playlist",
    "id": 432502,
    "title": "Pure React Livestreams",
    "description": "Live stream events for the course modules.",
    "slug": "pure-react-livestreams",
    "published": true,
    "updated_at": "2021-02-13T13:52:53.384-06:00",
    "created_at": "2019-11-04T14:01:47.285-06:00",
    "duration": 49263,
    "state": "bundled",
    "visibility_state": "hidden",
    "tagline": null,
    "code_url": null,
    "access_state": "bundled",
    "published_at": null,
    "free_forever": false,
    "summary": "Live stream events for the course modules.",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "http://app.egghead.af:5000/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "http://app.egghead.af:5000/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "http://app.egghead.af:5000/browse/frameworks/react"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [
      "react"
    ],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/square_480/pure-react-logo_2x.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/square_280/pure-react-logo_2x.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/square_256/pure-react-logo_2x.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/square_128/pure-react-logo_2x.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/square_64/pure-react-logo_2x.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/square_32/pure-react-logo_2x.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/thumb/pure-react-logo_2x.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/full/pure-react-logo_2x.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/432/502/landscape/pure-react-logo_2x.png",
    "url": "http://app.egghead.af:5000/api/v1/playlists/pure-react-livestreams",
    "path": "/playlists/pure-react-livestreams",
    "http_url": "http://app.egghead.af:5000/playlists/pure-react-livestreams",
    "lessons_url": "http://app.egghead.af:5000/api/v1/playlists/pure-react-livestreams/items?flatten=true",
    "items_url": "http://app.egghead.af:5000/api/v1/playlists/pure-react-livestreams/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/react-pure-react-js-fundamentals-livestream?pl=pure-react-livestreams",
    "favorited": false,
    "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/playlists/432502/users/353304/toggle_save",
    "items": [
      {
        "id": 5393,
        "creator_id": 9671,
        "slug": "react-pure-react-js-fundamentals-livestream",
        "title": "Pure React Js Fundamentals Livestream",
        "state": "bundled",
        "summary": null,
        "duration": 7104,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Taylor Bell: [00:08] Hey everybody. Can ya'll hear me OK? If you want to type in the chat. Hey, Dave.\n\nDave Ceddia: [00:22] Hey, Taylor. How's it going?\n\nTaylor: [00:23] Pretty good. Let's see here.\n\nDave: [00:26] [inaudible] .\n\nTaylor: [00:34] Yeah. Let's see here. Paris, did you use the hands raise feature because you can hear me? Cool. Looks like sound is working. We'll give folks a few minutes to show up. It's kind of like a, reminds me of a hit counters back in the day on geo cities, watching the people join and the numbers go up.\n\nDave: [01:07] Yeah. Whatever happened to hit counters? Those were great. We should bring them back.\n\nTaylor: [01:12] I remember going to my own Geo Cities page and hitting refresh, and I did it hundreds of times. Yeah, let's give it another minute or so, let people keep coming in. One of the things we wanted to do here, maybe give it a try, if anybody wants to try asking a question on the air, join with microphones...\n\n[01:45] Microphone, probably just one. We don't really need stereo question asking I guess, but if somebody wants to ask a question out loud over the course of time, we'll try to use the hand raise feature and give it a shot. See how it goes, and if it goes horribly wrong, we'll just stick with the chat. Let me see if Zach is having issues here.\n\n[02:15] Zach is going to help up moderate today. Let's see here. Here we go. As far as recordings go, what we do is we have our editor clean them up a little bit. We'll be posting links to an edited version of this webinar at some point. Don't know how I feel about the word webinar, but that's the best word I got for it. Livestream conversation.\n\n[02:59] Cool. It looks like it's a couple minutes past the hour. I'm going to lower your hands, Sheila and Paris here. As we get started, we'll try to address as many questions as possible. I guess with that, do you want to try sharing your screen, Dave, and we'll see how it goes?\n\nDave: [03:24] Yeah, let me see if I can do that. That one. Working?\n\nTaylor: [03:40] It appears to be. Yeah, there we go.\n\nDave: [03:46] All right.\n\nTaylor: [03:48] Cool. Dave, if you want to go ahead and take it away. Let's get started, and then everybody attending, if you just want to ask questions in the chat or the Q&A feature, let us know. This will be fun.\n\nDave: [04:01] Sounds good. Hey, everyone. Welcome. Today, we're doing modern JavaScript for the mouse. We're going to be going over some stuff that's ES6 features that you probably use pretty frequently, especially targeted towards React, but this is all general JavaScript stuff.\n\n[04:22] If you've been using ES6 for a while, a lot of this might be review, but if you're new to JavaScript or you're coming from another language, then hopefully this will be helpful for you.\n\n[04:34] First thing I want to talk about is arrow functions. I've got here some plain old, regular functions. We've got a named one here. We've got a named one here. This is an anonymous function that is stored in a variable. I want to go through and convert these to arrow functions, so we can see how that works.\n\n[04:56] I'll start with this one because it's most like an arrow function already. I'll make a new function. I'll give it the same name -- best baseball team. Instead of writing function, we can use parentheses and put our argument here. Then we write our arrow, and then we give it a function body.\n\n[05:19] Let me put this in here, so it looks maximally similar. This is the arrow function version of this. You can see that it's pretty much the same thing. Function went away, and this arrow thing joined. If you got a single argument, you can get rid of the parentheses.\n\n[05:43] We could write it this way if we wanted to. This works the same way. I'll just comment this without, and they should still work. Cool. This is a plain old arrow function stored in a constant. Let and const they are also new keywords from ES6 that give you block scale variables instead of var, which is function scope.\n\n[06:13] Let me go and convert a couple of these other ones, too. These are regular named functions. One of the differences between regular functions and arrow functions is that you can't have a named arrow function. You basically have to put it in a variable. We're going to rename this one.\n\n[06:31] We'll create a variable with name. Then we'd say =the argumentlist arrow function body. If we have two arguments, you have to put parentheses around it. One other really cool feature about arrow functions is that if there's only one expression, so this is returning a single thing, there isn't multiple lines of code like we had down here.\n\n[06:55] We've just got the one. We can get rid of the return and then get rid of the braces. Then, we have this implicit return. We get the same result, but it's shorter. It's nice. The rule of thumb is you can't put a return unless you have braces. If you have braces, you need the return. If you get rid of the braces, get rid of the return. That's your plain old arrow function.\n\nTaylor: [07:23] We did have a question about that which you just started to touch on a little bit. The question was about if you do the one-liner like the print baseball team example, where if you do the one-liner and you have console.log.redsox, would you still want to write it as one line even though it's not returning the console.log statement?\n\nDave: [07:44] That's a good question. That is subtly different. If you write it this way with no return, this is basically the same thing as return undefined. If you shortened this to be this way, then it's now returning the result of the console.log, which in this case is undefined. I think console.log returns undefined anyway.\n\n[08:12] We could try. I don't think this is on window. No, these aren't on the window. If we just console.logout the result, let me try this. Let me comment out some of these other console.logs so we can see what's going on. It prints out the name. Then it prints out undefined, which is the return value of this.\n\n[08:34] There's a subtle difference there where if you just have to be aware of if you want the return value to be that one statement, then go for it. Otherwise, you should probably leave it this way.\n\nTaylor: [08:48] Only use the single-line version if you want the return value.\n\nDave: [08:54] Yeah.\n\nTaylor: [08:56] Cool. Then, we have a question here about differences or tradeoffs between anonymous functions and arrow functions.\n\nDave: [09:05] I guess it doesn't really matter too much. The main difference is the binding of this. Arrow functions retain whatever this is in their surrounding scope. If I were to console.logout/redsox and this, it'll be whatever the arrow function had at the time, which I think they get their own this.\n\n[09:42] If you had an anonymous function, doesn't really matter what it takes we'll just console.log this and do make that a function. We have an anonymous function that prints the same thing and call it -- this is going to be window.\n\n[10:07] Arrow functions, they'll get the this of their surrounding scope, but they won't take the window object, but functions will. It matters if the arrow function you're using is a method on a class or something like that.\n\nTaylor: [10:32] One thing that I learned once about scope was, what happens in Vegas stays in Vegas. This might be a similar idea there. We do have a question about changing the this of an arrow function using bind or call.\n\nDave: [10:49] That's a good question. Let me try that. Let's say I've got this. Going to make two different versions of this same function. Get rid of this one. Copy this. I'll have one that's an arrow function and one that's a regular function. Print A. Print B. We'll just call them down here. Here, to add two.\n\n[11:26] If we can change the binding of this with a regular function, I don't think that works with an arrow function. If we were to call, we'll say printA.bind. Then we get to decide what the this is going to be. Let's just make it an object that says, \"Hi, Drew,\" or something.\n\n[11:47] When you call bind on a function, it returns a new function. We'll just call that here. Then we'll do the same thing with this one. Bind to an object by...We'll give it some identifier, hi A and hi B. We'll call that one, too.\n\n[12:11] We can see the arrow function, it doesn't let you rebind this. It captures whatever its surrounding this is, but then you can't rebind it, whereas the function will let you do whatever you want. It might come into play if you're writing jQuery code and you're writing a function.\n\n[12:33] I know jQuery at least is one of the libraries that does this, where they parse in, \"This is the current thing you selected.\" That'll work with a regular function, but it won't work if you parse an arrow function. If you're using jQuery, sorry, no arrow functions. Keep sticking with the regular ones.\n\nTaylor: [12:59] Are you less likely to see the need to use bind when working with something like React?\n\nDave: [13:06] I think so. Again, in the case of React, if you've got a class method that is not an arrow function, then you usually have to bind it if you're parsing it along, and it's an argument, so it doesn't lose the binding. If it's an arrow function, then it keeps the binding, and it's easier.\n\nTaylor: [13:27] That's a pretty good segue into one of the questions that we have about, how would you succinctly state the advantage of using an arrow function?\n\nDave: [13:42] It's shorter.\n\nTaylor: [13:45] That's a meta-succinct answer, is that it's shorter. I love it.\n\nDave: [13:51] That's the main benefit. I like being able to write functions like this instead of having to write out function every time. In the case where you do want to retain your local this, arrow functions are awesome for that because you don't have to bind it anymore, you just parse your function along and it remembers.\n\nTaylor: [14:11] How about one more question on this, and then we'll move on? We have a ton of material to cover, but we do have a question of a little bit more explanation on why an arrow function won't bind the this of what has been parsed to but the normal function would.\n\nDave: [14:30] Some more explanation on that. Part of the reason arrow functions were created was because of this is a pain. With regular functions, it's...I don't want to say unpredictable, but there's lots of different rules around how it determines what the value of this is going to be in a regular function.\n\n[14:53] For arrow functions, they simplified it. They're like, \"No more fancy rules.\" All you get is whatever the current of this is. [laughs] It's like, \"I'm going to take the this of the surrounding scope and that's all you get. You want something else, use this one.\" It simplifies things a bit. It's predictable. You know what it's going to do. I think that's the reasoning behind it.\n\nTaylor: [15:19] Is there such a thing as a recursive arrow function?\n\nDave: [15:24] Sure. An arrow function can call itself, I think. Do I want to try this? I guess I could try this.\n\n[15:31] [laughter]\n\nTaylor: [15:32] Don't crash your machine or anything.\n\nDave: [15:34] Do I dare. Whatever. The press will deal with it. I like [inaudible] from inside here. I'll put the console log up here.\n\nTaylor: [15:43] Maybe not console log this. Console log something else.\n\nDave: [15:46] I'll console log i. I'll do i++, and we'll parse in default arguments. [inaudible] feature. First time you call this, it'll be zero. Then it'll keep incrementing until I get a stack overflow error.\n\nTaylor: [15:59] No, mostly zeroes.\n\nDave: [16:01] Oh hey, look. I didn't...Oh, right. [inaudible] . This is not going well.\n\nTaylor: [16:09] [laughs]\n\nDave: [16:11] Refresh. [inaudible] . [laughs]\n\nTaylor: [16:16] Thanks a lot, Carl. No.\n\n[16:17] [laughter]\n\nTaylor: [16:19] Just kidding.\n\nDave: [16:19] [laughs] We're good now. All right, cool. You can have [laughs] recursive arrow functions. They work fine. You might have been also asking about...Sometimes they'll see functions that are written as multiple arrow functions in a row like this. Like read access names for this, it's the store middleware or something.\n\n[16:49] Was it next action store, something? I forget what the arguments are, but this is three nested functions. If you need to do that, that's a function that takes a next, returns a function. It takes an action, returns [laughs] a function that takes store.\n\n[17:18] This is the function body that would go here. If you can wrap your eyes around this, you have to write functions like this. It can be a little nicer to write it that way. I feel like a lot of this ES6 stuff, it took me a while just to wrap my mind around it. Just get used to the syntax, and you have to practice it a bunch before it becomes second nature.\n\nTaylor: [17:41] That question about a benefit of arrow functions, this is a very powerful visual aid of...\n\nDave: [17:49] Yeah, right. If you can read this, this is much nicer. That's right.\n\nTaylor: [17:55] We should move on to the next section.\n\nDave: [17:59] Let's go on to, what do we talk about next? I'm going to go on to template strings. Template strings should be good, and probably pretty quick.\n\nTaylor: [18:15] Cool.\n\nDave: [18:17] I'm going to change this project around and go to maybe five, four template strings. Template strings are a handy way of making new strings that contain other ones. If we wanted to put these together into, say, fullName, like the old way. You'd do firstName, firstName+ +lastName with console.log(name).\n\n[18:53] That works fine. ES6 adds this new backtick strings. You can wrap a string and backtick. It's like another string character you can use, like we didn't already have enough of them. You can use single quotes and double quotes, and now you can use backticks.\n\n[19:08] These ones are special because you can put JavaScript expressions inside them, and do things like this. We're making a new string here that is firstName, and then has a space and inserts the value of lastName. That works the same way.\n\n[19:25] These are real expressions. You can do math in them and stuff like that, any JavaScript expression. Basically, anything you could return from a function, you could jam into one of these strings, if you really wanted to.\n\n[19:44] Template strings are really handy for building up URLs. If you have some sort of questing thing that's...Sorry, my cat, I don't know if you can hear that. My cat found something, and he's carrying it around.\n\n[20:04] Let's say, actually a blog or something, if you wanted to get posts/the post.id/comments/the comment.id, template strings make it really easy to build up these things. Whereas before, you'd have that messy looking this thing plus whatever. These things can get really annoying to read sometimes.\n\nTaylor: [20:33] That would get the trailing slashes between things.\n\nDave: [20:38] Yeah, if you're trying to add commas, whatever.\n\nTaylor: [20:44] Do you have best practices around when you decide to use regular quotes versus string templating?\n\nDave: [20:59] If the string is not dynamic, then I tend to just use quotes, single or double, whatever Prettier decides to give me basically. I think Prettier is on single right now. If I change this to double, it'll change it back.\n\n[21:16] If it's not dynamic, I'll just use regular quotes. Gatsby is big on template strings. Everything in Gatsby is a template string. If you want to do that too, that's fine.\n\nTaylor: [21:30] There's a question, if string templates work like Handlebars.\n\nDave: [21:37] Yeah, pretty much. Handlebars, or Jekyll, or whatever, you write it like this, yeah, pretty much the same kind of thing. Other languages have stuff like this. Ruby uses pound.\n\nTaylor: [21:51] They're all different enough that you can't switch between them right away.\n\nDave: [21:55] Yeah. If you switch between them, you'll probably mess it up for the first 10 minutes. I remember.\n\nTaylor: [22:04] Anybody have any more questions about string templates before we move on? Somebody wrote, \"No.\" OK, cool. Thanks.\n\nDave: [22:18] Will it work in Internet Explorer? I don't know if we'll get down to this Lesson 13 Babel bit. All of these fancy stuff is if you're using it with a modern framework, you'll probably have a build tool in there, like Webpack, or Rollup, or Parcel that's building your JavaScript.\n\n[22:39] It parses it through the Babel compiler, which will take all this fancy junk and turn it to stuff that works on every browser. You can configure the tool to figure out how far back you want to go, like if you need to support IE6 versus 10. No, template strings won't work in IE6, but Babel will make it so that they work.\n\nTaylor: [23:05] Hey, before we move on, can we do an example of a string template with a function?\n\nDave: [23:10] Yeah, sure. Like a function call inside it?\n\nTaylor: [23:15] Like how styled-components and React would work, is the question. Anything with a function should illustrate it.\n\nDave: [23:26] Functions using string templates, interesting. These things inside here, it's an expression, so it could be a function call. If you had a function that takes A and D and adds them together with this handy arrow function, you can call add in here, and parse in your numbers. That'll work fine.\n\n[23:57] Any old expression will work inside these things. You can't do statements in here, you can't do, if true, then whatever. That's going to fail. Don't write, return whatever, that won't work either. Just make sure it's a single expression. That should be fine.\n\nTaylor: [24:17] What about an anonymous arrow function inside of there?\n\nDave: [24:21] Yeah, I think that will work. You could probably make one. Let's do, just make a function here, try it out. It prints it out as a...\n\nTaylor: [24:32] That's because it's in a string.\n\nDave: [24:34] Right, I messed it up with the brace. What if we just say, if an arrow function that returns five? Interesting. It's stringified that function, it's a function that returns five. That's cool. I'll put some dots around this so you can see, .function. Interesting. That's cool.\n\n[25:00] If you wanted to do this, you probably want to actually call the function [inaudible] [laughs] function inside. You could do something crazy like that, and that'll give you five. Don't do that, though.\n\nTaylor: [25:14] Just because you can doesn't mean you should.\n\nDave: [25:19] Booleans and ternaries and all that kind of stuff work in here. You can do true and yay. False and yay gives you false. All that stuff is good.\n\nTaylor: [25:35] Next section, I think.\n\nDave: [25:37] All right, move on to it.\n\nTaylor: [25:40] It's already been over 20 minutes already. It just flies.\n\nDave: [25:44] I know, it's going quickly. There's a lot of these things, and these ones are harder.\n\n[25:48] [laughter]\n\nDave: [25:51] Move on to destructuring here, the Rest and Spread? Rest and Spread 5. 025. Rest and spread operators are another cool feature from ES6. If you had a function, olden days, and you wanted to get variable arguments, you can use these fancy arguments. I don't even know, it's not really a keyword. It's like a variable that functions have available to them.\n\n[26:26] If I refresh this, we'll see that...Arguments, it's like an array, but it's not really an array. It gives you the values, it gives you a length, but you don't have any array methods. It's got a bunch of stuff, but there's no...You can't map or filter any of those fancy functions we'll look at later. You might want this thing to be an array.\n\n[26:47] With ES6, you can use dot, dot, dot, say Args, call this whatever you want. This bundles up all of the arguments and sticks them in an array called Args. Now you have proper array. You can see its prototype is array, and it gives you all the stuff you'd expect to be able to do with an array. You can call this whatever you want. You can call it rest, whatever. Args is nice.\n\n[27:18] It basically takes the remaining arguments and sticks them into this array here. If you wanted to take, say, maybe you want the first one, but then you want to stick the rest into the array and log this out, you can see that it's picking off the first one. The remainder gets stuck into that array.\n\n[27:40] It'll do that with one. It'll do that with nothing. It's guaranteed that this thing is going to be an array. It may have nothing in it. It may have one thing, but definitely an array. Also, if you haven't seen, I remember a couple of years ago, I learned about this console log trick. I used to do stuff like this. It's console log multiple things.\n\n[28:08] It turns out you can parse multiple arguments to console log, and it will log them out as actual things in the console. If I log these out, you can expand both the rays, and it'd still be...\n\nTaylor: [28:20] What about console logging a string template?\n\nDave: [28:25] You could console log a string template. If you do that, it stringifies the thing. The downside of a string, it might be fine, you can't interact with it in the Chrome console. Chrome gives you...\n\nTaylor: [28:41] Because it's logins, right?\n\nDave: [28:42] Do all these fancy expansions and stuff. If I do this, it joins them together. You can read it, but the benefit of having it be first class arguments to console log is that you can drill into them and stuff.\n\nTaylor: [28:59] There's a question about comma-separated arguments. Do comma-separated arguments immediately get interpreted as a head and then rest of an array?\n\nDave: [29:12] Do comma-separated arguments immediately get interpreted as head and rest? Yeah, you can think of that it way. It's not head and rest though. Sorry, I should show you more examples though.\n\n[29:24] Yeah, I guess so. It's not like those functional languages where you get the head and then everything. You can take off as many as you want, and then the remainder goes into args.\n\n[29:38] Let me make that less confusing. We have second and third, so we'll get one, two, three, and then the rest. You can't do this in the middle. This is a syntax error. It has to be the last one.\n\nTaylor: [30:01] Then you'd want to use the rest if you don't know how many additional arguments you'll have?\n\nDave: [30:10] Yeah, it's useful if you don't know how many arguments you might have. It's useful if you would rather have an array instead of a bunch of arguments.\n\n[30:20] Maybe, I don't know, you want to be able to make a function that lets you parse in whatever, as many things as you want, but for whatever reason you don't want to make the user parse them in as array, you can turn them into an array yourself.\n\n[30:37] The Rust is also useful in destructuring stuff, which we'll see in a little bit. Spread is another name for three dots. It looks the same, but it does a different thing.\n\n[30:55] If you have this numbers array here and you wanted to print out all the numbers in the console log. Nums, and I'm going to get rid of this one so we do one thing at a time here. If I wanted to print out the numbers themselves, I could print nums zero, nums one, nums two, nums three, and that works fine, but I have to type this out, and that isn't great.\n\n[31:28] SCSS give you this spread operator, which looks suspiciously like the Rust operator, but instead of this one combines all the things near it, this one explodes. Basically, it turns this into this, which is super helpful if you have a bunch of things and you want to parse them as arguments instead of as an array.\n\n[31:54] Say someone made this function that expects an array, and you had all this stuff in an array. Numbers. If you had this stuff in an array, but the function wanted it as arguments, you could be like, \"Fine, I don't care.\"\n\n[32:14] Spread it out and now the function is getting seven different arguments instead of one argument. That's blowing up because...Yeah, cool. Let's see, what else? You can also spread on objects. You can't do it just anywhere.\n\n[32:34] You can't do dot, dot, dot user because it's going to be like, \"I cannot spread a non-errorable instance.\" If you think about it, what would this mean? Predictably, what would this mean? Yes, you could write. I could try to print out the username and then the first name and last name. What order would they go in?\n\n[32:58] It's not super logical, so you can't do this. You can log out. If you're inside an object variable and you want to make a copy of an object, you can spread out this object and this explodes all of these keys and values right here.\n\n[33:19] You end up with a copy, a new object, that has all the same stuff from the old one. The cool thing about this is it's good for immutable operations if you want to make copies of things. It's also great for if you want to change the user without actually changing the user.\n\n[33:39] Say you want to make a copy and also add a full name property, you can do that here, and using fancy tempo strings we can do user.first name and then user.lastname, last name. Then it adds that property to this object, but it didn't change the user.\n\n[34:05] It's also doing this right in place, so the order matters if you have, say, first name up here, it's the default one. Spreading this one out is going to override that first name. It got the first name from our object. If I commented that out, then now it's going to get that default one.\n\nTaylor: [34:27] We have a question about getting data from an API that would be a nested object. How would you destructure...Maybe we'll get to that when we get to destructuring.\n\nDave: [34:40] Yeah, destructuring is cool.\n\nTaylor: [34:43] Then we have another quick question in the chat about, let's see, it's almost whiteboard challenge, a mini-whiteboard challenge on how to fix a function that...\n\nDave: [34:59] I see, is it the F of args one?\n\nTaylor: [35:02] Yeah, using Rust and then...I'm not sure what the expected output would be.\n\nDave: [35:11] How can you fix it? It doesn't look super broken. Let's see. You have a function, F that takes dot, dot, dot args, three dots, args, and you're logging out the args like this. If you call F with one, two, three, you're going to get a different thing than if you call F with one, two, three as an array.\n\nTaylor: [35:38] As an array, yeah.\n\nDave: [35:39] Let me comment out all this junk so we can focus on one thing here. Yeah, you'll get the array here and you'll get it all combined here. This is a matter of what does the function expect and what should you be parsing to it.\n\n[35:57] If you don't want it to print this array like this, you could say dot, dot, dot because this is an array, you can spread it. That will make it work the same way. I don't know. I'm not sure if that answers the question or not.\n\nTaylor: [36:20] We've seen a couple times, arrow functions can take arguments, right? How do arrow functions play with Rust?\n\nDave: [36:33] Arrow functions can take...Yeah, the arguments for...I can make this an arrow function just as easily. F is a thing that takes arguments. Yeah, the rules for arguments inside arrow functions are exactly the same as regular functions. Whatever you can do in a regular function, you can do here too.\n\nTaylor: [36:57] OK, yeah. Nevitt's asked about...The arguments keyword, I guess, an example of that in the chat there. F1 is an empty arrow function. We're on empty arguments and arrow function that canceled out logs arguments, and then if...\n\n[37:18] [crosstalk]\n\nDave: [37:18] Oh, arguments. I wonder what it does about that. Let me try it. I think arguments doesn't work with arrow functions.\n\nTaylor: [37:27] Might it have something to do with it or something? It looks like it...\n\nDave: [37:30] It looks like it works.\n\nTaylor: [37:31] I don't know, that looks distorted.\n\nDave: [37:37] Yeah, don't use arguments with arrow functions. Dot, dot, dot arguments. Interesting, that overrides args. I don't know. I haven't tried that.\n\nTaylor: [37:50] Today we learned.\n\nDave: [37:51] Today we learned.\n\nTaylor: [37:55] Should we move on a little bit in the interest of time?\n\nDave: [37:58] Yeah, let's go on to destructuring. Go to SCSS and open up this one. Let's get a bit crazy here, hold on. I haven't saved any. SCSS, structuring.\n\nTaylor: [38:19] I appreciate all the questions coming in. Keep them coming everybody.\n\nDave: [38:24] Yeah, that's great. Destructuring arrays and objects. Let's see, what's an example of this? If we wanted to pull out the username property from this object here, we could write username=user.username, and then I will log it out, save and refresh this thing.\n\n[38:58] It prints out the username. If we wanted to do it to, say, username and first name, we could do it this way. It's redundant though, you have this same thing repeated twice. This SCSS gives you destructuring, which lets you wrap some braces around this thing and assign user to it.\n\n[39:25] The braces are saying, \"I expect that this thing is going to be an object. Please look up the property called username and then give me a variable called username.\" [inaudible] these ones out. This works the same way.\n\n[39:44] You can destructure multiple things. You can say like, \"I wanted the username and the first name.\" I can do that. That works fine. You can rename these things if you don't like the name or it's conflicting with something.\n\n[40:00] You can use a colon and say, \"I want to call this uname instead.\" That will rename one of the properties. What else? This is another place where you can use Rust. If I want to say...I want to pull out the username, but I don't care about the rest of this stuff, I just want to put it into a name object.\n\n[40:30] If you do that, then it takes the remaining properties, the ones that haven't been destructured, and it throws them all into this new object. This is a super useful way if you can remove a key from an object, this can be a good way to do that. Sometimes you need to do that.\n\n[40:53] What else can you do with destructuring? Let's go on to destructuring arrays. The same kinds of stuff works for arrays. You can say square brackets, A and B equals nums and then log out numbers for A and B.\n\n[41:11] Let's log out the original array too and see. It doesn't actually remove these things from the original object or array. It leaves that untouched. It just close out their values as if you were writing stuff like this.\n\n[41:34] This is a useful way to get values out of an array. If you've seen, React hooks work this way. You call gets date or whatever, use date, then it returns an array of two things and you can pull them out that way. The cool thing with arrays is that you get to pick these names.\n\n[41:56] Array elements don't have names. They're just indexes, like zero, one, two, whatever. You can call this Rob and Jane or something, it doesn't matter. Name them whatever you want. Rust works here too, so you can pull out the first one, second one and the remainder, and you get both of them as an array.\n\nTaylor: [42:24] We have several questions about how to get data out of nested objects.\n\nDave: [42:30] I can't just say use low-dash, can I? I want to say that.\n\nTaylor: [42:39] Not yet.\n\nDave: [42:40] Do you have any specific example? I'll start going down what I think you mean, and you can drop some examples in the chat if you want. If you have an object that's like user...Fine, we'll use this one. Say they have a username.\n\n[42:59] They also might have blog posts and that's an array. Say maybe each one of these things has an ID in the title. First one, two, three...Some of these...\n\n[43:14] [crosstalk]\n\nTaylor: [43:14] these comments. There you go.\n\nDave: [43:18] Then say maybe some of these posts have comments, or this one has comments and it's an array of comments. I guess these have their own ID, text, comments.\n\nTaylor: [43:31] Can we change the ID of the comment?\n\nDave: [43:33] Sure.\n\nTaylor: [43:34] Just because...Yeah, there we go.\n\nDave: [43:38] Sure, just to decouple a little bit, right? If you want to destructure...I want to pick out the posts for this user. I could say posts...Let's see. Let's try posts equals user. This will work because it's one level down. This is easy.\n\n[44:00] I better [inaudible] these on again so we're looking at one thing. OK, that was cool. Yeah, of course. That works fine. Now, if you wanted maybe the ID from the post. This is going to be confusing because that's multiple things. I don't know if you can destructure, I don't know if you can access array elements in destructuring.\n\n[44:31] If you have...I'm trying to think about how this works.\n\nTaylor: [44:36] Let's make it an object with one post for now, so that we can an ID out of the first post. Instead of it being an array...\n\nDave: [44:44] Yeah, let's do that. I have one post, bam. No, that defaults into one thing. We get our single post. I am totally blanking on how to do this now. Let's try, is it colon? No, it's not colon. [inaudible] equals...\n\n[45:07] No, it's the other way around. It's like when you get the ID of the post or something? Taylor, do you remember how to do this?\n\nTaylor: [45:18] We have an assist from...\n\n[45:20] [crosstalk]\n\nDave: [45:20] I have not done...Yeah.\n\nTaylor: [45:23] Post, colon, then ID and the post.\n\nDave: [45:26] There we go. It's like a nested object.\n\nTaylor: [45:32] Now post isn't defined because we're pulling the ID out instead, right?\n\nDave: [45:39] Yeah. When you destructure multiple levels down, you only get the deepest thing. I think you can maybe do this. Maybe the other way around, post equals.\n\nTaylor: [45:55] Yeah, maybe that way.\n\nDave: [45:57] Maybe. It doesn't like that either.\n\nTaylor: [45:59] But then you're pulling out an ID anyways, so you wouldn't want to call your ID...\n\n[46:04] [crosstalk]\n\nDave: [46:04] Nah, that doesn't work either.\n\nTaylor: [46:09] I have a question. What about using dot notation?\n\nDave: [46:13] What about using dot notation? Like if you wanted to get...\n\n[46:17] [crosstalk]\n\nTaylor: [46:17] Like if you did post dot ID.\n\nDave: [46:19] Post dot ID, that would...That won't work because there's no post in scope. If you had a post like this, it would work fine. If you're doing multi-level destructuring, you pretty much get the lowest level thing.\n\nTaylor: [46:38] One of the things that, in my personal code that I've done to help readability, is I honestly don't do multi-level destructuring. I would have pulled out the array of posts and then from there done my iteration.\n\nDave: [46:58] I agree. I think that's part of the reason why my mind blanks in that syntax. I don't use them very often. I think it can be confusing to do that drill-down, especially in function arguments or something. A lot of this stuff works in function arguments to...I'll show you an example in a second.\n\n[47:18] To Taylor's point, I would probably pull out the post and then pull out the ID from the post. If you're going down a ton of levels, maybe this is not great. I don't know. I don't think this is better than post, comment, ID. It's hard to read.\n\n[47:39] It's also if one of these levels is undefined, I think this will blow up. Yeah, can't get ID from comments because there's no comments on the post. I think you can set defaults if you want to be ridiculous about it.\n\nTaylor: [48:00] I'm starting to feel like, just me personally, that's the type of code right there that I would write at night, and then the next morning be like, \"What the hell's that?\"\n\nDave: [48:10] Yeah. In terms of best practices, I would try to avoid writing multi-level destructuring, just stick to one. It's easier. You can do defaults though. I think defaults, in the one-level case, also doesn't look crazy.\n\n[48:28] If you want to say if there is no post, set it to empty object, and then say user didn't have a post...No, not the ID, there's no ID. Then you get this empty object. If you did have post-code like accessing properties of it, it wouldn't blow up, which may or may not be what you want.\n\n[48:56] There. Let's see. The last thing was I wanted to show a function that you can, if you had a function called print or something, you can do destructuring inside function arguments too.\n\n[49:12] This is sort of a maybe a, I would say, jQuery error pattern. I haven't seen this a lot lately, but if you have a function that could take lots of different arguments and the specific arguments are changing often.\n\n[49:30] If you want people to add arguments without having to go and change your calls and stuff, a popular way to do that was to take an options object, and then you can pull out messages, [inaudible] messenger or whatever.\n\n[49:46] If you have 10 different options that you can take and some of them have defaults and all that stuff, writing this code at the top of the function would get unwieldy. You can do that sort of thing, write in line, and say I want to pull out the message from the options and then log out the message.\n\n[50:06] I can say end message where object with message is I. That will do, what did you do? This pattern, this is used all over the place in React components. If you're writing a functional component, function component...\n\nTaylor: [50:30] Scroll a little bit?\n\nDave: [50:32] Scroll up like this?\n\nTaylor: [50:34] Yeah, please.\n\nDave: [50:37] If you had a functional React component that was taking props, like class name or whatever, we see this sort of pattern all the time. That's what this is. This is not a React special thing, you have SCSS destructuring in your arguments.\n\nTaylor: [50:55] While you get set up for the next section, we've got...We've scheduled this for about, what, 40 more minutes or something?\n\nDave: [51:08] I think we got it.\n\nTaylor: [51:09] Are you comfortable with staying a little bit after if conversation is going good?\n\nDave: [51:16] Yeah, sure.\n\nTaylor: [51:16] If anybody in the chat, if you have questions when we go over, we can add some more time as needed. This is pretty fun.\n\nDave: [51:28] Yeah, this has been good.\n\nTaylor: [51:30] Yeah, I'm enjoying it. We've got some lively discussion in the chat. It's all going good.\n\nDave: [51:39] We've got some crazy question about currying something.\n\nTaylor: [51:43] Yeah. I think that's kind of outside of the scope.\n\nDave: [51:47] [laughs] Currying is not an ES6 feature. That's been there forever. [laughs]\n\nTaylor: [51:50] Oh, OK. Yeah, there's your out on why you don't have to talk about it.\n\nDave: [51:55] [laughs] Exactly. What do we want to talk about next? Next up was the mutable stuff, mutable updates. Let's talk about this. Change my lesson thing over here, go over to a seven.\n\nTaylor: [52:17] Does anyone in the chat need an explanation of what immutable means? This is safe place.\n\nDave: [52:26] Good question if you have it. Let's see. The idea of mutating something or...Mutating is the same thing as changing. If I had this object and I want to add say a full name property to it without just updating the object itself, I can say, ser.full name= Then I can even use template strings, whatever. Use a .lastname.\n\n[53:04] This is mutating the user. If I were to logout the user up here, and if I again logout the user down here, first here. You see this is the first one and then it's changed. You can't get back to the old one anymore without just undoing your stuff and deleting properties or whatever. It's...\n\nTaylor: [53:32] Could you make it a more radical change? I think I missed it.\n\nDave: [53:36] Sure.\n\nTaylor: [53:39] Maybe go from David to Dave or something.\n\nDave: [53:42] That's a good idea. Let's change something already exist. Firstname=notDave. Hey, look, so this is the...Expand this a little easier to see. This way. This is interesting too because Chrome when you logout an object...that's interesting. This is the summary thing. Here the user, it is this original one.\n\n[54:16] Then I change it to \"Not Dave\" and then it prints out \"Not Dave.\" If I expand these objects, so I think what's happening is that when I logout user, it's actually logging out like a reference to that object. This is a great example of why mutability is not awesome.\n\n[54:36] I told you unplanned example this, but see if I expand it, they both look the same because I've changed the original one. Everything that referred to this is now like has a different user which is probably not what you want.\n\n[54:54] Other stuff that is mutable but you might not think it's mutable if you have a function that's like, change name, a person, a user or new name\" and I say something like User.name firstname= newname. Then I return to user.\n\n[55:13] From the outside looking in, you might think like, \"Well, I can just call it change name or user, the new name. It returns a new user, like returns an object. Is that the same one? Because you parsed this one in and you changed that one which points to this one and they returned it, that's the exact same user at the end of this.\n\n[55:42] If I logout new user, well, we'll see. Let me change. Let me get rid of these ones so we can...Really doing these ones. We have the user up here, we change the name and let me try my expanding trick here over here again.\n\n[56:00] See they are both changed and we can also logout like Is user=new user. Triple equals would be true if these are the exact same objects and false otherwise. Triple equals doesn't look at the properties, it look at the reference.\n\n[56:18] If you have like this is an object instance and we haven't made a new one so user is the same as new user despite the name here. [laughs] If you have code like this, it makes it harder to figure out what's going on in your app.\n\n[56:39] If you have a lot of functions like this, it can be tricky to track down which functions changed to something, which ones left it alone, especially when you start doing stuff like this. When you're like, \"I need to return the user so I can chain off of it,\" or something, it makes it look like maybe it's immutable.\n\n[57:00] Back to the question of what immutability is. Immutability is the opposite of this. Instead of changing the original thing, you'd make a copy of it and change the copy. That's pretty much all immutability is. If you apply that principle everywhere you need to make a change to something, you make a copy first then change the copy, then you'll have nice, pure immutable code.\n\n[57:34] An example of that, if we wanted to rewrite this changeName function to return a new user instead of changing the old one, there's a few ways we could do that. First, we could say we're just going to make a copy. We can use that spread thing we learned earlier to spread the user out into a new one.\n\n[57:56] Then we just change the copies. Copy that first name equals new name, and we return a copy. Now these printouts look the same, but you can see that they're not the same anymore at the end here. User and newUser are different objects now. If I expand this, look at that. We didn't change the original one.\n\n[58:21] This is what you'd call a pure function. It doesn't change its arguments. It doesn't change anything outside the scope of the function. If it needs to do some changes like this, it'll make a copy, change the copy, and return that.\n\nTaylor: [58:46] Question. You couldn't have just done const copy equals user?\n\nDave: [58:51] No. If I do that...Let's try it. If I do this, look, we're back to true again. It's the same user. JavaScript parses variables by reference and not by value. What that means is that when I call changeName with an object like user or any old thing, in your head, think of the value of user and which user you're referring to. It's parsing the reference that user is saying.\n\n[59:33] If we gave this user some name, if we called it...This is A. We're just going to say this object is called A. When I parse that user into here, what I'm really doing is saying this is the object A, so any changes you make, apply them to the same object.\n\n[59:52] Now I'm making a copy here. Same thing with equals. When you do equals with a array or an object, it's not copying that thing. It's just assigning another...Now, copy also points to the same user. I'm not sure if that helps. Does that help? Cool.\n\nTaylor: [60:23] Yeah. Awesome.\n\nDave: [60:25] One thing that JavaScript doesn't expose to the user is a thing called pointers, which is a constant that other languages have like C and C++, and stuff where it makes it clear that you are not changing the real thing. There's an object in memory, and you just have different variable names that point to the same thing.\n\n[60:46] JavaScript is doing the same thing. It just doesn't really tell you that. You can't get at the address of that thing, but you have multiple variables that point to the same object. If you change any of them, it changes the source thing.\n\nTaylor: [61:01] I have a question about shouldn't we have changed copy instead of user in the new user call?\n\nDave: [61:11] Yes. That's what we're doing if we do it this way. We create the copy, and then we change the copy. This is copy.firstName, and then return that there.\n\nTaylor: [61:25] I think what they might mean is on line 20 where you have \"user.\" I might have misread the question, though.\n\nDave: [61:43] Yeah, so, \"Should we change copy instead of user?\"\n\nTaylor: [61:49] All right. Yeah, sorry. I was like, \"I don't know who Greg is.\" I was just like, \"Keep going.\"\n\nDave: [61:54] Like, \"Isn't he Taylor?\" OK, cool.\n\nTaylor: [61:57] Yeah, Greg's not here.\n\nDave: [62:04] Do you mean that like is...?\n\nTaylor: [62:08] We couldn't call it...\n\nDave: [62:10] We couldn't access \"copy\" here.\n\nTaylor: [62:11] Right.\n\nDave: [62:12] Copy doesn't exist here, because copy is inside the scope of this function.\n\nTaylor: [62:18] Yeah, so it's the stays-in-Vegas thing again.\n\nDave: [62:21] Yeah, yeah, yeah. It says, \"Copy is not defined.\" If I put this back to the user, I could make that clearer if I put this down here, maybe. Does that make it clearer?\n\n[62:34] The things that you use inside a function, even if you use var, so like var copy equals copy, these things stay inside the function. Ooh, that's interesting. Am I able to handle the backspace key? That works fine. Yeah, yeah, yeah. That's why, it's a different function.\n\n[63:05] I want to just show just a couple of other, or maybe another way to do this same thing. We saw earlier that you could add parameters or change parameters inside a function, the properties, I guess. If you wanted to override the first name you could say like, \"Make a copy of user,\" so that that first name's a new name, and then return copy.\n\n[63:32] We're getting closer to where you can just return this new object. Why put it in the variable? Just do that. It works the same way.\n\nTaylor: [63:47] We have a couple of different questions about how the spread operator ties into this. Alan asks about, \"If you use spread to copy an object, but that object also has an object within it, is the nested object still the same reference or is it going to be mutated?\"\n\nDave: [64:06] Alan, \"Use a spread object to copy an object, would that object...?\"\n\nTaylor: [64:10] I think that it would go along with it. Like, it would go along for the ride of being copied.\n\nDave: [64:16] Yes. If you copy an object, everything inside is not mutated. It's not mutated, but the references are copied. It doesn't make nested copies. It's not deep copy or \"deep clone,\" you might call it. It only copies one level down. If I had an object in here that was, I don't know, like to post, I guess, or an array, objects in arrays, both behave the same way in terms of references and stuff.\n\n[64:52] If I just had like a myriad of things, when I make a copy of that user, this posts array is the same one as in the old one. There is no deep cloning. This is not deep cloning. I can roll this back to put in the copy first and returning the copy. Return copy.\n\n[65:24] If I were to change copy.posts, copy.posts.push, some big number. Let's see. If I span both of these, both of the posts arrays have this new value in it, because it only copied one level deep. This thing is the old one. If you need to make a nested modification, this is great.\n\n[65:53] If you don't need to modify anything in user, just copy top level thing, change what you want, and you're done. If you need to make a nested modification, you have to do this dance of copying multiple things. I want to reassign posts.\n\n[66:09] I want to say posts is going to be a new array, which includes all the stuff from user.posts. Now I've made a new thing. This is a new array. These are all going to be copied in by reference again, but I want to add my big number at the end here.\n\n[66:32] Now if I do that, the original one is unchanged. New one has a new thing. We could do a quick check here to say user.posts.\n\nTaylor: [66:50] Just keep checking the same thing over and over just to make sure.\n\nDave: [66:59] [laughs] You can see the posts on the original user is not the same as post here because we've made a new array now. This is messy. If you need three or four levels down, it just doesn't look nice. [laughs]\n\n[67:18] Object that I assign is the same as the spread operator. This is exactly the same thing as saying object.assign into a brand new object. I'm going to copy in the user. Then I'm going to copy in all these modifications.\n\n[67:37] This squishes things down. Starts with a blank canvas, and then plops in all the stuff from user, and then plops in all the stuff from here, and you get the same result.\n\nTaylor: [67:50] Also add stuff to it.\n\nDave: [67:54] Also add stuff to it?\n\nTaylor: [67:55] Yeah, in addition to posts. Since you're using object assign, you can add an extra...\n\nDave: [68:00] Yeah. Same thing you can add in your name field or whatever. That'll work too.\n\n[68:18] Copy JSON, [inaudible] and stringify. That would do a deep clone. By JSON stringifying your object, you're taking everything inside the object, turning it into a string representation. Then when you parse it back, you get a whole new set of objects and everything. Yeah.\n\nTaylor: [68:41] In the interest of time, we should probably move on.\n\nDave: [68:45] Let's move on to...\n\nTaylor: [68:47] Great question. This is awesome.\n\nDave: [68:51] We sort of just touched on...Actually, I don't know. Do you think I should move on to adding and removing stuff from arrays, or should we do map filter reduce?\n\nTaylor: [69:02] How about a vote from the audience? We have modifying arrays versus...\n\n[69:11] [crosstalk]\n\nDave: [69:11] [laughs] We have to do a reduce.\n\nTaylor: [69:12] We have an only do reduce, map filter reduce is looking.\n\nDave: [69:17] Can't we filter and not reduce?\n\nTaylor: [69:23] We have every permutation of map filter reduce.\n\nDave: [69:29] I'll skip over the adding and removing stuff. We'll talk about map filter reduce.\n\nTaylor: [69:34] Why not both?\n\nDave: [69:36] If we have time, we'll go back to that. It seems like maybe there's more confusion, to only reduce it is difficult. I think I'll start with map and filter quick before do the review because I think that concepts stack.\n\nTaylor: [69:51] Totally. The mutability concept is a great segue.\n\nDave: [69:55] Let me change over. Go, listen, what am I doing? Map nine. Lesson nine here.\n\nTaylor: [70:08] Hey, are there any performance issues with JSON-stringify?\n\nDave: [70:13] I wouldn't do it a lot. I don't think it's fast stringify parse a lot. I would not say that that's a solid strategy for [laughs] avoiding having to write difficult immutable code.\n\nTaylor: [70:32] Just because you can doesn't mean you should?\n\nDave: [70:35] Not only is it probably not zero performant, but it's not performant for another reason, too, is that you're changing the whole tree every time. Part of the benefit of immutability is that you can do the strict equality check, the triple equals thing on your two objects.\n\n[70:56] You can very quickly tell this is uber performant to tell if these two objects are the same thing. React uses this a lot. If you're parsing in props to a pure component or React memo thing, it'll just shallow compare says, \"Are they the same? Then I don't need to do anything.\" If they're different, then I need to do something.\n\n[71:18] The problem with doing that deep clone thing is that you're changing everything in the tree. If you've got different components or anything else that would have skipped a few cycles because those things hadn't changed, then you've recreated the whole world. Then, it won't be great.\n\nTaylor: [71:41] Cool.\n\nDave: [71:41] The mutability results in memory issues. That's a good question, too. I definitely had an aversion to that [laughs] in the beginning doing lots of copying. Isn't that bad? I don't know. The JavaScript garbage collector is good at cleaning up after copies.\n\n[72:07] Also, especially because modern JavaScript is moving towards this more functional immutable style of things, I think the JavaScript engines are evolving to match what people are doing. If people are doing a lot of object copies and creations and stuff, they're going to handle that pretty well.\n\n[72:30] What about React Native? I'm not sure. I'm not sure how React Native...Oh, because it's native. I still think that it would probably compile down to good garbage collection code. It's a widely used pattern. Everyone is using immutability. There's a lot of incentive to make it fast.\n\nTaylor: [72:57] Let's get into...\n\n[72:58] [crosstalk]\n\nDave: [73:00] map filter reduce here. Let me pull up my little cheat sheet here. Let's say we have these people, and we want to make a list of their names without map or whatever. We could write, make a names array.\n\n[73:22] We'll write a for loop. That's let i zero, i less than people length, i++. For each person, we're going to run this thing. We'll do names that push people. People, i. [inaudible] . Then log out names. This will just get first names in these people. You can write it this way. This is the old standby. Make an array, push some stuff on it, use the array.\n\n[74:05] You can write this in a more functional style if you use the map function arrays. If we say people.map, you can parse map a function, or use an arrow function here, but it can be regular function. It doesn't matter.\n\n[74:24] The function is going to get one argument. The first argument of the function is going to be each item in the array. This is going to be, say, person. This is nice because with the for loop, you've got to look them up by index. With map, you just get each person. That's nice and easy.\n\n[74:43] Let's just slowly transform this thing. I can just copy and paste this and do it the same way. I'll just push this person.firstName onto names, and then log it out. That works fine. Now get rid of the for loop. That works the same way. Map returns array.\n\n[75:08] The nice thing about map is that you don't have to do it this way. Map returns a new array that is going to be the same length as your input array. If people had three things in it, names is going to have three things in it.\n\n[75:27] The values of the stuff in this names array is going to be whatever you return from here. You can think of it as a transformation of, I'm going to go through. I'm going to map each of these functions, transform each of these values. Each object here becomes a new value.\n\n[75:45] I'm going to return person.first within your names.\n\nTaylor: [75:51] There you go. We're going to squash each other there.\n\nDave: [75:57] Through the magic of arrow functions, you could write it like this if you want to. That makes it easy to pluck out the first names out of this array, pluck out the IDs out of some objects, or whatever you want to do.\n\n[76:13] If you need the index, before loop, you can use two arguments, and you get index here. What were you going to say, Taylor?\n\nTaylor: [76:22] To succinctly put it, the difference between the forEach loop, well, I guess, it was just a for loop. You didn't really use .forEach. The for loop that you wrote does something for everything, and then map gives you the array. All of the stuff that returns from the function, it puts it into an array point, right?\n\nDave: [76:46] Yeah, that's the big difference. Map, I would say, it's more purpose built than a for loop. The for loop can do whatever you want to, a bunch of stuff in an array. Map is really good if you have an array and you want a new array with the same length, but you want to change each thing somehow. Map is good for that.\n\nTaylor: [77:12] Is there a way to break out of a map based on a condition? Can you cancel out of it?\n\nDave: [77:20] No, not that I know of anyway. If someone knows how to do that, that would be cool. No, the idea with map is, if you need a different number of results, then you don't want to use map.\n\n[77:32] Map is great if you want the same number of things. If you return early for a map, all it's going to do is put an empty thing inside your names array. We could try this if person.first is not Dan, we'll return. Otherwise, we'll return name.\n\n[77:54] That's going to give you a bunch of whatever. You end up with the same number of items in your result array. If you need to do it that way, you could later filter down. You could, say, filter this thing down to only the stuff that's not undefined, or whatever.\n\nTaylor: [78:12] Compound.\n\nDave: [78:14] Yeah, but a better way, if you need to reduce a number of items in the array, I shouldn't have used that word, you can just filter it to remove stuff from an array.\n\nTaylor: [78:25] There we go.\n\nDave: [78:28] Which is a good segue into filter. I'll move on to filter. Anyone have any more questions about map? You can mutate in a map, yes.\n\nTaylor: [78:41] You're returning a brand new array, so it doesn't really matter. Is it a mutation of the original?\n\nDave: [78:50] It's not a mutation of the original array, but you could mutate these items in the array, yeah. If you, like, \"Person.first plus equals exclamation points,\" so it returns that and that makes the array.\n\nTaylor: [79:08] Oh, that counts on a lot of people.\n\nDave: [79:10] Yeah, that also counts on a lot of people. It changed originals too. Good to know. If you're going to change your copy, do your \"...person\" spread thing and \"person first plus exclamations.\" That'll ensure that you get a new thing and get nice new objects.\n\n[79:47] Is there a map equivalent for object to iterate over keys? Yeah. Object keys, object values, object entries, super useful.\n\nTaylor: [79:56] We might have time for that, we might not.\n\nDave: [80:00] Yeah, we're running low on time. Why don't we just jump ahead to Reduce maybe?\n\nTaylor: [80:07] Filter, we don't have to type out filter.\n\nDave: [80:11] Yeah.\n\nTaylor: [80:12] How would you explain filter without typing it out?\n\nDave: [80:17] If you want to remove stuff from an array, filter is perfect for that, like the name suggests, I suppose. The way filter works is you...\n\nTaylor: [80:28] Let's just type out an example.\n\nDave: [80:29] Yeah. Say, earlier we filtered out some of the people. If I change this into a filter, each person, if I return true from here, it's going to keep the items in the array. If you want to keep the thing, returnTrue. If you don't want to keep the thing, return False. You do that you get an array with nothing. Let's see.\n\nTaylor: [81:10] First is not Dan. We don't want Dan in the array.\n\nDave: [81:16] Yeah, well is that going to get rid of Dan or is that going to keep Dan? First is not Dan. That's interesting. Why did it do that? Oh, I'm doing people. That's interesting, yeah, so People.first is undefined. I want person.\n\nTaylor: [81:34] Oh, right, you want person, because you're in the context of the call back function.\n\nDave: [81:38] Yeah.\n\nTaylor: [81:39] Yep, this is why we paired programs.\n\nDave: [81:43] Now we get that we're keeping the people who are not Dan. We get elegance there. Half the time I forget like, what the filter takes. Like whether it keeps if it's true or false or whatever. Just write out this sort of this thing. Make a little arrow function that returns true and be like hey, true kept my one thing. If I write false, it doesn't keep the thing.\n\nTaylor: [82:10] Pretty good with filter? I think they're all itching to reduce.\n\nDave: [82:13] Let's do reduce. [laughs] Where's reduce? [inaudible] .\n\nTaylor: [82:19] The second argument to the filter function, is that still going to be the index?\n\nDave: [82:31] Yeah. It's pretty consistent. You'll see reduce as sort of the same thing. Their argument after the item is always the index. Let's look at an example of reduce. I'm just going to jump straight to the query string parsing thing. We can work backwards if people have questions about things like that.\n\n[83:02] Let me move my little Zoom people here. If we had a query string on the URL like this, we can access that query string, window.location.search. It gives us the question mark and everything after the question mark. If I say window.location.search...We'll console log out search down here. We'll chain a bunch of things on this to change it up.\n\n[83:39] If I want to take this string of whatever, and turn it into an object where you've got keys and values, we need some sort of array here first. We could jump straight to doing an object, but it'll be easier if we break it up first.\n\n[83:58] First thing I want to do is get rid of this question mark. I'm just going to use replace. Let's say [inaudible] question mark with nothing. We do that. Now we get rid of the question mark. Now we have something that's like a repeating pattern. It's like key = value and key = value, whatever.\n\n[84:19] Now we can split this up on that ampersand. We can say split, split on and. Now we have an array of all the key values. We're closer to this thing here. Let's split this up now on equal sign. We'll have array of pairs.\n\n[84:44] To do that, we have an array now, we can use map. We can map over all these items. Let me move this down here. For each item, I'm going to write a function that does item.split. we're going to just split that on the equal sign.\n\nTaylor: [85:02] Everybody with us so far?\n\nDave: [85:05] Yeah, how are we doing now? Good so far? Cool. Chaining is cool. You can start with a string and end up with an object if you want by chaining lots of operations together. Just make sure you keep in your head what type you're on. This is a string. This is a string. This is an array now.\n\n[85:26] Now we've got this array. We want to turn that into this object here. We can't use filter, because we don't want to remove stuff. We can't use map, because we don't want new array. We want an object. Reduce is the catch all functional array thing. If you want to turn an array into anything else, use reduce.\n\n[85:48] Reduce takes a function, same as the others, but this one takes arguments in a different order. The first argument here is going to be the final result. The second argument is the item. In that case, it's one of these. It's like a key value array. The last one is index. We're not going to use index here. I'll leave it here so you could see.\n\nTaylor: [86:12] Sometimes, you never know if you're going to need it.\n\nDave: [86:15] Yeah, sometimes you need it. What reduce does...What you do is return...It chains the result together. I'm going to return a number. Just console log the result and the item. Here we go. I'm going to get rid of this console log. Looks less confusing. That's actually not less confusing. That's more confusing.\n\n[86:51] [laughter]\n\nDave: [86:52] It's a bunch of arrays.\n\nTaylor: [86:55] Arrays all the way down.\n\nDave: [86:57] Yeah. I'll make this work and we can circle back. I was thinking about summing numbers together or whatever was the easy reduced example. Maybe we should have started with that.\n\nTaylor: [87:09] There's still time. We can let this one marinate while you explain the summing numbers one.\n\nDave: [87:16] Why don't I finish this one out and then we can go do a simpler reduced example. Let me do a couple of them maybe. We have time.\n\nTaylor: [87:24] OK.\n\nDave: [87:26] The result initially is going to be assigned to one of these array items which is not what we want. If we return, undefined we'll find the result is undefined. The second argument to reduce is the initial value. This will get parsed in as the result the first item.\n\n[87:50] That first time we're going to have empty object as the result and A and five as the key-value item. We want to put that as the...\n\nTaylor: [88:05] So...Sorry.\n\nDave: [88:06] Yep.\n\nTaylor: [88:06] I wanted to make sure that one of the things with reduce is that, is it clear to everybody that right now on line 17, where the curly braces are, that's a second argument to .reduce. It's the same as any other function. That's just the second argument is the thing that will be the final value, right?\n\nDave: [88:35] Yep. It's the initial result.\n\nTaylor: [88:38] Yeah, sorry. The initial result.\n\nDave: [88:39] Initial values.\n\nTaylor: [88:40] Sorry. The final value is the final value. The initial result is...\n\n[88:44] [laughter]\n\nDave: [88:44] [inaudible] .\n\nTaylor: [88:47] I swear I know what I'm doing.\n\nDave: [88:52] The last return value. We have empty object and we have this item. We want to return something that's going to get chained back into the next function, which is going to be the new result. We want to return, say, a new object that's maybe a copy of result. I'm going to do this the mutation way first. Mutation here is more forgivable.\n\n[89:22] We're creating an object. We're mutating it and then it disappears. You want to mutate your reduced result, it's not too bad. Let's say we want to pull in item zero is equal to item one. This is accessing these indexes. We're going to end up with this nice object where our keys and the values are whatever.\n\n[89:50] We can do some fancier stuff where we change this thing into a destructured key value. We know this is an array so we can destructure it. Did I spell key right? Then we can make this look a little nicer. We can say key is value, works the same way. We should probably URL decode this thing. [laughs]\n\nTaylor: [90:13] Here's where it gets interesting now. We scheduled the meeting to end now. If everybody wants, we can stick around a little bit. Dave, you're still good to stick around.\n\nDave: [90:25] Still good.\n\nTaylor: [90:26] Cool. We have a few lost souls in our chat looking for an easier reduce example.\n\nDave: [90:36] Yeah. Why don't I zoom back out? I'll do summing up numbers. We'll do numbers. Numbers are easier. 1, 2, 2, 4, 8, 16. DecodeURIComponent is a built function. It's just like in the browser. Decode and encode are both built-in. Let's do a simpler reduced example. Say we have an array of numbers and we want to reduce this array into a single number.\n\n[91:17] We can say numbers.reduce. We'll put this in a variable. We'll call it sum. Then we get our function. What do we want the initial value to be? If we're summing stuff up, we probably want to start off at zero. We're going to add each number to the thing. We'll say zero. Seems good? Then inside here, we have to return the next value.\n\n[91:44] Arguments, we've got result and we've got the current number. The result you could call this sum or something. We're going to call it result to deconfuse it from this variable name here. The first time it calls this we get 0and 2. The next time it calls it, the number is going to be 4, and it's going to be 8, and it's going to be 16.\n\n[92:08] It calls it once per item and the result, if we return result+number, the first time, the result is going to be 0Let me just log this out. It's going to be easier to see, I think, result and number.\n\n[92:29] The first time it calls through, we've got a result. I'll give it like result, num, yeah. First time through, we get a result to 0because that's our initial value. This goes in here. Then we return zero plus two, right? That number is 2, return 2. That gets fed into the next one.\n\n[92:57] Next time around, it's going to get 4 as our number and two as the previous result. Think of it as this endless loop thing. Still making sense?\n\nTaylor: [93:11] One of the things from my personal battles with .reduce, I name the parameters different to the callback.\n\nDave: [93:22] What do you do?\n\nTaylor: [93:23] I name the first one previous value, and then I rename num would be current value.\n\nDave: [93:32] I like that.\n\nTaylor: [93:33] When you start from 0the first iteration, your previous value, is whatever...I'm using my mouse like everybody can see it. The previous value the first time is the 0that's on line 26. Then the current value is whatever index of the array that you're starting with.\n\nDave: [93:58] Yeah.\n\nTaylor: [94:01] I know in the chart that many name it as current and accumulator.\n\nDave: [94:05] Current and accumulator. Yeah, because it's not just the previous value, it's the combination of all of the previous values. A tangent, but if you've used Redux, if you've written a Redux reducer, it takes state and the action and returns a new state.\n\n[94:25] You could think of it as this is the previous combination of all of the previous things, and then this is the new thing that should happen. You're going to return a new value. It's the same format as that.\n\n[94:39] Sometimes, if you know Redux then you can think of it as that way, but if you know Redux, you probably also not.\n\nTaylor: [94:49] What if we named it blue and bar? How about that? Maybe not.\n\nDave: [94:54] You can call it blue and bar if you want. I like previous value, current value. That's good. Let me print out the final sum, and then that's the actual sum.\n\nTaylor: [95:12] Anybody need more explanation for the addition or the sum function that we just wrote? OK, cool.\n\nDave: [95:23] Cool.\n\nTaylor: [95:25] Let's try it with an object.\n\nDave: [95:29] Try it with an object.\n\nTaylor: [95:30] Something like we were doing up above. Can we land somewhere between the first example and the sum example?\n\nDave: [95:39] Yeah, let's see. What could we reduce? Someone asked about I think callback function. This can be any old function. The other cool thing that I forgot to mention earlier is that since there are functions, you can extract them out and be like this is my...I'm just going to call it reducer for now. I'll rename it in the second.\n\n[96:06] Maybe we'll call it summer. That's a terrible name. That is the function that does the summing. The nice thing about these functional things is that you can reuse bits of it. You can just extract them out. Also can make it easier to read. You're reading this and you're like, \"OK, it does the sum function. I know what that is.\" You don't have to read through this and figure that out.\n\n[96:39] Use set time as an interval. Yes, maybe. Set timeout. You can parse the callback here. It's the same kind of thing. You're parsing a callback to your reduce function. It works the exact same way, but there is no timeout with reduce.\n\nTaylor: [96:59] Yeah, because you wouldn't be able to clear the interval.\n\nDave: [97:03] Yeah. You could do that. That would be [inaudible] . It's a list of intervals but you clear them at the end or something. Don't do that.\n\nTaylor: [97:14] That makes the query string parsing look a lot.\n\nDave: [97:18] That makes this look easy.\n\nTaylor: [97:20] Yeah.\n\nDave: [97:21] What's a good example where you have some stuff and you want to break it down into one final result? I think mandatory clear cleanup? The timeout will clear itself once it happens. If you're cleaning up a component, or you're cleaning up somewhere, that's always a good time to do your clear timeout, clear interval, yeah.\n\n[97:54] I'm trying to think of a reduce example. I could...\n\nTaylor: [97:59] Can you pull up that array that you had with Van, Ali, and Sarah?\n\nDave: [98:05] Yeah.\n\nTaylor: [98:06] Then let's create a new object from that array that only has...I want to say, let's figure out what the average age is, or make it up. You probably shouldn't make up ages for people. Maybe number of posts, number of tweets that they've made.\n\nDave: [98:31] Yeah, that's good, tweets. We'll do tweets, one million. How do you say, \"One million?\" [laughs] Tweets, also a million. Actually, yeah. I'll have a lot of tweets. I'll give them different numbers, or something like that. 1,000, 2,000, 3,000 or something.\n\nTaylor: [98:53] We want a new object that contains an object that has a key of twitter handles which will be an array. Then we want a single value that is an integer of the sum of all tweets.\n\nDave: [99:17] Wait. [laughs] What's our result?\n\nTaylor: [99:20] The result is a single number of total tweets.\n\nDave: [99:26] We're going to have like const total of tweets equals?\n\nTaylor: [99:31] Yeah. We know what it's going to be. It's going to be 6,000. We know that's what it's going to be, but we're going to take the convoluted way...\n\nDave: [99:41] The [inaudible] way...\n\nTaylor: [99:42] of getting there.\n\nDave: [99:46] Yeah, cool. Frequency of items, yeah. That's good, too. OK, we'll start with our reduce function. We've got our previous...we'll call it \"accumulator,\" sure.\n\nTaylor: [99:57] Accumulator value.\n\nDave: [99:59] Then say...\n\nTaylor: [100:00] Yeah, max total question.\n\nDave: [100:03] Yeah, that'll be nice. Total's good. Do you want to do max total instead?\n\nTaylor: [100:06] Yeah, let's do that.\n\nDave: [100:08] Min-max total.\n\nTaylor: [100:11] Although, maybe you should reorder them so that they're not going to be in it, since we already...\n\nDave: [100:15] Yeah, so it's not like super obviously, like, \"Hey, we already know what the order is.\" [laughs]\n\nTaylor: [100:19] Yeah.\n\nDave: [100:19] There we go. That's going to blow up for a second. Come on. OK, so our accumulator...if we're going to do min-max total, then our result is going to be probably an array, right? I guess you could do an object with min-max total keys. What do you want?\n\nTaylor: [100:36] Let's do an object.\n\nDave: [100:38] Object is infinity. We do max minus infinity. I get these backwards. Total zero.\n\nTaylor: [100:49] Can you scroll a bit, too?\n\nDave: [100:50] Yeah, I'll do that. There we go.\n\nTaylor: [100:52] Thanks.\n\nDave: [100:54] Let me just do this, so we'll look at one thing. Yeah, all right. Each time through this reduce we're going to need to return a new object that's the same shape. We could just modify, but we'll just mutate the object for now. It's probably easier.\n\n[101:17] We can say accumulator.min is... let's see, ifperson.min is less than accumulator min. Let me just get something shorter. [laughs]\n\nTaylor: [101:33] Final count. No, not final.\n\nDave: [101:39] It is kind of final.\n\n[101:40] [crosstalk]\n\nDave: [101:42] Changing this thing is so hard, because I like the name \"final\" because it kind of says, \"OK, the final thing is going to be made up of all this stuff.\" But you know that it's not the final right here yet.\n\nTaylor: [101:55] But if you have that object to start with and you never did anything, then by default it is the final version.\n\nDave: [102:01] Yeah, that's true.\n\nTaylor: [102:02] It's the start and the end if you do nothing with it.\n\nDave: [102:06] Yeah.\n\nTaylor: [102:08] That was a philosophical debate.\n\nDave: [102:11] Yeah. [laughs] All right, so we'll reset the minimum based on this new person's minimum. The person's minimum is less than final minimum. Then we'll use a ternary operator here. We're going to use the person's minimum, otherwise we'll use the old final minimum.\n\n[102:31] We can do the same thing for max, sort of. If the person's max is...Or she tweets. If the persons tweets is less than the current minimum we'll set this minimum to the person's tweets. Sets new minimum otherwise we will use the old one. If tweets is greater than final max, we'll set [inaudible 1] tweets final max and then a total we will just add up person tweets. Right?\n\nTaylor: [103:11] Right. We have Davacha saying that he's now confused instead of...\n\nDave: [103:17] He still has you away for an interview.\n\nTaylor: [103:20] Like sweet, sweet dreams looking at this right before bed.\n\nDave: [103:23] Yeah.\n\nTaylor: [103:24] Can everybody see what we're doing in the function here? How we're comparing the min and max? Where if the item in the array coming in has a lower number than the one that we already have stored in final, so final.min for MLAD.\n\nDave: [103:44] This is final.min.\n\nTaylor: [103:46] That will be as we go. That's going to be always the minimum, the smallest number that it's seen.\n\nDave: [103:58] Right.\n\nTaylor: [103:58] Then, it obviously is zero.\n\nDave: [104:00] That makes sense. This whole object is our final thing here. Whatever we put in it is going to be accessible inside here is final.whatever. Everyone clear on the ternary operator? I know this can be a little bit weird to read, but maybe this is more helpful? It's like an inline if. It's saying, \"If this is true, it becomes this. If it's false, then it's this.\n\nTaylor: [104:26] We have a let's execute.\n\nDave: [104:28] Let's go, very cool.\n\nAudience Member: [104:29] Steve.\n\nDave: [104:31] Who are they?\n\nTaylor: [104:32] They cannot read state [inaudible 1] fund. [laughs]\n\nDave: [104:34] Ah.\n\nTaylor: [104:34] All right.\n\nDave: [104:39] What did I forget?\n\nTaylor: [104:40] What did we forget?\n\nDave: [104:42] I know what I forgot, but someone in the chat, what'd I forget? Yeah, return. That's not for returns same thing as return undefined, right? Then, the next time around, final is undefined. Then that blows up.\n\nTaylor: [104:57] You need to return the final one.\n\nDave: [104:58] Return final.\n\nTaylor: [105:00] That is the number one mistake in writing reducers is not returning your accumulated or final or previous value, whatever you want to call it. You have to return the thing that you gave it second. Sorry to get all mad, but I'm getting PTSD over here thinking about how many hours I spent not writing return.\n\nDave: [105:23] It's super easy to forget this and then you get...If you have a number or something, your results will just maybe be junk. In this case, you get some confusing error about like, \"Why did I undefine?\" Make sure to \"return.\" We got our main max total and they are even correct, I think. Cool.\n\nTaylor: [105:45] What if we update our object that we're accumulating? What if we updated to add the name of the person who holds that record?\n\nDave: [105:57] That's good idea. Name with most tweets or something?\n\nTaylor: [106:03] Sure.\n\nDave: [106:05] Name with most tweets is nobody or no. I'll tell you is no.\n\nTaylor: [106:11] No is probably.\n\nDave: [106:12] It's a different company.\n\n[106:13] [laughter]\n\nDave: [106:13] There's probably someone in Twitter with that handle. What we can do is, it...Interesting. Before we change the final max, we need to check if this condition is true.\n\n[106:29] Now, let's do this. Say if this person's tweet is better than the current maximum, we're going to set, \"Final.name with most tweets\" to \"Person.say it first.\" Hey, we'll just use template strings right now, right? [laughs]\n\nTaylor: [106:50] There we go.\n\nDave: [106:50] Bring it all together. Let's see if this works. Let's see who has more wins. 3,000 [inaudible 1] to 9,000 change alley to over 9,000.\n\nTaylor: [107:07] Over 9,000?\n\n[107:08] [laughter]\n\nTaylor: [107:08] The Internet is sleeping. Sorry.\n\n[107:16] [laughter]\n\nDave: [107:16] That works. This logic is duplicated. I guess you could move this step in there. I don't know, but it works.\n\nTaylor: [107:25] Hopefully that's clarified it.\n\nDave: [107:29] I hope that was helpful and that work, it really. [laughs]\n\nTaylor: [107:33] We've gone about 15 minutes over. If anybody has last minute stuff in the chart, obviously this is the thing that we could just stay here for hours and hours but...\n\nDave: [107:45] I know. I didn't even cover all the lesson. [laughs]\n\nTaylor: [107:47] I know. We might have to do a part two after all. Any questions about reduce or maybe...?\n\nDave: [107:59] How do I feel like [inaudible 1] .\n\nTaylor: [108:06] We have questions about the object from Luis Carlos. We'll give you a second to type a bit more. Accumulation is adding stuff onto something. As you get more stuff, you're accumulating it. When we start with nothing in our min, max, and total, as we iterate through our people array, we're accumulating.\n\n[108:42] We're adding more stuff to what we started with, if that...the accumulation.\n\nDave: [108:50] There's a video game called Katamari, where you start off as a ball, you roll around, and you gain more mass. I think the first argument to reduce is like that. It's whatever the last thing was, and you just keep piling on stuff, or replace it with whatever you want.\n\n[109:12] It's the way to keep track of value between calls. Sometimes maybe your final result, what you actually want is a single number. In order to get that single number, you've got to keep track of some other stuff. You could keep track of that in an array that gets parsed between every iteration. Then in the last call, you just be like, \"I'm going to return the number now.\"\n\nTaylor: [109:41] How about, on line 38 can you add a argument for the index, like a third...?\n\nDave: [109:48] Yeah.\n\nTaylor: [109:50] Then let's do a console.log on the first line of we're on round iteration number. We don't really console log anything else out. That's why I was like, \"Nothing's showing up,\" and it's logging in.\n\nDave: [110:08] Here's our iteration. We could print out maybe the before and after or something.\n\nTaylor: [110:15] Before and after.\n\nDave: [110:17] We'll print out final here, we'll do our changes to it, then I'll print out final down here. I'm not sure if this is going to be helpful or not. We'll see.\n\nTaylor: [110:32] Iteration 0the first time through, we've only looked at one person. That's why Sarah has the min, max, and total.\n\nDave: [110:47] The second time through, we've now looked at Dan.\n\nTaylor: [110:49] Maybe add a before and after in the console logs.\n\nDave: [110:55] Color's before. It's a little tricky with objects, because they're really engrossed in the console. Exit from reducer. You can't exit from reducer. It's the same thing as map. You can skip function, you could skip items or something like that.\n\n[111:16] If you just want to return, you can return, but you can't do an early exit. If you have 10,000 items, that reduce function's getting called for all 10,000 items. Best you can do is return early from each iteration, not from all of them.\n\nTaylor: [111:34] Awesome. Glad that that helped. Do you want to give it a last, last call?\n\nDave: [111:44] Sure. Last, last call. Any more questions for me before we wrap up?\n\nTaylor: [111:53] Let's see.\n\nDave: [111:54] Alert call only with new function 1. If it's being called as a constructor with the new keyword?\n\nTaylor: [112:08] Wow.\n\nDave: [112:09] That's a good question. There's a way to check. I don't remember how you do that. Actually, the Babel example might have something like that. I forget. Let me go pull this up. This is code that Babel made. It's messy, but I thought I remember seen something in here that was like disallowing calls with new or something.\n\n[112:39] It is called with new. Let me just...You can [inaudible 1] I think. I'm just going to pick the stack overflow question here, because I think that is probably going to answer it.\n\nTaylor: [112:55] I think your screen might have froze.\n\nDave: [112:57] My screen froze? Am I frozen?\n\nTaylor: [113:03] Now we're back.\n\nDave: [113:04] OK.\n\nTaylor: [113:07] What about reducing inside your reduce?\n\nDave: [113:11] Sure. Do that if you want to. Yup, it's fine.\n\n[113:17] [laughter]\n\nDave: [113:17] It definitely works. You can call any of these functions inside other ones. You can chain them. They're all just function calls. At some point, your head will explode probably.\n\nTaylor: [113:27] Totally. For our tweet example, if each person had an array of subjects that they tweet about, [inaudible 1] then map a finalized list. Reduce is really powerful. It's confusing at first, then it becomes...\n\n[113:55] [laughter]\n\nDave: [113:55] Reduce is the most powerful one, but it's also the most generic and confusing. The best way to get better at these functional things is just try solving problems you've solved before, but with map, reduce, and filter and see how far you can get. You get used to it. It is weird JS at first. It will get easier.\n\nTaylor: [114:23] Question about using arrow functions as a standard, or if it's better to just use arrow functions in React.\n\nDave: [114:30] I don't know. I use arrow functions most of the time. I still write plain old functions sometimes if it feels like a large chuck of code somehow. I don't know. Something in my brain just like, \"I want this to be a proper function.\" There's no reason to. I don't think there's a best practice in terms of one or the other. Arrow functions don't replace functions. You can use [inaudible 1] .\n\nTaylor: [114:54] When I write async functions, I use the old-school async function params curly brace.\n\nDave: [115:03] Yeah, because async blah looks weird.\n\nTaylor: [115:07] I never can get an async arrow function right the first time. These last couple of questions...\n\nDave: [115:18] Oh, I haven't used view, but it might be the same problem as I was mentioning with jQuery where it expects it wants to bind this. If you need to be able to use this.whatever inside your function, the framework needs to be able to give you that value of this, then that might be why they said not to use arrow functions. Try it though, see what happens. If it breaks, that's probably why. [laughs]\n\nTaylor: [115:46] I think this question from Greg might be a good close out question. He asks about the wording you say to yourself when writing an arrow function. How does that change how you call a function?\n\nDave: [116:02] That's interesting.\n\nTaylor: [116:03] Like a rule of thumb.\n\nDave: [116:05] I'm trying to think of how would I...Let me write a function that adds a few numbers together or something. I'd say const sum =...\n\nTaylor: [116:14] Numbers.reduce.\n\nDave: [116:16] It'll be arguments. I usually don't say anything to myself for this part, then I'm like arrow, a + b, maybe. If it's a function body, then it's function body return a + b. Something like that. I wonder if that helps.\n\nTaylor: [116:42] Yeah.\n\nDave: [116:43] Opposed to that, I'd be like function, sum, takes a and b, and it returns a + b. You could think of it that way. Const sum equals, takes a and b, arrow. That's weird. I just feel like...I don't think I vocalize this part to myself when I say arrow.\n\nTaylor: [117:04] I think that I would say an arrow function that takes a and b, and returns a + b would be how I would say that out loud.\n\nDave: [117:12] Reading it versus as I'm typing it, those are probably different things.\n\nTaylor: [117:17] That's a lot of those like asking how do you ride a bike? It's like, \"Well...\"\n\nDave: [117:23] [laughs]\n\nTaylor: [117:23] Just do it.\n\nDave: [117:26] Yeah.\n\nTaylor: [117:27] Thanks so much everybody for attending and sticking around for extra time. Of course, big thank you to Dave. This was a fantastic presentation. Really fun. I think we will have to do a part two because we didn't cover all of the stuff.\n\nDave: [117:44] Yeah, there's more stuff.\n\nTaylor: [117:46] There is more stuff.\n\nDave: [117:48] A little bit more stuff, not a ton. There's a couple basic things that would feel weird to pair with import, export, and babel. I don't know.\n\nTaylor: [117:58] Maybe if we do a part two, we can start about halfway through this as a rewind.\n\nDave: [118:04] Yeah, start with reduce and go from there or something.\n\nTaylor: [118:08] Previously with Dave and Taylor...\n\n[118:10] [laughter]\n\nTaylor: [118:11] All right, cool. Thanks again everybody. We will be in touch.\n\nDave: [118:19] Cool.\n\nTaylor: [118:19] Have a good day, everybody.\n\nDave: [118:20] Bye, everybody.\n\nTaylor: [118:21] Bye.",
        "casting_words_order": "zeLc",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream",
        "path": "/lessons/react-pure-react-js-fundamentals-livestream?pl=pure-react-livestreams",
        "http_url": "http://app.egghead.af:5000/lessons/react-pure-react-js-fundamentals-livestream?pl=pure-react-livestreams",
        "http_short_url": "http://app.egghead.af:5000/s/deegj",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-js-fundamentals-livestream-SyBtGEwqB/scikit-learn-pure-react-js-fundamentals-livestream-SyBtGEwqB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
        "series_row_order": -2621444,
        "series": {
          "title": "Pure React Livestreams",
          "description": "Live stream events for the course modules.",
          "duration": 49263,
          "slug": "pure-react-livestreams",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-livestreams",
          "path": "/courses/pure-react-livestreams",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875169,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-js-fundamentals-livestream/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5394,
        "creator_id": 9671,
        "slug": "react-pure-react-more-js-fundamentals-livestream",
        "title": "Pure React More JS Fundamentals Livestream",
        "state": "bundled",
        "summary": null,
        "duration": 5365,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Taylor Bell: [00:09] Can you all hear me all right? Hopefully. Testing, testing, one, two. Hi, Dave.\n\nDave Ceddia: [00:23] Hey, Taylor.\n\nTaylor: [00:25] Just making sure my sound is working. It seems to be.\n\nDave: [00:29] It sounds pretty good to me.\n\nTaylor: [00:30] Cool. Looks like everybody is showing up a minute early, which is how I like to do it in real life, is one minute early.\n\nDave: [00:41] Same.\n\nTaylor: [00:45] Let's see here. I see a few familiar names in the chat. Always good. It doesn't feel like it's been that long since we had the last session, but I guess it has been a couple of weeks.\n\nDave: [01:03] Yeah, it has been. Right. This is like the 15th, maybe?\n\nTaylor: [01:06] Yeah, something like that.\n\nDave: [01:07] Three weeks.\n\nTaylor: [01:09] Yeah. Let's see here. Oops, that is not the right button. There we go. We're half past the hour, different hours for all of us, I'm sure. Yeah, I guess if you want to wait a moment to start or if you're ready to go, we can dive in. Whatever you feel like.\n\nDave: [01:38] Sure. Yeah, I guess we can get started now. People will filter in. Let me share my screen here.\n\nTaylor: [01:48] Oh, and I need to mute notifications. That's always a good idea. I tend to do it in any event. Even when I'm not live broadcasting I like to mute my notifications and be like, \"Oh, sorry. Didn't see it.\"\n\nDave: [02:05] OK, can you see this?\n\nTaylor: [02:07] Yes, an aerial photo of a place, and now a console.\n\nDave: [02:11] All right, awesome. Good. You can't see the Zoom thing, right? If I put the zoom thing in the middle, or whatever.\n\nTaylor: [02:19] No, can't see that. Then, just real fast, a word to our attendees. We're going to keep an eye on the chat for questions. Some of them we might wait to answer to see if we cover them later. Other ones, we'll sneak in as appropriate. We keep it pretty conversational as some of y'all might remember from last time.\n\n[02:42] With that said, go ahead, Dave.\n\nDave: [02:44] Cool. Thanks everyone for coming. This is part two of our modern JS essentials set of lessons here. Last time, we skipped over a couple of things, and we hopped throughout a bit. I'm just going to go over the things we missed.\n\n[03:02] We're going to start with let and const, which if you've been using ES6 for a while, this is probably familiar to you, so everyone is on the same page. Old JavaScript, everything before ES6 had var. That was the only way to make a variable. ES6 adds let and const.\n\n[03:22] The big difference between var and let, const is the block scope versus function scope. Here's a little example of a function that has...There's a var and a let at the top level, then a couple more variables inside this if block. If I throw in some console logs here...Let's put log up here that logs at a var, at a let. You can see it prints out what you'd expect.\n\n[03:53] If you put the console log before the variables are given values, you get undefined. This is interesting. Unlike some other languages, we'll throw an error because you defined it after you used it. JavaScript is just like, well, the thing is defined because you're in the block, but it doesn't have a value yet, so you get undefined.\n\n[04:15] We could do the same kind of thing inside here. We could say inner var and inner let, and log these out. It's undefined again. Whoa. Now you're there. This works as expected.\n\n[04:35] The part where it diverges though is if we log out the inner var and let outside of this block, we're going to get an error that says inner let is not defined. The definition of a let or a const is only good inside its block, only good inside its braces. It doesn't go to the whole function. Whereas var, it's defined within the nearest function block, which is this entire thing.\n\n[05:03] You can see if we get rid of [inaudible] . That's the first thing about let and const. Another thing that comes up pretty often inside Clojures. Let me just move a couple chat things and stuff so I can get at my windows down here.\n\n[05:31] Inside a Clojure, this is something like if you've got, say, we have a function called printNumbers and you have a for loop, this is one of the cases where var is confusing. If you've got this var i and we're just logging out i...Let me comment at this one so you can see what's happening here. Non-call printNumbers.\n\n[06:03] We can see it prints out the numbers like you'd expect it to. If we put this console log inside, say, a timeout, which will run this log every one second. This will be after one second. We'll queue up five of them to run in one second.\n\n[06:25] The thing is, we don't get 01, 2, 3, 4. We just get 5, which is the last value. After it quit the for loop, then the timer ran, and it printed out the current value of i, which was 5 a seconds later.\n\n[06:44] This is a weird got you with var. If you change this to a let, then it works like you'd expect it to. In probably most other languages or whatever, this is the behavior you wanted to happen. If you're using for loops, especially with Clojures, let is a nice option there.\n\nTaylor: [07:10] Something I just noticed was when you had var, it was a 5, and now it's 0through 4 with the let.\n\nDave: [07:17] Now it's actually queuing up. Basically, it's creating a new variable for each iteration of this loop, whereas the other one was just like it's only one block of memory holding i, and then everything refers back to that same i.\n\n[07:35] So that with the var, at the end of the loop, you've got five things trying to print, like, \"Let me just go access i now.\" It's already 5. It's too late.\n\nTaylor: [07:48] Interesting.\n\nDave: [07:49] It's a weird one. Also, if you wanted to stagger this, you have to multiply that then it'll print one per second. This is var versus let. Const works the same way in terms of scoping. Let's look at some examples of const. Const is constant. I want to say it's constant.\n\n[08:22] If you say let=5and log out thing. We'll call...\n\n[08:31] [crosstalk]\n\nTaylor: [08:31] We're still printing numbers.\n\nDave: [08:34] Awesome. It will bring up 5. You can reassign this, because it's a regular old variable. You could change its value and it prints out again. This is fine. If we make this a const, then we're going to get an error when we try to assign a new value to it, because const, it's constant.\n\n[09:00] You can't reassign a value to a const variable. Where it's tricky is if the const holds a complex type like an object or an array, you can't reassign the top level thing, you can't say thing equals whatever, but you can change the insides of it. You can do thing.a=10. JavaScript won't stop you from doing this at all.\n\n[09:35] This is why I say const is constant. You can't reassign it, but you can change the internals. That's a thing to be aware of.\n\nTaylor: [09:44] It's not anything that you make with constant, or with const, rather, is not truly immutable.\n\nDave: [09:52] It's not truly immutable. It's not deeply immutable, you could say.\n\nTaylor: [10:01] I'm going to have to Google deeply immutable and see if there's a thought piece on...\n\nDave: [10:05] I don't know if that's a thing. One level immutability.\n\nTaylor: [10:11] Does anybody have any questions about anything we've covered in the last couple minutes? If you want to just type anything out into the chat, we'll keep an eye out.\n\n[10:24] Yeah, this is cool. Do you have a rule of thumb on when to use what type of declaration?\n\nDave: [10:32] I sort of default to using const most of the time. Basically, never use var. I would say just avoid var. There's no reason to use it anymore. Just use let where you would have used var or const. Most of the time, I try to write code that's like immutable and functional style and so I'll stick with const most of the time.\n\n[10:59] There's sort of, you can sort of go back and forth on like, if you know you're going to be changing the thing. Like if you know you're going to be modifying the internals of the thing, do you want to leave it const, or should you call it let because that kind of signals your intent a little better?\n\n[11:12] I kind of like this idea, but I don't know. You can find strongly held opinions on either side of that divide. Also, some people would just be like, \"Eh, just type let because it's shorter.\" That's also fine.\n\nTaylor: [11:26] We do have a question about how you would make it immutable. Would it be just the way you treat the variables you create?\n\nDave: [11:35] Yeah, it's pretty much how you treat the thing after that point. I think there is like, there's a thing called object.freeze. I'm not sure how well supported this is, but let's see what it does. You call object.freeze on like thing, because thing is an object. I think you can't change the...Oh, OK, it just ignores it, that's awesome.\n\nTaylor: [11:58] That seems like that could, double-edged sword.\n\nDave: [12:01] Yeah, that's kind of confusing, actually. This is not like enforcing immutability on a const...Oh, sorry, this is a let. Let me put this back to...No, still doesn't matter. I'd say enforcing immutability on a const is kind of tricky. What you can do is, just try to avoid assigning things to it, so instead of doing this, you can create a new value.\n\n[12:35] I guess, in the last session, we talked about like creating a new object and using the spread operator to make a copy, so you could spread out the existing version of thing and then set A to 10. Now you've got like, it's a comma there, I guess. Now you've got a new object with your new value and you've left the original one alone.\n\nTaylor: [13:00] We have, what happens if you try to delete A?\n\nDave: [13:04] Good question. See what it does. I'll change it back out to...Get rid of that one. Delete A, thing.A. Yeah, you can do that, too. Cool.\n\nTaylor: [13:20] Then while we're at it, another experiment that we could try from the chat is assigning a variable. Like with const, do you have to have a value for the variable when you create it?\n\nDave: [13:36] Oh, yeah. Actually, not sure about that. Do you get like the first assignment for free kind of thing?\n\nTaylor: [13:45] Yeah.\n\nDave: [13:46] Does it make you...Yeah. No, you can't do that. That's an interesting error, unexpected token. I guess maybe it was expecting an eagle sign and it didn't get one, and that's what that's complaining about. Interesting. I think that error could be better. [laughs] You have to initialize it, that definition time.\n\nTaylor: [14:14] Then what happens if you do it with let?\n\nDave: [14:18] Let's fine. You can change let later.\n\nTaylor: [14:21] Cool. All right, let's move on to the next section.\n\nDave: [14:27] Sounds good.\n\nTaylor: [14:29] Thanks for the questions everybody. Keep them coming, this is good stuff.\n\nDave: [14:32] Yeah, questions are good. Please ask more questions. Go through lesson three here. Lesson three. Statements versus expressions. If you've used JavaScript for a while, this is also probably pretty second nature to you, but I see people get tripped up with it, especially when it comes to using JSX and React, this difference between statements and expressions.\n\n[15:03] I'll just give you a couple of examples of each and show you what they are. You can figure out the pattern. If you've got things like let are statements. If you've got const = 5. This is a statement. The 5 part is an expression but this const thing is a statement.\n\n[15:27] What else? If you got a function, functions are interesting. You could have this is a statement, but if you assign it to something, then now this is an expression. JavaScript is a little weird that way. Where this matters, basically, if you can put the thing on the right side of an equal sign, then it's an expression.\n\n[16:00] Creating a array literal or object literals, those are expressions. If I make a couple of variables...That's never going to work. Basically, things you would assign or things you could return, if you could see yourself writing return 5, if that makes sense, you can't really see yourself writing return if.\n\n[16:28] This doesn't really make any sense. Some languages let you do stuff like this. Ruby and Elixir come to mind, where you can have blocks the evaluate the things. JavaScript doesn't let you do that. Basically, that's the rule of thumb for statement versus expression.\n\n[16:47] Can you return it? Can you assign it to something? I mentioned in relation to React why this matters. If you have a React component, say prints out a const or something, say we have a name and we were going to return some JSX from this thing like a <div> that renders out the name.\n\n[17:12] The stuff that goes inside single braces in JSX is a regular JavaScript expression. This is just plain old JavaScript in here, but it has to be an expression. You can put your array here, you can do whatever you want, but you couldn't do something like if true return 7 or something. That doesn't work.\n\nTaylor: [17:34] Would you be able to write a function that took care of that if?\n\nDave: [17:39] You could, yeah. You could write a function that if you wanted to do something terrible like this, feel free.\n\n[17:45] [laughter]\n\n[17:45] [crosstalk]\n\nTaylor: [17:45] You know, so many people start sentences to me like that.\n\n[17:50] [laughter]\n\nDave: [17:52] Yeah, I wouldn't do things like this, but you can. This is an expression. It creates a function and calls it. A function call, that's an expression too.\n\n[18:01] I was going to say something else and I forgot.\n\nTaylor: [18:05] Oh, sorry.\n\nDave: [18:06] That's OK.\n\nTaylor: [18:07] That doesn't look very readable, does it?\n\nDave: [18:11] I wouldn't say it's very readable. Oh, ternary. Something you said provided me a ternary operator. If you had something that's like if a turn true, else turn false. You can rewrite this as a ternary expression, which uses a question mark operator. You can say a ? then true, otherwise false.\n\n[18:50] This is outside of a function and can return stuff from just anywhere, although this is near.\n\nTaylor: [18:57] Perfect.\n\nDave: [19:01] You can write it this way, or you can also write if a is true, it will evaluate to the thing immediately after the question mark, otherwise it will evaluate to the thing after the colon. If you do need to do an if in an expression context where you need an expression, you can just ternary. Also, Boolean operators like a and true, otherwise false. It's kind of hard to read.\n\nTaylor: [19:38] That's one of the interesting things about that I found. Greg points out you could do a bang, bang a, or double exclamation points a.\n\nDave: [19:48] Yeah. For some things that simple like this, it's just returning a Boolean basically. You can put anything in that ternary thing. They don't have to be Booleans. You could do a ? stuff, otherwise not stuff. If it's applying a Boolean, yeah. Just bang bang.\n\nTaylor: [20:14] It is said bang bang, right?\n\nDave: [20:17] Yeah, I think so.\n\nTaylor: [20:18] OK. That's one of those things I never said out loud. I don't really think about it until I get self-conscious about having to say it out loud.\n\nDave: [20:27] [laughs]\n\nTaylor: [20:30] Does anyone else have any questions about statements and expressions? Claudio asks when do I need to know if I'm reading or writing an expression or a statement?\n\nDave: [20:44] In the context of React, if you're using React, then always use expressions inside single braces. If you're inside JSX, and you need to render out some value, those need to be expressions. If you're returning something from a function, those need to be expressions too. You can't return statements. Assigning things to variables, you can't assign statements to variables.\n\nTaylor: [21:12] If you did return a = stuff, that would not work because you're returning an expression? Or statement. You're returning a statement.\n\nDave: [21:24] Yeah. You can't return like let a = stuff, but you can return a = stuff. This thing assigns stuff to a, then it returns stuff. That's a weird one. Don't do that, but you can do it if you really wanted to.\n\n[21:43] Someone asked self-invoking functions are statements or expressions? If you have a function, these things immediately invoked function expression or whatever, you can wrap this whole thing in parenthesis, and then call it right away. This thing is an expression. You can return some number from it or something like that.\n\n[22:12] This is going to look awful, but I'm just going to console log the function call. [laughs] We should see a 42 and a yay, I think. Or not. I'm surprised about that. Why didn't that run? [inaudible] leave things until it works. Hold on.\n\n[22:32] [laughter]\n\nTaylor: [22:33] Good policy for a software developer.\n\nDave: [22:37] That's interesting. Why didn't that run? Does it have to be at the top level or something? What if you don't have parenthesis?\n\nTaylor: [22:47] That is a weird one.\n\nDave: [22:49] Oh, wait. Maybe I'm not looking at the right browser console or something.\n\nTaylor: [22:56] Now it's an unexpected...\n\nDave: [22:57] Yeah, OK. This is better. I think what happened was when we switched from the other project to this one, I didn't refresh the browser and we haven't done any console logging. OK, cool. It is running this immediately. You can see it's printing yay.\n\n[23:15] If I move all this junk into a console log, then it's going to print yay, and it's going to print the return value. This thing is an expression, yeah.\n\nTaylor: [23:31] Still not super readable. I probably wouldn't write like that, personally.\n\nDave: [23:34] No.\n\n[23:35] [laughter]\n\nTaylor: [23:43] Shall we proceed?\n\nDave: [23:46] I would say so. Next up was...Let's look at this list here. We did statements, expressions. We already did template strings, [inaudible] , destructuring, immutable stuff. Why don't we do adding, removing stuff for arrays? Sounds good?\n\nTaylor: [24:06] Yeah, that sounds great. Then, if anyone has questions about arrays that they've already had burning in the back of their minds, now would be a great time to ask them.\n\nDave: [24:17] Please ask. We're going to go through a few operations that you would do on arrays. We'll do the mutable version and immutable version so you can see the difference between the two. If we have an array of items here, the mutable easy way to do it is push on a new item. This changes the item's array.\n\n[24:46] Let me switch my project over here.\n\nTaylor: [24:49] Then refresh the console, too.\n\nDave: [24:51] Refresh the browser this time would be good. This is another layer of stuff to forget. I forgot to save the file, and now I forgot to refresh the browser. Once you refresh once, it takes care of itself.\n\n[25:06] We're putting up this array here, and it's got this new item. The immutable way to do this is to create a new array that has all the old stuff plus your new item. What that looks like is we'll just put it in a new variable here.\n\n[25:20] We'll call it new array. You can use the spread operator to spread out the existing items. If you weren't here last time, what this does is basically inserts the items in place. It's the same thing as saying items zero, items one, whatever for all the items. Then we're going to put four at the end. We've got a new array here with all the old stuff plus four.\n\n[25:47] I'm going to take out the push, so we're not doing that. We'll log out new array, and we get the same result. The good thing about this is that this new array is not the same as the old one. If you're doing a referential quality check, you can check really fast if two arrays are the same.\n\n[26:12] Versus, if you had done the push thing, you've changed the original one. There's no way to tell, but if you had a way, you'd have to iterate through. Check all the items and stuff. Check all the values, and that would be slower. That's adding stuff to the end.\n\n[26:34] You can spread anywhere inside an array, so you could say put four at the beginning, so you get four. Then the rest of the stuff, then we can log out our array of things. Then we get 4123. What else could you? You can add stuff. Someone asked, how do you add an item at any index?\n\n[26:59] If you want to insert something in the middle of an array, there's a couple ways to do that. The simple way to do it is honestly just make a copy like this. This makes a copy of the original one. Then you can use new array.\n\n[27:14] Now you can do the mutable thing. You can mutate your new thing. You can use splice. How do the arguments go? We start at seven decks. We've got our if 1, 2, 3 here. say we wanted to insert 2.5 after the 2. This is index 0this is index 1. We want this new thing to become index 2 instead of the 3?\n\nTaylor: [27:47] Let's try it out.\n\nDave: [27:48] I think if that's index 2, we're going to insert 2.5 maybe. Let's see what that does. No. That's interesting. That did not...I think this is how many things you want to delete, and then the items to insert.\n\nTaylor: [28:13] Yeah, there we go.\n\nDave: [28:14] It splices through a multipurpose function. It'll insert stuff, and it'll also delete things. You can say starting at index 2, I want to delete nothing. I want to insert 2.5, 2.6, 2.7. You can have every argument you put after there will get inserted.\n\nTaylor: [28:36] How does splice compare to slice?\n\nDave: [28:42] Slice is like taking stuff...Think of like, I don't know, I guess gene splicing is like you're putting something into something else. Like splicing plants together. Versus slice, you're chopping stuff off. We'll just log out the thing.\n\n[29:06] If I say new array.slice...If I just do slice like this, it makes a copy. It's another way to make a copy. You can also slice starting at index 0I want to take the first one item, and you'll get the one. Take the first two items, you get the first two. Three items...\n\nTaylor: [29:29] Can we maybe try splice with the places? Maybe the strings might be more clear than the numbers. Because index 0is the number 1, and stuff like that.\n\nDave: [29:40] Yeah, that's a good idea. Splice returns and removes...I think you're right about that. I think it does. New places. If we want to insert, say we have our existing places, and we're just going to clone it here and then just do the splice right on our copy here. What do we want to insert? San Francisco or something. That's what we're going to insert.\n\n[30:19] The first argument is the index. We're going to insert it at...Say we wanted to put it after Portland, basically putting it in place of Boise. It's going to be 01, 2. We're going to start at index 2. We're not going to delete anything. Then we're going to insert San Fran. I should log it out.\n\nTaylor: [30:46] That's a good next step.\n\nDave: [30:48] If I log it out, do we get...That's interesting. What did I do? I made a copy of places, splice...Interesting, so I'm logging out the return value.\n\nTaylor: [31:07] The return value, and since we spliced them, we didn't actually remove anything. Which goes to what Claudio was saying about splice returns the item you removed.\n\nDave: [31:18] Let's try that. Let's remove one thing. We'll remove Boise and replace it with San Fran, and then this will be removed items, and we'll log out both of them. Let's see, here's our new list of places, and here's the one we took off.\n\nTaylor: [31:44] It's important, I think, to note that our original places, we still know what our original ones were, because we've been making copies of it and not mutating the original array.\n\nDave: [31:54] We can log out places in addition to all this stuff, and we still have the original one untouched. We can compare it and we can make more changes if we need to. That's adding and a bit of removing.\n\n[32:14] Combining. Combining, you can use spread multiple times in an array. If we wanted to say, items and places, we can make a new array, spread out the items and then spread out the places. I'm going to get rid of that console.log for now.\n\n[32:36] Now we have a new array that has both these things concatenated together. That's pretty simple. We're talking about copying, so you can spread to copy and you can slice to copy. [inaudible] slice, that's the same thing.\n\n[32:56] What's the other trick? Concat. The other way you can do it is -- I'll make that valid -- you can take an empty array and then run concat on it, and give it an array to concatenate to. You're saying, make a new thing and concatenate the empty thing with your existing items. Now you get your copy there.\n\nTaylor: [33:24] Steven asks about dynamically accessing properties or values when having them inside of an array. If you have an array of objects, how would we get stuff out of the objects inside of the arrays?\n\nDave: [33:42] Dynamically is interesting. If you had an array of...Let's say we take our places and just put these things in objects. Is that what you mean, accessing the values inside here?\n\nTaylor: [34:00] That's what I was thinking. Maybe each of them has a number of stars or something. A fake population.\n\nDave: [34:14] Population lots. Population's huge up in Boise.\n\nTaylor: [34:18] Nobody lives in Boise. [laughs]\n\nDave: [34:20] Eight.\n\n[34:20] [laughter]\n\nDave: [34:25] Do you mean accessing like, you can get at places(0population) or something, that will get the population for Boston? I'm not sure if that's what you meant by accessing it dynamically, though.\n\n[34:46] The index you're accessing at can be a variable. We could use a variable here. If you didn't know the name of the key, you could use key. You could say, index is zero, and then key is pop, and that'll work the same way.\n\nTaylor: [35:10] Maybe if it was in a loop or something.\n\nDave: [35:15] Yeah, so if we wanted to print out...or let's say, i is 0i less than places.length, it will just loop over all the places and print out their populations. We know the key is population, but the index is going to vary. That's i here. If we do that, then we get the three populations.\n\nTaylor: [35:44] What about object.keys inside of the loop?\n\nDave: [35:49] Yeah, that would work too. Sure. Object keys of places i, so we get an object then print out its keys. That would work. You can also use object values if you wanted to get the values of the object without the keys. It's also...\n\n[36:14] [crosstalk]\n\nTaylor: [36:14] That's interesting because those are...It's an array of the name and then the population.\n\nDave: [36:22] Yeah. It's an array of just the values, and you can do object entries which is both. Entries is pretty useful. It gives you an array of key value pairs, so if you need to turn your object into an array, object entries is pretty handy for that.\n\nTaylor: [36:43] I'm having visions of reduce. Let's see. What about a question of how we can check if Boston is inside of the array of places?\n\nDave: [37:02] If we can access the things by property...We can already access, say, places i.name, and say we could...Until I've found Boston. No, we haven't found Boston yet, but we can say if places name is Boston, then...We got the quotes in the right order here. Then we can set foundBoston to true. There's also...What's the?\n\nTaylor: [37:43] Aha, harkening back?\n\nDave: [37:46] [inaudible] . What's the array method for this?\n\nTaylor: [37:50] Is it index...?\n\n[37:53] [crosstalk]\n\nDave: [37:54] There's index of which gives you, if it's not there, yes. Index of will look for a specific value, and so you have to give it some sort of value here. It won't take a function. Find will take a function. There's a find index too, so you can say find and give this a function where we'll get the item. If item.name is Boston, this is going to return the matching array item.\n\n[38:29] We can say Boston is this, and look up Boston. There's a bunch of handy array methods. I think mostly find index is also a thing. Yes, it finds the index of Boston.\n\nTaylor: [38:49] What about includes?\n\nDave: [38:50] Includes, this might return Boolean if it finds one that matches.\n\nTaylor: [38:57] But it...\n\nDave: [38:59] Is it [inaudible] ? No? Includes might only work with values too. I would say you could do find, and then you could do a bang-bang trick like here's Boston. If it's found, then this is going to be true, and if it's not found, it'll be false.\n\nTaylor: [39:28] There's a question about when we loop over the loop version of finding Boston, it's going to iterate the whole array. Even though Boston's in the first index, index zero, is there a performant way of bailing out?\n\nDave: [39:47] With for loops you can break. With the functional array methods, there's no equivalent of break. You can't return something to quit early. No. In terms of performance-wise, it's not a huge issue usually to run through an array once. It's more of an issue to run through the same array multiple times, so I wouldn't worry too much about...\n\n[40:17] If you have an array of two million items or something, then yeah. Then that's a problem. Then maybe you'd want to do it the for-loop way. If it's a handful of items, running through it once is not going to be very slow.\n\nTaylor: [40:31] The phrase \"premature optimization\" is applicable.\n\nDave: [40:37] Yeah, I would say so. If you have a loop that's going through an array beginning to end, and inside that loop you're going through the array beginning to end again, then that's like big O of N-squared, and you're running through the thing. If you have 1,000 items, you're running 1,000 squared times, which is not good.\n\nTaylor: [41:04] I don't even know what 1,000^2 is off the top of my head, but I'm sure there are a few zeroes there.\n\nDave: [41:08] A lot. A million.\n\nTaylor: [41:10] I shouldn't have said that out loud. I could have just Googled that and be like, \"I know what it is.\" How about any differences accessing nested values using a for loop versus .forEach.\n\nDave: [41:29] No, it should work the same way. With the forEach, you get the item as a property, which is nice. If you want to, say places.forEach instead of for, you're going to get the items. You don't have to look up the place by index. You can say if itemName = Boston, then we could do our for loop body here. It's similar except that you don't need to do places (i), you just do item.name and break.\n\nTaylor: [42:10] No breaking, right?\n\nDave: [42:11] No breaking.\n\nTaylor: [42:12] Because we use forEach. That's the tradeoff of writing forEach versus writing an entire for loop.\n\nDave: [42:21] I just thought about...If you really wanted to break, you can wrap the whole thing in a try catch, I guess, right? Once you're done, you just throw and then it'll end up here.\n\nTaylor: [42:37] Now you've written just as many lines as the for loop.\n\nDave: [42:40] It's definitely not less lines and it's also complicated and you got this weird try catch for control flow. If you need to do this, you could do that.\n\nTaylor: [42:51] Not that lines of code is a metric that we need to strive for. We're not playing code golf here.\n\nDave: [43:00] Yeah.\n\nTaylor: [43:03] We've got about 20 minutes on the clock. Should we move on?\n\nDave: [43:10] Yeah. Let's move on to...We could talk about import/export.\n\nTaylor: [43:16] Yeah, let's do that. How would we replace forEach with a map? Just change the word if we want an array or not?\n\nDave: [43:29] Yeah. If you want it to return an array, just change forEach to map. You just have to return something. Make sure you return something every iteration. Otherwise you'll get undefines, which is probably not what you want.\n\nTaylor: [43:44] An easy...Mistake is too strong of a word. It's easy to...\n\nDave: [43:51] Easy to forget though.\n\nTaylor: [43:53] When we get to reduce, we'll go back.\n\nDave: [43:57] Yeah, we'll get to reduce in a minute. Let's run through import/export quick. In ES5, you basically just used script tags a lot, or you paste a bunch of script tags in your HTML and that's how you import things.\n\n[44:12] In ES6, we've got import and export. I'm going to install a package here. We're going to yarn add moment, which is a library for dealing with time and dates and stuff. Super handy, but we're not really going to use moment much.\n\n[44:30] I just wanted to show you that we can import moment from moment. The package name I installed was moment. The name of the package needs to match the name in the string here. This part can be whatever you want it to be. I'll log out. We're just going to paste [inaudible] moment code that formats the date. Refresh my browser [inaudible] date.\n\n[45:07] The nice thing about this is that since this is the default export/import whatever from whatever. You can rename this thing. You can call it whatever you want. It still works fine. The name exports on the other hand need to match their module name. I'll do yarn add Lodash. Lodash is a handy utility library.\n\nTaylor: [45:37] Is it a best practice to just name your import the same thing as what the real package is named?\n\nDave: [45:46] Yeah, I think so. Usually, it's pretty common to do that. sometimes, the package will return something you're supposed to call, which gives you an instance of it'll be, like a constructive function. Then maybe you can import it with a capital M or whatever, and then...anyway. I would say, usually, match the names.\n\nTaylor: [46:10] Now that foo isn't going to work in the console log. Now it will.\n\nDave: [46:20] Lodash exports a bunch of useful functions, but they're all individual exports. There is no default export from Lodash. I think there was a GitHub issue about this, but for some reason, they didn't want to do that.\n\n[46:33] Once you do this, you can get...Someone was asking about dynamically accessing properties from an object. Lodash was super handy for this. If you had a nested set of objects -- this is three nested objects -- and you wanted to drill down to get this value, 7, you can give get, \"Give me a.b.c,\" and it will do the drilldown for you.\n\n[47:03] If one of these things is missing, like if for whatever reason you, you just got an empty object, it will give you undefined instead of blowing up like it would if you had literally done a.b.c.\n\nTaylor: [47:17] Then the third parameter is optional default value for when it blows up. Kind of outside the scope of what we're doing now.\n\nDave: [47:31] Yeah.\n\nTaylor: [47:34] It's one of those things.\n\nDave: [47:38] These names need to match the ones in the package. Look up the docs. You got the names. You can rename though. You can still get as _get or whatever. If you say as something, and then you can give it a new name.\n\n[47:52] What else do you want to talk about?\n\n[47:56] [crosstalk]\n\nTaylor: [47:56] Yeah. We have a question about...Just for clarity, in order to use import, do you have to install a package?\n\nDave: [48:06] I'm going to get to importing your own files in a second.\n\nTaylor: [48:13] I think that will clear it.\n\nDave: [48:15] That will probably clear it up. You can import your own files, but if you want to import a package, you do need to install it first. You can't just import moments and hope for the best. There are some IDEs that will auto-install things for you, but still it's installing it first before you can import it.\n\n[48:35] Let's talk about import. You can say import star as whatever, say s_lodash. This is a common way to use Lodash. You just import everything, put it under there. Now you can access these things as _.get, like whatever.get. You can name this whatever you want. This bundles all of the named exports together.\n\nTaylor: [49:02] How does import...On line 6, you have destructured import of get.\n\nDave: [49:09] Yeah.\n\nTaylor: [49:10] You're destructuring it from Lodash. How does destructuring it compare to what you're doing on line 9, where you use the star?\n\nDave: [49:23] Lodash has...Actually, let me move on to importing your own stuff, like what the magic exports look like, I think it will make a little more sense then.\n\nTaylor: [49:37] Cool.\n\nDave: [49:39] Let's say we had something like function printName that took a user, and we'll log out user.firstname, user.last. We'll refactor this thing into a new file. Let's create a new file over here. We're going to call it user.js.\n\n[50:07] We can move this code, just cut and paste it, put it in here. To make this available, if we want to be able to import and say we want to be able to import printName from ./user. When you're importing one of your own packages, you need a path to it.\n\n[50:31] Right now, if we try this, it's not going to work, because...No, let me do console.log. This won't work because it's not exported, where you get this weird error about something is not a function. To fix that, we can export it from here. If we want this to be the default export, we say export default, just prefix it with that.\n\n[50:59] Now it's printing out...Oh, yeah, we need to pass it in something like that first and last. Also, we've got some other crazy things here. Let me just comment this out. Here, we've got default export were using as the default import. Export default matches this thing without the braces.\n\nTaylor: [51:27] You could still name it whatever you want?\n\nDave: [51:29] Yeah, so you can still name this. This is like, whatever. Let's go change this to a named export. If you just stick export instead of a function, then the function name becomes like the name of the exported thing.\n\n[51:51] Now your import, this is going to blow up because there's no more default. Now we can't just do like printName, we have to use the braces. Because this, there's no more default and it's a named one.\n\n[52:15] We have a question about line nine, \"When using TypeScript, why do you need to use, import * as React from 'react'\"? That's a good question. I'm not sure. Instead of just, import React from 'react'...I think this usually works in TypeScript.\n\nTaylor: [52:40] Oh, yeah.\n\nDave: [52:41] This is a different thing than...I don't know. If you say, import React from react, this is the default export. If you use, * as React, it's not the same thing. That's bundling together all the named exports. Actually, it bundles in...Doesn't it bundle-in the default one, too? It might. I'm not sure.\n\nTaylor: [53:10] I can't help you with this one. [laughs]\n\nDave: [53:12] I haven't done much TypeScript with React, so I don't know.\n\nTaylor: [53:17] Any more questions about importing and/or exporting before we move on?\n\n[53:27] We've got about 10 minutes. I'm OK with going a bit over if you are, Dave, or whatever we're feeling like.\n\nDave: [53:36] Yeah, I'm good to go over a little bit.\n\nTaylor: [53:40] Can you export more than one function? That's a good question.\n\nDave: [53:43] That's a very good question. Let's go make another function. We can export another function called, say, Hi, just like Logout.Hi. You can export more than one named function, but you can only export default once.\n\nTaylor: [54:01] Now I'm picturing all default exports being called the default one, from now on.\n\nDave: [54:20] Import default function.\n\nTaylor: [54:24] There we go.\n\nDave: [54:26] They don't have to be functions too. [inaudible] . You can make these constant things. You can make them arrow functions. Actually, maybe you can export default const. It doesn't like that. I think you can export if you put this in a const. I think you can export this as the default. You just can't write it the way I did.\n\n[54:55] Anyway. Only one default export, and you can have multiple named exports. On the importing side, you can put multiple things inside the braces. You can pull in print name and say hi.\n\nTaylor: [55:06] Say hi.\n\nDave: [55:07] If you wanted the default too, that needs to go outside the braces. You can put that...Let me just call it def,. The default export needs to go first for whatever reason. You can't go the named ones, and then the default, if you want both. Whoops. Yeah, put that first.\n\nTaylor: [55:37] Now when we call say hi, it should just work?\n\nDave: [55:41] It should just work, and def. Yeah.\n\nTaylor: [55:49] A couple of questions came in at the same time about when you import only part of something, for example when we import the get from Lodash, how does that affect the size of our application?\n\nDave: [56:04] That depends on if you're a bundler, so if you're using Webpack or Rollup, or one of those parcel. If you're bundler does tree shaking, it can sometimes optimize to it knows you really want get from Lodash, so it just throws the rest of it away when it bundles up your app. If your bundler doesn't do tree shaking, then you probably don't get that. You're probably importing all of Lodash.\n\nTaylor: [56:35] I'm inclined to think that might be similar to the premature optimization thing we talked about earlier. Like when getting started with this stuff, I don't know that you have to worry about it yet. Maybe that's just me.\n\nDave: [56:51] I agree. I wouldn't really worry about it too much, bundle size and stuff. If it seems like it's getting too big, then yeah, we can do that stuff.\n\nTaylor: [57:03] Yeah. I'll just leave it with that, I guess. I think that that's it for importing and exporting. Let's see about doing some reducing perhaps.\n\nDave: [57:23] Reducing sounds fun. Let's look at some reduce examples. We could look at Babel too.\n\nTaylor: [57:30] Let's do that. I forgot that we had Babel on the docket.\n\nDave: [57:34] This one should be pretty quick, I think. I've got some code on the left here that uses some of the techniques we've seen. We've got importing, we've got plain functions, arrow functions, destructuring, some spread operators and template strings.\n\n[57:54] I'm just going to copy and paste this into a Babel REPL. We go to babeljs.io/repl. It might already have it in here because I've done this before. Let me just pull this over here. I'm just going to paste it in again.\n\n[58:13] At the Babel REPL, you can paste in your JavaScript code. It'll show you the compiled output on the right. We're getting this error about require. Ignore that for a second. You can see that some of the stuff translates one to one. The imports definitely don't. The imports turn into require.\n\n[58:35] The plain function looks like a plain function. That's great. The arrow looks like a plain function too. That's interesting. It's turning arrows into regular functions. Arrays are normal. Destructuring works, turns it into what you'd write normally. If you just wanted access the first items of nums and assign it a, it's doing that for you.\n\n[59:02] This is interesting. The spread operator actually works as is. This might depend on which version of Babel you're using or something. I think spread for objects came later than spread for arrays.\n\n[59:19] It handles strings is also interesting too. I don't know why it does it this way instead of just. Apparently, it's starting with an empty string, concatenating the first name to it, and its base, and then concatenating the last name.\n\nTaylor: [59:34] I wonder if that's technically faster than the plus sign way.\n\nDave: [59:38] It might be, but I'm also wondering why it doesn't just do...I guess I can't change that output. Why doesn't it just write it like all one thing? This is going to blow up. I think you can concat things like this. I wonder why it doesn't just chain them all together into one big concat call. I don't know. There's probably a reason. It's probably faster or something.\n\nTaylor: [60:04] I noticed that it's outputting var instead of let or const.\n\nDave: [60:09] Yeah, that's interesting. It has also got these bunch of functions that it has...It just has those in the bag, and where it needs one, it inserts this stuff so they can call stuff for how to require. You'll also see that it's using require instead of import, and we get require is not defined. I think require is defined by your bundler. Pretty sure Webpack or something will make require available.\n\nTaylor: [60:41] All I can think about when I see what Babel does for the output is just how much I appreciate not having to write all of that crazy object.define property, blah, blah, blah.\n\nDave: [60:55] Yeah, it's awesome.\n\nTaylor: [60:59] There's a lot of really smart people in this world, Dave.\n\nDave: [61:03] Yup, they write stuff like this. It's wonderful.\n\n[61:05] [laughter]\n\nDave: [61:10] It's also interesting how similar a lot of it looks and how readable some of it is. It also depends a lot on what you're doing in your code. If you started using this in your arrow functions, I bet these things will get a lot more complicated because it's pulling stuff apart, whatever.\n\nTaylor: [61:28] Yeah. There's a question about cross browser support for ES6.\n\nDave: [61:33] Yeah. The modern browsers support some dialect of ES6. There's a really good site called caniuse.com. You can look for like ES6 and figure out does my browser support generators. Mostly, sort of.\n\n[61:54] ES6 number, ES6 template literals, this is template strings. That's supported on a lot of them. Globally, 92 percent of browsers support template strings, that's pretty cool, ES6 classes. Anyway, so you can run through this and see which browsers support what.\n\n[62:16] This is really kind of why Babel exists. There's features that not every browser's going to support, or there are some that people want to use that aren't officially part of the standard yet.\n\n[62:28] ES6 was ES2015, and there's also been an ES2016, '17, '18, '19. Every year a couple more things get added, and so the browsers need to keep up. There's always new stuff in the pipeline that might not be available yet, and people want to use it anyway. Babel kind of smooths those edges and makes everything look like ES5.\n\nTaylor: [62:54] We are at time for the scheduled portion of our stuff. Do you want to do an example of reducer, too, maybe, Dave?\n\nDave: [63:07] Yeah, why don't we go through reduce.\n\nTaylor: [63:08] Just some bonus minutes, I guess.\n\nDave: [63:10] That was a popular one last time. I think I was looking at the recording from last time. It felt like that was a large chunk of that timeline was talking about reduce, because it's confusing. Let's go through a few examples of reduce.\n\nTaylor: [63:28] For everyone in the chat, if you want to stick around, if you have questions about reduce, now would be a great time to start typing, so we can try to help as many people as possible with this.\n\nDave: [63:38] Yeah, I can try to go through your specific example or whatever. Yeah, I think one of the hard things with reduce is because it's very generic. You can do kind of a lot of different things with it. Coming up with good examples is kind of tricky. If you have examples, put them in the chat, or specific questions.\n\n[64:06] Let me pull up, I'm going to go through a really simple example first, just to kind of like give you an idea of what it does. This is not very real world-y, but then we can talk about kind of more applicable examples.\n\n[64:22] Let's say you had an array. This is like your vegetable drawer and you've got some good vegetables and some bad stuff, you have rotten cilantro like I have in my fridge right now. If you wanted to turn this into just a list of all the good things, you could use filter, we'll talk about that in second, but let's use reduce for it.\n\n[64:46] I think reduce, honestly, I think the name is kind of scary, initially. We're going to call reduce on the array. I think of reduce as like, it boils the array down to some other thing. Can be anything, but reducing, boiling down, combining, like, all these words, that's pretty much what this is doing.\n\n[65:13] You give it a whole array and it gives you some new result that is a combination of the items in the array. That thing, it can be smaller, it can be larger, it can be not an array at all, it can be a number. You could count up the things, count up values inside the things, lots of different stuff.\n\n[65:32] It's basically the Swiss Army Knife array function. If you have an array and you want to turn it into something else, anything else, reduce is good for that. Let's say we've got this veggie drawer and we want to discard the bad ones and just be left with the good stuff.\n\n[65:52] Reduce, when you call it on an array it gives you some results. I'm going to put that in a variable called good stuff, and we'll log out good stuff. Right now, let me switch my little simple thing over to reduce. This is going to blow up because it's running over here. Reduce.\n\nTaylor: [66:16] I'm liking where this is going so far. I like this veggie drawer metaphor.\n\nDave: [66:21] [laughs] Cool. Undefined as not a function. Interesting. Reduce, you have to pass it a function. We're going to pass it an initial value. The first argument is our...We could call it a reducer because it's reducing things. We could call it like, find good stuff. Call it whatever we want.\n\nTaylor: [66:46] It's a function?\n\nDave: [66:48] This has to be a function. Then the second argument is...Remember, we're taking this array and we're turning it into something else. Let me resize this a bit. The initial value needs to be of the same form of whatever you want the result to be. In this case, we want to make a new array of good vegetables, so we're going to make our initial value an empty array.\n\n[67:17] We'll start with nothing and we can add stuff to it. If your result was going to be a number, maybe you want the initial value to be zero. If it was going to be an object with a bunch of stuff, you might want the initial value to be an object. It'll depend entirely on what you want to transform your array into. Since we're going from array to array, we'll start off with an array.\n\n[67:42] Now, we can write our reducer function. I'll call it, reducer. Maybe we can come up with a better name in a minute. I'll just write it as a regular function. It can be written as an arrow function or whatever you like to do. This reducer function is going to be given each item of the array in order, but before the item, it gets the current result.\n\n[68:12] You could call this the accumulator, you could call it the previous result. We'll call it good veggies. We're going to start off with the good veggies is empty, and we're going to look at each one in turn and be like, if this is good, put it in a bucket. If it's bad, we'll throw it away.\n\nTaylor: [68:39] Or just let it sit until...\n\n[68:40] [crosstalk]\n\nDave: [68:40] We'll just let it sit there. Yeah, it's more letting it sit there. The other thing about reduce is it doesn't change the original array. We're still going to be left with our veggie drawer full of good and bad stuff. We're just going to be given the list of good stuff. Then maybe we could go through manually and throw stuff in the bin or whatever.\n\n[69:03] Initially, the good veggies value is going to be our initial value. It's going to start off empty, and we could say, if the item...We can use contains -- strings have a contains function -- we could say contains bad, or if the item contains rotten, then that's not good. We might want to skip that one.\n\n[69:29] The way you can skip something, and be like, \"I don't want to do anything,\" you have to return something from your reducer every time. The way we can skip this one is to return our in-progress result.\n\n[69:44] If it was empty and we had whatever, doesn't really matter what it was, if the current thing is bad, we're going to ignore it and we'll return our good veggies unchanged. Otherwise, we can put this item on to our good veggies list.\n\n[70:06] The first time through this thing, we're going to return good veggies at the end, too. No matter what you do, you have to return something from the reducer. You don't want to write return with nothing. Don't do this. Don't forget to return.\n\nTaylor: [70:28] I'm picturing, if you don't return good veggies...Say you have a bucket with your good veggies in it. You go to the fridge and you open the door and you open the drawer, if you don't return anything, it's like leaving your bucket there and walking off.\n\nDave: [70:45] Yeah, your bucket will vanish. If you say return, this is the same thing as saying, return undefined. This reducer thing, it's like a feedback loop. Whatever you return becomes the next value for good veggies. It's the next accumulator.\n\n[71:03] You could think of it as a bucket or something. You're carrying it between each functionification. If you don't return anything, then the next call gets nothing. You have to return something. If you return undefined, you can do that, but it will probably break. You probably don't want that.\n\n[71:21] We're going to return our in-progress array here. I think that's it. The first time it calls this thing, it's going to pass in our initial value, because we gave it an initial value. That's going to be an empty array, we're building up from that.\n\n[71:39] It's going to get called with the first item in the array. It's going to get these three apples here. These apples are not bad or rotten, so it won't do that part. It'll push it onto our good veggies array, and then return that thing. The next time through, now good veggies has the apples in it. Good?\n\n[72:05] This next item is the bad tomatoes. This one, it is bad. Those contain the word bad. We're just going to ignore the tomatoes, and we're going to keep our bucket clean. We just return the array that has the apples in it. On either array, it will look at [inaudible] and either push it on or ignore it.\n\n[72:29] I will save and see if this works. Contains is not a function. That's cool. It includes...\n\nTaylor: [72:39] There we go.\n\nDave: [72:47] String includes. I always forget that one. [laughs] I think Ruby had contains or something.\n\nTaylor: [72:53] I think that's right. I think Ruby had a alias actually.\n\nDave: [72:56] Yeah. Ruby was awesome about that. it was so cool. It was like, you can't remember? All the words that [inaudible] they all do the same thing.\n\nTaylor: [73:05] Any questions so far about the process that we're doing? Not my best sentence ever, but I think y'all knew what I meant. [laughs]\n\nDave: [73:15] Is anyone super lost after this example? I can loop back and talk more about it, or move on to another one.\n\nTaylor: [73:26] What if we rewrote your good stuff on line 22? What if we rewrote it to have it as an inline function? The other way you would see reduce written.\n\nDave: [73:43] Usually, people will write the function inline and the initial value inline. I split it up this way so it's easier to look at. Normally, you're going to see people will just write a function inline here, and they'll write the initial value in here. Let me save this and maybe [inaudible] will...No, it didn't. It didn't do anything. [inaudible] .\n\n[74:11] This is the equivalent, but it's maybe a little bit harder to read. First argument is a function. Second argument is initial value. This can be written as an arrow function. You don't have to name it if you don't want to. You can say this thing takes good veggies and item. Here's your function body. It doesn't work the same way.\n\n[74:35] Now, Reduce is untestable. Yeah. You'd have to test the output instead of testing your reducer function.\n\nTaylor: [74:44] It's a good point. There's a question about how this is different than what you do with a for loop. I'm wondering what if we want to count the number of good vegetables without doing it, and then doing goodStuff.count, or length? Speaking of Ruby.\n\nDave: [75:14] GoodStuff.length. Done. Look at that. We get four.\n\n[75:19] [laughter]\n\nDave: [75:23] We're taking the same array and we're getting a different result from it. Now we're going to start off with our array of veggies. Our result is not going to be an array anymore, it's going to be a number. We'll start off with zero. Every time we see a good one, we can add one to it. If we see a bad one, we'll just leave it alone.\n\n[75:45] Let's rename this thing to goodVeggieCount. Instead of pushing stuff on it, we can just do ++. [inaudible] veggie count. Good stuff is a number, and we still get our four.\n\n[76:12] The question about the for loop though, you can do the same thing with a for loop. You can write a loop that iterates over the times in array and builds up an array. The nice advantage of this is that because it's this functional style, that's that thing about the expressions versus statements.\n\n[76:32] This whole thing is an expression. You can do it inline. You can chain it. If you had done your array of veggies, then you want to introduce something else to them, you could call .map on it because it's an array. Not now, because it's a number. You can change things like that. If you do pull out the functions into...\n\nTaylor: [76:58] Yeah. let's pull the function out again.\n\nDave: [77:00] your reusable things...Yeah, let's do this. We'll have our...I'm just going to call reducer again. If you have your function pulled out like this, you can reuse that reducer function in other places. Maybe the data changes from one file to another in your app or something, but your reducer works the same way and you can pull that out.\n\nTaylor: [77:38] Sorry. Our count of four is the number of times that we found good vegetables, but we have three apples, four good onions. How many total good vegetables?\n\nDave: [77:58] OK, sure.\n\nTaylor: [78:01] We don't really have to do it. If I wore glasses, I'd be like, \"Actually...\"\n\nDave: [78:06] It's actually not four. Before we do this, how many should we get? We should get three, seven...\n\nTaylor: [78:15] One fresh celery.\n\nDave: [78:18] Eight, nine, right?\n\nTaylor: [78:22] Yeah.\n\nDave: [78:22] Garlic is good. If the thing doesn't have a number in front of it, that's a one. If it does have a number in front of it, that's a...Whatever.\n\nTaylor: [78:36] A number. This might show reduce's power a bit more, since we're doing it all in one instead of a for loop being different.\n\nDave: [78:52] Yeah. You can make your reduce arbitrarily complex if want, do whatever you want inside this function, or you can split it out. If you have multiple things that you could think of as doing multiple passes. Maybe you want to first count up all the ones that are good, and then go through a second pass and actually add up the numbers, you could have those be separate functions.\n\n[79:17] Maybe one of them does your computation and one of them does the good/bad check, and you could chain them. You could chain reduce good/bad, and then call reduce again with count. Anyway, let's do our single one and then we could maybe split it up later for if we wanted.\n\n[79:36] If we pass ints, let's try this over here. If I pass ints 3 apples, I think it gives me 3, right?\n\nTaylor: [79:47] Yeah.\n\nDave: [79:48] If I pass ints apples, I get NEN. That's cool. If we have a number here, we'll just use the number. Pass int item, because it's always starting with a number. We're going to add, do this, do plus equals, and then we could use our [inaudible] operator.\n\n[80:12] If number is NEN -- this is a built-in function -- then we're going to add 1, because garlic is going to be NEN. [inaudible] is going to be NEN. I'm going to add one for those. Otherwise, we're going to add the number.\n\n[80:32] I think this should work, and we should end up with 9. Cool.\n\nTaylor: [80:40] Christine was asking about filter being a better choice.\n\nDave: [80:43] Yes.\n\nTaylor: [80:43] I think the way that we just changed it, you could use filter for number of times that I saw a good vegetable, which would be the 4 that we had. With using filter, you wouldn't be able to do this in one go.\n\nDave: [81:01] Yeah, right. Filter would have been a better choice for removing the bad things. We could write our filter good function. It's probably simpler, because it takes the item and it returns if the item is not bad, item doesn't whatever. The opposite of this.\n\nTaylor: [81:30] Yeah.\n\nDave: [81:30] Let's say if not bad and not rotten. That's the filter function. We could log out, say like veggieDrawer.filter with filter good. This works the same. Honestly, this is simpler. I felt like it was a good, nice overlapping example with reducers.\n\n[82:03] If you have an array and you want your result to be an array with fewer things in it, filter is pretty much always the right option for that. If you have an array and you want the result to be the same size, but you just change each item somehow, then map. For everything else, reduce.\n\nTaylor: [82:28] Maybe just for one last adjustment to this, coming from a suggestion in the chat and to piggyback off of what you just said, let's return an object from our reducer instead of a count. Because then we're turning an array...What you just said was array to array, use filter or map, something like that.\n\nDave: [82:54] Yeah.\n\nTaylor: [82:55] Array to object, use a reducer. Can we change this to show anything else?\n\nDave: [83:01] Do both things. We'll combine the two things we did. We'll count out the veggies and also return the actual items that you want to keep, because honestly, if you ran this function and I told you nine, you wouldn't really know what to throw out.\n\n[83:20] If our result is going to be an object, then our initial value needs to start off as an object. We'll start off with an empty object, maybe. Maybe we want something else. Let's say the object is going to have the...We'll have an array of veggies that we're going to keep, which is going to be like this result over here. We're also going to have a good veggie count.\n\n[83:47] Our array of veggies is going to be empty. There's nothing. Our count will of the veggies is going to be zero. This bit is count the good veggies. We've got to hack this up a bit now. If this thing is bad, we don't want to add it to our array, and we don't want to increment the count. We can still just keep returning the thing. Good veggie count is not a good name anymore though. Let's call this...\n\nTaylor: [84:23] Our good veggie bucket.\n\nDave: [84:25] We'll go with bucket. Bucket is nice. It's like a bucket.\n\nTaylor: [84:34] It's a smart bucket, because it knows how many things you have.\n\nDave: [84:36] [inaudible] little pockets in the bucket.\n\nTaylor: [84:38] Yeah, totally.\n\n[84:39] [laughter]\n\nDave: [84:39] Anyway, this is bad, we're just going to return the bucket as is. We will do this. Instead of bucket +=, we're going to do bucket.goodVeggieCount. We're going to add our either one or however many veggies there are. We're also going to push this good one onto our list of veggies. We'll push item.\n\nTaylor: [85:08] An item is the thing in the veggie drawer that we're looking at.\n\nDave: [85:13] Yeah. It's each array item. We could call this veggie. Yeah. Then we need to stop printing our filter thing. [laughs] Print out good stuff again. Good stuff should be our object with these two properties in it. Then we get that.\n\nTaylor: [85:44] We didn't kill the numbers out of them but...\n\nDave: [85:46] Yeah, we didn't kill the numbers. We could do that too. We could do veggie.replace starting with numbers.\n\nTaylor: [85:57] Oh, no. You can regex from scratch? That's awesome.\n\nDave: [86:02] Followed by optional space with nothing, maybe. Let's see if it worked. Yay.\n\nTaylor: [86:12] [claps] Fantastic. I would have been Googling for 20 minutes to do that one.\n\nDave: [86:18] I'll do my next course on regex.\n\nTaylor: [86:21] Right. Not only counted our good veggies, we made a separate list of them, and we did it all in one pass of our original array instead of filtering, and then counting, and then replacing, and then doing a new object.\n\nDave: [86:41] Yup. If you wanted to do this in a for loop, you certainly could. You could do this and put your variables up top. Again, this gives you more...You break it out into functions. You can reuse the functions. You can chain things, and it gives you expressions. I don't know.\n\nTaylor: [87:05] Claudio asks...\n\nDave: [87:06] Functional versus imperative.\n\nTaylor: [87:07] is a reducer like an expression and a for loop is like a statement?\n\nDave: [87:13] Yeah. For loop is a statement. You can log out. I can log this whole thing, because it returns a value, and I could log out. Let me scroll down a bit. I can log out this call to reduce, because it evaluates to a thing that's an expression. But I couldn't log out for let i=0whatever.\n\nTaylor: [87:38] That is such a good tie up to where we started this journey. We just went another 30 minutes over time. Hopefully, this was a good example of reduce. As Dave works on the course material, all of your feedback on this is super, super helpful. That's why we do the livestream is to make sure that our courses do what they should for learners to learn from.\n\n[88:16] You could always restructure the return. You could do that too. Destructruring the veggies array off of what gets returned from the reduce and stuff like that.\n\nDave: [88:25] Yup. You could pull out veggies and print veggie count. You can do lots of stuff. Like I was saying, we could do this in two passes. We could so a filter, and then a reduce. There's lots of ways to solve this problem. Pretty much any problem.\n\nTaylor: [88:45] We should probably wrap this up since we've gone 50 percent bonus content for everybody joining us. Dave, thanks so much. Tons of great info here. Thanks everybody for asking questions.\n\n[89:01] We'll be sending out an email to get some feedback. Dave will be recording some lessons on this material soon. Really looking forward to it. Pleasure as always. See you next time.\n\nDave: [89:17] It's been fun. Thanks everyone for coming.\n\nTaylor: [89:20] Cool. Have a good day everybody.\n\nDave: [89:23] Bye.\n\nTaylor: [89:23] Bye.",
        "casting_words_order": "zeLJ",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream",
        "path": "/lessons/react-pure-react-more-js-fundamentals-livestream?pl=pure-react-livestreams",
        "http_url": "http://app.egghead.af:5000/lessons/react-pure-react-more-js-fundamentals-livestream?pl=pure-react-livestreams",
        "http_short_url": "http://app.egghead.af:5000/s/3yhqf",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-more-js-fundamentals-livestream-Hk-afVvcS/scikit-learn-pure-react-more-js-fundamentals-livestream-Hk-afVvcS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
        "series_row_order": 1572857,
        "series": {
          "title": "Pure React Livestreams",
          "description": "Live stream events for the course modules.",
          "duration": 49263,
          "slug": "pure-react-livestreams",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-livestreams",
          "path": "/courses/pure-react-livestreams",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875170,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-js-fundamentals-livestream/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5402,
        "creator_id": 9671,
        "slug": "react-pure-react-intro-to-react-livestream",
        "title": "Pure React Intro to React Livestream",
        "state": "bundled",
        "summary": " Intro to React Livestream",
        "duration": 7199,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Taylor: [0:07] Hey, everybody. Could you all please let me know in the chat if you can hear me? I bet you can, but...you know.\n\n[0:26] Hey, Dave.\n\nDave Ceddia: [0:27] Hello. How's it going, Taylor?\n\nTaylor: [0:30] Oh, pretty good. Got people showing up. Hopefully, they can hear us.\n\nDave: [0:37] People filtering in?\n\nTaylor: [0:42] Yeah. How's your day, so far?\n\nDave: [0:45] It's pretty good. Pretty good. I've been getting ready for this livestream.\n\nTaylor: [0:50] Yeah, yeah.\n\nDave: [0:51] Pretty nice.\n\nTaylor: [0:52] Yeah, everybody's joining the link, as they should. Oh, all the way from Kenya. That's awesome.\n\nDave: [1:00] Kenya, wow. Where's everyone from?\n\nTaylor: [1:07] Florida.\n\nDave: [1:08] Florida.\n\nTaylor: [1:09] India. Nice. Hawaii.\n\nDave: [1:10] India, that's nice.\n\nTaylor: [1:12] Canada.\n\nDave: [1:13] Hey, Winfield. Not too far from me.\n\nTaylor: [1:19] Poland. Yeah. Let's see.\n\nDave: [1:25] Maybe try restarting your Zoom or something. Someone else said they could hear. Is the audio OK for anyone else or bad for anyone else?\n\nTaylor: [1:36] Romania, awesome.\n\nDave: [1:37] Wow.\n\nTaylor: [1:40] Peru. All right. Cool. We'll get started here in just a minute. Thanks everybody for letting us know where you're from too. It's always really cool to see this becomes a worldwide affair without leaving home.\n\n[2:01] What we're working on with Dave is Dave's putting together an introduction to React course that goes along with his book. What we're doing is we want to make sure that the content makes sense to people that we're teaching, and by we, I mean Dave. Dave's teaching the things that you all need to know.\n\n[2:23] What we'll be doing is as we go through examples, I'm going to drop a link in the chat every once in a while to get feedback. If anybody's nervous to ask questions publicly in the chat, then you can go ahead and ask us from this feedback link.\n\n[2:41] It's all good. We're all friends here. There are no stupid questions. Trust me, if there were, I would be asking them.\n\n[2:53] With that said, I'm going to turn it over to you, Dave. If you want to share your screen, we can go ahead and get started.\n\nDave: [2:58] I can do that. I'll move some zoom stuff out of the way here. Here, this one.\n\nTaylor: [3:11] Yeah, that's looking good here.\n\nDave: [3:12] You got it. Cool. See if I can get the zoom stuff out of the way on my other screen.\n\n[3:20] Welcome, everyone. We'll be talking about intro to React stuff, like React barebones basics. Just starting off with a blank React project, let me use npx, which comes with npm, to run create-react-app, and create a project called \"Hello World.\"\n\n[3:44] This will initialize a new project and install a bunch of stuff, like React, this ReactDOM thing. react-scripts is actually like the brains behind create-react-app. This will take forever.\n\n[4:00] Once that's done...\n\nTaylor: [4:01] It's not too bad. It could be slower.\n\nDave: [4:04] It could be worse. It is using Yarn, which is faster.\n\n[4:10] I'm using Yarn here. If you have npm, that works perfectly fine, too. They all have access to the same packages and everything. Let me move it over there.\n\n[4:18] We'll follow the directions here, and cd into Hello World. Look at what it's giving us. We've got a README with a new module directory package JSON.\n\n[4:28] Public and source are the interesting things. Inside public, we've got our index.html. We have one HTML file. We'll look at that in a bit.\n\n[4:38] We also have some stuff in source. This is like a template app that create-react-app gives you. We are going to delete everything under source and start fresh.\n\n[4:49] I'm going to use the touch command to create a couple of empty files. We'll have to look at index.js, using just index.js. Now I'm going to swipe over to the actual code and resize things a bit.\n\nTaylor: [5:08] Real fast, Dave, could you explain a quick version, or a quick explanation, of npm versus npx?\n\nDave: [5:15] Npm is the command you use to install packages. We could npm install whatever like Moment or React or Lodash or something like that.\n\n[5:31] Npx is a separate utility. It comes with npm, but what it does is there's a bunch of these create types scripts now. It's like create-react-app. There's create next app. There's a ton of these things.\n\n[5:45] It used to be you had to install these things separately. You would have to do npm install -g for global, create-react-app. This would put this on your system, and then you could run the create-react-app command directly. npx makes it a little bit easier because it saves you that step to install stuff.\n\n[6:09] You have access to all these things without having to install them.\n\nTaylor: [6:17] Cool.\n\nDave: [6:18] Let's swipe over to code and like those cooking shows, this thing is not actually the one I just created, but we can pretend. It's got an empty index js file, and actually the project it's pretty much the same thing.\n\n[6:32] I'm going to run yarn-start, and if you're using npm, this would be npm-start.\n\n[6:38] This will start off the create-react-app development server and open up the browser automatically for you.\n\n[6:48] What this server does is it will watch all the files inside your project, and anytime you change something, it's going to rebuild, and then your browser will refresh. You don't have to worry about ever hitting refresh. It will just do it for you.\n\n[7:03] I'm going to close this terminal thing to give us some more space, and we're going to start off with the import. We're going to import React from the React package. The React package is a thing that was installed by create-react-app npm. This is in our new modules, and then React is just what we're calling it locally.\n\n[7:28] That will give us a variable called React. We can also import ReactDOM from react-dom. The ReactDOM is going to let us actually render the app to the page. I'm not even going to make the component. We're just going to call ReactDOM.render. This is pretty much the only function you need to worry about right now.\n\n[7:53] Render takes the thing to render. We're just going to render string high and then where to render it into. This is actually an HTML element, like a DOM element. We can use document.querySelector to find the element with ID root. That should be inside div.\n\n[8:16] Try this out, and it should refresh. Here we have high.\n\n[8:22] Let's look at what it actually put in the page for us. We've got this div ID root with a high in it.\n\n[8:29] If I open up that public directory...Remember I mentioned index.html. This file, it's got some meta tag Boilerplate stuff. The interesting bit is this div here. This is, it's just an empty div, and this is where you React app goes.\n\n[8:48] Everything we render is going to be underneath here. Just so you know where that's coming from. Let's keep going with IDEs and this is VS Code. I'm going to refactor this until we have a React component. Let's change this string high into some JSX like a div it renders low. You can see that still works.\n\n[9:22] With that, we diverge from plain old JavaScript. This is now JSX inside our thing, and we'll see a little bit later how JSX works and what this is actually doing behind the scenes.\n\n[9:35] This is working right, so we can take this, and we can make a new...I will leave it there for a second.\n\n[9:40] We'll make a new function called Hello World, and I'm going to return that same thing. We could call this function I guess, and we'll get the same thing. Neat.\n\n[10:01] But because this function starts with a capital letter and because it returns JSX, we can write it like a tag.\n\n[10:08] We can turn this into \"Hello World,\" the component. Now we have an actual React component.\n\nTaylor: [10:20] Could you just rephrase what the ReactDOM.render call is doing? It looks like the first argument to ReactDOM.render is the thing you want to render, and the second argument is the where, right?\n\nDave: [10:38] Yeah. The first thing is...\n\nTaylor: [10:44] Sorry. When you look for the div with the ID of root, is it replacing all of the content or is it appending it?\n\nDave: [10:53] I think it's replacing. We can go find out. Here, let's try this. I'm going to put some stuff in here. Move this, maybe. Save that. I don't know if you could see that. Let me refresh again. You can see it's before React starts up, it says remove this maybe. Then React wipes it out. It replaces whatever is in that div. Cool. I'm going to put that back.\n\n[11:23] It's actually outside the scope of beginner stuff, but React just renders into a div. If you're using React within some other framework or within some other app, WordPress or some other HTML, something that generates HTML, if you can run JavaScript, you can render a React app somewhere in that page.\n\n[11:46] We've got the Hello World component. I named it with a capital letter because components have to start with a capital letter. If I start it with a lowercase later, it doesn't render anything. You can see in the output over here that we got \"helloworld\" as one long word.\n\n[12:08] If you start with a lowercase letter, React assumes that your thing is a standard HTML element like div or whatever. It'll try to render the element called \"helloworld,\" which is not a thing. Make sure to name your components with capital letters.\n\nTaylor: [12:27] Then fix it in your render call too.\n\nDave: [12:29] Yeah, then fix it in my render call because...Oh, that's interesting. It didn't break because it doesn't really reference anything else.\n\nTaylor: [12:42] For everybody in the chat, there's a little dropdown that lets you send to all panelists and attendees, and then your chats are public. Some of you are saying stuff that you want everybody to see, not just us.\n\nDave: [12:56] Yeah, make default to all panelists.\n\nTaylor: [12:58] You all are sharing some good stuff already.\n\nDave: [13:01] Actually, I'm going to change mine to all panelists and attendees too, because then it lets me respond to people.\n\nTaylor: [13:06] So we're not really having a chats with just me and Dave together.\n\nDave: [13:10] This JSX stuff, you can write basically regular HTML inside here. We can add some other HTML tag. Let's add one that's strong world. That will give you \"hello world,\" bolded world.\n\n[13:29] Let's see. We'll also put a header. Do an h1, say Hello, or whatever.\n\n[13:45] You can write regular HTML, pretty much. We'll talk about how it differs. The cool thing you can do with JSX that you can't do with HTML is you can insert actual JavaScript expressions inline.\n\n[14:01] If I wanted to say, \"Render out some math here or something,\" I don't know why I would try to do that, but say, \"I could add some numbers.\" If I use single braces, the stuff inside the single braces is going to get evaluated as real JavaScript and inserted into the page.\n\n[14:21] Unlike some other frameworks that have a template language where the stuff in the template language isn't quite JavaScript, maybe there is some edge cases that you can't do or whatever, React these expressions are like real JavaScript.\n\n[14:37] The React isn't running this for you. This is actually your browser is running this bit of code here.\n\n[14:45] We can also put any other expressions in here so we can make a name variable now and then render out the name. You can do this wherever you want.\n\nTaylor: [15:03] With the return statement that starts on line six, you just have the parenthesis around what we're running because it's multiple lines, right?\n\nDave: [15:12] Yep. If you do return without anything after it, you can see VS Code creates this out, so doing a new line after a return is like saying, \"return;\" which is the same thing as return undefined. That is going to break. We'll do that.\n\n[15:36] One way to fix that is to put the beginning of the JSX right after the return, but this looks all unbalanced and weird. It's easier to just write parenthesis around it and then you can tab it in and it looks like one HTML document.\n\n[15:54] Let's see. We've got this roller component so we can render React component within JSX too. If we had another component called...I don't know. Person. I do not feel very creative today, I guess. Here we have a span here that renders like tailor and we can render this person component in here.\n\n[16:28] Maybe we want to render \"hello person\" and all this is trailing space apparently. If you want trailing spaces, you've got to put them in braces as a JavaScript expression. It's a little weird.\n\n[16:49] I didn't explain this, but I've got a tool called Prettier running in the background every time I save the file which is why it jumps around.\n\n[17:00] Prettier, it will auto format things for you. It will simplify your codes. If I had written \"person out\" as like open tag close tag thing, Prettier will realize like, \"Hey, that's easy. I could just simplify that into one tag.\" It will do that for you.\n\n[17:23] Prettier is a really nice debugging tool actually because, if it doesn't format your code, you know that there's a syntax error somewhere you can go and fix it.\n\n[17:36] Prettier, I think it actually is a...I don't know if it's a VS Code plugin. I think it is.\n\nTaylor: [17:42] It's like its own standalone and then there's plugins that let it connect with the standalone thing. I think you can run Prettier from the command line and stuff.\n\nDave: [17:52] Right. I think that's...I want to touch on you. Oh, one other thing is that you have to return a single element from a React component. You can't do here's the span, and then here's a div. You can't return two things because that doesn't really make sense. You wouldn't write return 753 or something like that. This doesn't do anything.\n\n[18:23] Same rule applies here. You can't return more than one element. If you do, you'll get some sort of \"failed to compile\" error. The way around this, you can either wrap it in some other element, like a div. Watch here, Prettier is going to auto format it. Cool. This works fine.\n\n[18:47] This wrapping div is actually going to get added to the page here. If you don't want the wrapping div, you can use the fragment syntax, which looks like an empty tag. Maybe like you guessed, it renders nothing.\n\n[19:02] You'll end up with -- if I expand this you'll see -- span and div are next to each other. They're directly underneath this ID root div here. There's no wrapper anymore.\n\n[19:14] That can be really good if your styling for CSS selectors depend on the order of stuff, or if...We might see it later if we have time. There are certain elements that can't be nested inside of other ones, which is an HTML thing. You have to put table cells, td-s have to be inside tr-s and that kind of thing. Anyway, fragments [inaudible] .\n\nTaylor: [19:42] I'm pasting a link in the chat right now for feedback on this first section before we transfer on to the next section. I know there's been a lot of questions and we've tried to get to most of them. Please fill out the feedback form. We'll just keep moving along.\n\nDave: [20:01] Sounds good. One other question about JSX being string versus not string. Notice how it's not a string. If I wrap this in a string, then it literally returns span Taylor. This is not what you want. These things are not strings. React is not parsing this and turning it into a string.\n\n[20:23] Let's get into the next lesson. We're going to talk about how JSX works and how it's not really a string. I'm going to kill this. This thing will move over to lesson two.\n\n[20:49] Cool. Here's a whatever, similar example. When you write JSX, this runs through a few steps before it gets to the browser. That dev server thing is running a tool called webpack which bundles your app.\n\n[21:11] Webpack, before it bundles the app, it passes the JavaScript through a compiler called Babel. It will look through your code, and try to find like it's got a plugin for JSX, and it knows what to do with this.\n\n[21:24] What it actually does with this stuff is these JSX elements turn into calls to a function called React.createElement. We can try this. Let's just make like a div, or something more interesting. Maybe something that looks different than what's already there. H5.\n\n[21:49] You can see we have our empty H5 over here, and if we wanted to give it...Maybe we wanted to give it some content.\n\n[21:59] Create element takes a few different arguments. The first one is the element to create, and if it's a string, it's got to try to make standard HTML elements like div, span, and whatever.\n\n[22:11] You can also pass like an actual function like a component here. We'll see that later. We've got the element to create, and then any attributes you want to put on that thing, React calls those props.\n\n[22:24] Say we don't want to pass any of those. Then all the rest of the arguments are the children of this thing, so like the contents. If I have a string like some heading, say this, we get a very small heading. Let's make that bigger. Cool.\n\n[22:46] Yes. Let's try to recreate this as React.createElement calls. The first thing is div. It has no attributes, so nos is good there. Then for children, it's got the h1. It's got the word Hello space and then it has the strong tag. It says three children. We can pass three more arguments here.\n\n[23:08] First one, we need another React.createElement. It's going to be the h1, and same kind of format here. We got no props, and we're going to pass. This is a Hello. Has a string.\n\n[23:24] This is regular JavaScript. I can't just pass bare words here. They need to be in a string.\n\n[23:33] Then after the h1, we've got the string Hello. The space after it. Then we have another element. This one is a strong. No props. The content of this is actually just the variable name. That's what this evaluates to. Like the single braces joined into like, \"Hey, we're just going to put that value there.\"\n\n[23:59] If I save this now, we should get a...It's the same thing. That could come instead I can prove that I guess. This looks exactly the same as that. This is actually what React is...or what Babel is generating.\n\n[24:20] You save the file, the whole thing recompiles and reloads. It's turning this JSX into this. JSX is actually just a JavaScript expression. If you want to put it in a variable, pass it into a function, pass it as a prop, whatever you want to do. Anywhere you can use the JavaScript expression, you can write some JSX.\n\nTaylor: [24:43] Even though we're writing usually in React, we'll be using JSX. The file format that we have is .JS. What's the difference between index.js or index.jsx?\n\nDave: [24:56] It's really more of a personal preference if you want to name it .JSX. Some projects do. I think if it's more common to just have them called .JS, technically it's not JavaScript but I don't know. It's in a React's project so it's not super confusing.\n\n[25:19] I guess if you have an app that has multiple frameworks, then there's something then maybe JSX is a big good idea but like if you just have a React app on.\n\nTaylor: [25:30] One thing that I think we can all agree on is I would rather...Looking at line16, the JSX that we write being able to write something that looks like that versus all of the stuff that we had to write between lines 7 and 13.\n\nDave: [25:45] So much [inaudible] write this, isn't it?\n\nTaylor: [25:50] As far as for everyone asking about the recording, we actually are not going to be providing a recording of this in its raw form. Egghead members at some point will get a cleaned-up version of this recording, but for right now, it's we are doing it live. That's what we're doing.\n\n[26:17] Exactly, Carol.\n\nDave: [26:20] That's going on. I think I could move on from here. If anyone has any questions, we can move on to the next thing which is more JSX use stuff, but it's more how it differs from HTML. I move on to lesson three.\n\nTaylor: [26:41] Then once again, here is the feedback form for this section for any questions that you all didn't get in so far.\n\nDave: [26:51] Hey, so we are back to pretty much the same example again. This time I want to talk about the way that JSX is different from HTML because so far it looks pretty much the same except these expressions.\n\n[27:07] There's a couple different things. The first one that's probably likely to strip you up is class versus className. In regular HTML you write class dark. We don't actually have this class available. That's not the right button.\n\n[27:25] I'm going to add a dark class in the CSS file that sets the background to some dark color, and the foreground can be white. Just saving that CSS file doesn't do anything at all. This is not part of the page yet. This is a webpack thing. To get that CSS on the page, you've got to import it in one of your JXS JavaScript files.\n\n[27:59] We can import in JXS CSS. This looks a little weird, but it's not actually plopping the text here or anything like that. This is basically telling webpack this JavaScript file depends on this CSS file. When you build the page, make sure to go load this and put it on the page somewhere. You can see it's working.\n\n[28:23] I think it actually puts it in head as a style tag. Yeah. Here's that CSS. Webpack is taking it and putting it in the right place.\n\n[28:33] You can see this worked, but we've got this little arrow over here. We open up the actual console. We get this error about invalid DOM property class. Did you mean className? Yes, I did, React.\n\n[28:49] If you use className, className is good. Class, not so good. Keep an eye on the console pretty much. I don't know what happens if you build and deploy an app with class. It might not warn, it might just break. I'm not sure.\n\nTaylor: [29:08] What about if we had a second CSS file? Is it whatever name that it reads last is the one that it uses?\n\nDave: [29:18] We can try it. Import like 2.CCS. Then before I save that, I'm going to go make a 2.CSS so it doesn't blow up. Let's say this one has dark background, red. I think it will apply to both, but it will probably put them in order. Then CSS rules take over. Yeah, so we have both, but the second one wins, class CSS.\n\nTaylor: [29:51] Class CSS?\n\nDave: [29:53] Yep. I think one of the confusing things about learning React is you have to remember which parts are React, which parts are CSS, which parts are JavaScript, webpack, whatever. This import thing is webpack. It's not React. Most of this stuff is regular JavaScript code. We've got JSX here. I don't know.\n\n[30:18] I'll try to point out things that look like they might be React but are actually JavaScript as we move around. We've got className. What else? What about handlers?\n\nTaylor: [30:33] The reason with class is, I think Allen pointed it out, that class is a reserved JavaScript word, which is why we have to use className.\n\nDave: [30:42] Yes. I don't know. There's lots of debate about that. I think I saw that there was an issue where they may have agreed to change it to class, but we'll see what happens with that. There are some pros and cons with that.\n\n[31:06] Event handlers. Let's try to put an onClick handler on the h1, and we can give it a function.\n\n[31:15] It's like an error function that logs out with h1. This one we get this error or warning because it's capitalized wrong, which is what I wanted to show you, but it also doesn't work. Unlike the CSS where if you get it wrong it still works, but handlers not so much. Make sure you camelCase them.\n\n[31:40] For the most part, they're all on key press becomes on capital key press. Most of them are just the same name but camelCased. I think onDoubleClick is the only one I know that is different. onDoubleClick in HTML looks like that, but in React, they spell it out so it's on-double-click.\n\nTaylor: [32:05] I don't think I've ever used onDoubleClick now that you've mentioned that.\n\nDave: [32:09] I think I used it twice or something, but I remember when I used it, I was like, \"Oh, why doesn't it work?\" That works.\n\n[32:20] What else is different?\n\nTaylor: [32:26] The arrow function is from ES6, correct?\n\nDave: [32:29] Yeah, this is an ES6 thing, and remember the braces means I'm starting JavaScript now. Everything inside the braces is going to be JavaScript, and I can move this out if you want. Make it easier to read maybe. You can pull functions out and just pass the function in like that. It makes it prettier.\n\n[32:59] What else?\n\n[33:00] Inputs, if you write an input and give it an ID of [inaudible] or something, let's do email, and then you want to make a label for that input. For this email you would do 4 equals email. Then we can give it some text or whatever. React uses a different thing. It uses HTML4 instead of 4.\n\n[33:27] Another reserved word thing so HTML4 instead of 4, and then that's happy. I didn't put any time into the styling of this example as you can see.\n\n[33:44] What else is different?\n\n[33:46] Self-closing tags. You have to close ever tag in JSX. Inputs, traditionally you could leave them like this. You can see this is going to fail because of the squigglies.\n\n[33:57] Make sure to close your tags. The other cool thing is every tag can be self-closing. In HTML, if you were to div, you'd have to write it like this. I don't think you could determine it like that but React will let you do that. That works great. Same for component and tags.\n\n[34:18] You can write them this way, or you can write them as a pair, open close.\n\n[34:24] One other thing might be comments. There's no JSX specific comment syntax. Basically it's JavaScript again, so open some braces and use the bounded comments, C style, whatever you call these things.\n\nTaylor: [34:44] I like slash star is what I always call them.\n\nDave: [34:46] Slash star comments.\n\nTaylor: [34:47] I'm not sure that's the official name.\n\nDave: [34:49] If you have multiple lines, you can use the slash ones. If you have a single line, you can't use the slash ones because the comments have to close. That's a thing.\n\n[35:05] What else? Passing stuff to props. Pretty much strings, you can pass as strings with the quotes. Everything else, you've got to pass inside braces.\n\n[35:17] If you want to pass the number for some reason, max or something, don't pass 42 rows of sting because it's a number. Pass it as a number, and then now it's JavaScript again. This is an expression that valuates to 42.\n\n[35:40] You also can pass Booleans that way. You can pass template strings that way. Basically, actual strings are the only reason you should use quotes.\n\nTaylor: [35:53] Sorry, go ahead.\n\nDave: [35:55] I was going to say this is a big departure from...A lot of other frameworks are very loose about it. They'll let you...Angular is this way maybe spelt too. You can wrap stuff in strings, and it will figure it out. React will not. It'll be like, \"Why is this a string? This is not what I wanted.\"\n\nTaylor: [36:16] With your comments, experiments, could you try a regular HTML comment?\n\nDave: [36:22] Yeah, good question. HTML comment. Here, I think it's not going to work. Just get a feeling. Yeah, doesn't like that. I'm not sure why they didn't support those. This is a weird syntax anyway, but I don't know why they didn't support those because it is an HTML thing.\n\nTaylor: [36:45] Roberto asks, he noticed that className and HTML4 are DOM properties.\n\nDave: [36:51] I think that's the other justification for why they're that instead of class and 4. Yeah. If you think about it, this is a complier. This is not actually executing this JavaScripts directly. It's interpreting it and doing stuff with the className and the HTML4. They certainly could have supported class and 4.\n\n[37:18] The only downside with that is once it turns into an object...Which actually I guess I didn't show that...If we put JSX in an object, class equals whatever, we can return that. Wait. It's expression. We put it in the variable. I'm going to log out stuff.\n\nTaylor: [37:43] Yeah, I logout a lot of stuff and return stuff when I write code a lot.\n\nDave: [37:47] Yeah, it's pretty good. All-purpose variable. It's a complicated object, but it's an object what this evaluates to. There's actually a prop called children which gets the children. You can see we've got one, two, three, four, five, six. I think the comments are ignored.\n\n[38:14] Each of the children, we got the h1, label input, whatever. I could see where there would be a problem where if the prop name is class, maybe you can't do that. You probably can't. I think we can make an object that's class and 4. I don't think this works.\n\nTaylor: [38:38] You're only going to logging an object now.\n\nDave: [38:41] Yeah, it's true. Maybe it's fine. I think it's fine. I don't know. I don't know what the reasoning is. I don't know anything anymore.\n\nTaylor: [38:54] That's the kind of thing they would ask you in a job interview even though you would never, ever need to know it.\n\nDave: [38:58] Yeah. It's like I don't know. You can wrap property names in quotes, and then it's fine.\n\nTaylor: [39:04] I'm going to paste the handy feedback form link into the chat for any questions that we didn't get to for this section.\n\nDave: [39:16] Cool.\n\nTaylor: [39:18] Keep the feedback coming everybody. It's been really helpful. It's pretty fun too. I hope you all are having fun.\n\nDave: [39:25] Yeah, it's good. I like having questions, so keep your questions coming. Taylor will watch the chat so I can write the code.\n\nTaylor: [39:32] Yeah. Dave writes the code. I read the chat.\n\nDave: [39:38] We've got less than four, which is going to be actual component. Right. It's nothing right now. Let's look at what this thing is going to be first. I have this little sketch over here. You all see this OK still?\n\nTaylor: [39:59] Yep.\n\nDave: [39:59] We're going to build a Tweet component, and this is just a rough sketch of what the thing will look like. It's helpful to think about what your components are going to be called before you dive into creating them. Let's give these things some names. Did I lose my mouse here?\n\nTaylor: [40:25] No, I can see it.\n\nDave: [40:27] Sweet. Cool. Let's say this thing is, we'll call this avatar.\n\nTaylor: [40:36] That's pretty good handwriting for a mouse.\n\nDave: [40:38] I have a pen.\n\nTaylor: [40:40] All right.\n\nDave: [40:45] This thing can be, we'll call this author. We've got the time the tweet was sent, or time since. I'll just call it time. Time is easy. Then we've got the text of the tweet. We can call this thing message.\n\nTaylor: [41:08] Which app are you drawing with, by the way?\n\nDave: [41:11] This is called Sketches Pro. Can you see the header bar? Tayasui Sketches Pro.\n\nTaylor: [41:19] Tayasui Sketches Pro.\n\nDave: [41:21] It's a Mac thing. I think it's on iPad too. There's an iOS app. You can use an apple pencil, and it'll probably be better than the one that I'm using, but virtual app.\n\n[41:37] We've also got some buttons. This thing down here. Call them button. We'll just make one component per button. We'll have reply button, retweet button, whatever.\n\n[41:57] The last thing is we'll have a component for the tweet itself. That's the whole wrapper thing, the whole component that contains all the rest of the components.\n\n[42:17] Good enough. We got some names. This should contain...Let's just go build up with some static data. I want my mouse back though. Real mouse.\n\n[42:34] We'll start with the top level stuff. We got import React. We need import ReactDOM. We can do our ReactDOM.render again. We're going to render a component called tweet. That doesn't exist yet. We'll make that in a second. Then we'll put that in the root element.\n\n[42:56] Let's make our tweet function. In the spirit of getting something on the screen as fast as possible. I'm just going to say tweet and see if it works. I like the idea of...I don't know. I just try to save as often as possible and see it work.\n\n[43:17] Make small changes, make sure they work. Don't spend 20 minutes coding, and then hit save and be like, \"Ugh, syntax errors.\" It's so much more satisfying when you can just have it show up.\n\nTaylor: [43:29] One thing I'm noticing with your little drawing that you did when you were highlighting the things, this process of thinking in React, do you always start from the outside in? Do you always start with the big thing, and then work your way smaller or do you...?\n\nDave: [43:47] You can go your way. It depends. You could either start by writing the tweet component first, and then building all these little ones. That's what we'll do. Or you can build the small ones first, and then put them into place.\n\n[44:02] It can work either way. It depends on what you're building. Whatever makes more sense to you. There's no right way.\n\n[44:13] The tweet thing is going to return some stuff. Let's make a div. Div with className tweet. I'm using Emmet here. I think it's built in the VS Code. It understands JSX enough to use className, which is awesome.\n\n[44:36] In here, we've got that avatar component. I'm just going to keep flipping back and forth, if it's helpful. I don't know if it's helpful.\n\n[44:46] Before I go and actually write the components out, I think it's also useful to think of this in terms of how am I going to style this thing because you're going to need to add some CSS at some point.\n\n[45:08] CSS lays stuff out left to right and top to bottom. This thing is very sideways. It's more left to right than it is top to bottom. If you just plop all of these things in a page, they're going to not look right.\n\n[45:22] We're going to have some wrapper elements for things. We're going to use flexbox. We're going to divide into the left side. This would be a div over here. The right side will have the rest of this stuff. The buttons, because we want them to go sideways, we'll probably put those in their own little div. I think this stuff will take care of itself.\n\n[45:50] We'll have a few wrapper divs in this stuff. We probably won't just drop them all down. I haven't really done a whole lot with CSS Grid yet. Sorry, if you wanted to see CSS Grid. By putting that avatar component, and that doesn't exist yet. I'm going to make a function called avatar, and I'm just going to do everything with static data basically.\n\n[46:19] No, no. I think it's nice to get something on the screen with stuff that you hard code and then you can come back later and make it all dynamic. Definitely helpful for learning, I think.\n\n[46:35] We're going to make an image tag here. We'll give it some alt text of avatar, className of avatar.\n\nTaylor: [46:48] Solid choice.\n\nDave: [46:50] Thank you. Source tag of attribute or property. We are going to point to gravatar url, which is going to be the default one is calling it nothing. Yeah. Save that. See how it looks terrible.\n\nTaylor: [47:13] At least it shows up.\n\nDave: [47:14] It does show up. It should also have a little bit of style because the CSS is already there. Just need to import it. Try that and look at that.\n\nTaylor: [47:28] Yeah. Just like a cooking show.\n\nDave: [47:31] There's a bunch of stuff in here.\n\n[47:39] We've got the avatar now. Then what do we want to put next? We've got a div around the rest of this stuff, so this is its own thing. Then we could render maybe a div around all that. Let's see that. Div. We give it a class of content. Contents look good.\n\nTaylor: [48:04] Yeah.\n\nDave: [48:05] Then we've got the author which is going to be name plus handle. We'll render out that and create the author component, and that is going to return some stuff. Got span. I think we've got the className and author on that, and then we've got the name, Taylor. Span for the handle.\n\nTaylor: [48:40] As far as sharing the code, we'll figure out something for everybody who's here. We'll put something together for you at some point, promise.\n\nDave: [48:55] Avatar author. Moving on. We've got avatar author time. We do time and then message. Declaration order really doesn't matter because they are functions and they're wasted. Whatever you want to do.\n\n[49:18] Time, return that another span class time. We'll be like three hours ago. Cool with that here. Nice. Coming along.\n\nTaylor: [49:42] Yeah.\n\nDave: [49:43] Through our message. I am writing stuff as functions. You can also write them as cons, like arrows. It works exactly the same because they're function components, they don't even use this, so there is really no difference at all.\n\n[50:05] You can make these a little bit shorter because they don't need a return. Let's do this one as an example. We'll have a div. Last name message.\n\n[50:18] See. I'm going to put that up here. Cool. Working. Because this is a div, I don't think there is any special CSS in this. Because it's a div, it's on a new line now. Then we've got those buttons which are in another div. I'll get the buttons. We'll go with that.\n\n[50:51] Yeah, honestly, I think the reason I'm [inaudible] writing functions is because I have the keyboard snippet that's like I type F and it gives me a function.\n\nTaylor: [51:01] When I type F, it usually doesn't give me a function. I should probably...\n\nDave: [51:10] Different problem.\n\nTaylor: [51:11] Yeah, different problem.\n\nDave: [51:15] My button. Let's see. These buttons are...Actually I might just [inaudible] a base of these because it's not super exciting after the first one.\n\n[51:26] I'm using Font Awesome for the icons. I think I already have it index.html.\n\nTaylor: [51:34] Can you use the arrow function or the arrow notation with the function key word?\n\nDave: [51:41] Can you use the arrow...yeah, you can do that. You can write...hey, what if didn't work.\n\nTaylor: [51:50] What if?\n\nDave: [51:51] Yeah, you can make it an anonymous function and then store it in your variable like this. This works fine, too. That's the same thing as this, basically, the function. Yeah, you can do that.\n\n[52:13] Right, so I'll give it the same className of cfa for Font Awesome, fa reply. I think we'll need reply -button for dialing within this app. Doesn't appear because I didn't put it in the div. Never help a lot. Here we go. Not like that.\n\nTaylor: [52:39] Not quite like that.\n\nDave: [52:41] Here we go.\n\nTaylor: [52:43] That looks better.\n\nDave: [52:43] Play button, nice. I'm going to copy the rest of them because I'm lazy, and I think you don't want to watch me type three more buttons out. Let's just duplicate this a couple of times.\n\n[53:04] We got retweet button, like button, and more options button. Not sure if all these buttons are actually real buttons in Twitter, but it's good for the example. We got four buttons.\n\n[53:24] This is pretty much it. How are we doing? Look over here. We reverse the name of the order here. That's, whatever. This is correct.\n\nTaylor: [53:42] I've pasted the handy feedback link for everybody.\n\nDave: [53:50] Thanks, Nicholina. It helps a lot if you have premade CSS.\n\nTaylor: [53:57] The premade CSS helps a lot. I also think that having the napkin sketch, or the Sketch Pro something, something. Whatever that was called.\n\nDave: [54:11] Having any markup or drawing, whatever, helps a lot. It just feels like you know what to do next. You don't have to be figuring it out as you're making the components.\n\nTaylor: [54:23] Breaking it up into smaller pieces.\n\nDave: [54:29] How do you make responsive CSS?\n\nTaylor: [54:33] One-word answer is CSS.\n\nDave: [54:35] This one actually I think it has a fixed width. In this particular example, you could set a maxWidth of this.\n\n[54:50] Do I need to set a width? I think I need to give it width of 100 percent. It'll be as big as it can be up to up to a max of 564. Then it might resize, or maybe not. I shouldn't resize. No. I don't know.\n\nTaylor: [55:13] Luckily, React will work with whatever CSS you give it.\n\nDave: [55:15] Yeah, it doesn't matter. There are so many CSS options too. You can do the whole CSS JS thing, you can write regular CSS, you can use Sass. Create-react-apps with Sass now, SCSS, whatever.\n\nTaylor: [55:33] You could use Bootstrap if you want to.\n\nDave: [55:35] Yeah, Bootstrap's fine. There are React components for Bootstrap. It's a React Bootstrap. There's also React components for Font Awesome. I didn't feel like installing them. Reactstrap, I think that's it.\n\nTaylor: [55:56] Whatever you want to do.\n\nDave: [55:57] Moving on. Save that. Move on to props tweet. We've got this boring static app. It's all hard coded. It would be cool if these components were reusable. If you could give them dynamic data, and they would display what you told them to. Let's do that.\n\n[56:26] React has a thing called props. We're using className all over the place. This is a prop. Prop is just a thing that you pass into a component as HTML would call them attributes. Anything within tag. You can pass as many of these things as you want.\n\n[56:46] Within a component, you can receive those props and then do stuff. I'm going to paste in a just an object which describes a tweet.\n\n[56:58] I'm going to put it up here so we can keep it relevant. I'm going to call it test tweet. What else? We need to pass this into the tweet component. Make that constant.\n\n[57:14] Since it's in scope, you could just use test tweet inside this component. That would work fine, but that's...In the spirit of using props, we're going to pass it in.\n\n[57:28] When we render the component down here, we can pass in a prop. I'm going to call the prop tweet and passing the test tweet object as a value for this. The tweet is now going to get a tweet prop. These are like function arguments. You can think of them as named function arguments.\n\n[57:50] The tweet component, every component is going to get this prop's argument. It's the first argument. We could take that thing and pass stuff along.\n\n[58:04] Let's do message since it's here. Let's say message also takes props, and instead of displaying this next stream here we'll do props.message.\n\n[58:17] Props, it's an object. It's like all the things you pass to a component get bundled into the object, and you get that object. It's pass the message prop.\n\n[58:30] Actually let's call it text. Text is nice, a little less redundant. The text is going to be props.tweet because we got a prop called tweet, and inside that is a message passing to text here.\n\n[58:56] Now, we get this message, something about cats that came from here, but this is a pain to type, you guys typing props.whatever. It's more common to destructure this object into the props, so let's do it in the message one because it's only got this one prop here.\n\n[59:18] This is like ES6 destructuring to destructure the text property out of this object. This is saying take this object, there's a property called text in it, and I want it as a variable. This will give you a variable called text that you can use directly. That still works.\n\n[59:42] A more common way to write React components is to do this destructuring right in line here.\n\n[59:51] You can literally cut and paste this here, and now it's saying I expect the first argument's going to be an object. Please destructure it. Give me a text variable. That's what this syntax means. This is not a React thing. It's just ES6. This one gets one called tweet and do that.\n\nTaylor: [1:00:16] If anybody in the chat needs more explanation or anything, please let us know.\n\n[1:00:22] There's a question. What if there's another argument with text in the message?\n\nDave: [1:00:32] Yes. I'm thinking if there's another, yeah, it will come up. Yeah, if you've got multiple arguments like text and or name or whatever stuff...This destructuring syntax works on multiple keys so you can destructure multiple things at a time. Just use them all here.\n\n[1:00:59] If you forget to pass one in, it will just be undefined in the component same as if you forgot to pass an argument to a function.\n\n[1:01:12] Let's run through a couple more of these. We've got author. We passed the author. Pass tweet to author. Time gets maybe sense. Sense is nice.\n\n[1:01:29] Tweet.timestamp. I'm passing in the individual properties of these things instead of passing just the whole tweet which you can do it whatever you want.\n\n[1:01:43] The advantage to doing it this way is that this tweet component, it knows what the shape of this object is and so, if this object would have changed, you'd only have to change it here. If you were to pass the tweet object all over your system, all throughout the components, then and then you reorganize this thing somehow.\n\n[1:02:05] Maybe you -- I don't know -- move all this stuff underneath the author or something. Like now, all your codes are going to break and you have to go to a bunch of components to figure it out. The benefit of doing it this way is that you minimize how many components know about the shape of this data.\n\n[1:02:25] Also, you makes them more reusable. Let's see. Buttons, most of this. Let's see. Retweets and likes, so we have counts. We can pass the counts both. Tweet.retweets and the count for likes.\n\n[1:02:53] It's not that this is showing up yet because the components don't accept the props. Let's space this so we can take the author.\n\n[1:03:02] Question?\n\nTaylor: [1:03:07] No.\n\nDave: [1:03:09] I'll put the author.name here.\n\nTaylor: [1:03:12] Can you explain where the term \"shape,\" where that comes from? Just for the shape of the object, I think.\n\nDave: [1:03:21] The shape of the objects? Good question. I don't know. It's not like a React term or anything. I just mean that this object has a thing called message.\n\n[1:03:38] Imagine you had -- I don't know -- a stream of tweets, you had an array of 50 tweets or something, they are all going to have the same object shape. They would all have a message, they would all have an author, those authors would have a handle and a name, so that what I mean by shape.\n\nTaylor: [1:03:54] It's like a one-word term for it has all of these properties and all of these keys and all of these values. Kind of like a skip in away.\n\nDave: [1:04:04] Or like a typescript we call it a type. You can define those things to me like, \"It must have these specific properties.\"\n\nTaylor: [1:04:12] Nicholina asks if we can clarify why we are using tweet.everything instead of testtweet? I think that is down where we're using the tweet where we're passing the prop in.\n\nDave: [1:04:26] We are passing the prop in down here and it's coming in as the tweet prop here. We have this available. It's like the most local thing to use. I think of it, this is like a global variable. Maybe, you don't want to really depend on that.\n\n[1:04:44] As an example, I think it's simple to just have this here but, in real life, you would have this would be in a file somewhere else or probably fetched from a server or something. You probably wouldn't have a thing in scope that just has your data for you. You want to accept it as a prop or argument order.\n\nTaylor: [1:05:09] Could you try renaming test tweet? Just name it something else. Now, at the bottom, when we are doing this, it still is taking the tweet component as a tweet prop that it's getting its data from our new thing called whatever.\n\nDave: [1:05:35] Yeah. It's still coming in. Makes sense.\n\nTaylor: [1:05:46] Cool.\n\nDave: [1:05:47] Just call it data, because I like to call it data. Data is pretty generic.\n\nTaylor: [1:05:51] We like to use stuff, whatever, data. We're professional.\n\nDave: [1:05:57] What else are we doing? We can go through here and fill these out. We got the author name. We got the handle. You could also destructure this one level further if you wanted to pull out name and handle directly, but I think it starts getting ugly.\n\nTaylor: [1:06:23] [inaudible] .\n\nDave: [1:06:25] Author has an object which has name and the handle. Now you'll have name and handle, but you won't have an author variable anymore. It should act like change these. It works great. I think it looks confusing. A lot of braces. It quickly gets out of hand. Maybe this isn't too bad, but if you have lots of stuff, I wouldn't do this. [inaudible] .\n\nTaylor: [1:06:54] Up a little bit in the tweet component. When we have all of the tweet.author, tweet.timestamp, tweet.message, that's an example of why you wouldn't want to do what you just did, the extra layer of destructuring?\n\nDave: [1:07:12] Yeah. You could do that in the arguments here. Then pull apart author, timestamp, whatever here. I think that would look really confusing.\n\n[1:07:23] You could do it separately. You could say now I have this object called tweet. I'm going to pull out author, timestamp. This is actually OK. It looks fine. That's the one...\n\nTaylor: [1:07:37] I tend to go for it.\n\nDave: [1:07:38] I think this is nice, and save you some typing. It's sort of like hooks. It's destructuring.\n\nTaylor: [1:07:56] The order with keys in an object doesn't matter. Objects are unordered.\n\nDave: [1:08:02] Objects are not ordered. Let's see. We get this hash thing. We have this Gravatar X Y Z thingy. I'm going to pull up a real one. If you need to know what your Gravatar hash is, you can go to daveceddia.com/gravatar and type in your email, and it will give you the hash. You can place it over here without the new line.\n\nTaylor: [1:08:35] You didn't have that memorized?\n\nDave: [1:08:43] Change a couple of things here. I don't know. Whatever. I'm going to pass the hash down to here. Actually, are we passing anything? Not yet. Hash is tweet.hash or tweet.gravatar.\n\n[1:09:10] I just realized everything is named distinct names. I'm calling this hash and this one gravatar and stuff. I don't really know why I did it that way. Maybe just because it seems like it would be easier to follow that way or something.\n\n[1:09:27] There's no name conflict. You can see this is a prop called author, and a variable called author going into it. You're not going to run into any name conflicts or anything like that. That's a common misconception.\n\n[1:09:44] You get this hash here. We can put it into the URL here. We've already mentioned earlier how if we want to pass template string, we've got to wrap it in braces. Then we can do template string.\n\n[1:09:57] That gives us the ability to do JavaScript expressions inside those strings. Then it'll insert the hash like that. Then it should work. We get time since.\n\n[1:10:15] I don't want to do this math myself. We have libraries for this. There's a thing called Moment. You can go on and add moment, or npm install moment.\n\nTaylor: [1:10:29] What's Moment do?\n\nDave: [1:10:31] Moment is a library for dealing with dates and times. Adding to times, and subtracting, and diffing times, dealing with time zones, all the tricky math. Once it's installed, you can import moment from \"moment.\" Then in our time component, we want this relative time and we're given a timestamp. I'm going to use Moment to turn it into something that looks nice.\n\n[1:11:14] It's a JavaScript expression. We can do a function call here. We can say moment, pass in our since time, and call from now. This is a Moment function that does exactly what we want it do, hopefully, if we got it right. [inaudible] . Yeah, maybe.\n\nTaylor: [1:11:39] Several days.\n\nDave: [1:11:40] Several days. Timestamp.\n\nTaylor: [1:11:45] Kyle, exactly right. Date math is really hard. Other people have worked on solving it.\n\nDave: [1:11:53] Date math is no good, so use someone else's thing. Moment is a large library. If you really need to keep your bundle size down, there are alternatives that are smaller.\n\n[1:12:04] This is not refreshing because I killed the div server. Let me start that back up. Then it should be like days, and days ago. Good. There we go. Nine days ago. Nice.\n\nTaylor: [1:12:21] Yeah. That sounds right. That math I can do.\n\nDave: [1:12:26] 10 and 08 or something here. You can get six hours ago. It's not exactly the same format, but it's close enough. What else? We got like button. Doesn't need anything. Retweet and likes should have counts next to them. Let's do the like button first.\n\n[1:12:48] I'm going to wrap the thing because it's going to have two elements. I'm going to wrap it in a span, and give that a class of like button. I already have this thing with like buttons. I'm going to take that off.\n\n[1:13:07] We've got our [inaudible] . Then we just want to put the count after it. We can do conditional logic with this. We're receiving the count as a prop, and inside an expression, we can say if count is greater than zero, then...\n\n[1:13:24] The double eight percent is like if this expression is true, it's going to evaluate to the thing on the right. I'm going to make a span with last name like count, and we're going to print out the count right here. [inaudible] puts an underline for us.\n\n[1:13:46] If it's greater than zero, it will render the span. If it's less than zero, it will be undefined or null or something. It just won't show up at all. Let's see what it does over here. Grow past [inaudible] CSS.\n\nTaylor: [1:14:02] Like they just change it in the object in our whatever variable.\n\nDave: [1:14:08] Yeah. I'm going to change over here. I'm curious whether it actually renders out an element or nothing. If we say zero, what do we get? Oh, awesome. Back down we go is interactive tools [inaudible] .\n\n[1:14:35] Buttons. Like button. Heart. OK. Yes. All we have is we have the heart, and we don't have anything after it. It's not like it rendered an empty div or whatever. It just didn't render anything.\n\n[1:14:49] We can do the same thing with retweet button except we can do it a slightly different way. Let's make a span retweet button.\n\n[1:15:03] Instead of doing the kind of expression in line right here, let's make a function, and we'll call it \"get retweet count.\" They can pass in the count which is a prop that we should be accepting here.\n\n[1:15:22] We got the count prop, pass it onto this function, and this function doesn't exist yet. Let's write that.\n\n[1:15:30] We can write get retweet count. It says the count. Now, we're inside. We're not restricted by like it has to be an expression that evaluates two things. We're inside a function. We can write like if count is greater than zero.\n\n[1:15:53] Then we're going to return...Well, we can return that spin like this one. [inaudible] retweet count. It's a regular function, but it's returning JSX. Because this is just a JavaScript expression, you can return them. You can pass them in as arguments, whatever you want to do.\n\n[1:16:20] If count is not less than zero, we're going to return null which will render nothing. Actually nothing. No empty element. It changes back to zero. If I change to a different...\n\nTaylor: [1:16:39] You could copy the selector, and just cancel the login.\n\nDave: [1:16:44] Search for it. Yes. Same kind of thing. It doesn't appear, but it's another way to achieve the same thing. You make that little helper function that generates them.\n\nTaylor: [1:16:59] Count is a prop. Is a prop an object or a variant?\n\nDave: [1:17:09] It could be an object. This one is not. This one is a number. This count prop is equal to tweet.retweets which is zero. [inaudible] likes is five. This one is five.\n\n[1:17:23] You can pass objects like actually author. We're passing this author variable. I guess it's the variable. Yes. Constant or whatever. We don't have a good word for that.\n\n[1:17:37] This is being passed in as a prop. The author prop on the author component is going to be an object.\n\nTaylor: [1:17:50] Any more questions about this, please let us know in the chat. There's the feedback forum if you don't want to ask publicly which is totally cool, but we're all friends here. We're having a good time.\n\nDave: [1:18:05] Assume for user name. Yes.\n\nTaylor: [1:18:15] There we go.\n\nDave: [1:18:16] I forgot that before, too. Cool. I think this is it. We've got the same example pretty much, but now it's all dynamic. We're passing props around, and we could theoretically get this data from anywhere, and render it.\n\n[1:18:36] Anymore questions? I'm going to move on to this one, I think. How are we doing on time?\n\nTaylor: [1:18:48] We're scheduled...Why the at prefix on the author? Because that's a Twitter thing.\n\nDave: [1:18:53] Yeah. No, that's not like a syntax problem.\n\nTaylor: [1:18:56] It's not really a React thing. It's just for the sake of...\n\nDave: [1:19:01] Twitter handles have ats. I don't really know what the actual data format is. Maybe they come with an at. This is not like Twitter's format. I just made something up.\n\nTaylor: [1:19:13] Where did the Font Awesome import come from?\n\nDave: [1:19:16] Index HTML. It just reverted because I just took that different version. Yeah, I just took this link tab. If you Google Font Awesome CDN, you'll find something like this, or you can install the Font Awesome React library.\n\n[1:19:40] The newer Font Awesome, I think it's five, you have to sign up to get the link to the CDN now or something, so I'm still using four.\n\nTaylor: [1:19:51] Importing Bootstrap would work the same way.\n\nDave: [1:19:54] Yeah.\n\nTaylor: [1:19:55] If you do that and then in your React components, you would have like .BTN warning and all that good stuff.\n\nDave: [1:20:01] You can do that, but if you're using Bootstrap, it's probably easier to use React strap.\n\nTaylor: [1:20:06] Yeah, probably.\n\nDave: [1:20:07] Bootstrap comes with some JavaScript stuff. What you can't do is combine the Bootstrap JavaScript, the jQuery-based stuff with your React app. That won't work. You know how React replaced that DIV with all of this app.\n\n[1:20:27] React likes to own the page underneath its little domain, doesn't allow anything changing stuff. If jQuery comes in and starts messing around, it will break your app. Don't do that.\n\nTaylor: [1:20:39] It will break your app and then break your heart. We're scheduled for about 10 more minutes, but I'm good to hang out for a while if everyone else wants to keep going. I'm going with keeping going.\n\nDave: [1:20:54] OK. There's a bunch more. I don't know if we'll get through all of these, but we can keep going though.\n\nTaylor: [1:21:03] Yeah, let's keep moving right along. How about we'll shoot for about 45 more minutes?\n\nDave: [1:21:12] OK, that sounds good.\n\nTaylor: [1:21:16] Cool.\n\nDave: [1:21:16] Cool. All this stuff is in one file, which is not how real React apps are usually written. Usually you put them in separate files. Let's close that. Let's take this and break it up into multiple files, and then we'll move the components out. Then we can input them into this thing.\n\n[1:21:40] I'm going to go one by one and move them. Then we'll do a couple, and then I have a shortcut.\n\nTaylor: [1:21:50] I was thinking this file was getting a little bit long.\n\nDave: [1:21:53] Yeah. At some point, it goes from everything being in one file is easier to understand to everything in one file is way harder to understand. This is getting there.\n\n[1:22:07] We'll make an avatar.js file. It doesn't have to match the component, but it's nice for it to match the component name.\n\n[1:22:14] I'll do that, and I'm just going to cut and paste this thing over here. Because we are using JSX, we have to import React. We'll get an error if we don't, and then we can export this component either as default or as a name to export. Doesn't really matter. Whatever you want to do.\n\n[1:22:43] Did that, and nothing changed because we're not using this file yet. If I save this, it should break because I haven't imported the avatar. We'll go and import the avatar. It is still working.\n\nTaylor: [1:23:02] Can you explain the significance of the default keyword when you did the export?\n\nDave: [1:23:08] Yeah. All of these imports here are default imports. Notice there's no braces or whatever. If I go over to avatar, I can export the function itself, and this is not the default. It took both. That's weird, but sure. If you write it like this you get the default, and if you braces around it, you get the named exports.\n\n[1:23:35] This will work now because it's exported both ways. You can use only one default export per file, and you can have as many named ones as you want.\n\nTaylor: [1:23:54] We might get into class versus function component in a little bit.\n\nDave: [1:23:59] Yeah. At some point, we will. I don't know if we will today.\n\nTaylor: [1:24:03] We'll see.\n\nDave: [1:24:04] I don't know. We'll see.\n\nTaylor: [1:24:05] If we make another live session, you all are invited to come back.\n\nDave: [1:24:13] We'll probably be doing more of these, probably talking about state. Maybe even next week. We'll see. Let's keep moving on these. We can move message out into a file. We'll make a new file here, called message.js. Oops.\n\n[1:24:35] Then we'll cut this, paste it over here. This time I'm going to use this shortcut thing to make a component [inaudible] grid.\n\n[1:24:48] We've got our default export, the same pattern as before, and we're going to import the default message from message. That's still working.\n\n[1:25:02] When I was getting ready for this live stream, I realized that VS Code has this really cool refactoring component.\n\n[1:25:09] If you highlight a whole component and right click it, and go to refactor, you can say move to a new file. It goes away, and it imports it. It uses the named import export thing, and here's our file.\n\n[1:25:25] Not crazy about the spacing, but this actually may be an extension I installed and forgot about it. Maybe this is not a VS Code thing, but there's an extension at least for VS Code that does this. It makes it much easier to move stuff around.\n\n[1:25:41] I'm going to save this and go over here and save this, and now author is good. I can just run down the line. Control shift R, control shift R, move to new file. Move to new file. We'll do that one in a minute.\n\nTaylor: [1:26:04] [inaudible] awesome.\n\nDave: [1:26:05] This is great.\n\nTaylor: [1:26:07] Although this is a good way to shoot yourself in the foot at some point if you're not careful I would think. [inaudible] use scikit for keeping track of our work.\n\nDave: [1:26:20] Yeah. I have kit going on behind the scenes here but mostly not using it for this kind of thing. I'm going to move this. This one depends on get retweet count. When I export it, let's see what it does. It moves it. It didn't move the function, and what it did was it put an import on that function.\n\n[1:26:45] It exported this from here, and it imported it over here. Import is actually importing retweet buttons. I don't actually know if this will work. Let's see if we can see it.\n\nTaylor: [1:26:56] Remember that time I was talking about shooting yourself in the foot.\n\nDave: [1:27:03] Very timely exit. It actually works. I was actually expecting some circular dependency thing. I don't want to leave this here though. I'm going to move it over to here so these live together. There's no reason to separate them out like that. Don't do the import here. I'm not going to export this at all.\n\n[1:27:21] We got our component used as a function, [inaudible] , and over in index, I'm going to keep that import [inaudible]. One more. We've got this whole thing [inaudible].\n\n[1:27:35] Move by tweet. Save. Uh-oh. That's going to fail. It makes these files, but it doesn't save them for whatever reason. There we go.\n\nTaylor: [1:27:48] Do imports increase run time? Yes, but...\n\nDave: [1:27:53] Probably like microseconds maybe. No, not really. Realistically, it's all in one file anyway. An import is just like a function call unless you get into code splitting and stuff, dynamic importing and all that. No, I wouldn't worry about it.\n\nTaylor: [1:28:19] Yeah.\n\nDave: [1:28:20] That refactoring...\n\nTaylor: [1:28:23] That is someone else's problem further down the line.\n\nDave: [1:28:28] Yep. That's it for this lesson. I just wanted to show you how to split stuff up. I know it moved quick, but I also know that it would have been super boring to watch me create 17 files by hand.\n\nTaylor: [1:28:42] That's what podcasts are for.\n\nDave: [1:28:46] Save that one. Move onto seven.\n\nTaylor: [1:28:53] Anthony is asking about having split files be the standard win. I'm assuming you meant split files like this.\n\nDave: [1:29:01] Yeah. For a real application, you would want to put stuff in separate files and even separate directories maybe.\n\n[1:29:11] At some point, having one flat directory full of components gets confusing. Create-react-app, anything underneath the source directory it will find any component under the source directory in any subfolder or whatever.\n\n[1:29:27] If you wanted to group things together under a Tweet directory and then different component for navbar, whatever your app needs, feel free. Project structure is one of those things that's...There's lots of ideas about how to do it well, and they all have tradeoffs.\n\nTaylor: [1:29:46] Yeah. It's up to your teammates, you and your team to decide. There's no right answer.\n\nDave: [1:29:53] [inaudible] has the handy website for that. Seen that?\n\nTaylor: [1:30:03] No, I haven't.\n\nDave: [1:30:05] It's some serge link or something, so I can't find it. I'd have to dig into Twitter, but he basically tells you do whatever you want.\n\nTaylor: [1:30:17] There you go.\n\nDave: [1:30:18] Doesn't really matter.\n\nTaylor: [1:30:20] Prettier is what's formatting the files for JSX?\n\nDave: [1:30:26] Prettier is reformatting the files. Prettier reformats regular JavaScript. I think it can do HTML and CSS. Definitely CSS.\n\n[1:30:39] It does reformat the JSX, yeah, but it's not only JSX. I think that's Prettier.\n\nTaylor: [1:30:51] For speeding up the development server as the app grows, it's still going to be fast enough, I think.\n\nDave: [1:31:03] It does eventually get slow. I don't know. I haven't gone down that path to try to speed that up. I know in apps that I've worked on, it does start to take a little bit longer. Especially the initial start is always kind of slow.\n\n[1:31:16] After that, it should anyway, only compile the stuff that changed so it's a little faster, but I don't know.\n\n[1:31:23] I don't know, but you figure it out. Think of repo or something. People will love you.\n\n[1:31:34] This next example is GitHub file. This is another app, and I've got another little thing that we can draw on if you want to do that.\n\nTaylor: [1:31:46] In the Sketch Pro?\n\nDave: [1:31:47] In the Sketch Pro if any...there you go. File. New. This app is, it's pretty good. It's a bit weird and buggy but sometimes.\n\n[1:32:03] I'm going to pull in the GitHub file list. We're going to make something that looks like GitHub file list. I think their CSS is nicer than ours will be, but just this one component.\n\n[1:32:21] The idea is to focus on imagine the GitHub page has lots of different components, maybe file list is one of them.\n\n[1:32:28] We're going to try to build that, but before we do, let's try to break it down into some nice component names and then we can pull it up.\n\nTaylor: [1:32:38] Those of you playing along at home, start picturing what you would break these up into, and then check your answers.\n\nDave: [1:32:47] Yeah. There's probably no one right answer.\n\nTaylor: [1:32:51] No, you're right.\n\nDave: [1:32:52] My CSS depends on certain things, so I'm sorry, I'm going to use my names.\n\n[1:33:14] Maybe we call this whole thing file list. Seems like a reasonable name.\n\nTaylor: [1:33:19] Probably.\n\nDave: [1:33:20] That will be the boundary component. File list will be this. Then we've got these individual rows. Maybe these are...I don't know. File list items seems like a good name. I should probably stop saying maybe because I know all these things.\n\nTaylor: [1:33:46] Yeah. You're driving this thing, man. Whatever you say is what goes.\n\nDave: [1:33:55] You can make up whatever names you want. Let's break down an individual row so it will have...this thing will be the name.\n\n[1:34:08] I'm going to call this whole thing file name, but I'm going to break the icon out into a separate component. I don't know if this is a super great example, but just to show that it can be broken out.\n\n[1:34:27] We're going to break out this into its own little thing, and that's going to be file icon.\n\nTaylor: [1:34:37] What terminology would you use for the relationship between file name and file icon? Is it parent child?\n\nDave: [1:34:48] Yeah, I think parent child. File name is going to contain file icon.\n\nTaylor: [1:34:54] Then file list item contains file name which contains file icon.\n\nDave: [1:35:00] Yeah, it's a tree. Actually I can draw out the tree if you want after these thingies. We've got this thing is like commit message, and then we've got this time thing over here, which looks shockingly like the time component we may have already seen.\n\nTaylor: [1:35:24] We could use the same library to note how long it's been.\n\nDave: [1:35:28] We can use the same library. We can use the same component. Giving away the secrets. It is like a tree so imagine. This is not the right tool for drawing trees. You have file list.\n\nTaylor: [1:35:44] You could draw a literal tree.\n\nDave: [1:35:46] Underneath that, you have file list item and underneath you have a bunch of these. Then underneath these, you have all of this stuff down here.\n\n[1:36:08] Actually file name is directly under the item, and then maybe the icon is under the name. Yeah. This purple is not so great, but underneath this thing, the same underneath file.\n\n[1:36:28] This time you'll have commit message and then time. It is a tree.\n\n[1:36:39] The DOM is a tree pretty much. It's all nested boxes. Just figure out which way to nest your boxes, and then you'll be all set basically. We got one big box around this and then one per line. We're going to make this an actual table element because it's a table.\n\n[1:37:07] As much as everyone says you shouldn't use tables for layout, you should use tables for tables.\n\nTaylor: [1:37:12] This is table. Great excuse.\n\nDave: [1:37:18] Hey, here is the bugginess. I made a new file, and it moved the window over there.\n\nTaylor: [1:37:24] There we go.\n\nDave: [1:37:27] Cool. GitHub file list and we close everything and go open this up. This is empty. I've got it running, right? This is running.\n\n[1:37:44] Yeah, good reading, Jake. That's a better structure for a tree. Cool.\n\n[1:37:50] I'm going to use that little handy snippet here to make new file. This is pulling in all the same stuff we've seen, and our file list is going to be table with a class of file list.\n\n[1:38:09] Inside here, we'll have T body, and inside the table body, we will have a bunch of files. Let me paste in a bunch of, some static data for files. Files, and we'll render a file list down here and pass in a files prop. It is our [inaudible] files.\n\nTaylor: [1:38:38] Yep. Then this Harkin's back to the whatever variable.\n\nDave: [1:38:44] Yeah. Whatever you want to call this. Ultimately, React components get their data from props or from state, which we haven't seen yet, but that's pretty much it.\n\n[1:38:58] One of those two [inaudible] props or retain the state.\n\n[1:39:04] Yes, you can access global variables, but it's not really a good practice. [inaudible] .\n\n[1:39:13] Let's see. No hooks today. Sorry.\n\n[1:39:21] We have the table body and we're going to render out these files. We have the files prop. We could try to render out the files like this maybe. What's that going to do? Nothing good. Yeah. Object not valid as react trial.\n\n[1:39:38] You can render an array of things you think it does. You definitely can't render objects. To render an array of things, you can use the map function on the array.\n\n[1:39:52] This thing is an array, and map is just...This is part of JavaScript. So what we're going to do is explode this array into a set of React elements, one per row. For each file in this thing, we're going to return a file list item. We're going to pass through that file.\n\n[1:40:19] We also need a special prop called key. The key needs to be a unique identifier for this item of the array, and it needs to be stable between renders. If you were to re-render the thing 10 times, every item should retain its own same key.\n\n[1:40:41] These files have a unique ID, and that works well. If your thing has a unique ID, that's the ideal key.\n\n[1:40:51] Things like massed out random is a bad one because it's going to change every time. The array index works in a pinch, but you have to understand what the key is doing. The key helps React figure out what order these things should be in.\n\n[1:41:09] If I say these are 1, 2, 3, and it renders them out 1, 2, 3, every time React renders, it's going to know because I gave it the same key, it's going to say, \"Oh, OK row 1 is the same element. I don't have to do anything. Just leave it alone,\" because the key was the same.\n\n[1:41:25] If the key changes, then React knows I should re-render the row and reorder things. The trouble is if the key doesn't change when it should. If you were to reorder the array elements, but you used the index, the item with key zero, it's going to be a new item, but React is going to think like, \"Oh, it hasn't change. Leave it alone.\"\n\n[1:41:52] You can anyway get weird rendering bugs if you use index as a key. Use an ID if you have it. It's better.\n\n[1:42:04] We got to create this file list item thing. We'll make a file list item component. It takes the file. It doesn't get the key. You have to pass the key in like the thing returned from map basically. You can't defer this until down here.\n\n[1:42:25] It actually has to be on this element, and this thing is not going to get the key. We can try putting it out, and pretty sure it's going to be undefined. I think React eats that value before it gets down to here. Let's just return. For now, we'll do like a...no, actually this has to be a TR.\n\n[1:42:53] We're inside a table body now. There are rules.\n\nTaylor: [1:42:58] This is where the HTML rules come in.\n\nDave: [1:43:02] Yeah, this is an HTML thing. You can't put like \"give\" inside. Let's try it and see what it does. We'll put file.name, name is the thing, yeah.\n\n[1:43:16] OK, cool. It rendered. We get some errors. Not that console, this console. Key is not a prop. It yells at you because you're trying to pull out the key. Don't do this.\n\n[1:43:36] Key is not defined. Now it's complaining about the DOM nesting thing. Div can't be a child of tbody. This has to be a tr. Table row is going to that table body.\n\n[1:43:54] Actually, now it's going to complain because you can't put text notes inside of tr. We have to use td for this.\n\nTaylor: [1:44:02] Because a table has a row, and a row has a cell.\n\nDave: [1:44:05] Yup. Let's make a file name component. This is going to be that one that has the name and the icon because reasons.\n\nTaylor: [1:44:22] Yup.\n\nDave: [1:44:25] Mostly to show our fragments. Inside file name, I'm going to return...Basically, I want a td with the file name itself. I need to give this a className. See if this works. It should work. Cool.\n\n[1:44:54] [inaudible 1] warnings. This is nice. We also want to return the icon here. We could just do...whatever, make a file icon component.\n\nTaylor: [1:45:11] At the risk of sounding super obvious, this is where that tree hierarchy is coming in, that we sketched out.\n\nDave: [1:45:26] Yeah. This is where that fragment thing we talked about earlier comes in, because we can't wrap this in a div because it's going to yell at us if we do this. It's going to yell at us because we don't have a file icon. That's fine.\n\nTaylor: [1:45:42] That's the bigger thing for it to yell at us for.\n\nDave: [1:45:46] Whatever. It'll also yell at us because it didn't return anything. OK, yeah. Right. Td can't be inside div. Div can't be inside tr. Instead of this, we're going to the empty tag fragment thing. There, file icon is going to return a td.\n\n[1:46:15] But it needs to decide what to show. I think this is why file icons is a separate component, because it has logic. We have these files, and they each have a type. You can have folder, or folder or file.\n\n[1:46:31] What we can do is switch on file.type because we knew the file's a prop. If the type is folder, then we're going to return...actually, our return, I'm going to make it a variable here called \"icon.\" We'll set the icon to fa-folder.\n\n[1:47:03] These are Font Awesome icons again. That's why they start with fa. If it's a file, we've got a different icon. We'll set icon to fa-file-text.\n\n[1:47:17] Oh. We'll get a break from there. We should have a default here too, so we can say the default will just fall through to file. We'll get that regular old file icon.\n\n[1:47:33] Now, we can return our td with file icon class. Inside there, we are on to Awesome thing, so we'll use an I. We need to dynamically set this className to be fa and then also the icon. We use a template to infer.\n\n[1:48:01] The CSS is terrible. Hold on. There is no CSS. Import, [inaudible 1] CSS can be good. Now let's [inaudible 1] .\n\nTaylor: [1:48:14] What you got so far?\n\nDave: [1:48:26] We've got a name and icon, now I'm going to move on to the next bit over here. Name and icon are done, we have these items. We just need to commit message in time.\n\n[1:48:39] Inside file list item. I'm going to put a commit message component over here. It's going to get the file again.\n\nTaylor: [1:48:59] We're coming up on about 10 minutes left, Dave.\n\nDave: [1:49:01] Cool. This will probably work out OK. Finish this up and then I might do it.\n\nTaylor: [1:49:08] You all can come back for a part two. I'm going to share that feedback link again with everybody. Any questions that you have, please let us know. Questions, comments, concerns and then when we do a follow-up session, we can dedicate some time to answer the stuff that we didn't get to today.\n\n[1:49:33] Please fill out that form, or don't, but please do.\n\nDave: [1:49:38] It would be awesome. Please...\n\nDave: [1:49:42] It'd be cool to know if this was helpful or confusing or whatever. Can [inaudible 1] to find. We're pressing in. Files have a latest commit object which have a message. We should be passing in file.latest commit into the commit message.\n\n[1:50:15] Commit prop. Then we don't get the error anymore. Actually, let me go back to that one and just explain what happened there. Create-react-app is helpful and then it will display these nice areas in the browser for you sometimes, most of the time.\n\n[1:50:37] It's syncing every property message of undefined and it shows this line of code here. What that means is that commit is undefined here. We trace it back to where did we use commit message and did we pass in the commit prop with the right stuff.\n\n[1:50:55] No, we didn't. We passed in a file prop, so we pass in the commit prop and that fixes it. Thanks.\n\nTaylor: [1:51:09] Kyle with a shout-out for Dave. All this stuff and more is in Dave Ceddia's book.\n\nDave: [1:51:15] All this and more. It's currently being updated to cover hooks. It doesn't cover hooks yet. We will soon as we, or anyone whoever has it.\n\nTaylor: [1:51:23] When we get feedback from viewers like you, the book becomes better and better. Just saying.\n\nDave: [1:51:33] Of course. We got the commit message, this is looking OK and the last thing is the time. We already have that time component from the tweet. We can just copy in. Was it 06 source time?\n\n[1:51:48] I'm just going to copy the component in here and start up our development server again. Unless we have a confusing time where we can't, it's not refreshing.\n\n[1:52:03] We have our time component, and just to refresh our memories, it takes a time prop and it puts out this span here but we need to render a table cell. I'm just going to wrap that time thing in a table cell.\n\n[1:52:19] We render our time as in the time prop equal to file.updated_at. This is the benefit of, if we made time, take a tweet and pull put tweet.timestamp or whatever, then we can work with this use case because it's got a different property name.\n\n[1:52:45] By making it generic, by making it just take the data that it wants, makes it more reusable.\n\n[1:52:52] We can import this time component time. I think this will work, but I think it needs a class to get the...I think it's one age. Yeah. there we go. Cool. That looks something like that. Yeah, close-ish.\n\nTaylor: [1:53:17] Close-ish.\n\nDave: [1:53:17] I think that's pretty much it. I think that's it. We're wrapping it up. Yeah, here is a good point to stop. Any more questions?\n\nTaylor: [1:53:35] Yeah, any questions. We've got about 10 minutes left to be live on the air. If you want to ask your question in the chat, now's a great time. I will paste the feedback form if you want to be more secretive in your feedback.\n\n[1:53:53] A question here about the differences between a development and a production build.\n\nDave: [1:54:00] One of the things create-react-app comes with is this build thing so you can say yarn build, or with npm, it's npm run build. This will compile the whole app into mattify the code for you, and it turns off development mode. We can look at our directory build now.\n\n[1:54:31] This build directory just got created because I ran that command. Let me open this up in the actual editor [inaudible 1] . Build. It has some of the same stuff. You see it [inaudible 1] index.html quite a bit. It added some, I don't know, loading scripts stuff. It has some service worker thing.\n\n[1:55:03] I think service workers are turned off by default in create-react-app now, but I forget. They definitely are in this one because I deleted all the stuff that came with the project.\n\n[1:55:15] Then it's complied, a bunch of complied JavaScript stuff, complied CSS. I don't know what that is. The difference are the built version is smaller.\n\n[1:55:32] Once you've got this build directory, you can just copy the whole thing up to a sever, and it'll run. It'll run, but if the server serves it, the client will be able to run this. The other big difference is the development mode thing. Let me try.\n\n[1:55:54] If we're in development mode React app, we have access to the React div tools, which it works because it's here. Div tools are pretty awesome because you can drill into your component tree, and you can see what props things have, drill into their values. It'll highlight over here as things change. It's pretty nice. This is really handy.\n\n[1:56:22] It's all this nice profiling. None of this stuff works in production builds. It's a bunch of debugging codes and stuff that's stripped out to make React faster. Production builds is also faster.\n\nTaylor: [1:56:41] As far as testing goes, testingjavascript.com is probably one of the best.\n\nDave: [1:56:47] Yeah, javascripts.com. Ken's got it nailed. I do not have a whole lot of material on testing.\n\nTaylor: [1:56:57] We got about five more minutes everybody. It's been really fun. I know that we covered a lot of stuff.\n\n[1:57:08] Dave, thanks so much for putting the time into the different samples. One of the most eye-opening things is you covered basically the same process between the first tweet example and the file list example. It's the same but different.\n\nDave: [1:57:26] Yeah, that was the intention. It's pretty much the examples I went through in my book too, but that's the idea. You do it a couple times, you'll learn it a lot better than just doing it once, also exercises which are a separate thing. Try the stuff out on your own basically if you can.\n\n[1:57:48] Try to come up with little examples to make and aim for smaller examples than larger examples.\n\nTaylor: [1:57:56] We'll schedule a part two for the near future also. Please fill out that feedback form with any extra stuff because that will really drive the material that Dave covers in the next stream.\n\n[1:58:10] We got most of the way through the examples today. We really want to make sure that you're learning what you want to learn, right?\n\nDave: [1:58:21] Yeah. The next one we can get into children, prop types, deploying. Maybe we can combine this.\n\n[1:58:28] We're going to be doing another live stream at some point about React state management stuff, probably starting with classes and then hooks later. Maybe we could combine the tail end of this with the beginning of that if it makes sense.\n\nTaylor: [1:58:46] I think that'd be great.\n\nDave: [1:58:48] Maybe. I don't know. We'll see. I have a course in that too.\n\nTaylor: [1:58:57] Let's put a link to your site in here, Dave. I think I posted the peer react book earlier. In case you all don't know here's Dave's website.\n\n[1:59:13] Obviously, the man knows what he's talking about. If you want anymore material for us to cover, please fill out that feedback form that I posted earlier. I think we'll call it good for the day. Thanks...\n\nDave: [1:59:33] Thanks, everyone for coming.\n\nTaylor: [1:59:35] Yeah, thanks everybody for coming. Chat was great today. You all were great with questions about the tooling and all the bonus stuff that we end up having to learn, getting to learn as developers. Cheers to everybody, and we will see you all in the near future.\n\nDave: [1:59:55] Thanks, everyone. Bye-bye.\n\nTaylor: [1:59:56] Bye.",
        "casting_words_order": "zePL",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream",
        "path": "/lessons/react-pure-react-intro-to-react-livestream?pl=pure-react-livestreams",
        "http_url": "http://app.egghead.af:5000/lessons/react-pure-react-intro-to-react-livestream?pl=pure-react-livestreams",
        "http_short_url": "http://app.egghead.af:5000/s/rtgh4",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-pure-react-intro-to-react-livestream-ry_B6LJoS/react-pure-react-intro-to-react-livestream-ry_B6LJoS.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
        "series_row_order": 3670008,
        "series": {
          "title": "Pure React Livestreams",
          "description": "Live stream events for the course modules.",
          "duration": 49263,
          "slug": "pure-react-livestreams",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-livestreams",
          "path": "/courses/pure-react-livestreams",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875171,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-livestream/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5404,
        "creator_id": 9671,
        "slug": "react-pure-react-more-react-fundamentals-livestream",
        "title": "Pure React More React Fundamentals Livestream",
        "state": "bundled",
        "summary": "More React Fundamentals Livestream",
        "duration": 3551,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": null,
        "casting_words_order": "zePH",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-react-fundamentals-livestream",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-react-fundamentals-livestream",
        "path": "/lessons/react-pure-react-more-react-fundamentals-livestream?pl=pure-react-livestreams",
        "http_url": "http://app.egghead.af:5000/lessons/react-pure-react-more-react-fundamentals-livestream?pl=pure-react-livestreams",
        "http_short_url": "http://app.egghead.af:5000/s/p8wr7",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-react-fundamentals-livestream/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-pure-react-more-react-fundamentals-livestream-H1POCI1sr/react-pure-react-more-react-fundamentals-livestream-H1POCI1sr.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-react-fundamentals-livestream/transcript",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-react-fundamentals-livestream/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-react-fundamentals-livestream/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
        "series_row_order": 4718583,
        "series": {
          "title": "Pure React Livestreams",
          "description": "Live stream events for the course modules.",
          "duration": 49263,
          "slug": "pure-react-livestreams",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-livestreams",
          "path": "/courses/pure-react-livestreams",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875172,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-react-fundamentals-livestream/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-more-react-fundamentals-livestream/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5403,
        "creator_id": 9671,
        "slug": "react-pure-react-learn-react-state-livestream",
        "title": "Pure React Learn React State Livestream",
        "state": "bundled",
        "summary": "Learn React State Livestream",
        "duration": 7125,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": null,
        "casting_words_order": "zePN",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-learn-react-state-livestream",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-learn-react-state-livestream",
        "path": "/lessons/react-pure-react-learn-react-state-livestream?pl=pure-react-livestreams",
        "http_url": "http://app.egghead.af:5000/lessons/react-pure-react-learn-react-state-livestream?pl=pure-react-livestreams",
        "http_short_url": "http://app.egghead.af:5000/s/e686k",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-learn-react-state-livestream/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/react-pure-react-learn-react-state-livestream-rJS9CLysB/react-pure-react-learn-react-state-livestream-rJS9CLysB.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-learn-react-state-livestream/transcript",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-learn-react-state-livestream/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-learn-react-state-livestream/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
        "series_row_order": 5242871,
        "series": {
          "title": "Pure React Livestreams",
          "description": "Live stream events for the course modules.",
          "duration": 49263,
          "slug": "pure-react-livestreams",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-livestreams",
          "path": "/courses/pure-react-livestreams",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875173,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-learn-react-state-livestream/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-learn-react-state-livestream/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5395,
        "creator_id": 9671,
        "slug": "react-pure-react-intro-to-react-hooks-livestream",
        "title": "Pure React Intro To React Hooks Livestream",
        "state": "bundled",
        "summary": null,
        "duration": 5775,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Taylor: [00:03] As you are probably aware, Dave and I have done a few of these sessions. I have to admit, they're amongst my favorites, because we get to make bad jokes and good jokes, and ultimately, just hang out.\n\n[00:19] We are going to record this session, but the recording is meant to make sure that Dave covers all the material in the finalized version of the course. This is a dress rehearsal. We will at some point edit this recording for egghead members to watch.\n\n[00:39] The primary goal of this is to make sure that all of the questions that all of you ask about hooks, we can make sure that Dave covers in the finalized course material. The answer to, \"Is it recorded?\" is, \"Yes, but no,\" and that's why.\n\n[01:00] As we go along with this, the format that we're going to follow is Dave will teach a little bit and then we'll pause for questions, and address them as they come up, then move on to the next topic. We're planning on chatting for hour, hour-and-a-half.\n\n[01:17] We'll see how it goes, see if...If we're having fun, it might go longer. If not, I'll turn this car around and we'll go home, or something.\n\n[01:28] Anyways. Thanks everybody for joining, and Dave, when you're ready, go ahead and take it away.\n\nDave: [01:34] All right. Let me share my screen. You see a runway?\n\nTaylor: [01:43] Yep.\n\nDave: [01:44] Some code?\n\nTaylor: [01:45] Looks good.\n\nDave: [01:47] Awesome. Thanks everyone for coming. Today, I'm going to be talking about React Hooks. We're going to go over I'd say the big Hooks, like useState, useReducer, useEffect, useRef. I don't know if we'll get into the fringe ones, like useCallback and useMemo and stuff. I'm not sure if we'll have time for those, but maybe.\n\n[02:10] Let's just dive right in, I guess. If you are familiar with React, if you've been using React for any time at all, most of the time that React has existed, we've only had classes. If you wanted to add state to a component, you had to turn it into a class. Hooks make it so that we can put state in function components.\n\n[02:34] This function component here is just rendering out. This helps you and stuff. The button doesn't do anything yet. Previously, if we wanted to add state to this, we would have to refactor this as a class, but we won't need to. Let's use the useState hook, and we'll add a bit of state to keep track of how many steps we have walked.\n\n[02:55] It's like a Fitbit, except really manual. You have to click the button every time.\n\nTaylor: [03:00] A Clickbit.\n\nDave: [03:02] That's a good name, copyright that.\n\nTaylor: [03:06] I'm pretty good at naming stuff sometimes, I don't know.\n\nDave: [03:10] We need to import useState. It's a named import from React. I'm going to keep moving around the zoom window. It's kind of weird.\n\n[03:22] We're going to import useState from React. Then, at the top of the function, we can call useState. When we call this, we can pass in an initial state. If we want to start out at, let's say, zero steps, we can pass in zero, and then useState returns an array.\n\n[03:40] It's an array with two elements. We can destructure it, and pull out steps and setSteps. The first element to this array is the state. It'll start off in zero. Steps will be zero, and then this second argument is the setter function. We can change that thing.\n\n[04:01] If you're unfamiliar with the syntax, this is array destructuring. This is a plain old JavaScript thing. This is the same thing as storing this thing into a variable, and then saying steps equaled a zero, then setSteps, can't spell, a one.\n\n[04:27] That's all this is doing. It's pretty much pulling apart the array and putting it into the two variables for us. Wait, let's replace this zero with steps. We're going to insert that value here.\n\n[04:43] If I save and the app refreshes, it's going to look exactly the same. Now, when we click the button that we want to change this, we can add an onClick handler to the button, and that's going to take some function.\n\n[04:59] We don't want to call setSteps directly here because, well, if we do that, it's going to be an infinite loop. It's going to rerender this component every time it renders. We're going to wrap this in an error function. This will delay it until we actually click the thing, and then we can setSteps to steps+1. Now, when we click the button, the steps goes up.\n\n[05:28] This is super simple useState example. That's all there is to it. It might look a little weird. Let's talk about, \"How is this working? How is it retaining state between function calls?\" because, if you use programming languages, you know that variables usually go out of scope, and the function quits. How is this keeping anything around?\n\nTaylor: [05:54] We actually have a question in the chat on, \"I don't see any this. Where did this go?\"\n\nDave: [06:00] That's a good question.\n\nTaylor: [06:02] Yeah, it goes really well into what I think you're about to say.\n\nDave: [06:09] Yeah.\n\nTaylor: [06:09] I'm not 100 percent sure.\n\nDave: [06:13] Actually, yeah, it is, anyway. This is important in classes because, if this was a class component, we'd have to be able to call this.setState and stuff. It's all on the instance of the class. Since this is just to find a regular function, we don't have any this. This is probably technically set. It doesn't do anything.\n\n[06:38] Nothing important is hanging off of this anymore. We can pretty much ignore it, which is great because this is easy. Later, we'll look at refactoring a function or a class component to hooks. You can see the transformation.\n\n[06:57] Let's talk about how this useState thing actually works. I'm going to pull up a little animation-y thing. This is a different app, but it looks and works pretty much the same way. You click a button, and the thing goes up by one.\n\n[07:13] The way this actually works is, when React calls your component, whether it's a function or a class, but we're talking about functions here. We'll go with that. Before it calls your component, it creates this backing object.\n\n[07:33] Inside that object is a bunch of metadata for the component. One of the bits of data in that object is an array of hooks. It's actually a linked list.\n\nTaylor: [07:46] A linked list?\n\nDave: [07:48] Yeah, if you know what linked lists are, then...\n\nTaylor: [07:51] The thing you have to draw on the whiteboard to get a job?\n\nDave: [07:54] Yeah, if you don't what linked lists are, it doesn't really matter. Think about it is an array with a bunch of slots. Every time you call a hook useState, it occupies one of those slots. Then, when you call the setter function, that's like calling this.setState in classes. It's going to trigger a rerender.\n\n[08:19] It's going to update that, update the value, and then rerender the component. Now, see, the little star goes back to the top. React is starting over again, but it hasn't lost this linked list of hooks. What happens now is that, when you call a useState, it can match them up.\n\n[08:36] It can say, \"Well, I already have something in slot one. I'm not going to initialize it to zero because it already has a value of one. I'm just going to pull out that value one, put it people, and then render it out.\"\n\n[08:49] To hammer this point home, here's another example that is using two useState calls, pretty much the same idea, just two of them. Click these things, numbers go up.\n\n[09:03] I named the variables a little differently here to show you that you don't have to call it set whatever this variable name was, like setGrahamsCoffee. You can call these things anything you want because they are destructured from an array, and they don't have any names.\n\n[09:18] Pick whatever you want. It's typical to call it Foo and setFoo, or whatever. That's fine. We've got these two states here. Let's see how this would work. The first time it calls through the function, this first useState call is going to occupy the first slot, and then the little next pointer jumps down to the next.\n\n[09:40] Then, when we call useState again, and that takes up the second slot. Now, it's waiting at the third slot for another hook, but we don't have any. That's it, so it renders.\n\n[09:52] The next time it renders, say we increment the coffee, I guess, and then it rerenders. It retains this array, but it's reset the index. Now, when we call a useState(13), it's going to match that up with the first slot in the array, move the index down, and then it's going to wait for the second useState to be called. It will match up with the second slot.\n\n[10:19] That's pretty much how that works. This applies, I'm showing it for useState, but there's other hooks that need to, excuse me, retain the state between calls. They all work the same way. It's like, if they need to retain something, it goes in that slot.\n\n[10:39] This is why there's a rule that hooks has to be called in the same order every time, which is why you can't put them in loops, and you can't put them in conditionals and stuff.\n\nTaylor: [10:51] That's actually good timing for a question that just came in about Carla asks, \"What are the arguments in useState referencing? What do they do?\"\n\nDave: [11:01] Let's see. The arguments in useState, you mean the zero, in this case?\n\nTaylor: [11:10] I think so.\n\nDave: [11:12] The arguments in useState is the initial value of whatever the thing's going to be. If we parsed in Carla here, and I restart the app, because I killed it already. Hold on. The first time it calls this thing, it's going to stick that value in. It'll have Carla as the value. Now, it's going to try to do Carla+1, and that's going to be fun.\n\nTaylor: [11:40] Because now it's a story.\n\nDave: [11:42] Because it's three plus the number in JavaScript. Whatever you pass to useState is the initial value. I may be wrong about this, but I think useState only takes one parameter. I don't think there's anything else you can pass it.\n\nTaylor: [12:02] Amy asks, \"It seems really counterintuitive that you're destructuring things out of an array, but you're defining them in the component. How do they get from the component into the array?\"\n\nDave: [12:15] I'm thinking how I could put it into the array.\n\nTaylor: [12:20] We're assigning steps and setSteps, come out of the array, that's a result of calling useState. Go ahead.\n\nDave: [12:30] Let me rewrite this as the other way that I showed, and we'll actually run the code that way. This is an array equals this thing. We can pull the values out of this array. The array has two items in it. Let me actually log it out. No console...\n\nTaylor: [12:53] Should we switch Carla back to zero?\n\nDave: [12:56] We'll do that. That's a good idea. Sorry, Carla.\n\nTaylor: [12:59] Sorry, Carla.\n\nDave: [13:00] It'll work better if it's a zero. Let me pull these things out of state, so it doesn't keep blowing up. The steps is going to be the first element in the array, an array zero, and then setSteps is going to be the second element in that array, a1.\n\n[13:21] Now, it shouldn't blow up anymore. The first time it runs, it printed out this array. You can see it's a two-element array. The first element is zero, and the second element is a function. See, they don't have any names. They're just array elements. We can give them whatever names we want.\n\n[13:40] Then, every time you click and it rerenders, it's going to print this thing again. You can see the step counts going up. It's the same function every time, which becomes important later, if you're passing this around and relying on it to be the same value.\n\n[14:04] In the array, it's just the state and a state setter. It's one piece of state, one state setter that corresponds to that piece of state. The state can be anything. We'll see. Actually, the next example is the state being something else, but one value.\n\n[14:22] It's not like class state where it's an object, and it's a grab bag of stuff that you can put in there. You can store an object in here, if you want. Still, it's one item. When you call setSteps or call the setter, it's going to wipe out the value.\n\nTaylor: [14:40] We had a question on, \"Elaborate on the ordering issue with calls to useState.\" That might be from the coffee and water example.\n\nDave: [14:50] Let me pop into the next example because that's based on that one.\n\nTaylor: [14:56] Cool.\n\nDave: [14:56] Let me remember which one we're going to. Go into three. Go into four. Yeah, I'd go four.\n\nTaylor: [15:06] As a reminder to everybody in the chat, on the drop-down for the two, you want to check all panelists and attendees so that everybody can see the questions that you're asking.\n\nDave: [15:21] I'm not sure if I'm actually a panelist. I may not see the questions, if they just go to panelists.\n\nTaylor: [15:27] I'll handle the questions. You can handle the teaching. I'll take the easy part.\n\nDave: [15:32] Perfect. Here's that coffee maker thing. It's slightly different. Let me pull the one I just opened up before. This app is pretty much the same. We can click these changes, and it changes the things. The ordering matters because it's got that array of hooks. This takes up the first slot in the array. This takes up the second slot in the array.\n\n[16:07] If you were reorder them somehow, you said, if we have .random less than .5, so this hook only render sometimes, then the first time through, you're going to have one item. The second time, you might have two items. You have might have one.\n\n[16:27] It can get really confusing, especially if we had like, say, a third one and the middle one was sometimes there, sometimes not. That wouldn't work out very well. Basically, in practice, this means put all of your hook declarations at the top of the function. Don't put them in loops. Don't put them in ifs and stuff.\n\n[16:53] There's an ESLint warning that will happen if you do that. Think about this. I'm just going to, even if you do like if true, this will always happen, this will pull up. It'll prevent you from doing anything bad basically.\n\nTaylor: [17:23] That's good. Does the useState function know which component called it?\n\nDave: [17:30] Yes, that's how every component instance, this app is a bad example for this, but if we rendered five of them on the screen, every one of them would have its own copy of these two values. Like a class would, each one has its own state.\n\n[17:52] That's what I meant with our backing object. When React renders this specific instance of the component, it'll create that object, and then every hook will get its own slot.\n\nTaylor: [18:02] Is that like the same mechanics of how this works in classes, where it knows that its own...?\n\nDave: [18:10] Yeah, kind of, it's like an invisible this, I guess. Yeah, you can think of it that way.\n\nTaylor: [18:19] Artem asks, \"useState can only be used within its component so it always gets called by the component that it's in. Is that correct?\"\n\nDave: [18:30] It only gets called by the component it's in? Yes. Yeah, it only gets called inside this particular component instance every time it renders. You can't call a useState outside of a component. That doesn't do anything. It might throw an error.\n\n[18:51] You also can't use hooks in classes. If you have a class, you can't call a useState inside your class anywhere.\n\nTaylor: [18:58] Perfect. Let's see, there's a question about the eventListener, \"When you were calling setSteps, does it return a new value for steps, or does it update the existing value?\"\n\nDave: [19:14] Does it return a new value, or does it update the existing value?\n\nTaylor: [19:18] Sorry.\n\nDave: [19:21] It replaces the existing value. I think that answers it.\n\nTaylor: [19:28] Is it a mutation or an immutable update?\n\nDave: [19:31] It's an immutable update. It replaces the old one, sort of. If you modify the thing and set it back, it won't work well. I might have an example for that later.\n\nTaylor: [19:48] Cool. Maybe one last question before we go to the next section, \"The React docs say that React relies on the order in which hooks are called. Does that mean, if you write useState for water below useState for coffee, that it would be called first?\"\n\nDave: [20:05] Yeah, you can reorder them. You can't do it dynamically while the app is running. It's going to call these in order. These are not some magical compiled React thing. It's literally a function call. This line is always going to run before this line. Yeah, it works.\n\nTaylor: [20:29] It will run both before it rerenders, right?\n\nDave: [20:31] It will run. Yeah, it will run both on the next render.\n\nTaylor: [20:36] On the next render.\n\nDave: [20:41] Yeah.\n\nTaylor: [20:41] Cool.\n\nDave: [20:43] Where render means calling this function, yeah, it's first before it does the stuff.\n\nTaylor: [20:49] Cool, good questions, everybody. I know that they're coming a little bit faster than usual, but we're doing all right.\n\nDave: [21:02] I'll move on to this next [inaudible] , I guess. Let me move the Zoom stuff out of the way. I mentioned that useState can hold, it doesn't just have to be a number or something. You can hold objects and arrays and whatever type you want. I'm going to refactor this to have one object that holds both values, and be a little bit more like maybe a Steven class thing.\n\n[21:32] Let's create a thing called, we'll call it brew, setBrew, and then we'll say useState, and it's going to be an object that has water set to some value. We're going to use 8, and then coffee, 13.\n\n[21:52] Now we've got the state stored this way, and we can get rid of water and coffee then go and fix all the usages. Instead of just water, it's going to be brew.water, and coffee is going to be brew.coffee, same kind of thing with all of these.\n\n[22:12] We have one setter that sets the whole object, and I'm going to pull that out of here because it's going to be a little bit longer. Let's do const addWater. It's going to be a function.\n\nTaylor: [22:30] You would want the function to be inside of your component declaration because it's like going back to that invisible this concept?\n\nDave: [22:40] Yeah. It's a Clojure, so this function is going to have access to this brew variable because it's defined right below it. It's going to have the latest version of this when you call it. It latches the value when this function's created, and so when you click the button, it's going to update the last version.\n\n[23:10] Inside this function, we can call a setBrew, and we can parse in a new object. We'll set water to...We're going to base this off the old ones, so we can say brew.waterplusone, and we could set coffee=brew.coffee and leave it alone. Then we could have another one of these for addCoffee. I'll show you what happens if you write...There's a couple other ways where things might not go as intended.\n\n[23:46] Let's do water and coffee, and now we can change these. These functions are nice and simple now, they don't need any arguments. We can say on click addWater, click addCoffee. Maybe it'll keep working. Hey, look at that. It still works.\n\n[24:08] What we're doing is we're passing in a new object to set through and it's going to replace this whole thing with this whole thing. It doesn't merge. With classes, if you're used to set state from classes, you would be able to say, \"OK, just replace the water. Great. Leave the coffee alone.\"\n\n[24:29] If you do this with hooks, see it wipes out the coffee? It's replacing the entire value with whatever you pass in here. There's no merging this thing with your old one. That's important to keep in mind. The other thing to keep in mind is that it won't re-render unless the value is different.\n\n[24:52] If you were to say, \"Brew.water plus equals one,\" just like, add one to water, and then just set through to \"Brew,\" this is not going to work either. It's stuck at eight. Coffee works fine.\n\nTaylor: [25:11] Oh, and then \"water\" just jumped.\n\nDave: [25:12] Yeah, so if you click this once, this should be 16, I guess, and a few times, 19, a few more times, 25. It's putting the value in there, but there's an optimization where React won't re-render if it looks like it's the same thing.\n\n[25:31] If you parse in, this is the same object, you've modified one property of it, but as far as React and as far as JavaScript's concerned, it's the same object, so it doesn't re-render.\n\n[25:44] You have to make sure to do immutable updates. If you've got some complex piece of state like an object or an array, or something, you could do what we did here, or you could do the spread operator and spread the old \"brew\" and then replace the \"water\" with \"Brew water plus one.\"\n\nTaylor: [26:06] I've been at plenty of places where they actually keep the same coffee grounds in for several runs. The coffee eventually gets clearer and clearer. I love reading the spread operator out loud. When I read this out loud it'll be like, \"Parsing brew should work,\" when you read it with the spread operator. It spreads like that.\n\nDave: [26:30] Yeah, reading that.\n\nTaylor: [26:32] brew\"?\n\nDave: [26:33] Yeah, dot, dot, dot, or spread out, or copy in. Sometimes I think of it as, \"Copy everything from this,\" or, like, \"Set through to a new object which has everything from the old 'brew' plus this stuff.\"\n\nTaylor: [26:49] Yeah, just adding it to the list of things programmers write all the time, but rarely say out loud.\n\nDave: [26:55] Yeah. [laughs] OK, that's the three factors in an object now. We can also turn it into an array, which would work fine. I think it'll be harder to read that way, but we could do it. What if we turned this into instead of an object with like nice named things, we just said, \"OK, it's like an array with like a 13 and an 8.\"\n\n[27:24] Then we could change our addWater to be setBrew to an array where the first one is brew zero. Maybe doing 13 is water, 13 is coffee. How do you know? [laughs]\n\nTaylor: [27:40] I think you've just proven why not to do it this way. [laughs]\n\nDave: [27:45] Let's pretend we did do it this way. It leads into the next example. I'm just going to jump ahead.\n\nTaylor: [27:54] There's a quick question about from a performance point of view, is it better to have multiple use states for different variables, or group them to use the one object and use the spread?\n\nDave: [28:05] I don't think it matters. I don't think it matters much. If you do have a ton of states. If your state has, I would say honestly more than three things or five things, it's going to get unwieldy. If you just have...Your here function starts off with declare 17 states, that's going to be annoying to read. [laughs] Probably not a performance issue.\n\n[28:35] Calling 17 things is fast, but it's just hard to work with. In a bit, we'll talk about use reducer, which is another state management hook. It's more like a generic one. You can jumble together related states. If you do have an object of stuff that is interrelated and you want to put it all in one object, use reducer is probably a better option for that.\n\nTaylor: [29:04] Cool.\n\nDave: [29:05] It definitely depends on how interdependent the state variables are. If they're interdependent, then use reducer is much better option. If changing one state always changes another, or state values are dependent on other ones.\n\n[29:22] Let me jump to the next example. Quit. I didn't save it. Whatever. [inaudible] . This is pretending that we did go through with that. [laughs] Crazy idea. I'm turning it into an array.\n\n[29:51] What I wanted to demonstrate was if you have a bunch of hooks, and it looks like a mess and you want to just hide it away, and maybe even reuse it between components, you can turn this into a custom hook, which is really just cutting and pasting this into a function. Let's make use coffeemaker, and then paste this in here. Oh.\n\nTaylor: [30:13] [laughs] I remember that time you wrote all those lines.\n\nDave: [30:18] To paste the first. [laughs] We have this thing. Now, we can return whatever we want from this function, and then call it from down here. basically, we want to take the pieces of state out of here and get them into our component somehow.\n\n[30:40] Preferably in some nice easy-to-use way that doesn't involve accessing like, variables, or, arrays by index. That's terrible. Let's say, \"We'll return an object.\" This will be our hook API. Return object, we have an add-water function, we'll just put in \"add water,\" as a property. We'll have an \"add coffee.\"\n\n[31:05] Then we'll have water as a property which is brew1, and coffee is another property which is brew0. I think these are right. I don't know.\n\nTaylor: [31:22] We'll find out.\n\nDave: [31:24] We'll find out. This is cool, because now, inside our component we can forget that this complex mess exists and we can de-structure these values from it so we can pull out \"add water\" and \"add coffee,\" water and coffee, and now we've got like, nice variable names that we can use instead. It should work the same way. Cool, it still works.\n\n[31:56] This \"use coffeemaker\" thing is called a \"custom hook.\" Custom hook is really just a fancy name for a function that starts with \"use.\" It sounds intimidating. It feels like, \"I don't want to do some custom hook thing. It sounds difficult.\"\n\n[32:15] Really, if you have a bunch of hooks calls in your components and you don't want them all sitting there clogging up your function, you can pull them out into your own function.\n\nTaylor: [32:26] You can still use useState even though that is not actually rendering anything.\n\nDave: [32:32] Yeah, because if you think of it from the standpoint of this code executing, forget about React, but JavaScript is running this, the first thing it does is call its \"use coffeemaker.\" Your call tree looks like it called \"app,\" and then it called \"use coffeemaker.\"\n\n[32:55] As far as JavaScript is concerned, you're still inside app. Anything you could do inside app you could also do inside use coffeemaker. You just moved it somewhere else. Now you're calling useState here and that's fine, because it's within a component render.\n\nTaylor: [33:12] Got you. That dovetails into a question we just got about having a component call a component in another file. How would you get the state over there?\n\nDave: [33:23] How would you get the state in the other file? This same principle applies, even if you use coffeemaker as not in this file. You could import it and still call it. Nothing in here depends on anything in this file. It's all totally independent. You could put this in a separate file, import it and then call it. That'd be fine.\n\nTaylor: [33:48] Like the coffeemaker's in another room and...I don't know. Never mind. I entertain myself, really. Owen asks if a setBrew is being initialized to a number.\n\nDave: [34:02] This might look confusing. The argument you parse to useState, whatever it is, goes into brew. This pair of things goes into brew. setBrew is still a function, so let me logout. Brew and setBrew. You can see. I'm not actually sure that helped. That looks worse.\n\nTaylor: [34:39] It does, doesn't it?\n\nDave: [34:41] It's weird. I don't know. I think this is printing out the function body or something. It's odd.\n\nTaylor: [34:47] Yeah, it is.\n\nDave: [34:49] It is. Anyway, brew is just this array of two numbers, 13 and 8. setBrew is the setter function.\n\nTaylor: [35:00] Brew is an array where the first item of the array is the amount of coffee and the second item in the array is the amount of water.\n\nDave: [35:08] Yeah.\n\nTaylor: [35:09] Also, it's irresponsible to only make eight ounces of coffee at once. Just saying. I start at 16 and usually end up with about 32, which I think explains a lot.\n\nDave: [35:22] Go up from there. Yeah, good idea. I could use some coffee now. Also, don't write code like this. Don't put things in and erase like this. It's a bad idea. It proves the point. You can make custom hooks. We might see some more custom hooks later, if we have time for more of them. OK, let's move on to the next one, I guess.\n\nTaylor: [35:50] Yeah.\n\nDave: [35:52] What is the next one? Refs.\n\nTaylor: [35:57] One more question of clarity. Let's say I have a component that sets the state of a value that comes from an input. Then, it calls another component that will need that value. Do you pass that as a prop or set it to some kind of global state? We might get into that later on, I think.\n\nDave: [36:20] I'm reading the message, because that was a lot of words. \"When it sets a state or value for what you input on the screen, then it calls another component that will need that value, do you need to pass that as a prop or can you save it as some kind of global state?\" You could do either.\n\n[36:41] The easiest thing to do is to parse it as a prop, though. Generally, if a thing, if your component is rendering and you need to pass that through to a child component, just parse it as a prop. Especially, one level down, like there's no point in putting it in global state if you just need to go one level down. Yeah, parse the prop, that's what they're there for.\n\n[37:04] Yeah, it's pretty much the same thing as the setting the class state to an object with a group property, which is an array. You can think of it that way. Not exactly the same, but same sort of idea. Moving on. We've got refs now. What's it complaining about this autocomplete attributes? We can get over that warning.\n\n[37:40] We've got this login form thing. If you type stuff, your username, password and login it reloads the page, which is not great. We want to stop that from happening. To get the values out of these inputs rather than using useState and syncing the input with state, I'm going to use a ref to get the values out at submit time.\n\n[38:04] I'm going to import one hook called useRef. At the top of the component function we're going to call useRef. It doesn't take any arguments. It can take a default, but you don't have to parse anything in. It's going to return an object. We're going to put this in like \"username ref.\" Let me just logout. What this actually looks like. It's interesting to see, I think.\n\n[38:42] When you call a useRef it's just an object, a plain, old object and it has a current property that starts off undefined. That's what this initial value is, we're parsing something here and that goes into current.\n\n[38:57] Since we're going to use this to refer to the actual input, we're going to parse in a prop to the input called \"ref,\" and pass in this username Ref. This API has been around before hooks, but the idea is when React mounts this component the first time, it's going to update this value to have a reference to this.\n\n[39:28] It's going to set that current value, so like, usernameref.current to point to that username. I'm going to make a better one for password. A password ref.\n\nTaylor: [39:48] You still call useRef the same way?\n\nDave: [39:53] Yes. You can call useRef multiple times. Just like each one creates a new ref, and so we can parse ref to this password input, too. Now when it mounts, we'll have two variables that point to two different inputs. Now we can handle the form submission part. Nothing's really changed yet.\n\n[40:21] Let's pass it on to Submit Prop To Form and how it handles submit function. It'll submit. It's going to take that event. When you submit the form it passes in the browser event.\n\n[40:39] The first thing we want to do is call event.preventDefault, because this will stop the page from refreshing. If I use these two braces it should work. Stuff, you log in, and no more refresh. Now we're getting into this function here, and then we log out username-ref and password-ref here.\n\n[41:06] We can see what these values are. When I type something in and click login, we can see it prints out those two objects. They're the same shape, an object with a current property, but now they actually have a pointer to this input.\n\n[41:22] We can access the value of that input like alert, username, ref.current.value, and so .current, which is actually the input, and then .value is the property on that input. Password-ref.current.value. I think alert actually works this way. Let me try wrapping this.\n\nTaylor: [41:49] It's been a little while since I wrote an alert in general. It's also...\n\nDave: [41:57] Yeah, it has. Maybe I'll switch this back to console.log. I'm not sure I like [inaudible] a whole lot, but whatever. You have Dave, and you're like password and login, and it's getting the values out of the input.\n\nTaylor: [42:09] Is it best practice to always pop an alert with the user's plaintext password when submitting a form?\n\nDave: [42:17] Yeah, definitely.\n\nTaylor: [42:19] What could go wrong?\n\nDave: [42:21] It's a good login scheme, just like post your password to Twitter or something, and have somebody else read your password off Twitter.\n\nTaylor: [42:28] Yeah. There you go.\n\nDave: [42:29] Nothing can go wrong. That's it for this ref example. Any questions about refs?\n\nTaylor: [42:43] Questions about refs. Anthony, we might get towards that type of question later on. We're not straight up ignoring you. Any more questions about refs? Now is the ref time. What's the advantage of refs? That's a great question.\n\nDave: [43:06] If you need to access a DOM node, refs are really the only way to do it or the most reactive way to do it. They come in play especially if you're integrating with another third-party library that is not really React, not written with React in mind. D3 comes to mind.\n\n[43:32] If you want to render something, it needs just a blank placeholder in the DOM, and you need to point it toward that element. Refs are good for that. If you need to be able to focus in input programmatically, like trigger or focus when something happens, you need a ref for that so you can call focus on it.\n\n[43:51] I guess we could do that. After we submit username-ref.current.focus. We're here at the alert though. Now we could pass instance stuff here and hit login, and then it's going to focus that. Any time you need to access DOM nodes, think of other examples of that. My mind is blank right now.\n\nTaylor: [44:19] The thing you just did with focus, if they submitted a form, but the username was taken, you could have it focus on the username form so they don't have to hit tab a bunch of times to get to that box.\n\nDave: [44:33] Yeah. I think you might be stealing an example from later.\n\nTaylor: [44:36] Oh, really?\n\nDave: [44:37] Yeah.\n\nTaylor: [44:37] Cool.\n\nDave: [44:37] I think I have a useEffect focus example.\n\nTaylor: [44:40] Ah, that in mind, then.\n\nDave: [44:43] It's exactly that if you want to do something like that. The other question might be whether you should use refs versus putting this input in the value and state.\n\nTaylor: [44:57] We actually have that exact question on here.\n\nDave: [44:59] I figured that maybe that was the actual question. Sorry for going into the DOM thing. I think it's more common practice to put it in state and synchronize, do the value onChange, pass value and onChange props to the input.\n\n[45:19] Sometimes, that's a pain, and you just don't want to be able to get the value out. Ref is good for that. I don't know, sometimes ref is just more lightweight performance-wise. It's less code to write and so sometimes it's easier.\n\n[45:38] I do think that there's lots of cases where you might start off thinking, \"I can just use ref to get the value out,\" but then it turns out you need to actually validate it as the user is typing keys or something, and then it's much easier to just turn it into a controlled input value.\n\nTaylor: [46:01] Then there's a question about why you would use useRef instead of useState for storing input values.\n\nDave: [46:12] Yeah, that's a similar question, I guess. The ref doesn't really store the input value. It stores the input's node. This input username thing, no, that's been current. This is actually a pointer acting like, if we did document.querySelector and found this input in a document, that's this whole thing.\n\n[46:45] It's doesn't just throw value. It's a bunch of other stuff. Rests are, honestly, more widely used when you need the other stuff than just the value.\n\nTaylor: [46:59] Do you ever use useRef if you're not referencing a DOM node?\n\nDave: [47:05] Yeah, you can do that, too. Refs, you can store whatever you want in that current value. I don't know if I have an example for this. Do I? I don't think so. We need to make one on that actually.\n\n[47:19] That is a thing you can do. If you want to retain something, especially from one example might be if you want to retain something from the last render, you want to remember a value, or be able to check the current value against the last one, a ref can be a good place to keep the last value.\n\nTaylor: [47:39] When they make you type your email address twice for whatever reason?\n\nDave: [47:45] Hate that, and then they disabled the copy and paste. It's the worse.\n\nTaylor: [47:50] Yeah, then you have to go in and do it in DevTools to spite them. Maybe that's just me.\n\n[48:00] Great questions, everybody.\n\nDave: [48:02] Just you. Cool. Let me move on to the next one. No, am I here? This is my lesson seven. I think we're on seven, useReducer. Yeah, I mentioned useReducer earlier. Do like a really simple useReducer example first to show how it works. Looks like that my files open up right here.\n\n[48:35] Lesson seven, next. We have this room component. It doesn't really do very much. It's got a couple of buttons. That's it.\n\nTaylor: [48:47] It's like, every time I've tried to use a smart home appliance, it doesn't actually do anything.\n\nDave: [48:54] Yeah, exactly like that. The buttons are disabled. Let's add some state to this. Instead of using useState, I would use useReducer this time. I'm going to import the useReducer hook. useReducer, and it works similar to useState in that call, nope, useReducer.\n\n[49:18] You parse in a reducer function. I'm going to call that light switch. We'll make a function called light switch in a second, and then the initial state, which is going to be true for on.\n\n[49:35] Remember, with useState, we would've parsed true as our initial value instead of useReducer. Same thing, you pass the initial value as the second argument. The first argument is a reducer function, which I'm going to make a placeholder up here called light switch Don't forget and change those.\n\n[49:58] UseReducer, similar to useState, it returns a pair of things. The first one is a value. We'll call that light, I guess, and then the second one is your setter function, but it's actually traditionally called dispatch.\n\n[50:20] When you dispatch something, it's going to call the reducer. The reducer gets to decide what the next state is going to be, and then it'll rerender. Let me write the reducer function, I guess. Reducers take two arguments. We're going to take the existing state, and we'll get an action, which is going to be whatever we parse into dispatch.\n\n[50:51] This is tricky to explain piece by piece because, once it's all up and running, it'll make more sense I think. We can switch on the action, and decide what to do based on that action. If we sent an action of on and we told light switch to turn on, we're going to return a new state, which is true.\n\n[51:15] Notice the type of this thing matches the type of the initial value. If it was off, it'll return false. In the default case, because we're going to get a warning about it if we don't have a default case, let's return the state as is.\n\n[51:37] We've got this light switch reducer, and we've got our light value. Let's change this class, so that we can actually do something with the lightedness...\n\nTaylor: [51:50] The \"lightedness.\"\n\nDave: [51:50] of this room. If light is true, then it's going to be class of lit, otherwise it's going to be unlit.\n\nTaylor: [52:03] Do you need breaks for that switch statement?\n\nDave: [52:06] I don't, because they return.\n\nTaylor: [52:10] Ah.\n\nDave: [52:11] You could do this, but you will never run this line because this is going to return first.\n\nTaylor: [52:16] Cool.\n\nDave: [52:22] Let's see. We've got some sort of output of the state here. Then we'll just change these buttons to when we click the buttons actually dispatch something. On click, we're going to call dispatch. We're going to do it in the arrow function so that we can pass in a value. Parsing on, and then do the same thing down here. We'll dispatch off. Then let's see if it works. Click off.\n\nTaylor: [52:54] Oh hey, how about that? Kind of like a Rube Goldberg machine way to turn a light on and off.\n\nDave: [53:03] It's a very complex way to turn a light on and off, but I figured it'd be better to show a small example of use reduce than a complex one that actually needs it.\n\nTaylor: [53:17] There's a question here about, I guess the elephant in the room, is replacing a Redux store with use reducer.\n\nDave: [53:26] The name use reducers invokes images of Redux, because Redux is the thing that brought that word into vogue. Redux gives you a global store. The reducer is the way that it manages that global store with the state. These reducers are scoped to a single component.\n\n[53:59] In order to make it work like redux, you've got to parse the state around. React has a thing called context, which you can do that. Ultimately, yes, you can replace redux with useReducer and useContext, but it turns out you end up writing your own redux and it doesn't work as well.\n\n[54:23] You basically need to write all the same stuff that redux would've done anyway. The performance would probably be worse because redux has a bunch of performance optimizations for avoiding rerenders when things haven't changed and stuff.\n\nTaylor: [54:38] I'm a big fan of other people doing work for me, especially when it comes to stuff like that.\n\nDave: [54:45] I'll ask a question back to those questions. Why do you want to replace redux with useReducer?\n\nTaylor: [54:57] Nice one, Dave, with the throwing it back.\n\nDave: [55:01] I'll wait.\n\nTaylor: [55:02] Yes, I will wait. Amy asks, \"Instead of a switch, could you do a if false make true, if true make false?\"\n\nDave: [55:14] Yeah, definitely. You don't have to use switch. You could do...\n\nTaylor: [55:19] Return bang, whatever, with action, with on.\n\nDave: [55:26] Yeah, I see what you mean. Return not state or something. It's not a toggle. You couldn't really do this, but you could simplify this.\n\n[55:38] [inaudible] you'd be like, if actually on, then true. Otherwise, we would assume it was off or something, if that were, too.\n\nTaylor: [55:52] [inaudible] , I believe, I don't know how to pronounce it exactly. For four letters, I can't do it. \"Can you use multiple useReducers in a single component? Would that be good practice?\"\n\nDave: [56:04] Yep, you can use multiple useReducers just like you can use multiple useStates. If you have a need for it, sure. It's not bad practice. I would say to keep the state that's related in the same reducer, if you have multiple reducers. There's no reason to split up some related state among multiple reducers.\n\n[56:33] This example is really not selling this point, but you can still work up things with the reducer. You don't have to have one number per reducer or something like that. I would not do that. In the next example, we can look at a more complex one with an object.\n\nTaylor: [56:54] Hey, Tay just asked a question. Tay, could you copy and paste that, and then do the change your two, so that all of the attendees can see that question, too? It's a long answer to your question about redux replacement.\n\n[57:09] Cool, thanks for doing that so everybody can check this out. It might be easier if you read this one, Dave, instead of me reading it to you.\n\nDave: [57:18] Yeah, Joe, I can read it. The way I understand it, state is I need to keep track of this thing in a component. Reducer is I need to keep track of these couple of related things in a component. Redux means keep track of a bunch of stuff, maybe related, maybe not, across multiple components app wide.\n\n[57:36] Yeah, that's an accurate way to look at it.\n\nTaylor: [57:41] The global versus local is the two-word, well, three if you count versus.\n\nDave: [57:46] Yeah, it's maybe global versus local. The point that I was trying to make earlier, I guess, is that, if you're thinking, \"Redux seems really complicated, I can rewrite it myself with useReducer and useContext,\" you're going to end up making the same complex thing, and it won't work as well.\n\n[58:09] I wouldn't recommend rewriting your own redux with useReducer and useContext. For a couple of simple values, it might be fine, if they don't change a lot. There's all these caveats with, \"It might work,\" but I wouldn't build a big, complex app, avoid redux, and try to write your own.\n\nTaylor: [58:31] Great questions, everybody. This is exactly why we do this. There are no bad questions, take it from me. This is why we do this. We can think of the things we didn't think of.\n\nDave: [58:49] Yeah, it's great to get these questions.\n\nTaylor: [58:53] UseContext, we might end up talking about useContext, in a little bit, maybe?\n\nDave: [58:58] We might, no. I don't have a lesson out, but we might be able to get into it.\n\nTaylor: [59:04] I guess the question here being, \"useContext would sit somewhere between needing more than component state, but less than an app-wide state?\"\n\nDave: [59:13] Yeah, useContext is good for that, context, in general, I guess. useContext is the way you pull something out of context using hooks. Context would work well for you deviate some state that maybe it's not global, but it's more than just a couple of components or something. It's like a subtree.\n\n\"[59:36] Do you need to worry about mutations?\" Yeah, it's the same thing as with the redux reducer. It's like useState but with a different API. Actually, one fact, under the hood, useState just calls useReducer within React, with the React source code. It's really just useReducer. useState is a simple version of it.\n\n[60:07] Yeah, you do need to worry about mutations. If you were to modify an object and return it, you'll have the same issue, what we saw with useState, where the thing wouldn't rerender. If you've got super complex state, maybe you want to use a library for it, like Ember. Ember is great for simple logger users.\n\nTaylor: [60:34] Nice.\n\nDave: [60:35] Cool, let me pull up this next one. Actually, I don't know. Maybe I should move onto useEffect, and we can circle back. I have an example of useReducer, trying to undo redo. It's fun, but it's complex. Maybe it'd be good to cover useEffect, and then loop back if we've got time, cool. I'll add to 10, click Save. Go ahead and send. That's it.\n\nTaylor: [61:15] You're doing great, Dave. This is awesome.\n\nDave: [61:20] Thanks, Taylor.\n\nTaylor: [61:23] Everybody in the chat, I hope you're doing great as well.\n\n[61:26] [laughter]\n\nTaylor: [61:33] Tony's doing all right. Thanks, Felix. Am I doing great? I'm doing all right. I've certainly done worse. Take it from me. I have done worse.\n\nDave: [61:48] Let's see. useEffect. For this app, we've got an input. Type in the input. It doesn't do anything. It does save that input into state. We've got value and unchanged, so as you type into here, it's updating the name and it's re-rendering.\n\nTaylor: [62:14] We're not going to use a ref on this one.\n\nDave: [62:16] We're not using a ref on this one. We're going to take this and update the title of the document as you type. Because it's a side effect, it's like changing something outside the scope of this component. We're going to do it inside useEffect. useEffect is the same thing. useEffect is another Hook.\n\n[62:44] This one is sort of complex, because there's a bunch of different ways you can call it. useEffect -- you call it with a function. The effect is going to run after every render. Every time, like the login here, I'm picking this up.\n\n[63:10] OK, so it said hi. First render. Type a letter, you get another hi. Type a letter, get another one. Every time it renders, it's going to run this effect.\n\nTaylor: [63:23] It's like most of my texting conversations.\n\nDave: [63:25] [laughs] Hi.\n\nTaylor: [63:28] Hi.\" \"Hi.\" \"Hi.\" \"Hi.\"\n\n[63:30] [laughter]\n\nDave: [63:36] I saw this good...I don't know where it was actually, but it was some sort of replay of a AIM conversation or something from back in the day when AIM was a thing. It was like, \"Hi.\" \"Hey, what are you up to?\" \"Not much, you?\" It was like, \"BRB\" -- and that was the entire conversation.\n\nTaylor: [63:55] [laughs] Yep. Yep. Yep.\n\nDave: [63:57] [laughs]\n\nTaylor: [63:59] Man, I used to spend all afternoon on Instant Messenger watching reruns of \"Full House\" and \"The Simpsons.\"\n\nDave: [64:05] [laughs] It's good times.\n\nTaylor: [64:09] Yep. I didn't get out much. Still don't, but...\n\nDave: [64:13] Me neither.\n\n[64:14] [laughter]\n\nDave: [64:14] A lot of that and games. OK, so back to React. We have our useEffect Hook here. It's running after every render, and we can say document.title = name, because we have this name variable. Since this variable is in scope, we can set the title to whatever we typed in the thing. We could make it something fancy or we could be like, [inaudible] name.\n\n[64:47] Now it says \"Hello nothing.\" We can say \"Hello React.\" \"Hello everyone.\" As we type, it's updating this thing, and it's a little laggy. I think that's that the browser's fault, but it's fine.\n\nTaylor: [65:04] It went fast enough.\n\nDave: [65:07] Yeah. That's fast enough. Fast-ish. Yeah, so lifecycle methods and the effect of it. We'll talk a little bit more about and see what the other ones are. Time that one. Yeah. This effect right now, if you're used to classes, it's like componentDidUpdate, pretty much, runs after ever render, and like componentDidMount because it runs after the first render.\n\n[65:45] Either way, it's better to think of effects as you're synchronizing the app with a piece of state. This, you could think of it as synchronizing the title with the name, and it's like, \"Whenever the title changes...\" We're going to set the title, so let me change this. Let me add a little more to this example, and we can see another effect of useEffect.\n\nTaylor: [66:18] Nice. I'm going to make a label, another input. No, no label. I'll call it numbers.\n\nDave: [66:31] I'm going to have a second input here. I'm thinking of three numbers.\n\nTaylor: [66:41] That'd be more fun. We can make a guessing game. It's not going to be that cool. Sorry.\n\nDave: [66:49] All right. We got our number. I'm going to make another piece of state called number, and we'll have a setNumber. We're going to initialize it to...I guess empty is fine. Whatever.\n\n[67:07] I want to put a log up here that says \"update,\" and we're going to print out the name. When I change the name, you can see it's printing out the update because every time the name changes, it reruns the effect. If we've got this other input, every time I change the number, it's also rerunning the effect.\n\n[67:42] This might not be what you want. Maybe you only want to rerun this [inaudible] . It doesn't need to run when number changes, it only needs to run when name changes. Right now, this effect is saying, \"I want to synchronize the title with the name, but I want to synchronize it on every single render. Any time anything changes, rerun this, make sure everything's up to date.\"\n\n[68:03] We can limit useEffect. We can scope it down to only running when certain things change, and so there's the second argument you can pass, which is an array. If we put in the name, we're saying that we should only run this effect when the name changes.\n\n[68:21] You can think of useEffect as \"if this, then that\" for your components, or \"when this, then that.\" Like, \"When name changes, rerun this thing,\" and without the array it's like, 'When anything changes, rerun this thing.\"\n\n[68:36] Now because we have name here, if I change the name, you can see it's updating here like it was before, but if I change the number, it's not updating. It is still re-rendering, and I can put a log render. We got a renderer, see, a renderer, and then it printed this. This runs after [inaudible] . I mentioned that, but this proves it.\n\n[69:02] If I change this high, we got renderH, renderHigh, and then type the numbers. It's still re-rendering, but it's just skipping the effect, because it only depends on name. You can have multiple elements in this array. If this thing depended on number and name for whatever reason, then you can do this.\n\n[69:35] UseEffect will check all the stuff in this array before it reruns the effect. If you put nothing in the array, that's like saying, \"Well, only run once.\" Actually, we're going to get this warning because it does depend on name and number, but we didn't declare them in the array, so we're getting this warning that it has missing dependencies.\n\n[70:03] This only runs on mount. Let me save that. We see render, and we see update, and then every time I type in either of these inputs, we're going to get more renders but no more updates.\n\nTaylor: [70:19] The title never updated either.\n\nDave: [70:21] Yeah, the title is stuck. That's why this warning is there. If you're using name here, it's going to be locked, it's going to be stuck at that value if you don't put name and number in your array. That's interesting. [laughs] Something-something web sockets.\n\n[70:46] [laughter]\n\nTaylor: [70:46] Something-something web sockets. Your next course is called something-something web sockets.\n\n[70:52] [laughter]\n\nTaylor: [70:55] Ayushi points out, \"useEffect with an empty array is like componentDidMount. useEffect with no array is like componentDidMount and didUpdate, but what about simulating just componentDidUpdate?\"\n\nDave: [71:15] Like skipping the mount?\n\nTaylor: [71:18] Yeah.\n\nDave: [71:19] I think you need to retain state for that. You need to know, \"Am I in the first mount?\" You could have mounted and then setMounted. Maybe you initialize that state to not mounted, and then inside your effect, you can say if not...if(mounted), [laughs] da-da-da, the thing. if(mounted), do your stuff, and then otherwise, you're just going to call setMounted to true.\n\n[72:00] Then next time around, it's going to run that stuff. You will obviously get this one extra render, because you setMounted to true, it's going to re-render.\n\nTaylor: [72:15] Tim asks about rendering on unmounting.\n\nDave: [72:20] I don't think it renders on unmounts. The way you cleanup from an effect is you can return a function and this function will run on unmount. It also runs before the effect runs again, now you put cleanup. Now you can see how this goes. Cleanup is going to happen before every update but not the first time. There's too many things now.\n\nTaylor: [72:56] Yeah. I have to tell you why I just laughed to myself. When I was talking earlier about making bad jokes, I was just picturing somebody yelling \"Clean up,\" the way they yell \"remixed\" during songs.\n\nDave: [73:08] [laughs]\n\nTaylor: [73:11] This is a glimpse into my everyday life.\n\nDave: [73:14] [laughs]\n\nTaylor: [73:16] Ian asks if we should even be comparing these to lifecycle methods.\n\nDave: [73:20] Yeah, I think it's better to think of them as effects than as lifecycles because it's not quite the same. You'll have to be constantly trying to map in your head between, \"OK, how does this run? Does it run on mounts? Is it an update? Is it on unmounts? Whatever.\"\n\n[73:39] I think when I first started using useEffect, I was trying to think of it as lifecycles. Eventually I came around to thinking of it as \"if this, then that\" kind of thing, and using this array as a way to control \"when does it run?\" Think of this as filtering it down. Be like, \"I want it to run when name changes and when number changes.\"\n\n[74:03] Or you can use it for, I don't know, resetting a form. Once a modal value changes, reset the form if the modal became hidden or whatever. Those sorts of things. Whenever you have something that's, I guess, the side effect, like, something happened and so I want to trigger something else, then useEffect is a good place to put that.\n\nTaylor: [74:28] Justin and Mark have both asked about using refs along with it. Justin asks about, \"Could you use ref.current value instead of useState to replicate the component div update replication? Bad sentence on my part. I...\n\n[74:46] [crosstalk]\n\nDave: [74:47] Yeah, I think you can...Yeah, so you could put a ref on some DOM node and then the first time through, \"Uh, no.\" The first time through, it's going to be set. You could use your ref to keep track of that value whether it's mounted or not I suppose, yeah.\n\n[75:11] You mean set current yourself to some value like true or false or something? Could do that. I think there's an example in React docs for that. I think I've seen like that. Cool. I didn't really get to this clean-up thing. It's cleaning up between every render.\n\n[75:36] If I type in stuff here, it says render. Then it cleans up before it calls update. It's cleaning up the last effect before it calls the next one.\n\nTaylor: [75:46] [inaudible] , I hope I'm pronouncing that at least somewhat OK. There's a question about checking out how useEffect would work in our coffeemaker example.\n\nDave: [76:05] Good question. I'm not sure I used useEffect work in a coffeemaker example. What was your thought? We're not really having an effect here, we're just setting things.\n\nTaylor: [76:17] Let's see. Thinking about coffee metaphors has me just thinking about coffee in general.\n\nDave: [76:25] I could put the coffee in the title, but that is sort of the same thing. Maybe you're asking for a more complex useEffect example. We could do a focus one. [laughs]\n\nTaylor: [76:51] More alerts. 2019 is the year of the alert and the Linux on the desktop.\n\nDave: [76:58] Yeah, every year.\n\nTaylor: [77:00] Every year.\n\nDave: [77:00] Every year.\n\nTaylor: [77:02] Linux is free if your time is worth nothing.\n\nDave: [77:04] [laughs]\n\nTaylor: [77:19] Linux is a lot better than it used to be, for the record.\n\nDave: [77:26] Yeah, a lot less than the time [inaudible] . I haven't used it in a long time, but I think it has gotten a lot better though.\n\nTaylor: [77:33] It got better because I stopped using it. [laughs]\n\nDave: [77:37] Went away for long enough, but just [inaudible] in your absence.\n\nTaylor: [77:46] Instead of using addWater and addCoffee functions, could we use useEffect?\n\nDave: [77:51] I don't know. I don't think so. I don't think that would work.\n\nTaylor: [78:00] Because we need the state of how much we have.\n\nDave: [78:05] You can set state inside of useEffect, but if you're not careful, every time you set state, it rerenders, reruns the effect. Set state again, rerenders [laughs] into infinite loop. Careful with [laughs] set state inside of useEffect.\n\nTaylor: [78:28] There's this example, React.useEffect call in the chat. If it returns console.log on mounting and then has the empty array parsed in, would the unmounting be printed just once on the unmount of the component, or would it be printed multiple times?\n\nDave: [78:48] You'll get only one unmounting in that case, because the empty array is preventing it from running. It always runs the first time. The empty array says I don't want to run anymore. It prevents it from running anymore.\n\n[79:09] Then when the component unmounts, then it finally runs that clean-up function. Because the effect isn't running more times, then the clean-up doesn't need to run more times. It's always before the next effect runs, it runs the clean-up.\n\nTaylor: [79:25] Nice. Good question.\n\nDave: [79:32] I think I have a diagram of an idea of how useEffect runs, if I can find it.\n\nTaylor: [79:46] I did like your slides earlier. That was pretty cool.\n\nDave: [79:50] Thanks. It's part of the talk.\n\n[79:52] [laughter]\n\nDave: [79:53] It's part of the talk I'll be giving in a month or so.\n\nTaylor: [79:59] Do you need to put in the plug? Where's your talk at.\n\nDave: [80:02] I'm speaking at React Boston in the end of September. The 21st, I think. I don't know if there are still tickets or not, but if there are, it's a cool conference. I'm looking around for that file, because I just made it pretty recently.\n\nTaylor: [80:27] Can you describe the diagram? [laughs] What type of diagram was it?\n\nDave: [80:32] Here we go. This is easier.\n\nTaylor: [80:34] I'm picturing a wall with a thumbtacks and yarn. That is not what I was picturing at all.\n\n[80:42] [laughter]\n\nDave: [80:43] There is no thumbtack. There is no yarn. Oversold.\n\n[80:49] [laughter]\n\nDave: [80:55] It's a cycle, I guess. Unmount, the thing runs. It cleans up before it rerenders, and then the effect runs. Eventually, it cleans up on mount. If your array is empty, it skips this whole middle bit, and then you get the one at the beginning, and the one at the end. If you are running update, then you got to run through this little loop.\n\n[81:23] Dan's complete guide to useEffect is good. That little coffee counter at the top of that [inaudible] , you need 67 cups of coffee or whatever. It's pretty accurate though. Lots coffee. [laughs]\n\nTaylor: [81:37] All this talk about coffee, I know what I'm doing when we're done. How many more examples do we have, Dave?\n\nDave: [81:48] I have a few.\n\nTaylor: [81:49] I'm not trying to rush you. I'm having a great time, just like always.\n\nDave: [81:53] That's cool. More than we can get to, I think. I can do the one on focusing. I can do the undo example. We talked about useLayoutEffect, which is not super widely used. That's probably not super exciting. Refactoring class to hooks, maybe, could be one that we do.\n\nTaylor: [82:12] Yeah, refactoring might be good. Dare we turn it over to a chat room vote?\n\nDave: [82:23] Yeah, we can do that.\n\nTaylor: [82:24] Let's see, refactoring a class to hooks versus undo example versus use...?\n\nDave: [82:36] UseLayoutEffect.\n\nTaylor: [82:39] Refactoring's winning.\n\nDave: [82:40] A lot of refactors could useLayoutEffect.\n\nTaylor: [82:45] We have awoken the sleeping giants who are demanding for refactoring.\n\nDave: [82:50] Get out of their slumber, exactly. Cool. That's good. Let's do that. We'll do a refactor with a little bit of overview.\n\nTaylor: [83:08] I guess we could've done so many things. See, everyone voted for useLayoutEffect. No, now we're going to move on to it.\n\nDave: [83:21] Cool. Let's do this. We've got a counter component here that it works fine. It's a class. It still works. It's not deprecated, maybe calling misconception, I don't know.\n\n[83:40] People think that, since hooks came out, classes are dead, not really a thing. There's a lot of React code out there that still uses classes. Most companies still have a lot of coding classes. They're not being removed from React or anything, still totally valid.\n\n[84:00] If you want to refactor your classes with hooks, because hooks are neat or whatever, let's do that. We can see this class has got some state in a object. We've got one piece of state. We've got two handler functions that, when you click these things, the buttons call the handlers, and your update state and rerenders.\n\n[84:23] Let's see how we rewrite this as a function. We're going to make a function called counter. The rendering part is going to be really similar. It's going to be cut that. I'm going to copy that. Paste it up here. This can all look pretty much the same.\n\n[84:46] The things that need to change are this.increment and this.decrement and the state because we don't have this anymore. These can be functions that are inline. Let's do the state bit first. Instead of this.state.count, we need a piece of state to hold a count. We can pull in useState. Fix that.\n\n[85:14] We can call the state and start off our counter, I'll start at 99 because it looks different than this one. We're going to pull that out, and make sure that the counter can setCount.\n\n[85:29] Now, instead of this.state.count, we can just do count. Now, we still have these two setters. We could rewrite them inline like we did before, but let's, for the sake of the example, copy these functions, and put them up here.\n\nTaylor: [85:44] How do you decide when to inline something versus not?\n\nDave: [85:50] I don't know. I like to inline things, I guess, if it's really simple. I don't know what the rule of thumb is, I guess. I was going to do setCount to count+1, I would say this is fine inline.\n\n[86:18] If we use the updater form, let's do the updater form up here. I can show you why I don't think I'd want to write that inline. This changes back to decrement. We'll make this increment. Now, we're going to have const variables up here. A lot of the syntax is same. Instead of calling setState, we're going to call setCount.\n\n[86:40] I'm going to write it as a function. This is going to take a function that gives us old count. We're going to return a new one. That'll return old count+1+1. This form of the setter, the updater form, is good if you need to update something based on the old state.\n\n[87:18] Usually, it's safe. A lot of times, it's safe to just write it as count+1. You could run into issues where, especially if it's nested inside a useEffect or nested inside a couple of functions, the value can get stale. This guarantees you're always get the latest old count.\n\nTaylor: [87:46] The latest old count.\n\nDave: [87:49] Let's do that for this one, too. We can set this to -1. These are now working the same way.\n\nTaylor: [87:59] Is it, like Ian pointed out, have it be inlined if it's a one liner?\n\nDave: [88:06] Yeah, inline if it's the one liner. That's a much better way to say it.\n\nTaylor: [88:14] Did you ever work in a code base where there were limits on how many columns you could have?\n\nDave: [88:20] I don't think I did.\n\nTaylor: [88:21] Maybe I just worked with some uptight people.\n\nDave: [88:26] Yeah, maybe, I don't know.\n\nTaylor: [88:29] We weren't allowed to go over 80 characters wide.\n\nDave: [88:32] This improves that.\n\nTaylor: [88:33] That was the standard width of a terminal and the original. Cool.\n\nDave: [88:42] Pretty's...\n\n[88:42] [crosstalk]\n\nTaylor: [88:43] Prettier won't allow it. Everybody at once, \"Well, that's what pretty is for.\"\n\nDave: [88:48] That's what pretty is for. That's what pretty is for now. I've got my print loop set to 55 or something so the code can be large and still lit on the screen. This is it. We've got a function that's got a hook. We've got our inline handlers, and it's all still working, so class refactored as a hook function.\n\nTaylor: [89:17] There was a question about if classes have any benefits over hooks.\n\nDave: [89:24] I want to think the only thing that classes can do that hooks can't right now is still componentDidCatch. If you want to write an error boundary, that still has to be a class. That's like, if you want to write a component that, if your app blows up, that component will be the arbitrator or something like. It will catch that error. It can handle it instead of the app dying.\n\n[89:53] That's it though. The rest of the stuff can be done...Get snapshot before update. Snapshot before update, yeah, that can compute something and pass it into the componentDidUpdate. I don't think hooks as an equivalent to that.\n\n[90:16] The other thing is we didn't talk about useLayoutEffect. We could maybe do that really quick. Go under useLayoutEffect.\n\n[90:27] The difference between, with classes, the componentDidUpdate runs at the same time as useLayoutEffect or, whatever, useLayoutEffect runs the same time as componentDidUpdate ran. useEffect runs afterwards, I think.\n\n[90:46] There can be some timing things, timing differences. It's not really a point in favor of classes. Make sure you use the right hook, I guess. I don't know, some people still like classes because they feel more just oriented also, which is fine.\n\nTaylor: [91:08] There's been one question about, let's see...\n\nDave: [91:12] Yeah, I've been doing examples pretty long. I don't think I can do an example.\n\nTaylor: [91:18] We are going to hang out again soon, and discuss more stuff as we do. I wouldn't be upset about doing this on a regular basis, but time is a thing and everything.\n\n[91:37] Dave and I will be doing another session in the near future where we're going to be covering some of the asynchronous stuff.\n\nDave: [91:48] API requests.\n\nTaylor: [91:49] API requests, for sure.\n\nDave: [91:50] More useEffect, or chain useEffect.\n\nTaylor: [91:54] There's this question here about the counter component, \"Each time the counter rerenders, increment and decrement are redefined. Both buttons will need to be reconciled. Can increment and decrement be cached to avoid this?\"\n\nDave: [92:11] Yes, they can be. That's what the useCallback effect. You can wrap this into useCallback, and it will cache that reference, cache the [inaudible] between renders. That's actually a great case where this updater form would be needed because this Clojure would retain the stale count value without that.\n\n[92:40] It's probably overkill in this case. I would not worry about individual buttons rerendering. That's never going to be the slow point in your app. Spend your time optimizing things like entire component trees. The low-level DOM elements are the big deal.\n\n[93:05] Kent Dodds, he has an article on overapplying useEffect or useCallback and useMemo and how it made things slower and more complicated. I don't remember where that was.\n\nTaylor: [93:25] It's one of those like you learn a hammer, everything's a nail, and then you end up hitting.\n\nDave: [93:34] I would say, that feels premature optimization to me. I don't want to say everything is premature optimization. It is important, if you know something's going to be slow, to try to optimize it from the beginning. That's recreating this function. Revalidating this button and rerendering a button is not going to be slow point.\n\nTaylor: [94:00] That is it. Cool. The code will be finalized when the course material's finalized. Stay tuned for that. This is purely a live practice run through to make sure that all the questions that you have that Dave gets covered when the course material's finalized.\n\n[94:27] You will, at some point, be able to access all this code but not today. That day is not today. Sorry, I wish I had a more better way to say that. That gets us to a good spot for the day. Like I mentioned earlier, we are going to be meeting again to talk a little bit more with hook stuff, API calls, async things.\n\n[94:54] Thanks, everybody, for the thanks. It's always funny to be just me and Dave hanging out with 100 of our friends.\n\nDave: [95:03] It's been fun. Thanks, everyone, for coming.\n\nTaylor: [95:09] Follow Dave on Twitter, @dceddia, if you want. If you want to follow me on Twitter, I don't tweet about code too often, mostly complaining about music. @taylorbell is my Twitter but anyways.\n\n[95:25] Cool, thanks, everybody, for joining. We'll be sending out an email when it's time to schedule up the next session. Stay tuned for that.\n\n[95:34] Do you have any list minute things, Dave?\n\nDave: [95:39] No, I don't think so. If you're on my email list, you'll hear about the next session, or if you're in the Egghead Community.\n\nTaylor: [95:57] If you're not on Dave's list or the Egghead Community, I have no idea how you got here, but I hope you enjoyed it. Cool, thanks, everybody.\n\n[96:09] We will talk to y'all in the near future.\n\nDave: [96:12] Cool. Bye, everyone.\n\nTaylor: [96:13] Bye.",
        "casting_words_order": "zeLH",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream",
        "path": "/lessons/react-pure-react-intro-to-react-hooks-livestream?pl=pure-react-livestreams",
        "http_url": "http://app.egghead.af:5000/lessons/react-pure-react-intro-to-react-hooks-livestream?pl=pure-react-livestreams",
        "http_short_url": "http://app.egghead.af:5000/s/7wamq",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-intro-to-react-hooks-livestream-Hkwk7Vv5S/scikit-learn-pure-react-intro-to-react-hooks-livestream-Hkwk7Vv5S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
        "series_row_order": 6815739,
        "series": {
          "title": "Pure React Livestreams",
          "description": "Live stream events for the course modules.",
          "duration": 49263,
          "slug": "pure-react-livestreams",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-livestreams",
          "path": "/courses/pure-react-livestreams",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875174,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-intro-to-react-hooks-livestream/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5396,
        "creator_id": 9671,
        "slug": "react-pure-react-use-hooks-for-api-requests-livestream",
        "title": "Pure React Use Hooks for API requests Livestream",
        "state": "bundled",
        "summary": null,
        "duration": 6227,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Dave: [00:05] Let me move some Zoom [inaudible] around here.\n\nTaylor: [00:09] Try hiking the West Highland Way. I'm writing West Highland Way down right now.\n\nDave: [00:12] I want to go to Scotland. That would be really cool. I've never been. Let me search here in this.\n\nTaylor: [00:25] Hey, Liz. Hope the Bay is nice today. While Dave is getting set up, I want to remind everybody that the purpose of this event is to ask questions. Dave is putting together this material. We want to make sure that we're covering that y'all need to know. The way we do that is if you ask us questions. We are not going to provide a recording of this. We're only recording it to make sure we get the questions.\n\n[00:55] All of this material and the code and stuff, you'll have access to eventually when the course material is done. This is like a sneak peek. Dave appreciates your help. I think he appreciates your help. I don't mean to put words in his mouth.\n\nDave: [01:10] [laughs] Very much so.\n\nTaylor: [01:13] The whole point of this, we're going to hang out, have some fun. I am entertaining myself, and hopefully at least some of you, I guess. The whole point is for you to ask questions to make sure that Dave can teach as effectively as possible. Yeah, don't be shy. There are no dumb questions. Take it from me. Anyways, with that, now that I've said my piece, if you want to take off, Dave, you're good to go.\n\nDave: [01:49] Welcome, everyone. We're going to be talking about doing API calls in React today, specifically with Hooks, although a lot of the API stuff is kind of...Well, you'll see. API calls, they seem like this big, scary thing, but it's really a pretty small part of a React app. I think really just how you do API calls is, once you figure it out, it's not too bad.\n\n[02:14] As an example, we're going to have this little pet store where you've got a pet here and nothing works yet. We're just rendering static data. No API calls yet. We've got useState, which is creating some state for us to maintain our pets. We're initializing it with this list of static pets. I just have pets.js. It's literally just an array with objects in it, and these photos are Base64 and terrible to read.\n\nTaylor: [02:46] What happens if you change some of that, like all the ICAG?\n\nDave: [02:50] That's a good question. Hold on.\n\nTaylor: [02:54] This is secretly a live stream about Base64 encoding.\n\nDave: [02:58] I'm just going to change a couple of letters and save it.\n\nTaylor: [03:02] It becomes a cat? No.\n\nDave: [03:03] That's broken down. That's not a cat.\n\n[03:06] [laughter]\n\nTaylor: [03:06] All right, maybe not. [laughs]\n\nDave: [03:08] It's broken forever now. [laughs] There we go. We get this test. [laughs] [inaudible] , it is actually coming from this file, as you just saw. We're just importing this and rendering it out. This is standard React render a list kind of stuff. We're mapping over the list and rendering out LIs.\n\n[03:32] This pet component is taking care of all this stuff. To show you what's going on with this. It's just [inaudible] , we've got the photo, if there is one. We got that name that's clickable or will be at some point. Got the kind of the pet, which you can see it says dog. If I mouse over it, it gets overwritten by...\n\n[03:53] [crosstalk]\n\nTaylor: [03:54] Oh, that's not a picture of fried chicken. That one thing, dog or fried chicken for machine learning. Never mind, I'll try to keep the voices in my head quiet.\n\n[04:07] [laughter]\n\nDave: [04:07] I know nothing about machine learning. [laughs]\n\nTaylor: [04:12] All right. I'll find a picture for the chat, just so. I'm good at making references nobody gets.\n\nDave: [04:23] Pet component, it's rendering this thing. Let's start off by replacing the list of stuff with stuff from the server. I have a pretty simple server here. We're using JSON sever, which is a package that lets you give it a JSON file and it gives you a complete REST server, which is super helpful. I've got a little bit of code around it to throw in a pause.\n\n[04:52] You'll see some delays when it fetches stuff, so that we can get loading spinners working again. We can see how that all works. We got some validation here. Other than that, pretty much all the heavy lifting is done by this JSON server package. I have the server running in a terminal over here. It's just sitting there waiting for stuff. Let me swap back over here.\n\nTaylor: [05:20] On the LA, is it still a best practice to use keys for the LIs?\n\nDave: [05:27] Keys are still a thing. That hasn't changed. I don't think that was ever changed for React. That's been a thing for a while. Keys are good. Make sure they're unique to the object and not random every time you render or something. It also might where you have to use the index.\n\nTaylor: [05:47] Yes. Not just the index, and then don't use key equals pet, like just pet but the whole object.\n\nDave: [05:55] You could do that. That actually would work fine as long as you don't have duplicate pets. Whatever, you wouldn't anyway, I suppose.\n\nTaylor: [06:07] Would it render all weird, though?\n\nDave: [06:09] I think it would be fine. If you ever modify one, you have to make sure you do it immutably. Otherwise, the reference wouldn't change. That could cause some weird issues. Usually, you use whatever simple values for these things like strings and numbers.\n\nTaylor: [06:32] Simon asks, \"Is index fine as long as the order doesn't change often?\"\n\nDave: [06:39] Index will work as long as the order doesn't change. If you're sorting the stuff, then index can be a problem, inserting things in the middle or whatever. If you have a static list like this, pretty safe to use index, I think. We're going to be changing it. We'll be adding stuff. We'll go with the ID.\n\nTaylor: [06:58] Cool. Then, there was [laughs] another question about before we go back, should the key be unique only in this loop or the whole document?\n\nDave: [07:09] It needs to be unique for this particular array. It doesn't have to be for the whole document, just for this one map, basically.\n\nTaylor: [07:20] There was a question about what is inside of db.json. Is that for our fake API?\n\nDave: [07:29] Yeah, this is our fake API. It actually has the same dog in it, same photo and everything. It's just an object with a top-level key called pets. This is how JSON server knows that there's going to be a /pets URL that's going to return these.\n\nTaylor: [07:46] Cool.\n\nDave: [07:47] Let's do the API call, and we'll see how we interact with that. We want to fetch the data when this component first mounts, when it first renders. We're going to use the use effect hook that we can import from React. At the top of our component underneath this data, I guess we'll call useEffect. Just like this, it's going to get called every single time the component renders, which will not be good.\n\n[08:16] Actually, we can try this and see what happens. Inside here, we're going to fetch our data. We can use the fetch function, which is a standard JavaScript API. That was weird. We've got it running on local host 3001/pets. Then, we're going to take the response. I'm going to use promises. This returns a promise. We're going to chain off that promise. Take the response and call.json on it.\n\n[08:51] It'll parse the body as JSON, and then we can get the JSON which is just the pets we call set pets with that new array of pets. Let me change this. Instead of pulling in our static pets, we'll start off with an empty array. This is going to infinite loop, so let's see what happens. Cool. See how it renders the pet, it fetches more pets, it renders a pet and fetches more pets again.\n\n[09:26] Let me fix this real quick then we can talk about how we fixed it. [laughs] Use effect by default will run on every single render. Then, inside that use effect, we're calling set pets, which is going to change the state, re-render again, which we call use effect again. Take off another fetch, so we end up with this infinite loop of requests. The way we fix that is we supply the dependency array.\n\n[09:53] We're saying that this effect depends on nothing so that the effect is always going to run at least once. Even if you say it depends on nothing, you're going to run it on mount. That's what we're getting here. Now we only get one call, and we're rendering our pet from the server. If I refresh, we'll see that we have nothingness for a second, and then it comes back.\n\n[10:17] That's our little server delay, just so we know it's actually coming from the server. We can implement the loading spinner now. We'll pause for questions.\n\nTaylor: [10:30] Is there an advantage to using fetch versus Axios?\n\nDave: [10:35] The main advantage with fetch is that it's built into the browser. It's like one less dependency. You might need to polyfill it for other backwards compatibility with other browsers, but for the most part, modern browsers have fetch built in.\n\n[10:51] I do like Axios. It's another dependency you install, which is the downside, but the Axios API is nicer, you don't have to do, \"This person is,\" JSON step. I think Axios' error handling is nicer. If you want we could try that out in a bit and add some more calls.\n\nTaylor: [11:09] There's a question about stuff, like we actually have a few questions about, what's happening inside of useEffect? I know that I did get an email question from Julie, earlier, that we might touch on later, so I won't bring that one up quite yet. For useEffect, there's a question about using useState inside of useEffect, like, is that OK?\n\nDave: [11:34] All the hooks have to be called in the same order every time the component renders. If you were to put a useState in here, and whatever, so, in this case, it's only going to run once and then never again. No, you should call hooks outside of useEffect. Don't call up any hooks inside useEffect.\n\n[11:59] If you do need to use it conditionally, if you wanted to only run useEffect at a certain time, or something like that, or, check some condition, don't wrap it with an if. You'd want to put the if inside the effect and wrap the contents, so that then the effect is going to run whenever it runs, but then you can control inside.\n\nTaylor: [12:22] The setPets, why is it OK for you to use the setPets, then?\n\nDave: [12:30] It's OK to call setters whenever you want. You can call the setter function from inside an effect, you can call it from inside a click handler, or something. You just can't like initialize folks inside effects.\n\nTaylor: [12:44] OK, cool. Another question about what we're doing inside of useEffect is if it's OK to use async/await?\n\nDave: [12:54] Yeah, we could use async/await, too. Your first inclination with that, so if we were going to await the fetch call, we could write it like...Actually, I'll just leave this here. Let me just copy and paste it, and I'll do like the async/await version above. If we wanted to await the result, say we await the response, we get the response here, and then we say, pets=awaitres.json, and that's effectively the same thing.\n\n[13:33] Then we would call setPets with the pets, so these two things are equivalent. If you're going to call await, you have to do this inside an async function. Your first inclination for that might be to say like, \"I'm just going to put async here.\"\n\nTaylor: [13:51] That would have been my first inclination, you are correct.\n\nDave: [13:54] That will solve the JavaScript syntax, but React doesn't like this. It doesn't want the effects to be async functions, because these things return promises. One of the features that we're not using here in useEffect is that you can return a cleanup function. If this is like a promise one, then, when does this run? Does it have to wait for it to happen or something? I don't know, it throws a wrench in the works.\n\n[14:25] The fix for that is to do your fetching stuff inside a nested async function. You can write a new function in here, we're calling this, do whatever you want to do, but, get data, and then you do your fetching inside here and just kick it off. You can call async functions, you just can't await outside here. Then, current that out, we should still get our pet.\n\n[14:58] That's the trick if you want to use async/await, just put it in a separate function.\n\nTaylor: [15:02] I guess there's the question of the benefit of using async/await. Would it be fair to categorize it as the same as using an error function where the result's the same, it's just a different way of typing it?\n\nDave: [15:18] I think so, yeah. Sometimes, if you have a lot of dependent code or dependent promises, like if you had many multiple chains, or like a deep-chain kind of thing where like this then had its own set of promises, more chaining inside of it, or something, then, async/await might be easier to read.\n\n[15:41] I think for something simple like this, honestly, I'd rather just write it this way and chain off of the promise, rather than have to make variables and put stuff into varied variables. It's up to you, though. If it's easier for you to read this, do it that way, do it this way, it doesn't really matter, it comes up to be the same.\n\nTaylor: [16:02] Do you need to resolve the promise inside of useEffect? You're calling set X, would you need to resolve?\n\nDave: [16:12] You don't need to, because we're not waiting for this. This is effectively the same thing as return undefined, so this promise will resolve as undefined automatically, but we're not waiting for it or anything, so it doesn't really matter.\n\nTaylor: [16:28] Then, just for our friends who might be new to hooks, could you explain where pets and setPets like on line seven? Just a quick reminder of what's going on here.\n\nDave: [16:42] When we call useState, this creates a piece of state and we give it an initial value, so here we're giving it the empty array as the initial value. You can pass in whatever you want here, you can use a number or, you can use a string. The first time you call this, that initial value is the value of pets. It returns us to this array with two elements in it.\n\n[17:05] The first is the piece of state, it's the value. The second thing is a function that will let you change that state. We can call setPets and give it a new value and React will re-render the component, whenever you change state. Initially this would be an empty array, then after this effect runs, then after setPets happens, it's going to re-render, and then pets is going to be an array with this one dog in it.\n\nTaylor: [17:38] Nice. There's one last question for this section for now, is about error handling if the fetch fails.\n\nDave: [17:47] Yeah, we'll talk about error handling in a bit, because we're going to do some more calls and we'll get into error handling area.\n\nTaylor: [17:53] Maybe, we'll make mistakes the old-fashioned way. I don't know.\n\nDave: [17:59] Possibly. I don't remember.\n\nTaylor: [18:02] Most of our mistakes come from me having you test random stuff. It's when I go off-script is when I have to be roped back in, once in a while.\n\nDave: [18:13] I'm going to comment this out and just leave things around as we go here. Cool. We noticed that while it's loading the pet, we just have emptiness. It would be cool to show something that's loading, like maybe some little loading indicator while this is happening. A way that we can do that is we need another piece of state to keep track of whether a request is in progress or not.\n\n[18:41] You think of it, right before we call fetch, we want to say, loading is true, and then once it's done, we want to say loading is false. We need a piece of state to hold that. We can call useState, again, and we'll say loading is going to start off false. This returns the array of two items. The first is the value, we'll call it loading, and the second one is the setter for that value, we can call it set loading.\n\n[19:10] Then, for the fetch, we'll call set loading, pass it through, and then, whenever it's done, we can...Let me just expand this function into two lines, and then we'll call setPets and say set loading false. We can also do this in a finally, so that if there is an error...This is a new thing but if this works...\n\nTaylor: [19:41] Finally, that's the way I always say it.\n\nDave: [19:44] you can do this. I think this is relatively new, right?\n\nTaylor: [19:50] Yeah, they finally added it.\n\nDave: [19:52] Yeah, they finally added it, either way. Cool. It doesn't look any different, because we're just setting some state, we aren't actually displaying anything based on that state yet. Let's add some stuff here. If is loading is true then we can render out like a div class of loading. This says like, loading, and otherwise, we'll render this stuff.\n\n[20:27] Since there's two elements here, we have to wrap it in an element. I'll use a fragment, so that we don't end up introducing a wrapper element. Just put it in and close that.\n\nTaylor: [20:40] Yeah, the fragment thing is pretty cool, like the empty tags.\n\nDave: [20:43] Yeah. Easily is not defined, cool.\n\nTaylor: [20:48] That's because you called it just loading.\n\nDave: [20:51] Yeah, I just called it Loading. I guess loading is a better name, anyway.\n\nTaylor: [20:55] It is.\n\nDave: [20:56] OK, cool, look at that. You see like flashing loading and then it all comes in. Yeah, I think that's it for loading here.\n\nTaylor: [21:06] Anybody have any questions about the stuff Dave just did, the conditional rendering, having a separate state thing being tracked, the fragments?\n\nDave: [21:23] One thing I wanted to mention, actually. When I had the set loading in here, you could do this. It doesn't render the component twice, so it'll batch these things together and do one render, in case you were wondering. This isn't like an immediately render, it's like queue-up render.\n\nTaylor: [21:43] Today I learned that.\n\nDave: [21:46] There is a .catch. We can do .catch, too. Finally, is just a combination of then and catch. After everything happens, run that. If I was going to put this in a catch, I could do it, but then I also have to handle it in a then case, so I would end up with having it in catch and also in there. You're like duplicating the thing. Finally, just works around that.\n\nTaylor: [22:20] No need to import fragment.\n\nDave: [22:22] Yeah, ever since React 16-something, they finally added the actual fragment syntax, way nicer than typing out React.fragment.\n\nTaylor: [22:34] Yeah.\n\nDave: [22:35] Cool stuff.\n\nTaylor: [22:36] Cool. Thanks David, for the assist, and Tim. This is why we chat. We're all friends here.\n\nDave: [22:44] I can add some stuff and just, something.\n\nTaylor: [22:53] Have a good one, Alex. Thanks for coming by.\n\nDave: [22:56] Cool, see you. Instead of doing set loading in a catch you could do error...Yeah, you could do error handling in a catch. We'll see an example later when we do fetch and do error handling. Actually, maybe we'll do that now. What are we doing right now? Adding a pet. Yeah, so we'll be getting into that in a second.\n\n[23:18] Yeah, so this add a pet button doesn't actually do anything yet. We want it to pop open like a modal dialogue and like you type in a pet name and stuff. We're going to install React Modal, instead of writing this from scratch. Whenever that's done, we can restart the server.\n\nTaylor: [23:42] While it's loading, can you adjust state, so, for example, set loading using async/await or do you need to because it's a state hook?\n\nDave: [23:54] I'm not so sure what you mean. Do you mean like calling one of these setter functions inside of an async function, or do you mean like awaiting...?\n\nTaylor: [24:08] Instead of a then.\n\nDave: [24:09] Yeah, we could do it up here, too. We could've done the same thing, like here. I'm just going to comment that out now, but, yeah, this would've been the same, had the same effects, anyway.\n\nTaylor: [24:32] Yeah, it illustrates how you were saying earlier that since you're only doing two thens, well, now you've got a Finally, too, but sometimes the \"old\" way is fine.\n\nDave: [24:46] It is a little different, actually, in this case. If this thing threw an error, the finally would set loading to False, and if this one threw an error, it would just give up. We'd be stuck forever.\n\nTaylor: [24:58] It would give up, just like me when I get an error or something, it's, \"Well, I'm done for the day.\" It's 9:45 AM, \"I'm done for the day.\"\n\n[25:11] [laughter]\n\nDave: [25:13] Network error, time to go home.\"\n\nTaylor: [25:15] Yep.\n\nDave: [25:16] OK, so let's do this add a pet thing. We've got React modal is installed. Server is back up. Let me import. Go to, import Modal from React modal. Then we'll have this dialogue. I'm going to create a separate file for this. The way the modals work is we render it down here and we can tell it whether to be open or not.\n\n[25:49] Since the modal is going to have a forum and all this other stuff, we're going to put that in a separate file. We're going to make a file called New Pet Modal, and we'll do this here. Let's do New Pet Modal and ready to use our...Move it over here. Let me just import that over here instead. Inside this component we're going to render the modal.\n\n[26:25] React modal, these things take an Is open prop where we can pass in, where we're actually going to pass in a few props to our New Pet Modal. Is Open, we'll have an onCancel, and then, we'll have an onSave that we can handle when you click save or cancel.\n\n[26:44] Then we'll pass these open through to the modal, and this is on request close prop that it's going to call if you hit escape or you click outside the modal it will call onCancel. Right now, let's just say this is New Pet. We won't do anything with onSave. We're going to import our New Pet Modal. We'll render one of those down below our button.\n\n[27:27] Even though we're putting it below the button, it doesn't actually matter where we put this in the hierarchy, it's just going to appear on top of everything. Full pass is open, true, and let's just see what it does. That renders. After it renders, we have our New Pet Modal.\n\nTaylor: [27:46] Is it going to say, \"Subscribe to my newsletter immediately,\" and cover the entire blog post? That's like the worst invention of that ever.\n\nDave: [27:57] Yes, as soon as it loads. If we click outside, it will, but we're not.\n\nTaylor: [28:03] You should join Dave's newsletter, though. I didn't mean to say it like that. There's still a lot of valuable newsletters to join. I just don't like...\n\nDave: [28:11] Newsletters are good. Those media pop-ups, though, are annoying.\n\nTaylor: [28:14] It's the media pop-up that drives me nuts.\n\nDave: [28:20] Cool. New URL is in the wrong file. Yes, but, wait a second. Actually, the reason I left that there is because, let me open this is up, React modal gives you this warning that you have to tell the modal what your app element is, and that's actually just this document creator, select your route element. This is, it tells you, this is so the screen readers don't see the main content when the modal is up.\n\nTaylor: [28:55] Nobody can see the main content when the modal is up.\n\nDave: [28:59] We'll just save this into a variable and pass that in here and then, we can also call modal.setapp element, pass that through here, and then we'll just get rid of that warning and make it much better.\n\nTaylor: [29:19] Nice.\n\nDave: [29:23] Add some more stuff so we can actually close this thing. We need to be able to keep track of whether the modal is open or closed. When you click the button, we'll have to set something that keeps this state true and then when you close it set it false.\n\n[29:41] We could make a piece of state call it new pet is open, and then set up a function for that, so new pet, or I don't know, new state and we're going to start off false. If we do this, it's not a huge problem, but we'll have this setter and we want to be able to just set it tor false, so what we'll have to do is onCancel we have to write the function like an inline function here that calls set new pet false.\n\n[30:21] Then we'll pass in our is open, I guess is like, is New pet open, to make it something else. New pet is open. Awesome. That's actually [inaudible] .\n\n[30:36] [laughter]\n\nTaylor: [30:39] Thanks, Past Dave.\n\n[30:40] [laughter]\n\nDave: [30:41] Exit my notes here. When you click add a pet, we'd have to call on click. We'll call set new pet true. Let's see if this works. Click add a pet. The variable goes true. Modal shows up. Now we can click outside of it or we can escape, and it'll close. This is a little bit of friction here. I think this is a common enough pattern where you end up with some sort of Boolean you just want to flip back and forth.\n\n[31:23] We could extract this into a custom hook. We could do that really easily if we make a function called use flag. Maybe it takes in initial value. We basically do the same as this. We'll call it value. Function will be setValue and it'll be started off with initial. Instead of just returning the value in the center, we can return a value and setTrue, and a setFalse. We can [inaudible] this so that they just do the one thing they need to do.\n\n[32:08] We'll have a setTrue that will be a function that calls setValue to true, and then one for false. We can change this to...What did I call this? Open new pet and close new pet. Now the function names are a little more descriptive of what they do. We can call use flag that's in false. Now instead of having to write these old functions, we can call onCancel, we're going to close new pet.\n\n[32:55] On click here, we can open new pet. This works. There's one little problem with this that isn't really visually apparent is that this thing gets called every time the component re-renders, because this is just a regular function called calling into here. It's going to recreate these two values every time, which our component doesn't really depend on but it breaks the contract from use state.\n\n[33:28] Use state actually returns the same center function every single time. We can make that happen here if we use callback. I'm actually going to extract this into another file before we go through the hassle of importing something. [inaudible] custom hooks. We need to import useState and useCallback in React. [inaudible] useCallback.\n\n[34:08] What this will do is just make sure that it'll create one version of this function and only recreate it if setValue changes, and this will never happen. We'll be all set. These will work the same as our setState ones. I'm actually not sure if we need to pass these at all, because I think it will ignore those.\n\nTaylor: [34:33] Can we walk through what we just did one more time?\n\nDave: [34:36] Yeah.\n\nTaylor: [34:39] Can I try to walk you through it and then you can tell me where I'm...\n\nDave: [34:43] Let's do that. Let me fix my code first.\n\n[34:45] [laughter]\n\nDave: [34:46] We need to import useFlag from custom hooks. Don't close it, just save it.\n\nTaylor: [35:01] [laughs] Now I feel like I'm on the spot. I don't know why I didn't feel on the spot before with 70 people here.\n\n[35:06] [laughter]\n\nTaylor: [35:08] I'm doing this for you, Allen. Allen stayed up late so that he can watch this. [laughs] Let's go back to index.js. Then down where we have the buttons for the modal stuff.\n\nDave: [35:25] We've got our button and our modal.\n\nTaylor: [35:28] What we used to have is on click would be set is modal open to be true, using the is modal open state. Then the onCancel on line 58 there was...OK, line 59, sure. We would do the arrow function where it would call setModal open false. The dog is just to look cute. That question I know the answer to. When we scroll up, we're not using the [inaudible] .\n\n[36:24] When you scroll back up, Dave, we're not using the setModal open state hook anymore because we've extracted it into a new custom hook called useFlag, right?\n\nDave: [36:42] Mm-hmm.\n\nTaylor: [36:43] When we call useFlag, it's array destructuring. Is new pet open? Is the first item of an array being returned by useFlag? Which makes open new pet the second item, and close new pet is the third item being returned from the array that useFlag is returning. We initiate those values by...When index is loaded and rendered the first time, it calls the useFlag function with a value of false.\n\n[37:23] In custom hooks JS, our initial value is false. We're using the use state hook to set the value of false. We're not using the flag, so the value is false.\n\nDave: [37:40] Yeah, the value is initially false.\n\n[37:42] [crosstalk]\n\nTaylor: [37:42] Then setTrue is a function that we are passing the setValue. We're going to set the state to be true, but we have to use useCallback, otherwise every time it re-renders, it will make a new version of the state that's not actually controlling whether the modal is open or not.\n\nDave: [38:09] No. It will remember the last state because useState will do that anyway. It will remember whatever the previous value was, but if we write these the way we had them initially...Those [inaudible] , whatever. If we write these the way we had before, this is setting a variable called setTrue to a new arrow function. It's creating an arrow function right here.\n\n[38:46] Every time you run this line it's going to make a new arrow function.\n\nTaylor: [38:49] That's why I get a B on what I just did instead of an A.\n\nDave: [38:58] Yeah, that's 90 percent there.\n\nTaylor: [39:02] I was a solid C+ student in my computer science classes. I'll show them.\n\nDave: [39:08] You got it.\n\nTaylor: [39:10] Yeah, useCallback is what...That's where I got lost. Richard asks, \"Is useCallback some sort of currying?\"\n\nDave: [39:23] It's not currying. You're passing a function here. The first argument is a function, and it's more like memoization. It remembers the value, the old function. Let me get rid of this one. The next time through this function when we call useCallback again with a new arrow function, this will be creating a new one, useCallback is going to say, setValue hasn't changed, so I'll return the last one you gave me.\n\n[39:56] Every time you come through here, you're going to get the first one you ever passed in. In this case, that's fine because we're depending on setValue, which isn't going to change, but we also put it in the array.\n\nTaylor: [40:10] Cool. Sean has dropped a little nugget from the docks. Somebody here, RFTM, I guess, from the docks, useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. In that case, setValue is the dependency, and that's why it's in the array as a second argument to useCallback.\n\nDave: [40:36] Yep, and in this case it will never change because useState always returns the same set or function.\n\nTaylor: [40:43] Right on. There's a lot more arrays with hooks now than there used to be.\n\nDave: [40:48] Yeah. Since this is a custom hook, we can return whatever we want here. We can make this an object that has things called valueSetTrue and SetFalse, but then we'd have to rename them over here. Take it or leave it, you don't have to write your own useFlag hook if you don't want to, but it's neat that you can give these descriptive names instead of having to write those functions in-line.\n\n[41:15] If you made this an object, you'd have to rename them. It would make this messier.\n\nTaylor: [41:21] Does anybody have any more questions for now about my understanding of what Dave is trying to teach us? Do you need to remember the order that you exported them from the array? That would be the catch.\n\nDave: [41:39] Yep. That is the catch.\n\nTaylor: [41:41] Not really a catch because...\n\nDave: [41:43] I feel like if you're versed in the open and close, you'll be very confused. That is the downside of that.\n\nTaylor: [41:51] All right. Cool.\n\nDave: [41:53] Adding pets. We're adding pets, right?\n\nTaylor: [41:56] Yes.\n\nDave: [41:57] We have this modal now. Let's fill in the modal and we can do more stuff. I'm going to tweak my notes over here, and I'm going to paste in a form because I don't think you want to watch me type this out. Inside here, we're going to have a form. There's a lot of stuff. This is all blowing up because setModalOpen is not a thing.\n\nTaylor: [42:38] Because we had pet...\n\nDave: [42:39] Because I wrote extra onClick handlers and cancels, and there we go. OK. In our new pet modal, we're going to have a form that displays the photo, and you can change the photo. We got a name and a kind, so like, Watson and dog. We need a bunch of state for these things. We need to keep track of the name, the kind, the photo, and also if there are any errors from saving it.\n\nTaylor: [43:13] [inaudible] things.\n\nDave: [43:18] Let me change this function to a function body, or return this stuff. Save, put it here. Cool. Here's all the errors. Let's create some state for these things. We now pull in our useState hook, and I will paste in some stuff here to save some time.\n\nTaylor: [43:49] Allen asks an interesting question. Well, I think it's interesting. He thinks it's interesting or he wouldn't have asked it. \"Would it not be handier using a class with all of that state?\"\n\nDave: [44:07] Yeah, you can make it a class component instead if you want. That would be fine. There's a few different ways you can do this. You can do it this way, you could use a reducer that handles all the different changes and centralize all the state management.\n\n[44:30] The nice thing about this is that you've got these setter functions that mostly do what you need them to do, so you can write these really short little in-line, \"Set name to the new input value,\" whereas with a class, this would need to be this.setState in an object, and you set the name to this.\n\n[44:49] It would be a little bit wordier, or you end up making a handler function, and then you've got a bunch of them all over the place. It's a little bit shorter, but certainly there's a tipping point. Four is probably not too bad. You had a bunch of pieces of state, then maybe pull them out into a reducer, maybe consider a class if you want? I don't know.\n\nTaylor: [45:10] Or break this into sub-components, I guess.\n\nDave: [45:14] Yeah, you can break it into sub-components.\n\nTaylor: [45:16] Ansel points out about classes having some overhead. It's true. Things seem, and by seem I mean most of what I see these days is shifting towards hooks. I'm of the opinion that it's still important to know how classes work so when you see it in the wild, you're not like, \"What is this?\"\n\n[45:48] It's funny because right now people coming from classes will look at all of the stuff on lines five through eight, and they might be like, \"What is this?\" Things are gradually working their way to be all hooks.\n\nDave: [46:04] It feels that way, but classes still work fine. They're not being removed or anything. If you want to write classes, you can do that instead. You're also not forced to put each piece of state in its own use state. You can call useState with an object with name, timed, whatever. The only trick with this is that useState, the set of functions don't merge the new values with the existing ones like setState did.\n\n[46:35] You'd have to be a little more careful about how you immutably update things.\n\nTaylor: [46:40] Yeah. That's a huge difference.\n\nDave: [46:44] Lots of ways to, I don't want to say skin this cat.\n\nTaylor: [46:50] Yeah. Earlier today, I was talking about killing two birds with one stone, and then I realized how violent all these animal metaphors and things are.\n\nDave: [46:58] I know. We're making this pet store, so maybe we should be friendlier to the cats.\n\nTaylor: [47:04] Yeah.\n\nDave: [47:04] We've got the state stuff. This is going to take care of most of the undefined stuff. Photo input is still a problem. It's an input of type file. This is going to give us a little file chooser thing. Actually, I'll just show you what it looks like. Click add a pet. You can click on choose file and the browser will prompt you to open this thing. Maybe we can pick a [inaudible] . Here is your [inaudible].\n\n[47:33] The file input knows what you've chosen, but file inputs, for security reasons, they don't let you give them values. We can't write this like a value onChange like a regular controlled input. What we'll do instead is create a new ref to it, call it photo input. I'm just going to undo, now we had that before, and I'm going to import useRef, then we'll call useRef, input this into photo input.\n\n[48:09] UseRef, if you haven't seen this before, this creates an object that can be used to refer to downloads or any value you want, typically downloads. Once this component mounts, this photo input thing will give us access to the actual input element, and then we can get the file out of it. While we can't supply a value, we can give it an onChange handler. We'll do that in a second. Cool.\n\n[48:48] Let me jump to next version in my notes here. This updatePhoto function, when we change the file, we want to read that file off disk and actually display the photo. I'm going to paste this in here. This is like a Stack Overflow kind of function.\n\nTaylor: [49:11] Stack Overflow driven development.\n\nDave: [49:14] Yeah. This is nice. There are some Stack Overflow examples from jQuery and stuff, and I was like, \"Ah, so it's using a file reader, so we use file reader.\" What this is doing is...needs to separate that out. We're pulling the file out of that input. Photoinput.current is letting us access the actual file picker thing here. Once that file is found, were going to create this file reader thing. This is like a browser API.\n\n[49:42] It's built into browsers, modern browsers anyway. We set this onLoad end function, which the reader is going to call once it's done reading the file, and then we call read as data URL, pass in the file, and then it will call. It's, this happens, then this happens, and this happens, then this. Then finally, once the file is done reading, it will call setPhoto with the result of that reader thing.\n\nTaylor: [50:14] You've just altered the way that I look at uploading an image for the rest of my life. I just took a lot of that for granted, and realizing that I've never actually implemented a photo upload before.\n\nDave: [50:27] I was glad that it was so simple, because when I was putting this example together, I was like, \"If this is actually really complicated, I'm probably going to skip the photo bit.\" This isn't too bad, right?\n\nTaylor: [50:39] Yeah.\n\nDave: [50:40] This is reading it is as data URL, raise it in as that crazy Base64 thing which we saw in here that's this mess. Then it's just a string. I don't know if this is the best way to do photos. I think actually, for a real app, maybe don't do this. It works with this example for small photos maybe.\n\nTaylor: [51:04] It works for animal photos.\n\nDave: [51:08] Only very small animal photos.\n\nTaylor: [51:13] Yeah. What would you get from reader.result Is it just a blob?\n\nDave: [51:19] Yeah. Reader.result actually is that string. We're setting that into this photo, the state here we had. We pass in photo into the image tag. Image source equals photo. Image tag's a maybe lesser-known thing. You can pass in strings like this, that start with data:image, whatever Base64 stuff, you can pass this directly into an original, display it. That's what's going on here. That's why we have a cat.\n\n[51:53] I think someone asked earlier what the dog was for. We're doing a little pet store thing, and so that's why we have pictures of dogs and cats. It's just the theme. There's no real [laughs] meaning behind it other than that. They're just fun. We've got our thing here. We can choose a file. We can give it a name.\n\nTaylor: [52:18] Oh yeah, that one. I like that one.\n\nDave: [52:21] That, save. Well, that doesn't really do anything yet. We just refreshed the page and it didn't save it or anything. Let's fill in this form thing here. I'm going to jump ahead again. Notes. When we hit save, we've got to handle that form submission. We'll have it on submit function here. This can call save pet. We'll write a function called savePet.\n\n[52:56] Take the event that the form gives us. We're going to call event.event default so that it doesn't refresh anymore. Then we can do whatever we want. We've got this onSave function. We're getting as a prop. We're going to call onSave and pass in our pet. This is really just going to be [inaudible] with name, kind, and photo. We'll handle errors, but let's do that in a second.\n\n[53:32] Actually, this is probably going to blow up. onSave doesn't do anything yet. Let's go over to index. We're calling our new pet modal. We're not passing onSave yet. Let's write that onSave thing. We'll pass it onSave. It's going to be a function. We're going to call it add pet. We'll make our function up here. Call this to add pet. This is actually going to be an async function because we want to be able to take server calls.\n\n[54:15] We'll simulate server calls in the meantime. I'll make it return a promise so we can delay. It's going to take that pet object with name, kind, and photo. We're going to basically just call set pets. We have this pets array. I'm going to do this statically locally first, then we'll turn it into an API call.\n\nTaylor: [54:43] This is the perfect time to ask about what happens when useState is used to update a complex object. Does it merge object like this doc setState in one of Allen's beloved class components? [laughs]\n\nDave: [55:03] It doesn't.\n\n[55:04] [laughter]\n\nDave: [55:04] [inaudible] is update immutably. Pets is array. We have to pass in a new array. We're going to spread out the existing array of pets and create a new one here with the name, the kind, and the photo. We need an ID. Eventually, we're going to get that ID from the server, but let's just use math.random. We'll get that id here, just so we have something for our key.\n\n[55:36] I know I said not to use random numbers for the keys.\n\nTaylor: [55:38] [laughs] You're literally using a random number.\n\nDave: [55:41] Well, hold on.\n\n[55:43] [laughter]\n\nTaylor: [55:44] Thanks, James.\n\nDave: [55:47] You don't want to use math.random here because this will make a new number every time you render the list. You can use as long as the IDs are unique and stable. This is only adding the pet once we're giving it. We could make this incrementing number or something too, but math.random, it's just easier to type.\n\nTaylor: [56:09] Unique and stable, just like me.\n\nDave: [56:12] Yeah. [laughs] See James. Let's add some stuff here. [inaudible] cat, save. That didn't work.\n\nTaylor: [56:26] [inaudible] both kinds of pet.\n\nDave: [56:29] It didn't work it out. Oh, it's adding them. It just didn't close the modal. After we call setPet, we have to close new pet [inaudible] . Of course, it didn't remember any event because this is not being saved to the server yet.\n\nTaylor: [56:48] That one's nice. I like that one.\n\nDave: [56:56] Cool. It's adding its list, closes the modal and everything. Let's also check for errors, because right now if we add...Oh, that's interesting. It remembered all the stuff. That's not good either. I was talking about that. The reason this is happening is because in our index file, we're always rendering the modal.\n\n[57:20] This component, even though it's sometimes displayed, sometimes not based on this prop, it's always rendering this thing. Even is open is false, it's going to create the state, it's going to render the form, and then this open can toggle back and forth, and the form still exists in the background. This component is still hidden, but still alive.\n\n[57:44] The way to fix this problem is, either we need to write some effects here that depends on is open, and when it flips we reset all the state, or we can just do it here and only conditionally render this thing. If is new, let open. Then we can render the modal. Otherwise, we won't render the modal. Actually, at this point, [laughs] this open flag is redundant, whatever.\n\n[58:15] At least at this point now, if you type some stuff in, cancel, and add up that again, it's going to reset. We can just delete is open, but we'll leave it alone.\n\nTaylor: [58:34] Do you really have a dog named Watson?\n\nDave: [58:37] I don't, no.\n\nTaylor: [58:39] Me neither.\n\nDave: [58:40] One of my friends does though. [laughs]\n\nTaylor: [58:46] How would we set a default state for props? Could it be passed through on useState props, or should it be set inside of a useEffect function?\n\nDave: [58:56] The way we're doing it here is perfectly fine. Actually, we'll see this in the edit pet modal that we'll do in a second, but you can pass these in. We could pass in...This is a terrible example, [laughs] but if we were to initialize this is open for some reason, we can pass it in here. It's just a variable. These are variables and we're just calling a function [inaudible] .\n\nTaylor: [59:19] This is interesting because Boohoo totally disagrees with the approach. New pet modal should have its own state.\n\nDave: [59:30] It does have its own state. It's right here. The state does not live outside the component. It's just that the component survives even when the modal is invisible. Now, this component is mounted, we have some state, and it's been initialized. When you close it, the component is unmounted and all that state disappears. When we come back to add pet again, we reinitialize all the state.\n\nTaylor: [60:02] A typo. It should be new pet modal should own its own state.\n\nDave: [60:08] Yup. It does own its own state. All of these new state calls are done inside new pet modal. All this lives inside that component. It's just that if we don't unmount it, that component even though it's not visible, it's still mounted in the background. The state persists. I forgot to explain this bit. UseState, when you call it the first time. This is mounted first. It's invisible. State gets initialized empty.\n\n[60:43] Then you bring up the modal, type some stuff. Then it remembers that. The next time it's rendered, it's still going to remember that the name, whatever you typed in here. If it wasn't unmounted, it's going to remember that name. Nope, the state is right here. If the state was owned by the parent, that would look like these things being up here.\n\n[61:12] We create the state here that's owned by app, and then we pass these down to the modal. In this case, the state is created inside new pet modal. It's owned by this.\n\nTaylor: [61:28] This is good. This is what we do this for.\n\nDave: [61:33] It's a good question. The terminology of which component owns the state, even though the end result almost looks like the app component owns it. It's surviving over there, because the state's persisting. Because the state is declared, because these hooks are called inside the new pet modal components, this is the component that owns it.\n\n[62:03] If you call a hook inside a component, then that component de facto owns the state.\n\nTaylor: [62:07] Then there's the response, \"If new pet modal owned its state, you wouldn't have to worry about survival.\"\n\nDave: [62:17] There's different ways of showing and hiding components. You can either pass in a prop and hide and show it, which is what this is doing without...We do it this way, then we're hiding and showing the thing basically CSS-wise, where we're saying, \"Display none,\" but the component is still there.\n\n[62:46] The alternative way to do it is to render the thing conditionally, so that if this is false, then this isn't even on the page. It doesn't have states, since state disappears whenever it mounts, or unmounts, rather.\n\nTaylor: [63:06] I think that's what Tim is getting at. Tim points out, \"The state is persistent while mounted, even if it's not displayed.\"\n\nDave: [63:11] That's what's going on in this instance here. We've got adding pets, we can give them names, photos and stuff, we just need to send them to the server. Oh, we wanted to handle error handling, right? If we don't have any values here, we could say if we're going to get an empty pet, and that's still good. Instead of doing that, we're going to write a little validate function.\n\n[63:45] [inaudible] paste in a validate function. We can just take the name, kind, photo, and make sure it's all valid. What we can do is change our add pet function to call, we'll call it validate with name, kind, and photo. Then, if errors are set, so this is the thing that's going to return null if there weren't any errors. If there were some errors, we'll just throw them.\n\n[64:30] Because this is an async function, that will reject the promise, and that our else case will do whatever we were doing before.\n\nTaylor: [64:50] Ah, yes, classic.\n\nDave: [64:52] [laughs] Typos. In here we get our onSave thing, calling onSave. This might throw now, this is returning a promise. If that happens, we want to catch the errors. We'll log out the errors so that we can see what happens, and then call set errors with the errors. This is like taking those errors and putting them into our local state here, and that'll re-render the component with the errors there.\n\n[65:27] Since the errors here are keyed by field, so we can look them up and associate them with their proper fields, so now we get name must not be blank, client must be client or dog. We put something in here that...You don't need a photo. Photo's optional. If we try to save now, that error's gone, but this one, either I type...OK, cool. Server handling is working. Now we can move this stuff to the server.\n\n[66:00] This is all static updating our local list of pets. Let's create some API call stuff now.\n\nTaylor: [66:16] One more question about the modal. Can we unmount new pet modal when it's closed?\n\nDave: [66:22] Yeah, that's what it's doing now. It is unmounted. Yep, like Troy said. When this variable becomes false, then this is not going to execute at all, so it will unmount here.\n\nTaylor: [66:43] Great questions, great conversation everybody. Keep it coming. It's why we do it.\n\nDave: [66:51] It's good stuff.\n\nTaylor: [66:53] Thanks Vee.\n\nDave: [66:54] Yeah, thanks for stopping by. Now we've got two API calls basically. We've got this fetch one, and we have a adding new pets one. I'm going to create a file called api.js so we can centralize all this API stuff. The fetching and handling JSON stuff, I'll cut that out, paste it up here, and we'll make a function we'll call list pets.\n\n[67:35] Won't take any arguments because we don't have to pass any arguments to the server or anything, then we can do this. Turn that. Yeah. Fetch is a global anyway. Good with that. Let's import that over here.\n\nTaylor: [67:56] I always get a little bit tripped up when I'm exporting async functions, or things that end up being the results of. I always do it with async/await, and here you're using dash.\n\nDave: [68:09] If we had an await here, we'd need export const. It goes here, right?\n\nTaylor: [68:15] Yeah. I usually put it in the wrong space three or four times in a row.\n\nDave: [68:21] Here seems like where you want to put it.\n\nTaylor: [68:24] Yeah, and then I take a walk to cool off.\n\nDave: [68:27] All right, this fits here. Let's import it over here. We got some great list pets from our API file [inaudible] . You're going to call list pets because we deleted that stuff. OK. [inaudible], cool. Now we have a place to put our next API call which we're going to use. We're going to post the added pet to the server. We'll create a function called createHit.\n\nTaylor: [69:10] Later, Jonathan.\n\nDave: [69:13] See you, Jonathan. We're going to call fetch again. We're going to call the same URL, but this time, we're going to post to it, because we're creating a new resource. This takes an object. Now we'll just pace in the stuff that goes in here. This is another disadvantage of fetch, I think, is it's just a little more verbose to use.\n\nTaylor: [69:44] Compared to Axios?\n\nDave: [69:46] Yeah, compared to Axios. Because Axios, you could just do axios.post, give a URL, and the data.\n\nTaylor: [69:54] Yeah, you don't have to put the method.\n\nDave: [69:57] I'm sorry, should be getting a pet here. [laughs]\n\nTaylor: [70:01] Good point, yeah.\n\n[70:02] [laughter]\n\nDave: [70:04] Yeah, Axios does all the JSON stringifying for you and all this stuff. Anyway. Using fetch, we've got this method, headers, body, and then we need to -- I hope -- we need to parse the response as JSON return that. Actually, here's a good place to talk about error-handling, because our server has this same kind of validation logic in it, and so it'll return errors if our inputs are missing stuff.\n\n[70:42] We need to be able to handle that here. Fetch handles errors in kind of a weird way. I've got this little handle errors function. If a fetch returns with a non-200 response, like a 400, like Bad Request, 404, or whatever, 500, any of the bad HTTP response codes, the fetch will succeed and it will call the then handler, which is different from how Axios works. If you're used to that, that's stuff you need to be aware of.\n\n[71:22] The fix for this is just to handle errors in your response chain. Call handle errors first. If the response was not OK, we're going to parse that body as JSON and then throw it so that the cache will sort of fall out to whoever called this thing.\n\nTaylor: [71:44] On your then for handle errors, you don't have to invoke the function on line 24?\n\nDave: [71:53] Then takes a function, so we could...\n\n[71:56] [crosstalk]\n\nTaylor: [71:56] Ah, OK. It does it itself. Yeah.\n\nDave: [72:00] Right. That can be simplified to that.\n\nTaylor: [72:08] Yeah, yeah. I remember now.\n\nDave: [72:13] As long as you don't do this, it can be good. This will be super confusing. Got some strange errors probably. Our add pet name, instead of calling validate, we can let the server do that now. Instead of having to handle and throw errors, we can let the server do that now. All we need to do is call create pet and pass in our pet. Actually, this whole thing is just the pet.\n\n[72:48] Then the server is going to return the new value. We'll get our new pet value, and we can call setPets with our new pet at the end of that array. We're creating the pet. This is doing a server recall, and then the server is going to send back our new value. We'll update it locally, if it succeeded. Render pet.\n\n[73:22] The other way to do this, I guess, would be to, once the call succeeds, do another fetch and download all of the pets again, but I don't know. This is safe enough here, I think.\n\nTaylor: [73:37] Create pet.\n\nDave: [73:37] Create pet is fine because, this, we see that. It's over here. We hit Save. Now there's a little bit of a delay, which is before the server comes back with errors. We are hitting the server again. We could create a dog called dog. Hit save, and then here we go. I mean there's no photo. If I refresh now, it's coming back. This is being persistent to the server now. If we look at our db.json, it's even longer than it was before.\n\nTaylor: [74:16] If the file is bigger, it has to be working.\n\nDave: [74:18] Here we go, look. Name dog kind dog, there we go. Yeah, so that's working. Let's move on to editing, I guess.\n\nTaylor: [74:31] To what?\n\nDave: [74:32] We can edit the pets next.\n\nTaylor: [74:34] Oh, editing, yeah, good thought. Naming a dog, Dog is a little on the nose, don't you think?\n\nDave: [74:46] Well, it doesn't have a picture.\n\nTaylor: [74:48] Also true, you have no idea what type of...\n\nDave: [74:50] You always need a picture, I suppose.\n\nTaylor: [74:52] Outside the two times it says dogs, I would have no idea what it actually was.\n\nDave: [74:56] Like you even know. We're going to make an edit pet modal that's going to work very similarly to new pet modal. I'm actually going to copy and paste it in because it's basically the same thing. The form is all pretty much the same. We have a loading thingy for this. We can move that over too, new pet model too. The difference here is that we're initializing the state.\n\n[75:43] Someone asked about initializing states from props earlier. Here, we're going to pass in a pet and set that pet into state so that we're initializing our form with existing pet stuff. Data, let's change these to edit pet model. Now, we want to only display this one when we need some sort of a variable. I have a current pet. Let's say when we click the name we'll set the pet to whatever you clicked.\n\n[76:24] Then we'll open up the edit model. That true, we'll call...\n\nTaylor: [76:30] Thank you, Troy.\n\nDave: [76:30] See you, Troy.\n\nTaylor: [76:37] We're going to trick people into leaving. We'll say their name.\n\nDave: [76:53] This current pet.\n\nTaylor: [76:55] For Steven or Stephen, apologies for the pronunciation. The purpose of the streams is for Dave to refine the course material that will eventually be available. Rich isn't leaving. While you won't have a recording of this particular event, the material that we covered will be available. I guess the answer is kind of. Stay tuned, I guess.\n\n[77:28] Then, there seems to be a vague remembrance of a blog post from the React team about pitfalls of initializing state from props. Do you know if this applies to functional components using hooks?\n\nDave: [77:46] No. The short answer is, no. The longer answer, the problem with initializing states from props is that a lot of times with class components people tended to try to copy props into state. They would copy stuff so that the component could own the data so that when you initialize the component, you copy the props into state.\n\n[78:12] Then whenever the props change, you try to update the state to keep in sync with the props. That's not necessary. You're getting the props every time anyway. They're always the latest values. Function components make it more obvious that you don't need to do that. These are just variables. They're here. The function is getting called with the latest value of...\n\n[78:34] Something more interesting, this is getting called with the latest value of pet. It's OK to initialize state with props. It's always been OK to initialize state with props once, just as long as you don't try to get into the habit of trying to copy props into state and keep ii in sync, if that makes sense.\n\nTaylor: [79:03] Phil asks a question of timing. What are you thinking, Dave?\n\nDave: [79:09] That's a good question. Maybe 10 more minutes. Try to wrap it up?\n\nTaylor: [79:21] Yeah. Not that we're kicking you out or anything.\n\n[79:27] [laughter]\n\nTaylor: [79:27] You don't have to go home, but you can't stay here I think is the phrase. I'm actually at home already. I really will be staying here.\n\nDave: [79:37] [inaudible] easy.\n\n[79:42] [laughter]\n\nDave: [79:43] Editing pets. Edits pet modal, takes the current pet. Whenever we click on one of these pets, we need to add an on edit, I think it takes a pet [inaudible] . We have an on edit function. When you click the pet name, it's going to call this function.\n\n[80:03] Let's pass in on edit. Pass in a function called set current pet to pet. Then let me click on name. It doesn't do anything. It's cool. [laughs] Set current pet...What's going on with the...On edit there, right? On edit, click the thing. Did I miss something?\n\nTaylor: [80:38] Tim's pointing out that you need to make sure that you unmount the component between prop changes in the edit case.\n\nDave: [80:45] Yes, definitely. We've got that current pet here. This is guarding the edit pet modal. Current pet is initially null. Set current pet. We should set it to...Oh, the problem is probably that. I don't know, actually. This is confusing. [laughs] I'm not sure why it isn't rendering. Let's put a console log.\n\nTaylor: [81:18] I don't trust these console logs.\n\nDave: [81:20] [laughs] Click the button. Eh. I don't know. It says [inaudible] to pet. What's going on with this?\n\nTaylor: [81:35] Its ID is two [laughs] because the first one probably has and ID of one. Yup, there we go. [laughs]\n\nDave: [81:46] This works. The pet is not null. We can now set current pet. It should re-render. Then current pet should be true, and it should render the edit pet modal. Oh, there's an is open prop that is set to is new pet open, which is [inaudible] to true. [laughs]\n\nTaylor: [82:14] Yup.\n\nDave: [82:14] Button. OK. Now we're editing.\n\nTaylor: [82:17] We're editing the dog named Dog.\n\nDave: [82:20] Cancel doesn't work, I guess. OnCancel should not close new pet. OnCancel should call set current pet to null. It shouldn't close the modal?\n\nTaylor: [82:31] Prove it.\n\nDave: [82:33] Cancel.\n\nTaylor: [82:33] All right.\n\n[82:34] [laughter]\n\nTaylor: [82:36] You win this round.\n\nDave: [82:38] Syntax error.\n\nTaylor: [82:39] Oh, syntax error. That's interesting.\n\nDave: [82:41] That's a fun one. We actually got a 500, is that what we got?\n\nTaylor: [82:45] Because you're not converting the exclamation point?\n\nDave: [82:49] I think because, onSave, it's calling add pet. We don't want to call add pet. We want to call [inaudible] , which doesn't exist yet. In the interest of time...\n\nTaylor: [83:06] Thanks, Roy.\n\nDave: [83:07] Copy and paste our...See you Roy. Pasting save pet here. Takes the pet, calls updated pet, which doesn't exist yet. We end up having is, our API has a bunch of different one function per endpoint or for...Not really endpoint. Per operation, I guess.\n\n[83:35] Our update pet function takes a pet. It's going to post to pets/id. This is typical RESTful route structure. I'm just going to use put, which will overwrite the whole pet with whatever we pass in here. We're going to pass in. Same kind of thing as creating one. Maybe this is enough. Save. It works. Cool.\n\nTaylor: [84:06] Bang, bang Watson.\n\nDave: [84:06] [laughs] I'm going to skip that one. I think I only left here is delete. We've got create, listing, updating, and we need all delete them. We already have the erase button, but it doesn't do anything.\n\nTaylor: [84:28] We're deleting them because they got adopted, right?\n\nDave: [84:31] Yes. That's what delete is for. Maybe it should be an adopt button or something. It should be a happier looking thing than a big red button.\n\nTaylor: [84:39] Instead of [inaudible] .\n\n[84:41] [laughter]\n\nDave: [84:41] [inaudible] , yeah. There we go. [laughs] Our delete pet is going to do use fetch again. Same thing, the router is going to have the id and the method is going to be delete. We don't have to pass the body because we're just removing it. We just need to pass in a delete handler to our pet component. We've got an on remove prop that when you click the X, it's going to call on remove.\n\n[85:17] We just need to pass it on remove prop here. to do that, we're going to call remove pet. We get to do a little more than just call the delete function. Up here, we'll make a function called remove pet. It's going to take a pet that we're getting adopted my pet. We can give this window.confirm to, \"Are you sure you want to delete/adopt? Bye pet.\"\n\nTaylor: [86:06] Control, adopt, delete.\n\nDave: [86:07] [laughs] If we set this to true, this will pop up one of those dialog. This is like [inaudible] red lines. If they say yes to that, I will call deletePet.API call. Pass in the pet we are deleting.\n\nTaylor: [86:29] Or just buyPet? It's a cute variable name, but it still is descriptive.\n\nDave: [86:35] [laughs]\n\nTaylor: [86:37] Good work, Dave.\n\nDave: [86:39] Thanks. I originally called that pet. Then I got into here, and I was like, OK, we're going to set the pets to pets, and then we filter down the pets. Then for each pet, we want to return the ones where the ID is not equal to, and I was like, well [inaudible] original pet, so pet. This is going to blow up because we don't have delete pet imported here.\n\nTaylor: [87:16] Let's delete that dog named Dog.\n\nDave: [87:18] Yeah.\n\nTaylor: [87:19] That was one was an error on data entry anyways as far as I'm concerned.\n\nDave: [87:25] Interestingly, the name is undefined, so that probably is not a good sign. When we call remove pet, we're supposed to be passing it to pet, [inaudible] back here. We need to call... [inaudible] doesn't get called with the pet. Pass the pet here.\n\nTaylor: [87:49] That's it.\n\nDave: [87:50] That might be it.\n\nTaylor: [87:51] Show me Dog. There we go.\n\nDave: [87:55] Bye Dog. Refresh. Dog's still gone. That's it. We got all the [inaudible] operations. We got a cat. Let's try a different cat picture. Maybe this one. I like that cat.\n\nTaylor: [88:10] Yeah. I like that one a lot too. My second date with my wife ever was to a cat show, and I saw lots of real-life Garfields. It was fantastic. If anybody out there needs a date idea, might I recommend a cat show?\n\nDave: [88:29] Sounds like a good idea.\n\nTaylor: [88:30] The people-watching was just as good as the cat-watching. There was a question earlier about, Juliet asked it, about using useReducer inside of useEffect. We didn't use useReducer here for any of our state stuff. I was wondering if we could go over that for a moment.\n\nDave: [88:57] Definitely. UseReducer is basically like a more powerful setState or useState, rather. It works the same way in that you would call...I guess we could do this, useReducer. UseReducer takes still an initial state, but it also takes a reducer function, user takes the existing state and whatever action you passed in.\n\n[89:30] This thing instead of returning the state and a setter function, it returns state and a function called dispatch, which I guess we could call it setPets if we wanted to, but we usually call it dispatch. We can dispatch actions and they get run through the reducer, and then this returns the new state. You could think of it as almost adding a step between...\n\n[89:53] You set the state, and instead of it immediately updating, it gets passed through this function that gets to decide what the state's going to be. This all happens outside of useEffect. Instead of calling setPets here, if we wanted to dispatch some sort of action, it's like type setPets, where we're passing all the pets or something, we can do this just as easily. It would work the same way.\n\n[90:26] There's not anything different other than that you have to write a reducer and stuff. I don't know if that answers the question or not.\n\nTaylor: [90:36] Yeah. We did cover some of that the last time we were hanging out. Thanks Bruno for stopping by. Cool. Thanks Julian.\n\nDave: [90:46] Cool. Thanks Julian.\n\nTaylor: [90:47] And thanks Dave. All I did was relay the question. Sometimes I take more credit than I ought to, although walking through that custom hook was mostly all me. That's why I got a C+, B on it. Phil asks about what kind of tests you would typically do for someone.\n\nDave: [91:12] That's a good question. That is a good question. Let me put this back to not that, pets, and all this stuff.\n\nTaylor: [91:22] Thanks Scarlet. Thanks, Saiyid.\n\nDave: [91:27] Yeah, so tests for this. I'd probably test...I don't know. I guess test the form. To be honest, I'm not super awesome at testing. I test sometimes, but probably not as much as I should. I should probably get that testing JavaScript course, testjavascript.com.\n\nTaylor: [91:44] Thanks Mike. That's the thing about being able to see this type of toy application. It's nice to know that it's not going to affect real things, so testing becomes a little bit less important. If you would think about, maybe if I could rephrase the question, Dave, when working with CRUD, do you have any insight into where tests are more likely to be important?\n\nDave: [92:23] Yeah. In something like this, I'd probably test that the form's work, test the modal's work, make sure modals appear and disappear, make sure they don't retain state when they're not supposed to, make sure the save functions work. It would probably stub out the actual API calls so it's not making a call to an actual server. The stuff in API here, you could mock fetch.\n\n[92:53] There's a library called mock-fetch or something like that, fetch-mock, that you could come up with fake responses so that you're not actually hitting a real server. It makes the test faster and that kind of thing, and [inaudible] time limitation.\n\nTaylor: [93:09] It seems like even using this JSON DB is a stand-in for a real...\n\nDave: [93:16] Yeah, this is a nice stand-in for if you have a back-end that's not quite up to what you need for your UI or something. It's a really easy way to prototype stuff. It is normally very fast, but only because I have this delivered pause for learning [inaudible] and stuff. If you get rid of that, it's very fast. JSON server is really cool.\n\nTaylor: [93:46] For everybody who's been asking about, the recording of this is not going to be available. This is for Dave and I to review the questions that you all have asked, to make sure that we get everything into the final version of the course. Same with the code.\n\n[94:04] In particular, I want to give a shout out to...I guess Boohoo has left, but all of the stuff that we were talking about earlier with the ownership of state and how it is something that's confusing, particularly if we're going to be like Allen and start moving away from class components, since they're not that beloved after all, anyways.\n\n[94:32] Going over where state belongs, who owns it, how it's shared, how it's accessed, all of these things are weird to get your head around. It's too bad that Boohoo is not here because that was a special shout-out. It takes guts to be like, \"I don't agree with you,\" and then be gracefully graceful about why they were mistaken. Cool sentence, Taylor, but you all know what I was going for, anyway.\n\nDave: [95:13] Yeah, it was good. A lot of good questions this time. There's a lot of new stuff here, I guess, too. We've done a lot of these live streams, and I know that, especially if hooks are new to you and stuff, that this one was not about hooks. A lot of this stuff was assumed from previous live streams and stuff. There's a lot of new stuff though.\n\nTaylor: [95:39] Tim has asked about, \"How often do you end up with an infinite loop in useEffect?\" He got really caught once.\n\nDave: [95:48] Yep, me too. It doesn't happen as much now, but definitely in the beginning I had the infinite loop to calling Reddit because I did something like this. It was like, \"Make the call, set the data,\" and I didn't have the empty array. That was no good.\n\n[96:10] I've seen some other cases where if your useEffect depends on a function that's defined above it, the warning will tell you that you have to put that function into your dependency array. If you do that, then the effect runs every time because the function is recreated every time. That's the tricky one because the fix is not to just disable the warning.\n\n[96:34] You have to rethink the code, move the function inside the effect, do something else.\n\nTaylor: [96:40] It's like when the check engine light comes on in my car, and I cover it up with duct tape, and then it's like, \"Well, light's not on.\"\n\nDave: [96:48] Exactly like that, yeah.\n\nTaylor: [96:52] Will you mostly be doing GET calls inside of useEffect, and the destructive operations in the callback functions?\n\nDave: [97:01] Yeah, that's how that works. useEffect is good for fetching data when the thing mounts, or if we had some prop. I don't know. This won't make a whole lot of sense. If we had some sort of prop like the pet ID or something, and we wanted to re-fetch pets whenever the ID changed or the date changed. I don't know what would cause this.\n\n[97:26] You can imagine if you're fetching a list of posts from Reddit or something, and you have a sub-Reddit that's a string fetching that you want to re-fetch, it's still a GET call. I'm trying to think of when you'd want to post. Maybe like analytics or something, like when a component mounts, you want to post your post to analytics to record an action or something to see that. I don't know. They're usually GET though.\n\nTaylor: [98:00] Do you have a duct tape list? Without duct tape, how would you solve the problem of moving the function inside of useEffect?\n\nDave: [98:11] You could move the function inside useEffect. Let me show you. If we had a function like here -- I'm not doing good thinking on the spot here. Let's imagine that we had a function. This one is called addPet. If we needed to call addPet from inside here for some reason, I'm just going to return here. This is actually going to blow up. That's still going to blow up. Cool.\n\n[98:52] [crosstalk]\n\nTaylor: [98:56] What about increment pet age or something?\n\nDave: [99:00] Yeah, we could. We don't have pet age. That'd be a good field to have. We get this warning that addPet is missing a dependency. If we add addPet here, it's going to put us into infinite loop territory, I'm pretty sure. Yeah, here we go. It depends on what you're trying to do. One solution to this is to move your function declaration into your effect, and now you can call it once and it works fine.\n\n[99:37] Of course, I'm getting errors somewhere else, because it depends on our addPet.\n\nTaylor: [99:42] Line 115?\n\nDave: [99:43] You get the idea. Hopefully, you get the idea. Let me put it back to where I was.\n\nTaylor: [99:53] Good question, Phil. Thank you for specifying no duct tape.\n\nDave: [99:59] The solution to warnings is almost never to turn the warnings off. Regardless of what it is, just don't do that. It's never safe.\n\nTaylor: [100:09] We are pretty lucky in React land that usually, the errors are what they say you should do.\n\nDave: [100:17] Yeah. React errors are really good.\n\nTaylor: [100:21] With useReducer, it's always wanting to add dispatch to it, a warning about that. It's one of those things that eventually you get used to. My biggest, banging my head against the desk, I could never remember to add return to my reduce functions ever. I would write, all the logic would be perfect, but then I'd never actually return from them. I spent hours.\n\n[100:57] Now that errors and warnings tell you, \"Go do this thing,\" it's like, \"OK, yeah. I can do that.\" Cool. Any more questions from anybody? Would you use useEffect inside a custom hook like useFetch? I saw some weird looping.\n\nDave: [101:22] Yeah. You can do that. You can put whatever you want in a custom hook. We could pull this out into a function, dependency, and things. This is finally going to blow up. If instead of doing this, you...I don't know. We would need some state. We need to take the state with it and return the state and stuff. You can put effects in custom hooks, yeah.\n\nTaylor: [101:51] Anybody else? Thanks again for presenting, Dave.\n\nDave: [101:58] Sure, good fun.\n\nTaylor: [102:00] We've done a lot of these sessions together, and they're always my favorite. I recognize a lot of people who came. That's awesome.\n\nDave: [102:09] [inaudible 1] . Thanks a lot for coming.\n\nTaylor: [102:15] The current operations are like, once you can do that, and once you got that down, that's pretty much the app...No, not that app, its and app. You can...\n\nDave: [102:28] Its most apps. 90 percent of apps.\n\nTaylor: [102:33] You know what I'm trying to say. Thanks, Phil. Thanks, Donny. It's one of those things where...Oh man, I had a good one! I think I might have used all my good metaphors for the day already.\n\nDave: [102:50] Yeah, it's getting late. Metaphors are drying up, I think.\n\n[102:54] [laughter]\n\nTaylor: [102:54] I'll wake up at 3:00 in the morning and I'll have an awesome one. I'll just have to write it down for later.\n\nDave: [103:01] Next time.\n\nTaylor: [103:02] Thanks everybody for coming. Thanks, Dave, for presenting. Looking forward to, I don't know what our next session will be.\n\nDave: [103:10] Don't know. Maybe the course, maybe more sessions, I'm not sure what we'll be doing. We'll see.\n\nTaylor: [103:19] There's always more to discuss and always more to do.\n\nDave: [103:23] We can always do more stuff, [inaudible 1] or something. Thanks, Taylor, for sticking around. I know it's getting late. Good to have your help.\n\nTaylor: [103:34] It's totally worth it. Thanks, everybody. We will see you all next time. Until lots of time.\n\n[103:41] [laughter]\n\nDave: [103:43] Cool.\n\nTaylor: [103:43] All right, bye, everybody.\n\nDave: [103:45] Bye.",
        "casting_words_order": "zeLF",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream",
        "path": "/lessons/react-pure-react-use-hooks-for-api-requests-livestream?pl=pure-react-livestreams",
        "http_url": "http://app.egghead.af:5000/lessons/react-pure-react-use-hooks-for-api-requests-livestream?pl=pure-react-livestreams",
        "http_short_url": "http://app.egghead.af:5000/s/tjyyv",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-use-hooks-for-api-requests-livestream-S1qQX4D9S/scikit-learn-pure-react-use-hooks-for-api-requests-livestream-S1qQX4D9S.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
        "series_row_order": 7602173,
        "series": {
          "title": "Pure React Livestreams",
          "description": "Live stream events for the course modules.",
          "duration": 49263,
          "slug": "pure-react-livestreams",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-livestreams",
          "path": "/courses/pure-react-livestreams",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875175,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-use-hooks-for-api-requests-livestream/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      },
      {
        "id": 5397,
        "creator_id": 9671,
        "slug": "react-pure-react-react-context-livestream",
        "title": "Pure React React Context Livestream",
        "state": "bundled",
        "summary": null,
        "duration": 6917,
        "plays_count": 0,
        "published_at": null,
        "is_pro_content": true,
        "difficulty_rating": 0,
        "series_row_order_position": null,
        "free_forever": false,
        "transcript": "Taylor Bell: [00:03] That's it.\r\nDave Ceddia: [00:05] Nice.\r\nTaylor: [00:05] All right. Thanks, Dave, for \r\n[00:07] joining us today. Thanks, \r\n[00:09] everybody in the audience, for \r\n[00:10] joining us. Dave's been working \r\n[00:12] on some React stuff. Now we are \r\n[00:15] going to talk about Context \r\n[00:18] today, I believe, right, Dave?\r\nDave: [00:20] Yeah, we're getting into React \r\n[00:21] Context. Let's see, Context API, \r\n[00:29] it's built into React. You might \r\n[00:32] have heard about it already or \r\n[00:34] not. It's been in React since 16.\r\n[00:37] 3. I don't know when that came \r\n[00:40] out, 2017, something. It's been \r\n[00:43] around for a little while.\r\n[00:47] What \r\n[00:47] it lets you do is pass data \r\n[00:49] throughout your components \r\n[00:51] without having to manually pass \r\n[00:52] props down. You might be \r\n[00:57] familiar with Redux for this use \r\n[00:59] case. You put your data in your \r\n[01:01] global Redux store and then pass \r\n[01:02] it around to everything. Context \r\n[01:04] can let you do something similar \r\n[01:07] without having to install Redux \r\n[01:08] and all that. It's not a perfect \r\n[01:10] replacement, but we can into \r\n[01:13] that.\r\n[01:15] First, I'll give you a \r\n[01:16] quick tour of the app we're \r\n[01:19] going to be working with here. A \r\n[01:21] lot of it is already built out, \r\n[01:23] but I'll walk you through what \r\n[01:24] we have so far. This is our \r\n[01:26] route component. This is index.\r\n[01:28] js. It's just like a create \r\n[01:30] React project, and depending on \r\n[01:34] if the user is logged in, we're \r\n[01:36] going to render either the main \r\n[01:37] page or this login page. That's \r\n[01:39] what we see here.\r\n[01:40] If we login \r\n[01:43] Dave in secret, you can see the \r\n[01:47] main page. There's our two top \r\n[01:49] level pages. Let me go back to \r\n[01:52] the login page, you can see \r\n[01:53] what's going on here. It's a \r\n[01:56] bunch of stuff, but we're got \r\n[01:57] some estate for loading. We've \r\n[02:00] got our inputs. If you don't \r\n[02:03] supply good stuff you get an \r\n[02:05] error. Once it submits, it will \r\n[02:07] call us through to this API \r\n[02:08] function.\r\n[02:10] It will call this on \r\n[02:13] login prop which is ultimately \r\n[02:15] going to set our user over here. \r\n[02:20] Then we'll end up at main page. \r\n[02:22] Our API here, we have a file \r\n[02:25] called API on a JS. It's all \r\n[02:26] kind of fake, but it's a little \r\n[02:29] bit of a delay built in. You \r\n[02:31] could imagine we were making a \r\n[02:32] server call here, but we're just \r\n[02:34] resolving with this fake user \r\n[02:35] data. That's what we're using. \r\n[02:38] Let's re-log in. Our main page \r\n[02:45] component is this thing here.\r\n[02:48] We've got this header, which is \r\n[02:51] above the little line here. \r\n[02:52] We've got message list, which is \r\n[02:53] down here. It's all empty. The \r\n[02:56] main page is getting the current \r\n[02:57] user, it's passing it along to \r\n[02:58] the header and it's also passing \r\n[03:00] it to message list. It's not \r\n[03:02] really doing anything with the \r\n[03:02] user, just accepting it and \r\n[03:05] forwarding it along. We can go \r\n[03:08] into header. We can see we're \r\n[03:09] getting the user here.\r\n[03:11] Header \r\n[03:11] still doesn't really use the \r\n[03:13] user, it just passes it to this \r\n[03:14] little logout menu. This is all \r\n[03:20] pretty much code for handling \r\n[03:23] this little drop-down thingy \r\n[03:25] that shows up when you click the \r\n[03:26] button. Resetting the user to \r\n[03:30] null when you log out. We do \r\n[03:34] that. We're back to login. \r\n[03:37] That's pretty much it. Message \r\n[03:38] list is boring right now. It \r\n[03:41] just says, \"Your mailbox is \r\n[03:43] empty.\" We'll be filling this \r\n[03:45] out as we go.\r\n[03:48] We can get into \r\n[03:49] the context stuff now. I think \r\n[03:52] what we'll do is start with \r\n[03:54] removing this, we could call it \r\n[03:57] prop drilling, prop threading, \r\n[03:59] whatever. We're passing this \r\n[04:00] user through to main page, and \r\n[04:02] then it forwards it along to the \r\n[04:04] header, which forwards it along \r\n[04:06] again. There's lots of having to \r\n[04:09] pass this along manually. It \r\n[04:10] makes the components hard to \r\n[04:11] reuse. May be nice to be able to \r\n[04:14] like pull it out here.\r\nTaylor: [04:18] Prop drilling, that's what that \r\n[04:22] is, passing it to all these \r\n[04:25] middlemen that they don't need \r\n[04:28] to know about the user, but \r\n[04:29] they're furthering it along, \r\n[04:33] passing it along?\r\nDave: [04:35] Exactly. That's it. That's not \r\n[04:37] bad. That's just how React works. \r\n[04:40] It's fine. I think you do it a \r\n[04:43] couple levels down, it's not \r\n[04:45] much of a problem. It gets \r\n[04:47] tedious, I think, if you're \r\n[04:50] going five levels deep, or \r\n[04:51] whatever. Let's create a context \r\n[04:57] to pass this data around. I'm \r\n[04:59] going to put that in a separate \r\n[05:01] file. We're going to make one \r\n[05:02] called UserContext. I'll say yes.\r\n[05:10] We're going to import react and \r\n[05:13] call react.createContext to make \r\n[05:17] one of these things. That's \r\n[05:19] going to return an object. We're \r\n[05:21] going to put that in then call \r\n[05:23] it UserContext. This object it \r\n[05:26] returns has a provider property \r\n[05:29] and a consumer property. These \r\n[05:34] things are like a balanced pair. \r\n[05:37] They're paired together at \r\n[05:38] creation time. The provider is \r\n[05:41] what like makes the data \r\n[05:42] available to the app.\r\n[05:43] Then the \r\n[05:43] consumer, you can put that \r\n[05:45] anywhere under the provider and \r\n[05:47] pull the data out. You can of \r\n[05:49] think of it like an electrical \r\n[05:51] bus, like wiring or something. \r\n[05:54] You can plug in with the \r\n[05:55] consumer and get the data out to \r\n[05:57] see...\r\nTaylor: [05:57] An electrical bus?\r\nDave: [05:58] how that works. Yeah.\r\nTaylor: [06:01] I don't know what that means.\r\nDave: [06:03] Maybe that's not a good term.\r\n[06:05] [laughter]\r\nTaylor: [06:05] I don't know what you mean by \r\n[06:07] electrical bus.\r\nDave: [06:09] In a car or a house or something, \r\n[06:11] you've got one big strip of \r\n[06:14] electricity and you plug into it \r\n[06:16] from anywhere. It distributes \r\n[06:18] the power.\r\nTaylor: [06:20] I'm thinking too hard about it.\r\nDave: [06:24] Not like a electric...\r\nTaylor: [06:28] Yeah, not the Tesla of buses.\r\nDave: [06:30] ecofriendly bus, not that kind \r\n[06:31] of bus. [laughs]\r\nTaylor: [06:32] That's where I was having \r\n[06:33] trouble.\r\nDave: [06:35] That sounds more fun, though.\r\nTaylor: [06:37] Command strip, power box. I \r\n[06:41] don't know. It's one of those \r\n[06:43] things where it's a regional...\r\n[06:45] Depends on where you're from.\r\nDave: [06:47] Like wiring in your house, maybe. \r\n[06:48] The power comes in at one spot, \r\n[06:49] it goes to all the rooms.\r\n[06:51] [crosstalk]\r\nTaylor: [06:51] Yeah and then you would \r\n[06:52] [inaudible] something in and \r\n[06:52] consumer the power.\r\nDave: [06:53] Then the consumer is like that. \r\n[06:54] You plug it in.\r\nTaylor: [06:56] Cool. If that's the hardest part \r\n[06:57] of the day, then I'm going to be \r\n[06:58] just fine.\r\n[07:00] [laughter]\r\nTaylor: [07:00] Something tells me there's a \r\n[07:01] little bit more to it.\r\n[07:05] [laughter]\r\nTaylor: [07:05] I'll try to make it easier. \r\n[07:09] We've got this thing here. We \r\n[07:10] could just export this user \r\n[07:12] context and use the it around \r\n[07:15] the app. Let's just do that for \r\n[07:19] now, for this as a default. Not \r\n[07:25] a whole lot going on here. We \r\n[07:26] can create a thing and export it. \r\n[07:29] Over in the index file, we can \r\n[07:31] import that. That's user context. \r\n[07:39] We have that here. We want to \r\n[07:44] use this to pass the user down.\r\n[07:46] We're going to wrap the main \r\n[07:47] page with a user context \r\n[07:53] provider. This is going to make...\r\n[08:01] Not yet. We can pass them a prop \r\n[08:03] called value, which is the only \r\n[08:05] thing that contexts taken. You \r\n[08:07] can pass whatever you want in \r\n[08:08] here. We'll pass our user. This \r\n[08:12] will make this user piece of \r\n[08:14] state variable, whatever you \r\n[08:15] want to call it, available \r\n[08:18] underneath everything everywhere \r\n[08:19] underneath this provider.\r\n[08:20] Main \r\n[08:21] page can access it. Header can \r\n[08:23] access it. Message list can \r\n[08:24] access it. To do that, we're \r\n[08:30] going to need that consumer or \r\n[08:33] the useContext hook. The Spirit \r\n[08:37] of Hooks are cool. we can use to \r\n[08:39] useContext hook. It's supposed \r\n[08:42] to go into main page. We don't \r\n[08:44] really need the user here. We \r\n[08:46] just need it in header. Actually, \r\n[08:47] we don't need to hear, either. \r\n[08:48] We need it in user menu.\r\n[08:52] I'm \r\n[08:53] going to import that user \r\n[08:55] context here. Now we can use \r\n[09:01] either the either the consumer, \r\n[09:03] which we have to wrap our \r\n[09:04] component with, or we can pull \r\n[09:07] in the useContext took. This \r\n[09:11] will make it really easy. We can \r\n[09:13] just say user equals [inaudible] \r\n[09:15] this current user to make it \r\n[09:18] match our prop here. We can call \r\n[09:20] it useContext and pass the \r\n[09:21] entire user context object.\r\n[09:27] You're using a hook, you've got \r\n[09:28] to pass the whole context, not \r\n[09:30] just the provider. Whatever you \r\n[09:33] passed in, the value basically \r\n[09:34] just comes out the other side. \r\n[09:38] We don't need this current user \r\n[09:39] prop anymore. If we go up a few \r\n[09:46] levels here, so we don't need to \r\n[09:48] pass it into user menu, we don't \r\n[09:50] need to get it in the header.\r\n[09:53] If we go back up to main page, \r\n[09:56] we don't have to pass it into \r\n[09:57] header. We don't need it here. \r\n[10:00] Come back up again. We don't \r\n[10:03] need it here. Wait. Sorry. Let's \r\n[10:07] put that back for a second. \r\n[10:09] [laughs] We don't need it in a \r\n[10:10] header. We'll do message list in \r\n[10:13] a second. Let's see if this...\r\n[10:16] I'm going to save this. See if \r\n[10:17] this works, still. Log in. Cool. \r\n[10:24] We're getting our little avatar \r\n[10:26] here. That's coming through \r\n[10:29] context now.\r\n[10:31] We can do the same \r\n[10:32] thing to our message list. Let \r\n[10:39] me change this into a component \r\n[10:41] with a body. I'll put in the \r\n[10:43] useContext hook.\r\nTaylor: [10:46] As soon as we finish this \r\n[10:49] section, this refactor here, we \r\n[10:53] have a question from Roman that \r\n[10:55] I think would fit good here.\r\nDave: [10:56] Cool. Why not do it the \r\n[11:00] classical way with consumer? \r\n[11:02] Actually, let's do that for this \r\n[11:03] one. We'll do it that way. Let's \r\n[11:08] import the user context. We were \r\n[11:15] going to return this thing. We \r\n[11:17] can wrap this whole component in \r\n[11:19] our UserContext.consumer. Do \r\n[11:33] this, save. We should get some \r\n[11:37] sort of error. This is going to \r\n[11:39] be annoying. I'm going to go \r\n[11:41] over to API. Never mind. I'll \r\n[11:48] just log in for now. Later, \r\n[11:49] we'll fix that.\r\n[11:51] [laughs] Just \r\n[11:52] hard code. We get this render is \r\n[11:54] not a function error. This is \r\n[11:58] because the consumer expects \r\n[12:01] that its children, it's going to \r\n[12:04] have a single function. This is \r\n[12:05] the render pattern. We're going \r\n[12:09] to wrap this stuff in a function. \r\n[12:13] What it'll do is call that \r\n[12:14] function and pass in that value \r\n[12:17] that we passed in up here. It \r\n[12:22] comes out as the first argument \r\n[12:23] here. You can call it value. You \r\n[12:24] could call it user.\r\n[12:26] You could \r\n[12:26] call it current user. It's going \r\n[12:30] to render this stuff with that \r\n[12:33] value. Now we don't need this \r\n[12:35] prop anymore.\r\nTaylor: [12:37] Because it's getting it from the \r\n[12:38] provider. The consumer gets it \r\n[12:41] from the provider, so we don't \r\n[12:43] have to pass it in as a prop \r\n[12:44] anymore.\r\nDave: [12:45] Yes.\r\nTaylor: [12:46] Using the UserContext.consumer \r\n[12:50] like this, do we have to use the \r\n[12:52] render props pattern when we \r\n[12:54] don't use the hook?\r\nDave: [12:56] Yeah. That's the main downside \r\n[13:00] with the consumer is that you \r\n[13:03] have to wrap your component like \r\n[13:04] this. Also, if you wanted access \r\n[13:07] to this variable outside of this \r\n[13:09] rendery bit, like if you had \r\n[13:11] some functions up above, or you \r\n[13:14] had a class component that had \r\n[13:15] handler functions and that you \r\n[13:17] wanted to access this thing, it \r\n[13:20] gets harder because you can only \r\n[13:21] pull it out when you're \r\n[13:22] rendering something.\r\n[13:25] It's not \r\n[13:26] just available as the prop or \r\n[13:27] whatever.\r\nTaylor: [13:28] That would get messy. Even to \r\n[13:29] just console log it, you would \r\n[13:31] have to not be doing the \r\n[13:34] implicit return on line nine. \r\n[13:36] You'd have to do a full-on \r\n[13:38] component in there?\r\nDave: [13:39] Yeah, right. Like if you wanted \r\n[13:45] to log it here or something?\r\nTaylor: [13:47] Yeah.\r\nDave: [13:49] You'd have to turn this into \r\n[13:50] braces and all that. That's why \r\n[13:55] the hook version is nice. You \r\n[13:57] just use context, pass in the \r\n[13:59] whole thing. Then we get our \r\n[14:04] current user out. Then we get \r\n[14:07] rid of this whole level of \r\n[14:09] nesting. It gets especially \r\n[14:10] messy when you have...Also, it'd \r\n[14:15] help if I imported context.\r\n[14:17] It \r\n[14:17] gets really messy if you have \r\n[14:18] multiple contexts, because if \r\n[14:21] you were consuming three \r\n[14:22] contexts or something, everyone \r\n[14:24] is going to be another level \r\n[14:25] [laughs] of nesting. It just \r\n[14:28] gets hard to read.\r\nTaylor: [14:29] Why would you need multiple \r\n[14:31] contexts in the first place?\r\nDave: [14:36] We'll see some examples in a bit \r\n[14:38] of multiple contexts. The main \r\n[14:42] reason is just to split up your \r\n[14:43] data, I think, to have each \r\n[14:45] context own a specific thing. \r\n[14:48] This one is going to own the \r\n[14:49] user data. I should have \r\n[14:52] explained this earlier, but \r\n[14:53] we're going to build out a \r\n[14:54] little mail app here that \r\n[14:56] receives emails. It's going to \r\n[14:57] be current emails, which will be \r\n[14:59] another set of data.\r\n[15:02] We're \r\n[15:02] going to have notifications too. \r\n[15:03] Hopefully we'll have time for \r\n[15:04] all this stuff. Those will be \r\n[15:06] three separate contexts. You \r\n[15:08] could put them all in one, but \r\n[15:09] then you're just muddling a \r\n[15:11] bunch of stuff together and it \r\n[15:13] ends up being a kitchen sink \r\n[15:15] problem.\r\nTaylor: [15:17] Is the mailbox empty because you \r\n[15:19] keep inbox zero, or did you \r\n[15:20] declare inbox bankruptcy and \r\n[15:23] just delete everything?\r\nDave: [15:25] This is more like an inbox \r\n[15:27] bankruptcy. This is hard-coded \r\n[15:30] mailbox is empty.\r\n[15:34] [laughter]\r\nDave: [15:34] Later, we're going to have \r\n[15:35] severely not inbox zero. Is \r\n[15:43] there sound? I think it's \r\n[15:45] working. Is it working OK for \r\n[15:47] anyone else?\r\nTaylor: [15:48] I can hear you. I think you can \r\n[15:50] hear me because you're humoring \r\n[15:54] my bad jokes. [laughs]\r\nDave: [15:56] Definitely for you. Maybe try \r\n[15:57] leaving and coming back in or \r\n[15:58] something, or click those little, \r\n[16:03] there's a speaker dropdown thing \r\n[16:04] in Zoom. It lets you choose what \r\n[16:06] where you output comes from, I \r\n[16:07] think.\r\nTaylor: [16:09] Hey, Thomas. I can't hear you, \r\n[16:11] Thomas, but I can hear your \r\n[16:12] voice when I read that, so kind \r\n[16:13] of.\r\nDave: [16:23] Let's move along. We've got our \r\n[16:25] current user. We're not passing \r\n[16:26] in the message list anymore. \r\n[16:28] [inaudible] . We can get rid of \r\n[16:29] it here. We can get rid of it \r\n[16:37] over at index. Get rid of that. \r\n[16:41] Now you've just got this user \r\n[16:44] globally magically available \r\n[16:45] everywhere underneath this \r\n[16:47] provider. Let's take this, the \r\n[16:58] messy part of this, I guess, is \r\n[17:00] that we're...What were you going \r\n[17:01] to say, Taylor?\r\nTaylor: [17:02] Can we do a quick recap of \r\n[17:06] everything that we've done so \r\n[17:07] far? We create the new user \r\n[17:09] context file. Is it best \r\n[17:12] practice to create a separate \r\n[17:14] user context file?\r\nDave: [17:17] I think it's good to put each \r\n[17:22] one in its own file. Otherwise, \r\n[17:26] you could put them in index, \r\n[17:28] wherever. The useful thing about \r\n[17:31] putting it into a separate file \r\n[17:32] is that it makes it easier to \r\n[17:36] import it somewhere else. If it \r\n[17:40] was in index and say, you wanted \r\n[17:43] to access this from main page, \r\n[17:45] you're going to run into some \r\n[17:46] weird circular dependency \r\n[17:47] problem where index wants main \r\n[17:49] page and main wants index. That \r\n[17:50] will not go well.\r\nTaylor: [17:53] We created a user-context.js \r\n[17:55] file. Inside of user-context.js, \r\n[17:58] we know that we're going to get \r\n[18:01] a provider and a consumer behind \r\n[18:02] the scenes. That's why you \r\n[18:04] commented it out there, just to \r\n[18:05] show us this is what this will \r\n[18:07] have, right?\r\nDave: [18:08] Yeah.\r\nTaylor: [18:09] In index.js, as I go like this \r\n[18:12] [laughs] , I have no control \r\n[18:14] over your screen.\r\nDave: [18:15] [laughs]\r\nTaylor: [18:15] I'm trying to Minority Report \r\n[18:16] over. [laughs]\r\nDave: [18:19] I'll try to keep up. [laughs]\r\nTaylor: [18:21] On line five, we import the \r\n[18:23] context that we created. On line \r\n[18:26] nine, we're using the state hook \r\n[18:28] to set up our user. The setUser \r\n[18:31] is our updater function. We're \r\n[18:34] using this UserContext.provider \r\n[18:36] component where we are setting a \r\n[18:39] value. Value could be called \r\n[18:41] anything we want because it's \r\n[18:43] just a prop?\r\nDave: [18:44] The value prop has to be called \r\n[18:46] value, but you can pass whatever \r\n[18:48] you want inside it.\r\nTaylor: [18:49] That's the user that we're \r\n[18:51] getting from our state. Our main \r\n[18:54] page will have a consumer? No. \r\n[18:59] Never mind.\r\nDave: [19:00] Main page doesn't need the user \r\n[19:01] anymore. It used to have to \r\n[19:03] forward it along, but now it can \r\n[19:05] just be like, \"Nah. Plain, \r\n[19:07] simple component.\"\r\nTaylor: [19:10] Is our consumer inside of header?\r\nDave: [19:13] The consumer is not inside \r\n[19:14] header either because header was \r\n[19:16] also forwarding it along...\r\n[19:17] [crosstalk]\r\nTaylor: [19:17] Is it inside user menu?\r\nDave: [19:19] User menu, yeah.\r\n[19:25] [crosstalk]\r\nTaylor: [19:25] This is where we're able to pull \r\n[19:28] the value out. Where do we \r\n[19:31] actually pull the value out?\r\nDave: [19:33] It's this line 14, right here. \r\n[19:35] Where we call useContext, the \r\n[19:38] thing returned from useContext \r\n[19:40] is that value that we had passed \r\n[19:41] in earlier. Further up the tree, \r\n[19:46] I guess.\r\nTaylor: [19:52] That helped me. I hope that \r\n[19:54] helped some people in the crowd.\r\nDave: [19:55] I think that was helpful. Let's \r\n[20:00] take this a step further, I \r\n[20:02] guess. Instead of exposing the \r\n[20:04] provider and this whole context, \r\n[20:08] we can only expose a specific \r\n[20:13] provider for this user. We'll \r\n[20:14] make a custom hook that will let \r\n[20:16] us just get access to the thing \r\n[20:18] without having to expose the \r\n[20:19] whole context.\r\n[20:21] I'm going to \r\n[20:22] make a function called \r\n[20:24] UserProvider. We could do it \r\n[20:32] either way, I guess. We could \r\n[20:35] use the user context consumer. \r\n[20:40] No, never mind. Sorry. We're \r\n[20:41] going to use the provider. \r\n[20:42] [laughs] We're going to render \r\n[20:44] out children. This is just going \r\n[20:47] to be a wrapper component that \r\n[20:48] can wrap around stuff. Pretty \r\n[20:51] much to save us from having to \r\n[20:52] write UserContext.provider.\r\nTaylor: [20:55] It's like making an alias, in a \r\n[20:58] way.\r\nDave: [20:58] Yeah, pretty much. What I'm \r\n[21:01] going to do is export this \r\n[21:03] function, and then we can use \r\n[21:07] this instead of having to write \r\n[21:09] this out in our index file. They \r\n[21:12] can pull in UserProvider.\r\nTaylor: [21:17] Then we can basically rename \r\n[21:19] UserContext.provider to the \r\n[21:22] UserProvider.\r\nDave: [21:23] Yep, UserProvider. We're not \r\n[21:28] going to pass the value. Well, I \r\n[21:32] am going to pass the value for \r\n[21:33] now. Well, actually, no. If \r\n[21:38] we're going to create this \r\n[21:40] context, it'd make more sense \r\n[21:43] for the context to own all of \r\n[21:45] the user stuff. If this is our \r\n[21:48] global, think of it as a global \r\n[21:50] user store or something. All the \r\n[21:52] user related stuff can go inside \r\n[21:54] this provider.\r\n[21:56] Instead of \r\n[21:57] having to pass the value in here, \r\n[22:00] this provider will be its own \r\n[22:01] little self-contained user \r\n[22:02] management thing, which means \r\n[22:05] I'm going to move all this stuff, \r\n[22:08] this user logon/logout stuff. \r\n[22:10] Put it here, and put it over in \r\n[22:13] UserContext and actually in \r\n[22:16] provider.\r\nTaylor: [22:19] How's it going to know? Oh, \r\n[22:24] because now we're going to \r\n[22:25] setState in our UserProvider \r\n[22:27] component, instead of setting \r\n[22:29] state in our main.\r\nDave: [22:30] It's going to have its own state.\r\nTaylor: [22:35] I should get a lamp above my \r\n[22:36] head, so I can turn a light bulb \r\n[22:38] on, or something.\r\n[22:42] [laughter]\r\nDave: [22:42] This is good. We have our state \r\n[22:44] here now. We're getting that \r\n[22:46] user. We can pass that. We'll do \r\n[22:48] the same value thing. Pass \r\n[22:50] [inaudible] with value as user. \r\n[22:56] We've got our login and logout \r\n[22:57] functions, which, well, we've \r\n[23:00] got make a couple more changes \r\n[23:01] now. We've just moved the user \r\n[23:04] and its functions for changing \r\n[23:06] the user into here, right?\r\nTaylor: [23:09] Yeah.\r\nDave: [23:10] Now, this needs to be \r\n[23:11] responsible for also passing \r\n[23:12] down the actions that can change \r\n[23:14] the user. I'm going to change \r\n[23:17] the value here and make a \r\n[23:21] variable called value. I'm going \r\n[23:23] to pass in the user, login and \r\n[23:25] logout, out. Pass the value in \r\n[23:31] that way. Now, this is veering \r\n[23:36] into Redux territory here. We're \r\n[23:37] passing data along with things \r\n[23:39] that will change the data.\r\n[23:41] Now, \r\n[23:43] all the components underneath a \r\n[23:44] provider can not only access the \r\n[23:45] user but also log them in and \r\n[23:47] out. To be able to make that \r\n[23:51] work, this is probably going to \r\n[23:52] break, or at least it won't \r\n[23:55] break yet. Now, since this is \r\n[24:01] providing logout and login, I \r\n[24:03] want to wrap it around both of \r\n[24:05] these. Our main page needs \r\n[24:09] logout and login page needs \r\n[24:10] login. I'm going to move this. \r\n[24:14] If it's all self-contained, I'll \r\n[24:17] put it down here.\r\nTaylor: [24:19] Then our root is only going to \r\n[24:21] need to be our main page stuff?\r\nDave: [24:24] Pretty much.\r\nTaylor: [24:25] Does this count as separation of \r\n[24:27] concerns?\r\nDave: [24:29] Yeah.\r\nTaylor: [24:30] Or I'm I trying to stretch your \r\n[24:32] definition?\r\nDave: [24:33] No, I think that's accurate. \r\n[24:35] Where we're moving all the user-\r\n[24:37] related concerns into user \r\n[24:38] provider. Really this user \r\n[24:41] context, I guess. This is sort \r\n[24:44] of like the owner of all the \r\n[24:45] user stuff and it just \r\n[24:47] disseminates it to whatever \r\n[24:48] needs it. Except not yet because \r\n[24:51] it's all bargain.\r\n[24:54] [laughter]\r\nDave: [24:54] We've got to go change these \r\n[24:56] things. We're passing down \r\n[25:00] logout and login and these now \r\n[25:03] need to come through context. \r\n[25:08] Same thing down in user menu. We \r\n[25:12] need that on-logout prop or \r\n[25:15] whatever function.\r\n[25:17] In this \r\n[25:18] useContext thing, we just \r\n[25:20] changed it so it's not passing \r\n[25:21] just the user anymore. It's \r\n[25:22] passing this whole object. We're \r\n[25:29] not getting a user out of it \r\n[25:30] anymore, we're getting user and \r\n[25:33] logout. We could go around the \r\n[25:38] component and rename these \r\n[25:39] things or we can just rename \r\n[25:40] them right here.\r\nTaylor: [25:42] Yes, using that fancy...\r\nDave: [25:44] Cool thing.\r\nTaylor: [25:45] I always have to look that \r\n[25:46] syntax up when I try to do that \r\n[25:48] the shortcut. That regular \r\n[25:50] expression man like...\r\nDave: [25:51] Feel like you are having a \r\n[25:52] regular expression. [laughs] \r\n[25:53] Regular expressions. Always \r\n[25:55] going to look that one up. That \r\n[25:58] can solve these components. \r\n[26:04] Let's go back, back again, back \r\n[26:09] again. Come on. No. [laughs] \r\n[26:13] I've been clicking around too \r\n[26:14] much. This is not helping. We'll \r\n[26:15] start here. [laughs] We went \r\n[26:17] into main page. We're not going \r\n[26:18] to pass login logout anymore.\r\n[26:21] We don't need it here, we don't \r\n[26:23] need it here, we don't need it \r\n[26:28] here, we don't need it in user \r\n[26:32] menu. Cool. User menu is taking \r\n[26:36] care of it itself. Good, good, \r\n[26:43] good. We going to do login also. \r\n[26:47] I'll just preemptively delete \r\n[26:50] that. Login page is going to \r\n[26:54] also need access to that context. \r\n[26:55] We're going to import our user \r\n[27:02] context. Actually, now is \r\n[27:07] probably a good time to add that \r\n[27:09] custom hook maybe. Maybe not.\r\n[27:11] I \r\n[27:11] don't know. Instead of exposing \r\n[27:15] the whole context and making the \r\n[27:18] consumer call useContext like \r\n[27:21] this, we can make a custom hook \r\n[27:24] called useUser that just gives \r\n[27:26] us the things.\r\nTaylor: [27:29] [laughs] Sorry. I was just \r\n[27:32] thinking of something that has \r\n[27:35] nothing to do with this where we \r\n[27:36] have a custom hook called \r\n[27:37] useUser. I was thinking about \r\n[27:39] who watches the watchers, and \r\n[27:41] then a different custom hook \r\n[27:42] called watchWatcher.\r\nDave: [27:45] [laughs] useUser user.\r\nTaylor: [27:47] Yeah.\r\n[27:48] [laughter]\r\nDave: [27:48] You can keep going, I guess. \r\n[27:51] [laughs]\r\nTaylor: [27:51] I'm sorry, and you're welcome.\r\nDave: [27:53] [laughs] Let's do that. We'll \r\n[27:56] make a useUser hook, and export \r\n[28:02] this. We're just going to call \r\n[28:09] useContext here, pass in user \r\n[28:11] context, just to save the \r\n[28:16] consumers from having to write \r\n[28:17] this out. This is also \r\n[28:22] abstraction. If you wanted to \r\n[28:25] change what was exposed from \r\n[28:29] this custom hook, you could do \r\n[28:30] that here. You could take the \r\n[28:31] data and remove some properties, \r\n[28:33] change something out, whatever.\r\n[28:35] We're just going to pass them \r\n[28:36] all along. This will make that \r\n[28:39] easier later if you want to \r\n[28:40] change that, and just saves the \r\n[28:44] consumer a little bit of work.\r\nTaylor: [28:48] We have one person, Roman, sorry \r\n[28:53] to name names. Roman's confused. \r\n[28:57] [laughs] Anybody else in the \r\n[28:58] audience need a little bit of \r\n[29:00] help right now? Yup, OK. \r\n[29:05] [laughs] Now everybody is \r\n[29:06] copying and pasting the word yes.\r\nDave: [29:12] [laughs]\r\nTaylor: [29:12] Let's talk about this custom \r\n[29:13] hook extraction a little bit \r\n[29:16] more real quick. We're doing \r\n[29:20] this so that we can have its own \r\n[29:24] function. This is me guessing \r\n[29:27] right now, or my understanding. \r\n[29:31] I hope it's not a straight-up \r\n[29:32] guess. We're pulling out the \r\n[29:35] user stuff from the log in page \r\n[29:37] because we want the page to be \r\n[29:39] more concerned with displaying \r\n[29:40] stuff and less concerned with if \r\n[29:43] the user is actually logged in \r\n[29:46] or not?\r\nDave: [29:50] We're pulling out the stuff so \r\n[29:51] that, log in page right now, it \r\n[29:55] needs this on log in function. \r\n[29:57] [laughs] It's not getting it as \r\n[30:01] a prop anymore because up here \r\n[30:04] we're not passing it in as a \r\n[30:05] prop anymore, because root \r\n[30:07] doesn't have it. It's moved up a \r\n[30:10] level. All that stuff moved into \r\n[30:13] the providers. We need to get at \r\n[30:15] it a different way now. Does \r\n[30:19] that makes sense?\r\nTaylor: [30:20] Yeah. Instead of having all of \r\n[30:23] my assistants pass something \r\n[30:24] along to bring it to me, I'm \r\n[30:26] going to get it myself from the \r\n[30:27] cupboard?\r\nDave: [30:29] Yeah.\r\nTaylor: [30:33] What are my assistants going to \r\n[30:34] do for the rest of the day? I \r\n[30:36] don't know.\r\n[30:42] [laughter]\r\nTaylor: [30:42] What's useUser for?\r\nDave: [30:47] If we have the whole context, we \r\n[30:49] can call useContext, userContext, \r\n[30:55] and we'll get that object that \r\n[30:57] we passed in. You can \r\n[30:59] destructure it here. We'll get \r\n[31:00] the user out, but we don't need \r\n[31:02] the user. What we do need is the \r\n[31:04] [laughs] login function. Here. \r\n[31:10] Just to recap what this thing is \r\n[31:12] doing, we've got the value here. \r\n[31:15] This value is what's coming out \r\n[31:18] at that other end. We just need \r\n[31:19] the login function in this.\r\n[31:23] We're just going to destructure \r\n[31:24] that. We can do it this way. \r\n[31:27] This is fine, this works, or if \r\n[31:30] we have a little custom hook \r\n[31:32] like this, useUser, we can \r\n[31:36] import that. Then we can do this, \r\n[31:49] instead of having to import the \r\n[31:51] context and also useContext, and \r\n[31:56] so assemble it ourselves.\r\nTaylor: [31:59] This is like how we did that \r\n[32:02] little alias style trick earlier, \r\n[32:05] where...\r\nDave: [32:06] It's another wrapper.\r\nTaylor: [32:07] It's another wrapper. This is \r\n[32:09] more clear. useUser is coming \r\n[32:13] from the UserContext file we \r\n[32:14] created...\r\nDave: [32:17] It's this here.\r\nTaylor: [32:18] and allows us...\r\nDave: [32:19] It's literally just calling that \r\n[32:20] thing. We could do manually, but \r\n[32:23] saves us a few characters. This \r\n[32:26] is not a higher order component. \r\n[32:30] Higher order component will be a \r\n[32:31] wrapper, and a different kind of \r\n[32:33] wrapper component. If you wanted \r\n[32:37] to wrap this component and make \r\n[32:38] it so you could pass in things \r\n[32:40] as props, that would be higher \r\n[32:43] order. I don't think I want to \r\n[32:46] get into higher order components.\r\n[32:48] UseUser, it's convention-based, \r\n[32:55] maybe.\r\nTaylor: [32:58] This type of making a custom \r\n[32:59] hook is now the way to do it?\r\nDave: [33:09] In this case, where it's just \r\n[33:11] literally returning a thing, \r\n[33:12] this is a convenience, in the \r\n[33:15] sense that reading this line of \r\n[33:17] code probably makes a little \r\n[33:18] more sense than reading this. \r\n[33:20] You know what this is doing. Oh \r\n[33:22] yeah, I'm going to get the user. \r\n[33:23] I don't really care where it \r\n[33:24] comes from. I'm just going to \r\n[33:26] get the user, pull out the login \r\n[33:28] function, good to go, instead of, \r\n[33:30] oh, it's a context.\r\n[33:31] I have to \r\n[33:32] import the context and the \r\n[33:33] useContext too, and I have to \r\n[33:34] wire them together. Maybe this \r\n[33:39] is a little bit easier to use. \r\n[33:41] Down the road, if you wanted to \r\n[33:43] do something special in here, \r\n[33:47] log out every time the context \r\n[33:48] is used or whatever, you have \r\n[33:50] one spot to do that.\r\n[33:59] Let me \r\n[33:59] pull that out here. We'll get \r\n[34:01] rid of that, and we'll get rid \r\n[34:02] of that. Now we just have to \r\n[34:04] import this one thing, and that \r\n[34:06] lets us get at the user or get \r\n[34:08] at the login function.\r\nTaylor: [34:11] The login page [laughs] gets the \r\n[34:16] login function directly from \r\n[34:18] UserContext, so we didn't have \r\n[34:19] to have, main page gives the \r\n[34:21] login to whatever it was. I'm so \r\n[34:32] close to getting it, Dave.\r\nDave: [34:34] You're going to have login here.\r\n[34:38] [laughter]\r\nDave: [34:38] I'll throw another wrench in the \r\n[34:38] works, just rename this thing.\r\nTaylor: [34:40] Classic.\r\n[34:50] [laughter]\r\nDave: [34:50] What's complaining? useContext...\r\nTaylor: [34:52] We're not returning the user \r\n[34:55] from useUser, we're returning \r\n[34:58] the context that contains the \r\n[35:02] values for user, login, and \r\n[35:04] logout.\r\nDave: [35:05] We're returning this, here. \r\n[35:07] That's what's coming out here. \r\n[35:11] If you were to run this through \r\n[35:12] a debugger or something, \r\n[35:14] [laughs] you'd effectively get \r\n[35:15] this. You get this stuff out of \r\n[35:18] the context, and that's what's \r\n[35:19] going to be returned here. We've \r\n[35:23] got our user and our login and \r\n[35:25] everything.\r\nTaylor: [35:29] The confusion there was thinking \r\n[35:31] that we returned user based on \r\n[35:32] useUser. [laughs]\r\nDave: [35:36] That's understandable. Maybe \r\n[35:38] this is not the best name. You \r\n[35:41] could call it useUserContext, \r\n[35:42] [laughs] or useUserSomethingElse, \r\n[35:44] useUserInfo, I don't know.\r\nTaylor: [35:46] Export function, get a bunch of \r\n[35:48] [inaudible] that has to do with \r\n[35:48] a user.\r\nDave: [35:52] In this case, we're returning \r\n[35:54] that entire context value. Like \r\n[35:58] I was saying, you could pick it \r\n[35:59] apart and only return one thing \r\n[36:01] if you wanted to. You could make \r\n[36:02] multiple custom hooks. Let's get \r\n[36:07] crazy, we can make a...\r\nTaylor: [36:09] [laughs] Yes, let's get crazy.\r\nDave: [36:11] useLogin. You could pull out \r\n[36:15] just login from this. Maybe this \r\n[36:22] is more like what you were \r\n[36:23] thinking. Now we can return just \r\n[36:26] the login function. Now any \r\n[36:29] component can use useLogin and \r\n[36:32] just get that function -- that \r\n[36:35] makes sense? -- through maybe \r\n[36:41] mincing it up or whatever. \r\n[36:44] Instead of doing that here, we \r\n[36:45] could use our useLogin function.\r\nTaylor: [36:52] UseLoin, I like that one.\r\n[36:55] [laughter]\r\nDave: [36:55] Do that.\r\nTaylor: [36:56] Different app.\r\nDave: [36:58] [laughs] That returns the whole \r\n[36:59] variable now. Maybe that's \r\n[37:03] easier to use. That's the sort \r\n[37:05] of stuff you can do here because \r\n[37:06] you have that whole context and \r\n[37:08] you can expose bits of it. You \r\n[37:10] can make whatever API makes more \r\n[37:13] sense to you, I suppose.\r\nTaylor: [37:16] A question about how earlier, we, \r\n[37:19] and by we, [laughs] I mean the \r\n[37:20] royal we, earlier I was asking \r\n[37:21] about pulling useContext into \r\n[37:23] its separate file, Linda asks if \r\n[37:26] it's usually a good idea to \r\n[37:28] define your custom hooks in the \r\n[37:30] same file as the context file, \r\n[37:33] or should you make those \r\n[37:35] separate files?\r\nDave: [37:37] If the custom hooks correspond \r\n[37:39] to this context, then you put \r\n[37:40] them in here. Otherwise, you're \r\n[37:42] just splitting stuff up, and \r\n[37:44] you've got to import this file \r\n[37:46] and know which file to import \r\n[37:47] your hooks from, versus the \r\n[37:48] context. Eh, put it all here. \r\n[37:52] This is the concern. This is all \r\n[37:55] the user stuff, and you put all \r\n[37:57] the user stuff here. That's what \r\n[38:00] I'd do.\r\n[38:03] Let's fix this error. \r\n[38:04] [laughs] We're still broken. We \r\n[38:07] don't need state anymore here, \r\n[38:08] we do need the user.\r\nTaylor: [38:12] We're going to use useUser.\r\n[38:19] [crosstalk]\r\n[38:19] [laughter]\r\nDave: [38:19] I'm going to pull out the user \r\n[38:22] from this thing. Now that I've \r\n[38:24] made those two functions, I'm \r\n[38:25] going to keep getting confused \r\n[38:26] about what this one does.\r\n[38:32] [laughter]\r\nDave: [38:32] We've got our user, and if we \r\n[38:35] have no user, we get the login \r\n[38:36] page. If we have a user, we get \r\n[38:38] the rest of the app. Oh, but \r\n[38:39] this is broken. That's neat. \r\n[38:44] How's message list? Oh, because \r\n[38:46] we're still pulling out the \r\n[38:48] wrong thing here.\r\nTaylor: [38:50] We want that from useUser now \r\n[38:52] instead of useContext.\r\n[38:54] UserContext. [laughs] We're \r\n[38:59] going command-f for useContext.\r\n[39:00] UserContext, to replace it with \r\n[39:02] useUser.\r\nDave: [39:05] Maybe that was not a good idea. \r\n[39:10] We'll pull the user out, rename \r\n[39:13] it whatever you like. Maybe \r\n[39:21] you're good now. Cool, all right. \r\n[39:23] We've got our name here. We've \r\n[39:25] got the little avatar, it's \r\n[39:26] showing up where we need it to, \r\n[39:28] and we can still log out. Feels \r\n[39:37] like it's coming along.\r\n[39:40] [laughter]\r\nTaylor: [39:40] I'll have to send my assistants \r\n[39:41] out for beers, because we've \r\n[39:44] gotten some work done. By we, I \r\n[39:47] mean you.\r\nDave: [39:49] Lots of good questions, though.\r\nTaylor: [39:50] Lots of great questions.\r\nDave: [39:55] The Context API in React Native \r\n[39:57] works the same, I would assume. \r\n[39:58] Not sure. Probably.\r\nTaylor: [40:04] There's a question about the \r\n[40:06] import of login from the API \r\n[40:07] file...\r\nDave: [40:10] From the API file? Oh, yeah.\r\nTaylor: [40:12] so that the login function...\r\nDave: [40:14] Clean this up, over here. Yeah, \r\n[40:16] we have a function called login. \r\n[40:20] Yes, it's called login, it's \r\n[40:23] down here. It's exported.\r\nTaylor: [40:26] [laughs] If the password hela \r\n[40:29] equals secret...That's pretty \r\n[40:32] good.\r\nDave: [40:33] [laughs] Why is current user \r\n[40:39] first name still working? That's \r\n[40:40] because this variable...This \r\n[40:43] colon-thing is like a renaming \r\n[40:46] syntax. If you're destructuring \r\n[40:47] something, it gets called user \r\n[40:49] in this object, but we're going \r\n[40:50] to rename it to currentUser, \r\n[40:52] which is why this works.\r\nTaylor: [40:55] That's that ES6 shorthand that I \r\n[40:57] can never remember how to do it \r\n[40:59] right the first time, so I \r\n[41:00] always just add a second line \r\n[41:01] and rename it, which may be not \r\n[41:06] the best idea.\r\nDave: [41:07] [laughs] Honestly, in this case \r\n[41:07] it's probably clearer to just do \r\n[41:08] this. [laughs]\r\nTaylor: [41:11] That would be the other thing I \r\n[41:12] would probably do.\r\nDave: [41:13] Probably be easier.\r\nTaylor: [41:15] There's a question about, \r\n[41:15] stylistically, rule of thumb \r\n[41:18] about, do you organize based on \r\n[41:22] having the least number of \r\n[41:23] imports?\r\nDave: [41:28] I don't know. I guess, maybe. No, \r\n[41:31] I don't know. Depends, where.\r\nTaylor: [41:34] [laughs] Just in general.\r\nDave: [41:38] I try to cut down on imports, I \r\n[41:40] suppose. I don't think that's \r\n[41:42] the primary motivator for these \r\n[41:44] things.\r\nTaylor: [41:45] For everybody asking about, the \r\n[41:46] code will be finalized when the \r\n[41:48] course is finalized. This \r\n[41:51] recording is practice. I don't \r\n[41:54] think anybody wants to sit \r\n[41:55] through me wondering what the \r\n[41:57] hell's going on. Maybe they do. \r\n[41:59] At least I like sitting through \r\n[42:01] this, but I'm biased because I \r\n[42:04] live with myself all the time.\r\nDave: [42:07] [laughs]\r\nTaylor: [42:07] This is for Dave to work on this \r\n[42:11] material, to make sure it's as \r\n[42:12] clear as possible. All your \r\n[42:13] questions are helpful in guiding \r\n[42:14] this. The code, things like \r\n[42:18] naming and things like that are \r\n[42:21] things that we will take into \r\n[42:22] account for the final product.\r\nDave: [42:25] This is all good stuff.\r\nTaylor: [42:28] There's questions about memory \r\n[42:29] limits. I don't know about that.\r\nDave: [42:35] You can store one item in it. \r\n[42:41] Contexts don't store data, I \r\n[42:44] should mention that. This \r\n[42:48] Provider thing, it's not like \r\n[42:50] the Provider holds on to that \r\n[42:52] data or owns that it or whatever, \r\n[42:53] it's just a prop that it passes \r\n[42:54] along. Anything you can pass in, \r\n[42:58] yeah, sure. The outlet can be as \r\n[43:01] big as you want. It can totally \r\n[43:03] hold as much as Redux can, \r\n[43:04] because it's just objects.\r\n[43:10] I \r\n[43:10] would say, if your Context \r\n[43:11] object is super complicated and \r\n[43:14] you have a complicated nested \r\n[43:15] state and stuff, Context might \r\n[43:17] not be the right solution for \r\n[43:18] that, because I don't know if \r\n[43:21] we'll have time for the \r\n[43:22] performance-y stuff, but it can \r\n[43:24] get tough to...Redux has a lot \r\n[43:26] of nice tricks under the hood to \r\n[43:27] make sure you aren't re-\r\n[43:28] rendering too often and only re-\r\n[43:31] rendering components that need \r\n[43:32] to.\r\n[43:34] You lose all that with \r\n[43:35] Context, you've got to do it all \r\n[43:36] manually. That's why it's good \r\n[43:40] to keep things simple, and \r\n[43:42] that's why splitting up Context \r\n[43:44] is important, too.\r\nTaylor: [43:47] There was a question about \r\n[43:48] multiple contexts which we'll \r\n[43:49] see in a little bit here.\r\nDave: [43:51] Yeah, maybe next, actually.\r\nTaylor: [43:55] [laughs]\r\nDave: [43:55] We've got our user thing. Let's \r\n[44:01] make another context for emails, \r\n[44:03] so we can get the emails \r\n[44:04] displaying here. I'm just going \r\n[44:06] to commit, so in case I break \r\n[44:09] anything...Working to our \r\n[44:14] UserContext.\r\nTaylor: [44:21] [laughs]\r\nDave: [44:21] I'm going to make a new file \r\n[44:22] called email_context. Really? \r\n[44:26] That was cool. It just stole the \r\n[44:28] focus and made a file called \r\n[44:30] email_con.\r\nTaylor: [44:30] Email_con?\r\nDave: [44:32] I don't want that. [laughs]\r\nTaylor: [44:34] Who would try to con somebody \r\n[44:36] over email?\r\n[44:40] [laughter]\r\nDave: [44:40] Just you wait. We'll do the \r\n[44:48] similar kind of thing as we did \r\n[44:50] here. I'm going to import React, \r\n[44:54] we're going to make a function, \r\n[44:58] we're going to make an email \r\n[45:02] Context, you can call React.\r\n[45:04] createContext, we'll make a \r\n[45:08] function called emailProvider. \r\n[45:13] If you were confused before, \r\n[45:14] hopefully doing it two more \r\n[45:16] times should help.\r\n[45:18] [laughter]\r\nDave: [45:18] What can I do to call it more \r\n[45:19] times? We're going to return our \r\n[45:23] emailContext.Provider.\r\nTaylor: [45:28] Provider. Then, inside of that \r\n[45:30] will be children?\r\nDave: [45:32] Mm-hmm. There's our wrapper \r\n[45:34] thing. We're going to pass down...\r\n[45:37] What's the thing called?\r\nTaylor: [45:38] Value?\r\nDave: [45:39] Value. We don't have anything to \r\n[45:41] put in here yet, so let's figure \r\n[45:44] that out. For these emails, \r\n[45:51] we're going to have some state. \r\n[45:53] We're going to have the emails, \r\n[45:55] it's going to be like an array. \r\n[45:56] We're going to have, whether \r\n[45:58] they're loading, whether there \r\n[46:01] was an error loading them, and a \r\n[46:04] way to set the current email. \r\n[46:06] We'll have, when you pick one, \r\n[46:09] it will set the current email.\r\n[46:10] We've got four pieces of state \r\n[46:11] here. We could leave it up to a \r\n[46:14] vote. Who wants to see a bunch \r\n[46:17] of useState and who wants to see \r\n[46:19] useReducer?\r\nTaylor: [46:21] A vote between useState and \r\n[46:23] useReducer. It's two-to-one. 91 \r\n[46:30] people in the crowd and four \r\n[46:31] people have voted. No.\r\n[46:34] [laughter]\r\nDave: [46:34] Reducer is winning so far.\r\nTaylor: [46:38] I'm thinking [laughs] WWDU, what \r\n[46:42] would Dave use?\r\nDave: [46:44] [laughs] Reducer is the one that \r\n[46:46] I used in my example, but I can \r\n[46:48] do it either way.\r\nTaylor: [46:49] It looks like Reducer is \r\n[46:51] probably the winner.\r\nDave: [46:52] I think Reducer's winning. Let's \r\n[46:54] do it that way.\r\nTaylor: [46:56] In the final workshop, probably \r\n[46:59] show both.\r\nDave: [47:00] We can do both. This is what \r\n[47:05] useState would look like. We've \r\n[47:07] got error loading, and then some \r\n[47:08] stuff, and then we'll just have \r\n[47:10] all these four more pieces of \r\n[47:11] state, and we would call things \r\n[47:13] to set them. Very similar to \r\n[47:16] this, like the general shape of \r\n[47:19] what it would look like.\r\n[47:20] UseReducer, let's do that. I'll \r\n[47:32] keep that around, actually. \r\n[47:39] Let's see, we call useReducer, \r\n[47:40] it takes a Reducer and it takes \r\n[47:43] an initial state. This is handy. \r\n[47:47] We have emails, empty array, we \r\n[47:51] have our loading flag, is going \r\n[47:53] to be false, error is going to \r\n[47:57] be null, and current email also \r\n[48:00] starts off null. Then we can \r\n[48:03] write our Reducer function in a \r\n[48:04] second.\r\n[48:06] This returns an array, \r\n[48:08] same as useState does. First \r\n[48:11] item is the state. We can call \r\n[48:15] it whatever we want.\r\nTaylor: [48:16] Then an updater?\r\n[48:19] [crosstalk]\r\nDave: [48:19] loader is the dispatch function \r\n[48:20] or the updater function, or \r\n[48:21] whatever you would like to call \r\n[48:22] it. We'll call this, and this is \r\n[48:25] going to call the reducer, and \r\n[48:28] we'll get a new state out of it. \r\n[48:32] We can write that Reducer, I'm \r\n[48:33] going to write it outside the \r\n[48:35] component, just to show that...\r\n[48:39] This one, it's not going to \r\n[48:40] depend on anything inside. It \r\n[48:43] doesn't need access to children \r\n[48:45] or any other variables.\r\n[48:47] We'll \r\n[48:47] just use it up here and switch \r\n[48:52] on action type. The actions \r\n[49:00] we'll have here are starting \r\n[49:02] loading, finishing loading, \r\n[49:05] setting an error. We'll fill \r\n[49:08] these out in a second. Let's \r\n[49:10] just have a default for now, \r\n[49:11] let's return state, so nothing \r\n[49:14] breaks. Now we've got the state, \r\n[49:20] we can pass down the whole state \r\n[49:22] as our value, so that everything \r\n[49:26] underneath here will get all the \r\n[49:27] emails and all the flags.\r\n[49:30] We \r\n[49:31] need one more thing, actually, \r\n[49:34] not just state. We need a Select.\r\n[49:36] Email function. It can take an \r\n[49:40] email. This is the function \r\n[49:44] that's going to set our current \r\n[49:45] email, so we'll call it Dispatch. \r\n[49:50] Now we get to decide what are we \r\n[49:51] going to call that thing. Select.\r\n[49:54] Email seems like a name, Select.\r\n[49:57] Email alone.\r\nTaylor: [50:03] On line five, for our Reducer \r\n[50:05] function, do we need to call \r\n[50:06] that dispatch?\r\nDave: [50:12] Do we need to name this dispatch?\r\nTaylor: [50:15] Never mind, no. Let me tell you \r\n[50:18] why I think I was wrong, but I \r\n[50:21] think I'm right now. [laughs] On \r\n[50:24] line 14, the first parameter to \r\n[50:28] useReducer, the word reducer, \r\n[50:34] there, that is what would be \r\n[50:37] called when we call dispatch?\r\nDave: [50:40] Yeah.\r\nTaylor: [50:42] We call dispatch when we want to \r\n[50:46] update something?\r\nDave: [50:47] Yep.\r\nTaylor: [50:48] We call dispatch and we pass in \r\n[50:51] the current state and the action...\r\n[50:53] That's that Redux vibe.\r\nDave: [50:58] This is very Redux-y. We're not \r\n[50:59] passing in the current state \r\n[51:00] into Dispatch, we just pass an \r\n[51:02] action, and then useReducer, \r\n[51:05] internally, will be like, \"OK, \r\n[51:06] cool. I'm gonna call your \r\n[51:08] Reducer with the old state and \r\n[51:10] that thing you just passed in.\" \r\n[51:11] We're going to end up with this \r\n[51:13] object coming out as our action. \r\n[51:16] We can say, if the type is \r\n[51:18] Select.Email, you will update \r\n[51:24] our state in some way.\r\n[51:26] It's an \r\n[51:27] object, we want to return a new \r\n[51:28] object, make sure it matches.\r\nTaylor: [51:31] Are you going to use the spread \r\n[51:32] operator?\r\nDave: [51:35] Yeah, because we only want to \r\n[51:36] replace current email, right? We \r\n[51:39] need to leave the rest of it \r\n[51:40] alone. I'm just going to spread \r\n[51:42] out the existing state, \r\n[51:44] basically making a copy of \r\n[51:45] everything we have. Then we'll \r\n[51:46] override current email with this \r\n[51:52] email that we passed into the \r\n[51:53] action.\r\n[51:58] This is not going to do \r\n[51:59] much of anything yet. We're \r\n[52:02] getting there, I suppose. Yeah, \r\n[52:09] we've got a few more actions to \r\n[52:10] do. We have to load emails when \r\n[52:13] this thing starts up. It's like \r\n[52:16] fetching data sort of. We have \r\n[52:18] our fake API. I think we have a \r\n[52:21] thing called fetch emails and \r\n[52:22] the fake API. We're going to \r\n[52:26] need to call that when this \r\n[52:28] component mounts, which we can \r\n[52:31] use useEffect for.\r\nTaylor: [52:32] Yeah, I was going to say, \r\n[52:34] because we're not going to have \r\n[52:35] a component did mount when we're \r\n[52:36] living in a hooks world.\r\nDave: [52:39] You can just useEffect hook. \r\n[52:41] We'll pass in our effect \r\n[52:43] function. I don't know if you \r\n[52:48] all have used useEffect before. \r\n[52:50] Maybe you were in that previous \r\n[52:51] live stream the useEffect and \r\n[52:53] API stuff. We're going to pass \r\n[52:55] the second argument that's empty \r\n[52:57] so that the effect, it only run \r\n[53:02] on mount. We can call fetched \r\n[53:04] emails. Actually, before that I \r\n[53:08] guess we want to dispatch we're \r\n[53:09] loading.\r\nTaylor: [53:11] Yeah, we want to set loading to \r\n[53:12] true.\r\nDave: [53:14] IP is loading. We'll deal with \r\n[53:16] these actions later. We'll make \r\n[53:18] up the API as we go I suppose. \r\n[53:20] Make up the actions down here \r\n[53:21] then we'll put them in.\r\nTaylor: [53:23] Do we need to pass a true or \r\n[53:25] something on line 32?\r\nDave: [53:29] No. The actions, it's a...\r\nTaylor: [53:31] Oh, we're just going to return \r\n[53:32] bang loading so it will toggle.\r\nDave: [53:35] Right. The reducer gets to \r\n[53:38] decide what the state's going to \r\n[53:40] be, but the action is like, \"Hey, \r\n[53:43] a thing happened,\" basically and \r\n[53:45] then the reducer decides what to \r\n[53:46] do. Yeah, we just need to \r\n[53:48] describe a thing that happened. \r\n[53:52] After we fetch emails, I'm just \r\n[53:54] going to these promises, we'll \r\n[53:55] get the emails. Dispatch, type, \r\n[54:02] maybe success, like set emails \r\n[54:05] or something. Pass the emails \r\n[54:07] through.\r\n[54:09] If it fails, you can \r\n[54:11] take the error in this batch, \r\n[54:16] type of error, and pass the \r\n[54:19] error along. We fill those in.\r\nTaylor: [54:25] Do we need another then to tell \r\n[54:26] loading that we're done loading?\r\nDave: [54:30] We can deal with that here, \r\n[54:32] actually. The reducer is going \r\n[54:36] to be setting that. Let's do \r\n[54:39] that now actually, because this \r\n[54:41] is it for here. When we start \r\n[54:45] loading, we'll do one thing. We \r\n[54:48] need to handle success, which is \r\n[54:50] going to do the setting loading \r\n[54:52] false. Same thing with error.\r\n[54:57] This is the advantage of doing \r\n[54:58] the reducer thing, because if we \r\n[55:00] were doing this with setState, \r\n[55:02] we would need to do both sets \r\n[55:03] here. We need to set emails and \r\n[55:06] set loading false.\r\nTaylor: [55:10] That's where my mind was on that.\r\nDave: [55:13] Which is the same code, this is \r\n[55:16] what that would look like in \r\n[55:17] this login form. We'd fetch \r\n[55:19] emails, then set loading false, \r\n[55:21] and set our emails.\r\nTaylor: [55:25] Then you have to be explicit \r\n[55:26] about your loading, also, \r\n[55:28] instead of just toggling it. Can \r\n[55:33] we look at the fetch emails real \r\n[55:34] fast inside the API just to see \r\n[55:38] what's going on?\r\n[55:39] [crosstalk]\r\nDave: [55:39] Fetch emails. It returns a \r\n[55:43] promise that [inaudible] seconds.\r\n[55:45] [crosstalk]\r\nTaylor: [55:45] [laughs] Resolve lots of emails.\r\nDave: [55:46] [laughs] Lots of emails. \r\n[55:48] Actually, I'm going to change \r\n[55:49] this to fake emails. Lots of \r\n[55:53] emails, maybe we can do this \r\n[55:55] later. It's 1,000. [laughs] Just \r\n[56:01] a few is good for now.\r\nTaylor: [56:02] It's like a real inbox.\r\n[56:12] [laughter]\r\nTaylor: [56:12] There was a question about the \r\n[56:13] naming of select email. Is \r\n[56:17] select email name preferable to \r\n[56:19] set email or update email?\r\nDave: [56:24] I could go for set email. The \r\n[56:27] action here is like clicking on \r\n[56:29] an email in the list. I think of \r\n[56:33] that as selecting the email or \r\n[56:37] setting the email. I wouldn't \r\n[56:39] call it update email, probably. \r\n[56:42] Update seems like a different \r\n[56:43] thing to me.\r\nTaylor: [56:48] What's the saying about the two \r\n[56:49] hard things in computer science \r\n[56:51] are whiteboard interviews and \r\n[56:52] naming things?\r\nDave: [56:54] [laughs]\r\nTaylor: [56:54] It might not have been \r\n[56:54] whiteboard interviews.\r\nDave: [56:57] I think it's cash and validation, \r\n[56:59] naming things, and off by one \r\n[57:00] errors, or something.\r\nTaylor: [57:01] Off by one. I was always off by \r\n[57:02] one.\r\nDave: [57:04] There's three of them.\r\n[57:08] [laughter]\r\nTaylor: [57:08] I stepped into that joke so good. \r\n[57:11] Nice work, Dave.\r\nDave: [57:17] [laughs] That was really \r\n[57:19] intentional. Didn't work out \r\n[57:20] well, did it?\r\nTaylor: [57:21] It was nice. It was great.\r\nDave: [57:25] [laughs]\r\nTaylor: [57:25] We've only lost 20 people. I \r\n[57:27] hope that everyone else is \r\n[57:28] having a good time on a Thursday \r\n[57:30] with us.\r\nDave: [57:33] [laughs] Loading is going to \r\n[57:36] start. Loading is through. We're \r\n[57:37] going to reset the error. Good \r\n[57:41] time to reset the error. If and \r\n[57:46] when it succeeds, we're going to \r\n[57:49] copy the state again and set \r\n[57:51] loading to false, because \r\n[57:53] loading's done, and set emails \r\n[57:58] to action.emails. Then we call \r\n[58:01] the key emails.\r\n[58:06] Copy that, \r\n[58:07] paste that here. There's an \r\n[58:09] error. Loading is false. The \r\n[58:12] error is action.error. You don't \r\n[58:15] get the emails. Maybe you reset \r\n[58:18] them empty or something. True. \r\n[58:22] No emails. That's all the stuff \r\n[58:30] we have to handle.\r\nTaylor: [58:31] I think so.\r\nDave: [58:33] We've got to pass down the state. \r\n[58:35] We need to pass this down, the \r\n[58:36] Select.Email thing, too. I'm \r\n[58:38] going to do the same trick as we \r\n[58:40] did earlier, make a variable \r\n[58:42] with Select.Email, and all the \r\n[58:47] stuff from state. Let's pass \r\n[58:50] everything down. There's this \r\n[58:54] two value.\r\n[58:59] We've got our email \r\n[59:00] provider. It's going to pass all \r\n[59:02] the stuff down. We should be \r\n[59:03] able to get emails out somewhere. \r\n[59:07] Let's wrap the app in this thing. \r\n[59:11] Then we get work and emails out. \r\n[59:13] We're already wrapping with the \r\n[59:14] user/provider. We can wrap this \r\n[59:16] whole thing maybe inside email \r\n[59:19] provider.\r\nTaylor: [59:23] The email provider, I'm guessing \r\n[59:25] the order matters on this.\r\nDave: [59:31] The order definitely matters, \r\n[59:32] because a provider will only \r\n[59:34] provide stuff down. These things \r\n[59:37] can access the user.\r\nTaylor: [59:40] You wouldn't want email on the \r\n[59:42] outside, because email has to \r\n[59:43] know who you are to show you \r\n[59:45] your email.\r\nDave: [59:49] Actually, our chunky fake API \r\n[59:51] doesn't care about the user, but \r\n[59:53] it would in real world, so yes. \r\n[59:56] [laughs]\r\nTaylor: [59:56] For all of us trying to build an \r\n[59:59] email startup.\r\nDave: [60:04] I'm sorry. Also, security is \r\n[60:05] important. [laughs] Provider's \r\n[60:10] not defined, because we didn't \r\n[60:11] import it.\r\nTaylor: [60:12] Then here's a question about, \r\n[60:14] Eugene asks, \"Why does email \r\n[60:16] provider wrap route?\"\r\nDave: [60:20] Why does email provider wrap \r\n[60:21] route? We're going to need to \r\n[60:24] get the emails out inside \r\n[60:27] message list, which is inside \r\n[60:28] main.\r\nTaylor: [60:30] I just splashed water all over \r\n[60:32] my face, sorry.\r\nDave: [60:34] [laughs]\r\nTaylor: [60:34] I don't know if anybody actually \r\n[60:35] saw that or not.\r\nDave: [60:36] We're having a good day, dude. \r\n[60:38] [laughs]\r\nTaylor: [60:38] That's the thing that just \r\n[60:39] happened. We're wrapping it \r\n[60:43] route [laughs] inside of email \r\n[60:45] provider.\r\nDave: [60:46] Wrapping route inside email \r\n[60:47] provider. If we put route \r\n[60:51] outside of this, then nothing \r\n[60:53] inside route can get emails. \r\n[60:59] Main page is inside route and \r\n[61:02] message list is inside main page. \r\n[61:06] We need to put the provider as a \r\n[61:07] grandparent of the data. \r\n[61:11] Ancestor, whatever.\r\nTaylor: [61:14] I like grandparent.\r\nDave: [61:17] I guess grandparent is \r\n[61:18] specifically, a couple levels up. \r\n[61:20] This can be anywhere above. \r\n[61:24] Anyway, [laughs] family trees. \r\n[61:27] We've got a provider. I don't \r\n[61:31] think I actually imported it, so \r\n[61:33] I'm going to import email \r\n[61:36] provider.\r\nTaylor: [61:39] Then, are we going to make a use \r\n[61:41] email provider?\r\nDave: [61:43] Email content. Let's make a use \r\n[61:45] email something. [laughs] It's \r\n[61:49] going to be called email, email \r\n[61:50] provider?\r\n[61:53] [laughter]\r\nDave: [61:53] Email provider is not exported \r\n[61:55] from your email context. Oh, is \r\n[61:57] it now? Oh, it's not, all right. \r\n[62:00] [laughs]\r\nTaylor: [62:00] There we go.\r\nDave: [62:01] Now export. Let's make that \r\n[62:03] thing. We can decide use email \r\n[62:09] or something. I guess the \r\n[62:12] easiest thing to do again is we \r\n[62:15] just return everything. That's \r\n[62:18] going to be this value object \r\n[62:20] with everything in the state, so \r\n[62:21] we'll get emails loading error, \r\n[62:23] current email, and this function, \r\n[62:27] use email props.\r\nTaylor: [62:28] Use email props?\r\nDave: [62:29] Sort of. It's not really props, \r\n[62:31] though.\r\nTaylor: [62:32] Right.\r\nDave: [62:34] They're not being passed into a \r\n[62:35] component.\r\nTaylor: [62:39] You're taking them out instead \r\n[62:42] of pushing them in.\r\nDave: [62:44] Yeah.\r\nTaylor: [62:45] I had to do the arm motion with \r\n[62:46] it.\r\nDave: [62:50] I have to think of more \r\n[62:51] analogies for this. I picture -- \r\n[62:53] I don't know -- something from \r\n[62:54] Doctor Who or something. There's \r\n[62:55] fairies in the air. You just \r\n[62:56] reach out and grab some. I don't \r\n[63:00] know.\r\n[63:01] [laughter]\r\nDave: [63:01] The context is all around you. \r\n[63:02] You can just grab it and use it.\r\nTaylor: [63:05] Tim asks about wrapping the main \r\n[63:08] page as the login doesn't need \r\n[63:11] it.\r\nDave: [63:14] You could do that. We could move \r\n[63:19] email provider just around main \r\n[63:20] page, yeah.\r\nTaylor: [63:23] Then it would be return-user, \r\n[63:25] then email provider main page.\r\nDave: [63:27] This'd be here.\r\nTaylor: [63:28] Yeah. I feel like I would miss \r\n[63:33] that.\r\nDave: [63:34] I feel like it's easier to put \r\n[63:35] them all in one spot because \r\n[63:37] that doesn't really hurt. That's \r\n[63:40] not true. I don't know. There's \r\n[63:45] a trade-off. It will render more \r\n[63:46] things, I think, if it's further \r\n[63:47] up the tree, but for ease of \r\n[63:50] readability and stuff. Being \r\n[63:52] able to say, \"Hey, we have all \r\n[63:58] the providers are at the top.\"\r\nTaylor: [64:04] We got a question about, \"Is it \r\n[64:07] better to manage separate \r\n[64:09] providers, or what about the \r\n[64:11] idea of having something like a \r\n[64:12] state provider from a state \r\n[64:14] context that has all the state?\"\r\nDave: [64:21] That's what I was saying earlier \r\n[64:22] about it's better to keep your \r\n[64:26] contexts smaller and more \r\n[64:30] focused. Rather just having use \r\n[64:32] globals or something, [laughs] \r\n[64:35] all the stuff in one place. \r\n[64:37] That's what React does. I don't \r\n[64:41] know if we're going to have time \r\n[64:42] to get into performance stuff.\r\n[64:44] Every place you use one of these, \r\n[64:46] either use context or a consumer \r\n[64:49] something, those are going to re-\r\n[64:50] render when the stuff in the \r\n[64:53] context changes. If you pass a \r\n[64:55] new value in here, it's going to \r\n[64:58] re-render all those consumers. \r\n[65:03] If you're tying all of your data \r\n[65:05] together, then when any bit of \r\n[65:07] it changes, the whole app is \r\n[65:08] going to re-render pretty much. \r\n[65:11] Another thing, it might get \r\n[65:13] annoying to performance tune.\r\n[65:19] That's why I think if you have a \r\n[65:20] lot of data just read out your \r\n[65:22] mod backs, or something.\r\nTaylor: [65:24] Yeah, but for something like \r\n[65:25] this, where we don't have that \r\n[65:26] much data.\r\nDave: [65:26] Mm-hmm. Yeah, it's good for this.\r\nTaylor: [65:29] Jonathan asked, \"In general is \r\n[65:32] it better to create a provider \r\n[65:34] for a specific purpose, like, \r\n[65:36] email provider is for email, \r\n[65:37] food provider for food?\"\r\nDave: [65:39] Yeah, it seems good.\r\nTaylor: [65:43] I also like food provider as a \r\n[65:46] named thing.\r\nDave: [65:47] Yeah, food provider is a good \r\n[65:49] name of that thing.\r\nTaylor: [65:50] I'll have to have my assistants \r\n[65:50] get on that.\r\nDave: [65:52] Oh, I didn't want to do that. \r\n[65:53] What did I do? Oh, I clicked on \r\n[65:54] it and it opened my editor. Line \r\n[65:57] 74, use context, right? Sorry, \r\n[66:02] I'm just getting off-track here. \r\n[66:03] Use context from React. We have \r\n[66:08] our email provided now and we \r\n[66:10] can just go and pull it out \r\n[66:11] somewhere, so we'll have our \r\n[66:13] useEmail thing. We can go over \r\n[66:14] to our message list. I'm going \r\n[66:17] to paste in some stuff and save \r\n[66:20] a bit of time, if I can find my \r\n[66:25] notes.\r\nTaylor: [66:27] While you're looking for that, \r\n[66:28] is it possible to have too many \r\n[66:29] contexts, like the way that some \r\n[66:32] older React apps might have too \r\n[66:34] many stores?\r\nDave: [66:39] Yeah, probably. I don't know. \r\n[66:42] Probably. I feel like if you had \r\n[66:44] like 10 different providers here, \r\n[66:48] I don't know, it would get...\r\nTaylor: [66:50] Like the flying V, or whatever?\r\nDave: [66:51] Yeah, it would look pretty \r\n[66:53] unwieldy. I think it would work. \r\n[66:58] I don't know about performance, \r\n[67:00] I'm not sure. We'd have to \r\n[67:02] measure and find out. There's \r\n[67:04] probably a tipping point where \r\n[67:06] you don't want to have 30 \r\n[67:09] contexts, or whatever.\r\nTaylor: [67:12] It's not hard-coded at like 42?\r\n[67:18] [laughter]\r\nDave: [67:18] I'm going to render out, I'm \r\n[67:19] going to change this message \r\n[67:20] list thing to render a div with \r\n[67:26] my...Nope. That. This message \r\n[67:33] list, we're going to need to get \r\n[67:35] the emails, and the loading, and \r\n[67:40] the error in that Select.Email \r\n[67:42] function from our useEmail hook.\r\n[67:47] We can import useEmail from \r\n[67:51] email context. We'll get those \r\n[67:55] things here. This is a messy \r\n[68:01] thing to write. You can either \r\n[68:02] write a bunch of nested \r\n[68:03] ternaries in here of like, if \r\n[68:05] it's loading, render this thing, \r\n[68:06] if it's error, render something \r\n[68:07] else. I'm going to do it a \r\n[68:12] little differently, I think. \r\n[68:13] I'll just make like a content \r\n[68:15] variable up here. If there's an \r\n[68:19] error, we'll set the content to \r\n[68:22] one thing.\r\nTaylor: [68:24] Nice. No need to get super fancy \r\n[68:27] for that.\r\nDave: [68:31] You can do it either way. You \r\n[68:33] can also do this inside and like \r\n[68:34] make a function and wrap it. \r\n[68:36] There's lots of crazy ways you \r\n[68:37] could do it. I don't know, I \r\n[68:40] think this is easy enough, right?\r\nTaylor: [68:44] Yeah.\r\nDave: [68:45] The trouble here is a lot of \r\n[68:48] times you'd see these things \r\n[68:50] would short circuit. You'd say, \r\n[68:52] like, if error, return blah, but \r\n[68:54] since we need this wrapper div, \r\n[68:56] we can't do that. You can't do \r\n[68:59] the early return thing. Error \r\n[69:02] loading if emails lay is zero, \r\n[69:14] and we'll render.\r\nDave: [69:16] Inbox zero or something?\r\nTaylor: [69:18] [laughs] It's pretty much the \r\n[69:18] same thing as we had last time, \r\n[69:19] I guess. Content equals blah. We \r\n[69:25] have a user. Only one of those, \r\n[69:30] it's great. [laughs] We got our \r\n[69:35] content, and then otherwise we \r\n[69:38] render. Let's just make this \r\n[69:41] null. I guess make it explicit. \r\n[69:44] If none of these things is true, \r\n[69:46] we just render this list of \r\n[69:48] emails.\r\n[69:49] Email is not the find \r\n[69:50] because I didn't find it. All \r\n[69:54] right email's one that just \r\n[69:56] renders out the subject in \r\n[69:57] [inaudible] . Let's see if it \r\n[70:02] works. Yay!\r\nDave: [70:04] Wicked.\r\nTaylor: [70:05] Cool. Emails.\r\nDave: [70:06] Hey, it's an email con.\r\nTaylor: [70:07] An email con, isn't that \r\n[70:09] interesting? [laughs]\r\nDave: [70:12] [laughs] I like that you \r\n[70:16] included an actual email, the \"\r\n[70:18] Hey Dave\" email from me.\r\nTaylor: [70:20] [laughs]\r\nDave: [70:20] I guess [laughs] I'm pretty sure \r\n[70:22] I've written you that multiple \r\n[70:22] times.\r\n[70:29] [laughter]\r\nTaylor: [70:29] Patrick says, \"If only my \r\n[70:30] development flowed like this.\" \r\n[70:32] Yes, it's clipboard driven \r\n[70:34] development.\r\nDave: [70:37] [laughs]\r\nTaylor: [70:37] Not really.\r\nDave: [70:38] Here to see.\r\nTaylor: [70:39] Dave did this ahead of time. \r\n[70:40] It's like that cooking show.\r\n[70:41] [crosstalk]\r\nDave: [70:41] You can see [inaudible] clearly. \r\n[70:42] Pasted those things together.\r\nTaylor: [70:44] You make the stuffing, you bend \r\n[70:45] over, and the turkey is already \r\n[70:46] cooked.\r\nDave: [70:48] [laughs] Right. Let me just turn \r\n[70:50] over here, and I'll grab the...\r\n[70:53] [crosstalk]\r\nTaylor: [70:53] Did you see that GIF about how \r\n[70:54] they film pizza commercials? \r\n[70:56] Where they fake the cheese and \r\n[71:00] stuff?\r\nDave: [71:01] No.\r\nTaylor: [71:02] When you pull the slice out, and \r\n[71:03] it looks all cheesy. It's really \r\n[71:04] Elmer's glue and rubber and \r\n[71:07] stuff.\r\nDave: [71:08] No. Aw, terrible.\r\nTaylor: [71:09] It's seeing how the fake pizza \r\n[71:11] is made, [laughs] it makes Pizza \r\n[71:15] Hut look worse honestly.\r\n[71:17] [laughter]\r\nDave: [71:17] Hopefully, that's the fake pizza.\r\nTaylor: [71:22] They call it the cheese pull in \r\n[71:24] the industry. Today, I learned.\r\nDave: [71:27] All right.\r\n[71:32] [laughter]\r\nDave: [71:32] Cool.\r\nTaylor: [71:33] Steve pointed out, \"To add onto \r\n[71:35] that too many stores thing. \r\n[71:37] Cancel-click-store or clicked \r\n[71:38] item store, organization select \r\n[71:40] store, search counter, search \r\n[71:41] input.\" I wouldn't think of \r\n[71:44] context for each of those.\r\nDave: [71:49] Clicked items, organization \r\n[71:50] select, search counter, search \r\n[71:52] input, stop query.\" Stop query? \r\n[71:57] It's an action. I don't know. \r\n[72:00] [laughs]\r\nTaylor: [72:00] It's kind of weird.\r\nDave: [72:01] I feel like a lot of those are \r\n[72:02] actions more than data. Cancel-\r\n[72:07] click and clicked items seem \r\n[72:08] like they're both items. Search-\r\n[72:12] input and search-counter seem \r\n[72:14] like search. I think I grouped \r\n[72:17] some of those together.\r\nTaylor: [72:18] Yeah.\r\nDave: [72:20] Cool. We've got emails. I don't \r\n[72:22] know if we can select them yet. \r\n[72:27] You're over here. If you clicked \r\n[72:28] on one it should call Select.\r\n[72:30] Email, but we're not doing \r\n[72:32] anything with that yet. I think \r\n[72:35] in main page we can check if \r\n[72:38] there's a current email. Then we \r\n[72:42] can render the message viewer. \r\n[72:49] Otherwise I can put this...\r\nTaylor: [72:49] The cheese polled, man.\r\nDave: [72:51] The cheese polled.\r\nTaylor: [72:57] The kind of thing that keeps me \r\n[72:58] awake at night.\r\nDave: [73:01] Halfway scary things about food \r\n[73:02] photography, maybe that doesn't \r\n[73:03] seem all that surprising, like \r\n[73:05] the fake steam and stuff like \r\n[73:07] that. I don't know.\r\nTaylor: [73:08] Fake steam?\r\nDave: [73:09] I think that's a fake thing.\r\nTaylor: [73:10] How do you...?\r\nDave: [73:11] Like when there's hot food \r\n[73:12] sitting on a table, I'm pretty \r\n[73:13] sure they fake the steam.\r\nTaylor: [73:16] I'm thinking about when the \r\n[73:17] fajitas come out at the Mexican \r\n[73:18] restaurant and it's on the \r\n[73:19] sizzling pan and everybody just \r\n[73:21] looks and it's like they put \r\n[73:22] water on the deal.\r\nDave: [73:26] Special sizzling thing. Special \r\n[73:29] sizzling water, I guess.\r\nTaylor: [73:31] This stream has taken a turn, \r\n[73:33] folks.\r\nDave: [73:35] It really has. I swear we didn't \r\n[73:38] have any beer or anything.\r\nTaylor: [73:40] Not yet. That's for later.\r\nDave: [73:42] Let me pull up current email \r\n[73:45] from use.Email and import use.\r\n[73:51] Email.\r\nTaylor: [74:00] Richard dropping another truth \r\n[74:01] bomb, \"Chocolate ice cream to \r\n[74:06] gravy browning on mashed \r\n[74:07] potatoes.\" Really, I'd eat \r\n[74:08] either, but it's like if you \r\n[74:10] think you're going to have a \r\n[74:11] drink of Sprite but it's just \r\n[74:13] club soda, it's like, \"Oh, gross.\"\r\nDave: [74:15] Oh, yeah.\r\nTaylor: [74:16] It's not necessarily gross, it's \r\n[74:18] just not what you expected.\r\nDave: [74:19] Yeah, yeah, yeah. That's no good.\r\nTaylor: [74:25] Let's select some emails. Sorry, \r\n[74:27] Dave, I'll get us back on...Well, \r\n[74:32] I'll try to get us as on-track \r\n[74:34] as I can be.\r\nDave: [74:35] It works, except that message \r\n[74:37] viewer does not display things. \r\n[74:42] Hold on one sec. Now it does. Oh, \r\n[74:49] God, did you see that?\r\nTaylor: [74:51] Did you use email doc find? Yeah, \r\n[74:52] you've got to bring in user \r\n[74:53] email.\r\nDave: [74:54] We're running low on time, so \r\n[74:58] I'm just copying things at this \r\n[74:59] point. We get our email and we \r\n[75:04] can click back. In this case \r\n[75:06] it's null.\r\nTaylor: [75:08] Whole US dollars.\r\nDave: [75:14] Cool. Yeah, emails. The next \r\n[75:19] thing I wanted you to look at \r\n[75:21] was displaying notifications. \r\n[75:25] Then, maybe, some performance \r\n[75:26] stuff. I think we have like 10 \r\n[75:28] minutes left on this. I don't \r\n[75:30] know. How are we doing for time?\r\nTaylor: [75:34] I'm just hanging out.\r\nDave: [75:36] All right, I'll keep going.\r\nTaylor: [75:37] How about people in the crowd, \r\n[75:40] are you feeling all right?\r\nDave: [75:41] You'll see notifications. I feel \r\n[75:43] like, yeah, maybe we'll keep \r\n[75:46] going.\r\nTaylor: [75:46] We've got to keep going. Cool.\r\nDave: [75:47] All right, we'll do it. Let me \r\n[75:52] come in again and write things.\r\nTaylor: [75:55] Do you want to go another like, \r\n[75:58] I don't know, notification's \r\n[75:59] worth?\r\nDave: [76:00] Sure. I'll do some more copying \r\n[76:05] and pasting, so you don't have \r\n[76:06] to watch me type it all out.\r\nTaylor: [76:08] Yeah. \"The code will be \r\n[76:10] available when the course stuff \r\n[76:11] is finalized?\" Yes, but, no. You \r\n[76:17] will eventually be able to see \r\n[76:19] it. This is like why we talk \r\n[76:23] about this stuff as like, naming, \r\n[76:24] and making sure that things make \r\n[76:26] sense.\r\nDave: [76:29] Yeah, all these clarifying \r\n[76:31] questions and confusions and \r\n[76:33] stuff, we'll pull them all into \r\n[76:35] the lessons and make them better. \r\n[76:38] All right, so we're going to \r\n[76:40] make a notification thingy. We \r\n[76:47] could be specific there. Every \r\n[76:49] couple of seconds we'll get some \r\n[76:50] more emails and we'll get a \r\n[76:52] little display, like a little \r\n[76:54] toastr pop-up growl, whatever \r\n[76:56] you call those things.\r\nTaylor: [76:57] A toastr pop-up growl? Like, \"\r\n[76:59] Pillsbury's new toaster pop-up \r\n[77:02] growl.\"\r\nDave: [77:03] I don't know. I feel like every \r\n[77:04] couple of years we were like, \"\r\n[77:05] Oh, yeah, there's a growl \r\n[77:06] notification. Oh, no, they're \r\n[77:07] called toasters now.\"\r\nTaylor: [77:07] It's like a savory Pop-Tart.\r\nDave: [77:09] Yeah.\r\nTaylor: [77:10] Sorry.\r\nDave: [77:11] That doesn't sound good at all.\r\nTaylor: [77:12] I think maybe I'm hungry.\r\nDave: [77:19] Let's look at notifications. I'm \r\n[77:23] going to paste a bunch of stuff, \r\n[77:25] so I don't have to write it out. \r\n[77:28] I probably mentioned earlier, \r\n[77:29] we're doing the same thing three \r\n[77:31] times. This is a lot of the same \r\n[77:32] stuff. We're importing React, \r\n[77:37] we're creating a context, we're \r\n[77:38] making a provider function. It \r\n[77:39] takes children. I'll get to this \r\n[77:42] in a second. We've got our hook \r\n[77:44] thing down here with user \r\n[77:45] notification and that kind of \r\n[77:47] stuff.\r\nTaylor: [77:47] That's our shortcut.\r\nDave: [77:49] That's our structure. We've got \r\n[77:52] this individual notification. \r\n[77:53] Those little things up in the \r\n[77:56] corner. It's just the text and a \r\n[77:58] close button.\r\nTaylor: [77:59] The end times, that's the HTML X?\r\nDave: [78:02] Mm-hmm.\r\nTaylor: [78:03] OK, cool. I was like 99 percent \r\n[78:06] sure.\r\nDave: [78:08] Yeah, it looks better than the \r\n[78:11] regular X. The rest of the stuff, \r\n[78:16] we have some state to hold \r\n[78:19] messages that are displayed, and \r\n[78:22] we have a couple of little \r\n[78:23] functions to add messages to it \r\n[78:26] and remove messages from that \r\n[78:28] list. Then, we're passing down \r\n[78:32] that value again, so we have the \r\n[78:33] data and then a couple handler \r\n[78:36] functions are passing in as the \r\n[78:37] value.\r\n[78:41] That's what's going to \r\n[78:42] make this available everywhere. \r\n[78:43] The reason we want to make this \r\n[78:44] a context, is because for \r\n[78:47] notifications, you usually want \r\n[78:48] anywhere in the app to be able \r\n[78:50] to dispatch notification, but \r\n[78:52] you want them all to appear at \r\n[78:53] the top level somewhere.\r\n[78:57] This \r\n[78:57] context instead of just \r\n[78:59] rendering the children, it's \r\n[79:00] also going to render this \r\n[79:01] notification stuff on top of \r\n[79:05] everything so that anywhere in \r\n[79:08] the app can dispatch a \r\n[79:09] notification message and this \r\n[79:11] thing will display them. We're \r\n[79:14] just looping over the messages \r\n[79:15] and displaying these messages. \r\n[79:22] Let's go try it out. Go wrap the...\r\n[79:27] add another level of wrapping \r\n[79:29] here to no. I think I want to \r\n[79:33] put it here.\r\nTaylor: [79:36] Notifications need to be able to \r\n[79:39] know who the user is, the same \r\n[79:41] as our email do, right?\r\nDave: [79:47] Yeah. In this specific case, the \r\n[79:50] reason I want to put it here is \r\n[79:52] because we only want to show \r\n[79:57] notifications during not at the \r\n[80:00] login page. That's why we can we \r\n[80:06] can clear off the current user \r\n[80:08] and not display the notification.\r\n[80:16] [laughter]\r\nTaylor: [80:16] Patrick. [laughs] That's the \r\n[80:24] thing. [laughs] I feel like \r\n[80:32] we'll just end up burning food, \r\n[80:34] if I was trying to cook while \r\n[80:35] talking about something else.\r\nDave: [80:38] That doesn't seem like it would \r\n[80:39] go well. Unless with something \r\n[80:42] super easy like toast or \r\n[80:44] something.\r\nTaylor: [80:46] Like a savory pop tart?\r\nDave: [80:48] Yeah. We have our notification \r\n[80:52] provider which can display \r\n[80:54] notifications. Let's go over to \r\n[80:58] our email, notifies your email \r\n[81:01] contacts. We're going to set up \r\n[81:09] a timer to fetch new emails \r\n[81:11] every few seconds which means \r\n[81:14] another useEffect. In here, we \r\n[81:21] going to make this OK initially \r\n[81:25] wanted to run only once. I need \r\n[81:29] to add some more things to that. \r\n[81:30] I don't think I wanted to run \r\n[81:31] every render.\r\nTaylor: [81:33] Is it a safe bet to just always \r\n[81:35] default to adding the only run \r\n[81:37] once empty array?\r\nDave: [81:39] I don't think so, no. I would \r\n[81:41] say it's usually probably safer \r\n[81:44] to leave it like, always run, \r\n[81:50] but I don't know. I guess it \r\n[81:52] depends on what you want to do. \r\n[81:54] I'll leave it that way we can \r\n[81:56] work our way into it I suppose. \r\n[82:00] I'm going to make a timer \r\n[82:03] variable. We can use set \r\n[82:09] interval to create one. I'm \r\n[82:12] going to call this function call \r\n[82:14] refresh.\r\n[82:19] Every three seconds, \r\n[82:21] we'll fetch more emails, then \r\n[82:22] we're going to return that clean-\r\n[82:23] up function. Whatever you return \r\n[82:26] from this effect is going to get \r\n[82:28] run before the next effect runs. \r\n[82:30] Clean up from the previous one. \r\n[82:32] We want to clear the interval.\r\nTaylor: [82:33] Clear interval timer?\r\nDave: [82:35] Yeah.\r\nTaylor: [82:38] [laughs] I learned that one the \r\n[82:41] hard way.\r\nDave: [82:43] That would be weird. That bit \r\n[82:46] about users. Hold on one second. \r\n[82:50] In our refresh function...\r\nTaylor: [82:53] Refreshing.\r\nDave: [82:55] I might also just copy and paste \r\n[82:57] things. Here we go. I'll just \r\n[83:02] explain what we're doing. If \r\n[83:04] we're not currently loading the \r\n[83:05] emails, we're going to fetch the \r\n[83:09] newest ones. This is another \r\n[83:13] function [inaudible] API. Then \r\n[83:18] take those emails and add them \r\n[83:21] to our list. Actually, we need \r\n[83:23] to add a new action to handle \r\n[83:25] this. We don't want to replace \r\n[83:27] all the emails. We just want to \r\n[83:28] add it to the end.\r\n[83:30] This is the \r\n[83:31] key bit. We're going to call \r\n[83:32] that notifier. Then we're going \r\n[83:34] to call add message and \r\n[83:36] dispatcher message. It says here \r\n[83:39] you got three new emails, \r\n[83:40] whatever.\r\nTaylor: [83:41] I was like, \"What's that s for?\" \r\n[83:43] I was like, \"Oh, pluralize.\"\r\nDave: [83:47] Probably easier to read like \r\n[83:48] this. It said one emails way too \r\n[83:51] many times. [laughs]\r\nTaylor: [83:53] It's the little things. If I see \r\n[83:55] that, I'm like, \"Why didn't they \r\n[83:58] put in...\" Argh. Yeah.\r\nDave: [84:04] [laughs]\r\nTaylor: [84:04] That actually hurt my throat to \r\n[84:06] do that.\r\n[84:08] [laughter]\r\nDave: [84:08] I'm going to pull add message \r\n[84:10] out of use notification. Use \r\n[84:14] notification. I'm going to call \r\n[84:16] that array. Let me call this \r\n[84:18] thing. Use notification. Then \r\n[84:23] bring use notification from \r\n[84:26] notification context. One thing \r\n[84:29] I'm going to do when I actually \r\n[84:31] make these lessons, probably \r\n[84:32] call it notify context because \r\n[84:35] typing notification [laughs] \r\n[84:36] over and over again is difficult.\r\n[84:42] We've got our add message. We \r\n[84:43] can display messages now. We \r\n[84:45] need to handle this add emails \r\n[84:47] thing. Once the emails come back, \r\n[84:50] we want to have an add emails \r\n[84:52] action. That's going to return \r\n[84:56] array of all the state, emails...\r\nTaylor: [85:00] All the state, emails.push?\r\nDave: [85:03] No pushing. [inaudible] update.\r\nTaylor: [85:07] Yup, you're right. Argh, I \r\n[85:10] failed the immutable test.\r\nDave: [85:13] [laughs] Basically, just never \r\n[85:15] push.\r\nTaylor: [85:16] Dot, dot, dot.\r\nDave: [85:17] Yeah. All the existing ones plus...\r\nTaylor: [85:22] Plus, whatever ones...\r\nDave: [85:24] new ones. That's an array. We \r\n[85:27] don't want to just do that or \r\n[85:28] we'll end up with...\r\nTaylor: [85:30] An array of arrays.\r\nDave: [85:31] array of arrays, yes. That's bad.\r\nTaylor: [85:36] Everybody good on the spread \r\n[85:37] operator here? Because this one...\r\nDave: [85:41] This is always kind of tripping \r\n[85:46] point.\r\nTaylor: [85:47] Yup, cool. That's the kind of \r\n[85:49] thing that you'll still typo it \r\n[85:52] once in a while. By you, I mean \r\n[85:53] I will still typo it.\r\nDave: [85:58] Cool.\r\nTaylor: [86:00] See, now there's spread and \r\n[86:02] stuff on toast. Man, all this \r\n[86:04] food talk.\r\n[86:08] [laughter]\r\nDave: [86:08] Hey look, an email arrived. Two \r\n[86:10] emails arrived. This is what I \r\n[86:11] was talking about. When we're \r\n[86:13] not logged in, we don't want \r\n[86:17] this running at all. We don't \r\n[86:19] want our refresh to run. I'm \r\n[86:22] going to pull in our user. I'm \r\n[86:28] going to end the use user hook. \r\n[86:33] Import that in a second. If we \r\n[86:35] have a user, then we'll set up \r\n[86:37] this interval. If we're logged \r\n[86:40] in, we'll set this up.\r\n[86:45] We \r\n[86:45] probably don't want to run this \r\n[86:46] every time because otherwise...\r\n[86:51] Hold on. Import use user.\r\nTaylor: [86:53] Yup, bring in the use user.\r\nDave: [87:01] Otherwise, I think every time we \r\n[87:01] type a letter, it's going to re-\r\n[87:04] render this component.\r\nTaylor: [87:06] Oh, like every time you type a \r\n[87:08] letter in your...\r\n[87:09] [crosstalk]\r\nDave: [87:09] Including you get a billion \r\n[87:10] timers. Maybe not actually. It's \r\n[87:13] cleaning up the last one. We're \r\n[87:15] just going to keep resetting the \r\n[87:16] timer. It shouldn't even show up \r\n[87:19] here. Anyway.\r\nTaylor: [87:20] Jose's comment. I feel like this \r\n[87:23] will be unnecessary if the email \r\n[87:25] provider was only encapsulating \r\n[87:27] the main page.\r\nDave: [87:30] If email provider was only \r\n[87:32] encapsulating the main page. Yes. \r\n[87:40] Yeah, you're right. If we move \r\n[87:43] this down here, then it would \r\n[87:45] never render that thing unless \r\n[87:47] the user was...Yeah.\r\nTaylor: [87:50] Very, very nice. This is exactly \r\n[87:53] why we do the practice run, so I \r\n[87:57] could talk about food and we can \r\n[87:59] get comments from the audience.\r\nDave: [88:01] We can move this there. We \r\n[88:04] already have a code to do it. We \r\n[88:05] could move it in there. It'd be \r\n[88:06] fine. I want that import there. \r\n[88:12] If I log in now, let's see. In a \r\n[88:16] few seconds I hope, we should \r\n[88:17] get some emails. Hey look, it's \r\n[88:19] an email. In a few seconds, we \r\n[88:22] get some more emails now. Adding \r\n[88:25] them to the list, and we get \r\n[88:27] this notification.\r\nTaylor: [88:31] Is it just the same emails over \r\n[88:33] and over in the fake emails?\r\nDave: [88:36] The fake emails, there's only \r\n[88:37] three. Fetch latest grabs a \r\n[88:44] random chunk of them from zero \r\n[88:48] to however many. Sometimes we'll \r\n[88:50] get zero. Sometimes we get one, \r\n[88:54] but it's the same thing.\r\nTaylor: [88:55] And it has the S as appropriate.\r\nDave: [88:57] [laughs] It has the S, yeah.\r\nTaylor: [89:02] Patrick asks about a saga \r\n[89:04] approach to all of this. Is it \r\n[89:08] the trendy equivalent of sagas?\r\nDave: [89:13] That's a good question. I think \r\n[89:15] sagas are only a Redux thing. \r\n[89:18] There's Redux saga, it's the \r\n[89:19] library. They're very tied to \r\n[89:23] Redux, dispatching actions and \r\n[89:24] stuff. I don't know if you could \r\n[89:26] use them with hooks, reducers \r\n[89:30] and stuff. The Redux saga is a \r\n[89:32] middleware that sits in Redux \r\n[89:34] and all those actions. I don't \r\n[89:35] know. Someone might have made \r\n[89:37] one for hooks. I'm not sure.\r\n[89:40] I \r\n[89:40] always felt like sagas over-\r\n[89:42] complicate things sometimes. I \r\n[89:45] don't know. It depends on what \r\n[89:47] you're doing, I suppose. I think \r\n[89:49] sagas are probably good for \r\n[89:50] complicated flows. If you start \r\n[89:53] using them for everything, then \r\n[89:54] you end up having to write all \r\n[89:55] these functions. Sagas felt like \r\n[89:58] one of those trendy things that \r\n[90:00] just over-applied to me. I think \r\n[90:04] they have their place though.\r\nTaylor: [90:07] Aren't Redux sagas used to \r\n[90:09] handle side effects, because \r\n[90:10] reducers are supposed to be pure?\r\nDave: [90:14] Yeah. You can also do it with \r\n[90:15] thunk.\r\nTaylor: [90:16] That was Steve speaking through \r\n[90:17] me also.\r\n[90:21] [laughter]\r\nDave: [90:21] You can't do side effects in \r\n[90:23] Redux natively, so you need \r\n[90:25] Redux thunk, saga, or something. \r\n[90:29] I don't know. [inaudible] I had \r\n[90:32] worked on the side effects were \r\n[90:34] usually fetching data. It felt \r\n[90:37] like that was an async thing, \r\n[90:39] and thunks were fine, but it got \r\n[90:42] more complicated stuff, like \r\n[90:44] fetching a bunch of different \r\n[90:46] stuff and waiting for certain \r\n[90:47] things to finish before you kick \r\n[90:49] off other actions or whatever.\r\n[90:51] Sagas are good for those sorts \r\n[90:52] of things. I feel like the app I \r\n[90:54] worked on, we started down the \r\n[90:57] path of sagas, and then replaced \r\n[90:59] everything with sagas. It got \r\n[91:01] messy pretty quick. Thunks are \r\n[91:04] good sometimes. [laughs]\r\nTaylor: [91:08] Whatever that saying about you \r\n[91:10] learn a new hammer and \r\n[91:11] everything's a nail or whatever.\r\nDave: [91:14] Yeah. It was that idea that the \r\n[91:17] entire app should be using the \r\n[91:19] latest best practice and trying \r\n[91:22] to update everything to use that. \r\n[91:24] I don't know. [laughs] I just \r\n[91:29] keep deleting these \r\n[91:30] notifications. We'll also want \r\n[91:35] to go over here. It would be \r\n[91:39] cool to clean these up, I \r\n[91:47] suppose. We could do that.\r\nTaylor: [91:50] Have notifications clean \r\n[91:52] themselves up?\r\nDave: [91:53] Yeah. Let me see if that's easy \r\n[91:58] enough to do. I think we could \r\n[91:59] just add that pretty quick. I \r\n[92:03] have some code for this. \r\n[92:05] Notifications, if we add a \r\n[92:07] timestamp when we add them, and \r\n[92:11] then have another effect, or \r\n[92:16] maybe an effect -- we don't have \r\n[92:18] any effects here yet -- that has \r\n[92:20] its own little interval. Every \r\n[92:22] couple of seconds, it'll just \r\n[92:23] check, run through the messages \r\n[92:25] and delete the ones that are old.\r\nTaylor: [92:30] I see. Because you're now...\r\nDave: [92:33] It's going to be here. When this \r\n[92:37] runs every two seconds, we grab \r\n[92:38] the current now, and then just \r\n[92:41] filter down the messages to the \r\n[92:43] ones that are newer.\r\nTaylor: [92:47] Man, time math, what a pain.\r\nDave: [92:50] Yeah, I know. I wrote this both \r\n[92:54] ways. It felt like plugging in a \r\n[92:56] USB plug. It was like try less \r\n[92:59] than, it doesn't work. Try \r\n[93:00] greater than, it doesn't work. \r\n[93:01] Try less than, oh, it works now. \r\n[93:04] [laughs]\r\nTaylor: [93:04] Totally.\r\nDave: [93:04] I don't know.\r\nTaylor: [93:07] If you can plug your USB right \r\n[93:08] the first time, it's going to be \r\n[93:10] a good day. I've never had a \r\n[93:12] good day.\r\nDave: [93:14] [laughs] It's so rare. I don't \r\n[93:21] think is working. I'm not sure \r\n[93:23] why this isn't working, but it's \r\n[93:24] not.\r\nTaylor: [93:25] I read on Reddit a long time ago, \r\n[93:29] one of the web development sub-\r\n[93:30] Reddits or whatever, he's like, \"\r\n[93:33] I'm doing a e-commerce store, \r\n[93:35] and I only want it to be open \r\n[93:36] from 9:00 to 5:00.\" Why? On so \r\n[93:42] many levels, why?\r\nDave: [93:45] [laughs]\r\nTaylor: [93:45] That sounds so hard. 9:00 to 5:\r\n[93:47] 00, your local time? What about \r\n[93:50] when it's daylight savings? What \r\n[93:51] about, you came to my site, but \r\n[93:54] I'm not going to let you buy \r\n[93:55] anything because it's not 9:00 \r\n[93:58] to 5:00?\r\nDave: [93:58] I'm sleeping, so you can't buy \r\n[94:00] anything. That sounds like a \r\n[94:03] mess. Hey look, they're \r\n[94:08] [inaudible] you.\r\nTaylor: [94:10] Oh, nice.\r\nDave: [94:14] All of this was set up for, hey \r\n[94:17] the app is getting slow because \r\n[94:18] now we have so many emails. If \r\n[94:20] we replace this user lots of \r\n[94:24] emails instead of fake emails \r\n[94:26] when we fetch them, then we're \r\n[94:29] going to start off with 1,000 or \r\n[94:30] something, I think. This lots of \r\n[94:32] emails. It's like 1,000 times \r\n[94:36] random emails.\r\nTaylor: [94:42] You've got a nice little bit of \r\n[94:45] built in JavaScript there. The \r\n[94:47] sub-string, and making it an \r\n[94:49] empty array of 1,000. You got \r\n[94:52] some nice touches there.\r\nDave: [94:55] It's a good trick. I wish that \r\n[94:59] was easier.\r\n[95:04] [laughter]\r\nDave: [95:04] We do have fill now, I suppose. \r\n[95:06] I don't know. I just feel like \r\n[95:07] there should be an easier way \r\n[95:08] for that. If I open up the dev \r\n[95:11] tools and go to the React dev \r\n[95:18] tools, there we go. [laughs] \r\n[95:22] Where id they go? You go to the \r\n[95:24] profiler. Oh, I already turned \r\n[95:27] it on. In the new profiler, the \r\n[95:29] new, new profiler, you can click \r\n[95:32] this little gear and turn on \r\n[95:33] highlight updates.\r\nTaylor: [95:35] You can view release notes in \r\n[95:36] the new one.\r\nDave: [95:38] [laughs] You could also do that. \r\n[95:41] The newish but not most recent \r\n[95:42] profiler, you couldn't do \r\n[95:44] highlight updates anymore. That \r\n[95:45] was sad, but we've got it back.\r\n[95:49] It's highlighting everything \r\n[95:50] that's changing. Every time one \r\n[95:52] of these notifications appears, \r\n[95:54] the whole app is re-rendering, \r\n[95:56] including every single email. \r\n[96:00] Scroll down here, you can see \r\n[96:03] they're all blinking. This gets \r\n[96:06] sluggish. I don't know if you \r\n[96:08] can tell. Dragging this around, \r\n[96:11] it lags every now and then when...\r\n[96:12] There it goes.\r\nTaylor: [96:13] I think it might be messing with \r\n[96:14] your Zoom connection, honestly.\r\nDave: [96:17] Maybe it might be.\r\nTaylor: [96:18] You started getting choppy and \r\n[96:20] robotic for me. I don't know \r\n[96:21] about anybody else in chat that \r\n[96:24] Dave get robotic?\r\nDave: [96:26] I'll stop doing that. [laughs] \r\n[96:30] Interesting.\r\nTaylor: [96:31] We got a few yeses and a nope.\r\n[96:35] [laughter]\r\nTaylor: [96:35] Story of my life.\r\nDave: [96:42] [inaudible] wasn't running in \r\n[96:44] Zoom.\r\nTaylor: [96:45] Now you're getting worse.\r\nDave: [96:48] Oh, is it getting worse? Uh-oh.\r\nTaylor: [96:50] Now it's fine that you set it...\r\n[96:52] I don't know.\r\nDave: [96:53] Maybe this is not a good thing \r\n[96:53] to livestream. [laughs]\r\nTaylor: [96:55] The Internet.\r\nDave: [96:57] We can improve this if we only \r\n[97:03] render the stuff that needs to \r\n[97:04] change. We've got to do some \r\n[97:08] manual tweaking of our contexts \r\n[97:09] to make that work. The first \r\n[97:12] thing we could do is only render \r\n[97:14] the emails when the emails \r\n[97:15] change if they're the \r\n[97:17] [inaudible] wish list. All right, \r\n[97:21] we have this email component. \r\n[97:24] This is re-rendering every time \r\n[97:26] it's blinking. We can wrap this \r\n[97:29] in a React.memo call.\r\n[97:35] This will \r\n[97:36] optimize for only re-rendering \r\n[97:38] it when its props have changed. \r\n[97:40] Only when email or unclick have \r\n[97:42] changed. If you try that, you \r\n[97:51] see, it's still blinking, but \r\n[97:53] not all the emails are blinking. \r\n[97:57] Is this cool? It's saving us a \r\n[97:59] little bit of time, but it's \r\n[98:01] still taking a while, still \r\n[98:03] doing all of this work through \r\n[98:09] every one of our contexts, and \r\n[98:11] it optimizes it.\r\n[98:15] By passing \r\n[98:16] down these values, let me pause \r\n[98:20] this maybe. Can I pause? Can I \r\n[98:24] do that?\r\nTaylor: [98:25] You are getting them.\r\nDave: [98:26] Let me just see if I can make it \r\n[98:27] not update [laughs] so often.\r\nTaylor: [98:29] A touch of robot.\r\nDave: [98:30] We'll put it back later.\r\nTaylor: [98:37] Was it 1,000 or 3,000?\r\nDave: [98:39] It lost some things here. We're \r\n[98:42] probably getting emails every 1,\r\n[98:43] 000. Let's make this 10,000 or \r\n[98:47] something.\r\nTaylor: [98:49] 100,000, oh, great 10,000.\r\nDave: [98:50] That should be there.\r\nTaylor: [98:56] [laughs]\r\nDave: [98:56] Hopefully, less. You're back now. \r\n[98:58] We're still running the cleanup \r\n[98:59] function, so this is interesting. \r\n[99:00] Even though we're not fetching \r\n[99:01] new emails, we're rendering that \r\n[99:02] notification every time. We're \r\n[99:05] rendering everything every time \r\n[99:07] this notification thing updates. \r\n[99:09] I'm going to make this 20 \r\n[99:10] seconds.\r\n[99:13] We'll get a bit of a \r\n[99:15] play between the roboticness. \r\n[99:24] Good, now, but it's also not \r\n[99:26] updating. Can you still hear me?\r\nTaylor: [99:27] Yeah.\r\nDave: [99:29] OK, cool. Let's go through the \r\n[99:33] contexts. I'm going to go start \r\n[99:36] with the user one I guess, \r\n[99:39] because that was simple. Go with \r\n[99:41] user provider. I mentioned \r\n[99:44] earlier, I think, that every \r\n[99:48] time you pass in a new value \r\n[99:50] that is referentially different \r\n[99:51] from the last one, react is \r\n[99:53] going to re-render all of the \r\n[99:56] places that use that context.\r\nTaylor: [99:59] Right.\r\nDave: [100:02] Here, we're creating a new \r\n[100:03] object every time. Any time the \r\n[100:07] user changes, any time this \r\n[100:09] component re-renders at all, \r\n[100:11] actually, it's going to make a \r\n[100:12] new object, pass that down, and \r\n[100:16] re-render more stuff than it \r\n[100:17] needs to. We can prevent that by \r\n[100:21] only recreating this thing when \r\n[100:23] these properties have changed. \r\n[100:26] We're going to use useMemo and \r\n[100:29] use callback, two hooks for \r\n[100:32] optimizing things.\r\n[100:36] What we're \r\n[100:37] going to do is wrap this in a \r\n[100:38] useMemo. UseMemo takes a \r\n[100:42] function, and that function just \r\n[100:45] returns some value, so we're \r\n[100:47] just going to return this object \r\n[100:48] here. Similar to use effect, it \r\n[100:54] takes a second argument that \r\n[100:55] says how often, when should it \r\n[100:56] recompute things. We want to \r\n[100:59] recompute this when user or log \r\n[101:01] in or log out change. User is \r\n[101:08] not going to change unless you \r\n[101:10] log in or logout. That'd be \r\n[101:12] great.\r\n[101:13] Log in and log out, \r\n[101:14] though, because their function's \r\n[101:16] created right here. Those are \r\n[101:17] going to change every time. This \r\n[101:20] hasn't really helped us yet. \r\n[101:22] We've go one step further and \r\n[101:23] wrap these in use-callback to \r\n[101:28] prevent it from re-rendering \r\n[101:30] these every time. These are the \r\n[101:31] same kind of thing. We pass an \r\n[101:32] array of things like \r\n[101:37] dependencies of this callback \r\n[101:39] that should cause it to \r\n[101:39] recompute.\r\n[101:42] This one depends on \r\n[101:43] user, which probably isn't going \r\n[101:45] to change a whole lot.\r\nTaylor: [101:47] Probably not.\r\nDave: [101:48] Actually, no, it doesn't depend \r\n[101:49] on user. What am I talking about? \r\n[101:50] It receives the user. Never mind, \r\n[101:52] it depends on nothing. This one \r\n[101:55] also depends on nothing.\r\n[101:58] [laughter]\r\nTaylor: [101:58] I don't need anybody.\r\nDave: [102:00] There you go. All right, so now \r\n[102:02] log in, and log out will be \r\n[102:04] stable between renders, and user \r\n[102:07] is only going to change rarely. \r\n[102:10] Now, it's going to optimize this. \r\n[102:14] Go ahead.\r\nTaylor: [102:15] Cool. The use memo, just to \r\n[102:17] clarify on the syntax, the array \r\n[102:20] that's after the function, the \r\n[102:23] array means that use memo will \r\n[102:25] run again every time user or log \r\n[102:27] in or log out changes?\r\nDave: [102:29] Yes.\r\nTaylor: [102:31] If it's an empty array, it will \r\n[102:33] only run the first time on the \r\n[102:35] initial render.\r\nDave: [102:36] Like this, yeah.\r\nTaylor: [102:37] Anything you put inside, it will \r\n[102:40] rerun when that thing inside of \r\n[102:41] it changes?\r\nDave: [102:45] Yeah, so the next time it \r\n[102:45] renders, it's going to check, \r\n[102:46] did user change? Did login \r\n[102:48] change? Did logout change? If \r\n[102:50] any of that was true, then it'll \r\n[102:52] rerun this function and cache \r\n[102:55] the value again.\r\nTaylor: [102:57] The order doesn't really matter \r\n[102:58] because it's going to iterate \r\n[102:59] until it finds, \"No, no, yes.\"\r\nDave: [103:02] Yeah, order doesn't matter, \r\n[103:06] useMemo is for any value, really. \r\n[103:14] It could be a function, but \r\n[103:17] using it most for, usually, \r\n[103:19] objects in arrays and expensive \r\n[103:21] to compute things, like if \r\n[103:22] you're filtering an array or \r\n[103:23] something. useCallback is for \r\n[103:27] functions, yeah. useCallback \r\n[103:30] returns the kind of a wrapper \r\n[103:35] around this function.\r\nTaylor: [103:38] There's a question about, why \r\n[103:40] would you include log in and log \r\n[103:42] out, and why not just have user?\r\nDave: [103:51] Actually, I guess that would be \r\n[103:53] OK here. Yeah, because these \r\n[103:55] aren't going to change after the \r\n[103:56] first render. I think it'll give \r\n[103:58] us a warning. Yeah. Let me make \r\n[104:05] this bigger. There's a ESLint \r\n[104:07] plugin that's just checking to \r\n[104:10] make sure we get our dependency \r\n[104:11] arrays right, and it's not smart \r\n[104:14] enough to know these are never \r\n[104:16] going to change. It's just going \r\n[104:19] to warn and say, \"Hey, you're \r\n[104:20] missing log in and log out.\"\r\n[104:22] We're going to put them in here, \r\n[104:24] so it stops complaining.\r\nTaylor: [104:26] That's a good catch.\r\nDave: [104:28] Yeah. Logically we shouldn't \r\n[104:31] need these here but...\r\n[104:36] [crosstalk]\r\nTaylor: [104:36] What is the difference between \r\n[104:39] use memo and use effect?\r\nDave: [104:46] We can look at an example of \r\n[104:48] that like this one because we're \r\n[104:50] going to need to optimize this \r\n[104:53] value too. Use.Effect is going \r\n[104:56] to queue up this function to run \r\n[104:59] after the render is done. \r\n[105:05] Whereas useMemo runs the \r\n[105:07] function now and saves the value, \r\n[105:09] caches it for forever until this \r\n[105:13] dependency retells it to change. \r\n[105:16] useEffect is more about like, I \r\n[105:19] want to run some code after \r\n[105:20] render.\r\n[105:22] This is like, queue up \r\n[105:23] that code for me and I'll only \r\n[105:25] rerun this. We're going to rerun \r\n[105:28] this when these things change. \r\n[105:30] They all have the same \r\n[105:33] independency already. That works \r\n[105:36] the same. It's like, redo the \r\n[105:37] thing when the dependencies \r\n[105:39] change. useEffect is more about \r\n[105:43] queuing up some side effect.\r\nTaylor: [105:46] UseEffect just does it and \r\n[105:48] useMemo as remembers the result?\r\nDave: [105:53] Yeah, but useMemo...useMemo is \r\n[105:56] going to run like...As these \r\n[106:01] components are rendering, is \r\n[106:02] going to call useMemo. It'll \r\n[106:04] check these things and then \r\n[106:06] it'll actually call this \r\n[106:08] function like, right now, no way \r\n[106:10] synchronousness. It's going to \r\n[106:12] call that function before it \r\n[106:14] goes down to the rendering part. \r\n[106:16] Whereas useEffect is like, OK, \r\n[106:20] thanks. You gave me a function, \r\n[106:21] I will do that later.\r\n[106:24] It's \r\n[106:24] going to continue on, it'll \r\n[106:26] render and then once it paints \r\n[106:27] to the screen, it'll come back \r\n[106:28] and do all this.\r\nTaylor: [106:30] Nice.\r\nDave: [106:35] Let's do this again. [laughs] We \r\n[106:37] going to wrap this in useMemo \r\n[106:39] because you don't want to \r\n[106:42] recompute this every time. Again, \r\n[106:45] we need messages.\r\nTaylor: [106:47] Messages, add message, remove \r\n[106:49] message.\r\nDave: [106:52] By the way, if we left this off, \r\n[106:54] then it works the same way as \r\n[106:56] useEffect is going to recompute \r\n[106:57] every time which is under \r\n[106:59] useless work immunization. \r\n[107:04] [laughs]\r\nTaylor: [107:04] Is useMemo only used before a \r\n[107:06] render?\r\nDave: [107:10] Yeah. useMemo is for caching \r\n[107:12] values and it's going to run \r\n[107:14] before the render. You should \r\n[107:17] not run side effects inside \r\n[107:18] useMemo. It's not meant. This \r\n[107:20] function is more like a wrapper \r\n[107:23] around a value that you want to \r\n[107:25] return.\r\n[107:27] The point of useMemo is \r\n[107:28] to return some value from a \r\n[107:30] function. Whereas useEffect is \r\n[107:32] like, do something. Have some \r\n[107:36] side effect initially outside \r\n[107:38] the component. Maybe setting \r\n[107:39] state, whatever. You shouldn't \r\n[107:41] do any of that stuff in useMemo. \r\n[107:42] This is really just for like, I \r\n[107:44] want to compute a value and save \r\n[107:46] it for later.\r\nTaylor: [107:49] Good question.\r\nDave: [107:52] Definitely a good question. \r\n[107:54] UseCallback around these guys, \r\n[107:57] this number, maybe? I think \r\n[107:59] never. Depends on math random. \r\n[108:12] We didn't write this code. The \r\n[108:14] reason I wrote it this way, this \r\n[108:17] instead of doing this, instead \r\n[108:20] of depending on these messages, \r\n[108:25] if we do that, then we have to \r\n[108:26] put messages in here.\r\nTaylor: [108:30] Then it would rerun every time.\r\nDave: [108:32] It'd be better to not recreate \r\n[108:35] this function. Oh, boy, \r\n[108:37] [inaudible 1] . It'd be better \r\n[108:40] to not repeat this function \r\n[108:41] every time. What happened there? \r\n[108:51] Callback, get the message.\r\nTaylor: [108:52] We got to import useCallback and \r\n[108:54] useMemo.\r\nDave: [108:55] Nice.\r\nTaylor: [108:59] It's mostly thanks to react's \r\n[109:01] friendly error messages.\r\nDave: [109:06] Thanks, react. It is good at \r\n[109:08] error messages. This callback \r\n[109:10] has an unnecessary dependency \r\n[109:12] messages. Yes, it does. Thank \r\n[109:14] you. That's cool. [laughs] Tells \r\n[109:17] you about dependencies you don't \r\n[109:18] need.\r\nTaylor: [109:20] I'm sorry, you've written too \r\n[109:21] much code.\r\nDave: [109:22] [laughs] Now, this is good. We \r\n[109:27] took care of that. We took care \r\n[109:28] of user context. We need to do \r\n[109:30] email context, too. I think this \r\n[109:35] is the end of it. We need to \r\n[109:37] wrap this in useCallback. That's \r\n[109:41] going to run. Rerun, never. \r\n[109:47] Recompute, never. We have our \r\n[109:52] value down here. Now to wrap \r\n[109:56] this in useMemo. Rerun when \r\n[110:03] state changes or when select \r\n[110:06] email change.\r\n[110:11] It's probably \r\n[110:12] useMemo, useCallback, like every \r\n[110:16] hook in this file. [laughs] Not \r\n[110:19] every hook, lots of hooks, \r\n[110:20] though. We are getting it. Let \r\n[110:30] me put the timers back to faster. \r\n[110:34] That one. Clean up every two \r\n[110:38] seconds. You're good. Go. \r\n[110:46] Hopefully, the Zoom stream is \r\n[110:50] less choppy now. You can see \r\n[110:54] there's not as much blinking now. \r\n[111:00] [laughs] I should have done this \r\n[111:01] earlier.\r\n[111:06] [crosstalk]\r\nDave: [111:06] [laughs] Want to record a \r\n[111:08] snapshot. We can see that the \r\n[111:09] renders, I forgot to do it \r\n[111:11] earlier, so we don't get to see \r\n[111:13] how they're faster.\r\nTaylor: [111:16] Feels faster, though, for sure.\r\nDave: [111:19] The other indication is that we \r\n[111:21] used to be getting those \r\n[111:22] messages that were like, \"Hey, \r\n[111:23] the setting revolt took 200 \r\n[111:24] milliseconds,\" and it's not \r\n[111:26] doing that anymore. Also, if I \r\n[111:30] drag it around, there's less \r\n[111:33] choppiness. There's still some \r\n[111:34] choppiness.\r\nTaylor: [111:36] You didn't robot out.\r\nDave: [111:38] I think that might be also due \r\n[111:39] to Zoom, because it didn't have \r\n[111:40] choppiness before. [laughs] Hey, \r\n[111:43] it's faster. That is a bit about \r\n[111:50] optimizing contexts.\r\nTaylor: [111:52] It does also show how not very \r\n[111:54] random Math.random is.\r\nDave: [111:59] Yeah. Random is a funny thing, \r\n[112:03] isn't it? I think human random \r\n[112:07] is more like normal distribution \r\n[112:09] or something. There's a \r\n[112:11] difference to that.\r\n[112:15] [crosstalk]\r\nTaylor: [112:15] I'm so normal distribution.\r\n[112:23] [laughter]\r\nTaylor: [112:23] That's a lot to take in, Dave, \r\n[112:27] the context thing.\r\nDave: [112:29] Those are a lot of things, I \r\n[112:30] think.\r\nTaylor: [112:33] We had a lot of really, really, \r\n[112:36] really great questions and a lot \r\n[112:38] of really great food talk. Are \r\n[112:42] there any other last-minute \r\n[112:44] questions that people have, as \r\n[112:46] we wrap this session up? It's \r\n[112:51] been a lot of fun. I always have \r\n[112:54] such a great time, Dave, just \r\n[112:55] hanging out.\r\nDave: [112:57] It's been fun.\r\nTaylor: [112:58] You, me, and 100 of our closest \r\n[112:59] friends. I don't know what our \r\n[113:06] next session will be. We'll have \r\n[113:08] to see.\r\nDave: [113:09] Good question. I don't know what \r\n[113:10] the next session is going to be, \r\n[113:11] either.\r\nTaylor: [113:14] Does the context API work the \r\n[113:15] same in React Native, do you \r\n[113:17] know?\r\nDave: [113:18] I think so. Pretty sure. I don't \r\n[113:22] really know.\r\nTaylor: [113:23] I haven't tried it.\r\nDave: [113:24] I would assume, and I think it's \r\n[113:26] a pretty safe assumption, that \r\n[113:27] it would be the same. React and \r\n[113:28] React Native, they try to keep \r\n[113:31] concepts like this as similar as \r\n[113:33] possible.\r\nTaylor: [113:34] You sound about 80 percent sure.\r\nDave: [113:36] Yeah.\r\nTaylor: [113:38] Unscientifically. That's all. I \r\n[113:49] feel like all of this build up \r\n[113:50] and then I don't know how to \r\n[113:51] close it out.\r\nDave: [113:54] It didn't feel like a super \r\n[113:55] satisfying conclusion, but it's \r\n[113:57] faster now.\r\nTaylor: [113:59] The app's faster, you \r\n[114:00] derobotified, deroboticized.\r\nDave: [114:03] It's good.\r\nTaylor: [114:05] Thanks again, everybody for \r\n[114:07] coming. Thanks for the great \r\n[114:09] questions.\r\nDave: [114:10] Thanks for coming, everyone.\r\nTaylor: [114:13] Stay tuned for the finalized \r\n[114:15] version of this material. I \r\n[114:18] think we'll all benefit from \r\n[114:20] being able to rewind, absorb, \r\n[114:24] follow along with the code and \r\n[114:25] everything. Dave, if you need \r\n[114:30] some more followers on Twitter, \r\n[114:33] your at?\r\nDave: [114:34] dceddia...\r\n[114:36] [crosstalk]\r\nTaylor: [114:36] dceddia. I couldn't remember if \r\n[114:37] you had full on Dave or if it \r\n[114:39] was just the letter D.\r\nDave: [114:40] It's funny, I was thinking about \r\n[114:41] changing that recently, too. \r\n[114:42] It's dceddia everywhere right \r\n[114:44] now.\r\nTaylor: [114:46] If anybody wants to hear me \r\n[114:47] complain about music, that's all \r\n[114:49] I do on my Twitter, but @\r\n[114:50] taylorbell. Anyways, thanks, \r\n[114:54] everybody for coming. We look \r\n[114:56] forward to seeing y'all next \r\n[114:59] time. Have a good rest of your \r\n[115:03] day, night, morning, afternoon, \r\n[115:07] snack time for me right now. See \r\n[115:11] y'all in the future.\r\nDave: [115:14] Bye, everyone.\r\nTaylor: [115:15] Bye.\r\n",
        "casting_words_order": "zeLe",
        "visibility_state": "hidden",
        "site": "pure_react",
        "type": "lesson",
        "lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream",
        "url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream",
        "path": "/lessons/react-pure-react-react-context-livestream?pl=pure-react-livestreams",
        "http_url": "http://app.egghead.af:5000/lessons/react-pure-react-react-context-livestream?pl=pure-react-livestreams",
        "http_short_url": "http://app.egghead.af:5000/s/8ang4",
        "next_up_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream/next_up",
        "tag_list": [
          "pro"
        ],
        "library_list": [],
        "language_list": [],
        "framework_list": [
          "react"
        ],
        "tool_list": [],
        "platform_list": [],
        "skillset_list": [],
        "skill_level_list": [],
        "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
        "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
        "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
        "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
        "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
        "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
        "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-pure-react-react-context-livestream-H17U7EwcH/scikit-learn-pure-react-react-context-livestream-H17U7EwcH.jpg",
        "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/landscape/react.png",
        "transcript_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream/transcript",
        "subtitles_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream/subtitles",
        "related_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream/related",
        "can_comment": false,
        "lesson_errata": [],
        "is_pro": true,
        "technology": {
          "name": "react",
          "label": "React",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png"
        },
        "primary_tag": {
          "id": 26,
          "label": "React",
          "name": "react",
          "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
          "slug": "react",
          "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
          "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
          "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
          "path": "/browse/frameworks/react",
          "search_url": "http://app.egghead.af:5000/search?topic=react",
          "context": "frameworks"
        },
        "tags": [
          {
            "id": 26,
            "label": "React",
            "name": "react",
            "description": "React is one of the web’s most popular frameworks for building JavaScript applications. \n\nIf you know what you’re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether you’re a React newbie or you’re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
            "slug": "react",
            "image": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
            "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_480/react.png",
            "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png",
            "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_256/react.png",
            "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_128/react.png",
            "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_64/react.png",
            "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_32/react.png",
            "latest_course_url": "http://app.egghead.af:5000/api/v1/playlists/modernizing-a-legacy-redux-application-with-react-hooks-c528?load_lessons=false",
            "http_url": "http://app.egghead.af:5000/browse/frameworks/react",
            "path": "/browse/frameworks/react",
            "search_url": "http://app.egghead.af:5000/search?topic=react",
            "context": "frameworks"
          }
        ],
        "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
        "instructor": {
          "id": 218,
          "slug": "dave-ceddia",
          "full_name": "Dave Ceddia",
          "first_name": "Dave",
          "last_name": "Ceddia",
          "twitter": "dceddia",
          "website": "https://daveceddia.com",
          "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
          "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
          "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
          "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
          "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
          "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
          "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
          "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
          "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
          "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
          "published_lessons": 18,
          "published_courses": 1
        },
        "instructor_playlists_url=": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream/instructor_playlists",
        "series_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
        "series_row_order": 7995390,
        "series": {
          "title": "Pure React Livestreams",
          "description": "Live stream events for the course modules.",
          "duration": 49263,
          "slug": "pure-react-livestreams",
          "lessons_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/lessons",
          "progress_url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams/progress",
          "url": "http://app.egghead.af:5000/api/v1/series/pure-react-livestreams",
          "http_url": "http://app.egghead.af:5000/courses/pure-react-livestreams",
          "path": "/courses/pure-react-livestreams",
          "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/thumb/pure-react-logo_2x.png",
          "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/full/pure-react-logo_2x.png",
          "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/390/landscape/pure-react-logo_2x.png",
          "instructor": {
            "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
            "id": 218,
            "slug": "dave-ceddia",
            "full_name": "Dave Ceddia",
            "first_name": "Dave",
            "last_name": "Ceddia",
            "twitter": "dceddia",
            "website": "https://daveceddia.com",
            "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
            "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
            "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
            "published_lessons": 18,
            "published_courses": 1
          }
        },
        "tracklist_id": 875176,
        "completed": false,
        "toggle_favorite_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream/favorites/toggle",
        "toggle_like_lesson_url": "http://app.egghead.af:5000/api/v1/lessons/react-pure-react-react-context-livestream/likes/toggle",
        "favorited": false,
        "liked": false,
        "video_processing_status": "completed",
        "media_urls": {
          "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
      }
    ],
    "owner": {
      "id": 12067,
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "avatar_url": "//gravatar.com/avatar/737adc5ae5dc6b50bee9e16ecda92e55.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia",
      "id": 218,
      "slug": "dave-ceddia",
      "full_name": "Dave Ceddia",
      "first_name": "Dave",
      "last_name": "Ceddia",
      "twitter": "dceddia",
      "website": "https://daveceddia.com",
      "bio_short": "A 10-year veteran of the software industry, Dave has been coding away since he was a kid. Currently an author, blogger, co-organizer of the Boston React meetup, and front end developer focused on React. He splits his free time between family and a constantly-shifting array of hobbies like music, aviation, and DIY projects.",
      "http_url": "http://app.egghead.af:5000/instructors/dave-ceddia",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/original/me_2017_500px.jpeg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_480/me_2017_500px.jpeg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_280/me_2017_500px.jpeg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_256/me_2017_500px.jpeg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_128/me_2017_500px.jpeg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_64/me_2017_500px.jpeg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/218/square_32/me_2017_500px.jpeg",
      "lessons_url": "http://app.egghead.af:5000/api/v1/instructors/dave-ceddia/lessons",
      "published_lessons": 18,
      "published_courses": 1
    },
    "progress_url": "http://app.egghead.af:5000/api/v1/playlists/pure-react-livestreams/progress",
    "rating_out_of_5": 0,
    "rating_count": 0,
    "index": 9,
    "resource_id": "pure-react-livestreams"
  }
]