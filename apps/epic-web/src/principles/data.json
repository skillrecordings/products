{
  "version": "v1",
  "slug": "epic-programming-principles",
  "title": "Epic Programming Principles",
  "description": "Principles guide the way you work together and make decisions. They are bigger than languages, frameworks, libraries, and tools. They are the foundation of your craft. As the field evolves, the principles guide you in making decisions in the new landscape. While principles do evolve as well, they are more stable than a technology stack.\n\nThis document represents the guiding principles that you have used to make decisions as software engineers. Everything from what problems to tackle to the tools you use to build solutions for those problems all the way down to the names you give your variables and functions. Though many things aren't spelled out directly, everything guiding you is attached to one or more principles.\n\nFor more information about how this works, check Principles by Ray Dalio (principles.com). Great read.",
  "sections": [
    {
      "slug": "core-philosophy",
      "title": "Core Philosophy",
      "description": "Core beliefs behind the approach to coding, relationships, and responsibility.",
      "principles": [
        {
          "slug": "software-built-for-people",
          "title": "Software is built for people, by people",
          "description": "Strong relationships power great software and will make you more happy personally. When you invest in these connections—with our team, our users, and our community—you create something more meaningful than just software.",
          "details": "Strained relationships can make even great achievements feel hollow, but strong bonds amplify the joy of success and lay the groundwork for future wins. Remembering the people we build software for will ensure we think about user experience and accessibility as paramount parts of what makes our software great. Positive relationships with the people with whom we build software makes the process of developing software more enjoyable.",
          "examples": [
            "While you're building, and before you mark something as finished, do a pass on it with the keyboard and a screen reader to make sure the experience is good for disabled people.",
            "If you hear people gossip or speak badly about co-workers, make it stop. Even when done in private, gossip generates a hostile work environment. Professionally solve problems.",
            "When your app's page loads, the HTML document shows up and the app looks like it's ready but forms do not work, and then when the JavaScript loads the forms work but things are moved around and changed causing a poor user experience. So because you care about the user experience you will put the time and effort into improving this so you're not 'lying to your users' about the app's readiness or causing them to mistakenly click on the wrong thing because of a bad 'popcorn' UI."
          ]
        },
        {
          "slug": "value-in-person-connections",
          "title": "Value in-person connections",
          "description": "Take the time to connect deeply, whether through heartfelt conversations, collaborative problem-solving, or simply sharing a laugh. Seek out opportunities to meet face-to-face and share insights and experiences. Meetups and conferences are great opportunities like this where possible.",
          "examples": [
            "If you're a manager, work to get a budget for your team to meet with each other and others in the industry.",
            "Take opportunities to meet your co-workers and others at in-person events."
          ]
        },
        {
          "slug": "be-likeable",
          "title": "Be the kind of person people like working with",
          "description": "People are more willing to work with you if they like working with you. Be thoughtful and express genuine gratitude for the good work of others. Be responsive and accessible to people. Respond to messages in a reasonable amount of time, even if it's just to tell them you've received their message and will get back to them soon (and then of course get back to them soon). Pay people for their work quickly. Be quick to forgive missteps and give the benefit of the doubt. Give credit where it is due and make sure people you work with feel valued for their contributions. If you're not willing to do this with someone, then don't work with them at all.",
          "examples": [
            "If you're overwhelmed by people's demand for your time, find a way to reduce that level of contact to the point where you can respond to every person within 24 working hours.",
            "When your teammates finish a project you know was a lot of work, shoot them a genuine and meaningful congratulations email (and CC their manager).",
            "Put forth your best effort and be a meaningful contributor to your team projects."
          ]
        },
        {
          "slug": "do-good",
          "title": "Do good in the world",
          "description": "It's hard to feel good about your work if it doesn't make a positive difference in the lives of those you care about (even if it does pay the bills). Consider the impact of your work on the world around you. It doesn't have to be some huge grand thing that impacts the lives of everyone on the planet but at the very least, put your effort behind things that are a net good in the world. Build software that adds real value without negative trade-offs for users, colleagues, or the world.",
          "examples": [
            "If you work on a product that focuses on enabling people to harm others, find another product to work on.",
            "Build silly things for fun that inspire others to build great things or are just an uplifting outlet for yourself."
          ]
        },
        {
          "slug": "value-your-time",
          "title": "Value your time",
          "description": "When you weigh the cost of various decisions, factor in your time in the equation. Just because you can 'build it yourself' doesn't mean that's the best use of your time relative to other things you should be doing.",
          "examples": [
            "If your app needs analytics, weigh the cost of your time of building a simple ingesting solution and dashboard yourself plus its maintenance costs against the cost of your time integrating an existing solution that handles your use cases. Neither solution is 'wrong' as it depends on other factors, but make sure to factor in your own time when making the decision."
          ]
        },
        {
          "slug": "eliminate-problems",
          "title": "Don't solve problems, eliminate them",
          "description": "As you work on problems, you ask yourself whether a different approach higher up the 'problem tree' could help you and/or your users avoid having to deal with the problem in the first place. There isn't any solution better than not having a problem to begin with. Not only must a problem be compelling enough to solve, but it must also be compelling enough to solve the inevitable problems caused by its solution. You will not optimize the thing that should not exist.",
          "examples": [
            "Tesla's 'Gigapress' innovation allows them to make a single-piece casting of the entire back and front of the vehicle. This eliminates the need for dozens of robots to bolt and weld dozens of parts together.",
            "React's 'hooks' innovation eliminated problems with code reuse. Before hooks, 'higher order components' and 'render props' patterns were required (and before that, 'mixins') which led to quite a few headaches."
          ]
        }
      ]
    },
    {
      "slug": "craft",
      "title": "Craft",
      "description": "Development standards, best practices, and decision-making processes.",
      "subsections": [
        {
          "slug": "thinking-like-craftsperson",
          "title": "Thinking like a craftsperson",
          "principles": [
            {
              "slug": "best-practices-do-not-exist",
              "title": "'Best Practices' do not exist",
              "description": "They are just your current best understanding of how to do something in a given context. As your understanding evolves, so should your practices.",
              "examples": [
                "Years ago, it was considered 'best practice' to not use event handlers in your markup ('onclick' etc), and now the opposite is true ('onClick')."
              ]
            },
            {
              "slug": "do-as-little-as-possible",
              "title": "Do as little as possible",
              "description": "The best way to have no bugs and ship fast is to have no code and ship nothing. Of course you're in the business of delivering value and it's difficult to deliver value with nothing, but you won't stray further into building more than is necessary to avoid building the wrong thing and lock your code (and your mental model) into something that should never have existed in the first place. You want to avoid wasting time by building something that will never be necessary. This is similar to the 'You Ain't Gonna Need It' (YAGNI) and Keep It Simple and Straightforward (KISS) principles.",
              "examples": [
                "If you're evaluating building a new product that requires custom implementations of other significantly complex products (for example, Calendar, Ticketing, Video Calls), start by integrating with those complex products so you can ship faster and get a more clear understanding of the needs of your users (for example, Google Calendar, Ti.to, Zoom).",
                "When building an abstraction that concatenates a user's first and last name because you do that a bunch of places and you need to handle a missing first or last name, don't add features to your abstraction none of your consumers currently need (like adding an optional middle name)."
              ]
            },
            {
              "slug": "make-it-work-make-it-right-make-it-fast",
              "title": "Make it work, make it right, make it fast",
              "description": "This isn't just a fun saying you've heard before. This makes an actual impact on your ability to deliver the right amount of work to the right problems. Too often you can find yourself stuck in the enjoyment of optimizing the thing that should not exist. Why bother making the wrong thing work or making the thing that doesn't work fast?",
              "details": "So first make certain that what you're trying to do is possible (make it work), then make sure what you're trying to do accomplishes the objective correctly and handles edge cases (make it right), and then figure out a way to make that fast.",
              "examples": [
                "You're tasked with building a user authentication feature for an app. First, focus on making it work—users can log in and log out successfully. Once it works, move to making it right—ensure password validation, account lockouts after failed attempts, and handling edge cases like password reset and expired sessions. Only then focus on making it fast, like optimizing database queries for authentication and caching sessions for faster access.",
                "A feature needs to display data from an external API. You start by getting the data to load into the app as a proof of concept. Then, make it right by validating the API's response, adding error handling for network failures, and securing the connection. Once it's stable, optimize by minimizing API calls, caching data locally, and handling updates asynchronously to improve load times."
              ]
            },
            {
              "slug": "optimize-for-sustainable-velocity",
              "title": "Optimize for sustainable velocity",
              "description": "Prioritize the ability to deliver real value and iterate rapidly while maintaining quality. Fast, reliable iterations enhance the user experience by enabling timely improvements and quick responses to feedback. Sustainable velocity is not just about speed; it's about building processes and codebases that support efficient, low-bug development over the lifetime of the project (however long or short that may be).",
              "examples": [
                "Your team is working on a fast-growing project. You decide to introduce tools like ESLint and TypeScript. While they add a bit of setup time, they enable your team to code faster in the long run by catching errors early and enforcing consistent style, which minimizes rework and reduces bugs over time.",
                "You implement continuous integration (CI) pipelines that automatically run tests, linting, and type checks on every pull request. Though it requires upfront setup, it allows developers to merge code faster and with confidence, maintaining high velocity while reducing bugs and the need for manual code review corrections. Ensure tests run quickly and any flaky tests are disabled until they can be made reliable."
              ]
            },
            {
              "slug": "optimize-for-unknown",
              "title": "Optimize for the unknown",
              "description": "You don't know the future, but you can feel confident things will change and optimize for that. You avoid wastefully spending time on early abstractions and optimizations until you have more context and a clearer picture of what's needed. Prefer options which enable the greatest future flexibility.",
              "examples": [
                "You're building a file uploader feature, but you're uncertain if the app will later support large files or real-time processing. Instead of over-engineering the uploader with support for large files and streaming (which might not be necessary), you focus on building a simple uploader. Keep the larger file possibility in mind so you don't choose an architecture that would preclude this. This way, if requirements change, it's easy to add support without redoing the entire feature.",
                "When designing your app's data layer, you avoid a rigid schema by using a flexible solution like Prisma with SQLite. This choice allows for quick changes to the schema as you learn more about your requirements, rather than committing upfront to an overly structured schema that could require extensive migrations later."
              ]
            },
            {
              "slug": "pragmatism-over-purity",
              "title": "Pragmatism is more important than 'purity'",
              "description": "You don't always need the most correct thing. Sometimes you need something that works now. Additionally, each app you build has unique constraints and requirements. You do your best to build the simplest solution that satisfies the requirements while ensuring you do not paint yourself into a corner. Even when it comes to these principles, some level of pragmatism is necessary in their application.",
              "examples": [
                "Instead of building a custom solution to handle payments, you integrate Stripe with its ready-made UI components. While it may not be perfectly tailored to your application, it gets the job done quickly and saves you from implementing complex security measures from scratch.",
                "When testing a user experience that relies on an animation, you mock out the animation to speed up the test even though you want to avoid implementation details in your tests."
              ]
            },
            {
              "slug": "keep-it-consistent",
              "title": "Keep it consistent",
              "description": "Consistency in a codebase helps keep things clear and predictable. Using four different patterns or libraries for accomplishing a single task just adds mental overhead. Strive to consolidate these things where it doesn't increase complexity and act with consistency as a team.",
              "examples": [
                "You have a personal style preference, but join a team where the code preferences are different, don't make a big deal out of it and prefer consistency over personal subjective preference.",
                "You are building a combobox experience on one page and discover two instances of this each using separate libraries. Make some time to understand the use cases for each and find a single library that can satisfy all cases."
              ]
            },
            {
              "slug": "simplicity-vs-familiarity",
              "title": "Don't confuse simplicity with familiarity",
              "description": "When evaluating something new, avoid prejudice simply because it's unfamiliar. Evaluate it on its own merits and see if it can earn a place in your mental model and potentially replace something that is more familiar.",
              "examples": [
                "You're evaluating whether to use Tailwind for styling, which is unfamiliar to your team, who are used to writing CSS. Instead of rejecting Tailwind for being 'too complex,' you consider the long-term benefits it could offer, such as consistency and ease of refactoring, and run a short trial to assess its real complexity.",
                "Your team is considering a shift to a new framework like Remix, which initially seems complex due to different data handling conventions. Instead of dismissing it, you evaluate if the complexity is simply due to unfamiliarity, noting potential benefits like native routing and data-loading optimizations."
              ]
            },
            {
              "slug": "balance-innovation-stability",
              "title": "Balance innovation with stability",
              "description": "Playing with new things is fun, but when your product code becomes the playground where you learn new things, bad patterns are unwittingly encoded and then naturally propagated over time. Often it's best to make your inexperienced mistakes in less important projects first.",
              "examples": [
                "You've found an exciting new database technology that promises faster queries, but it's still in beta. Instead of adopting it right away for your primary product, you decide to use it in a small project like an internal dashboard to test things out."
              ]
            },
            {
              "slug": "take-ownership",
              "title": "Take ownership",
              "description": "Users don't know or care what tools and services are used to deliver the promised value. So you take ownership of the entire solution, even if some parts are provided by others (open source, third party services, etc). For this reason, it is important that each dependency you add justifies its value to the solution.",
              "examples": [
                "You've integrated a third-party service for sending emails, but it's causing delays and errors. Instead of blaming the service, you work with its support to identify the issue, look for workarounds, and explore fallback options to ensure users still get timely notifications.",
                "A bug surfaces in production due to a package update you implemented. You roll back immediately but do not pass the blame. You take responsibility, investigate the root cause, contribute a patch, and add regression tests to prevent similar issues in the future. If the patch is not accepted, you either migrate to another solution or publish a fork (or just copy/paste it to your codebase) so you can make the necessary changes."
              ]
            },
            {
              "slug": "use-static-testing-tools",
              "title": "Use Static Testing Tools",
              "description": "Linters, type checkers, and even formatters are incredibly powerful tools that can help guide our codebases and avoid runtime errors. They replace fine grained low level tests that nobody will write anyway. It can be easy to offload thinking to overly ambitious linting tools. These can cause you to write verbose code or do weird things just to satisfy them. A linting rule must justify its existence. Formatters save enormous amounts of time and arguments about silly things that don't matter. Use one and move on.",
              "examples": [
                "Instead of writing a test to see what happens when you pass a string to a function that expects a number, simply add type definitions for that function and any callers (if you avoid `any` then you're even safer than the test can make you).",
                "You have strict PPI compliance regulations you must follow, so you write some custom linting rules to help avoid logging of user sensitive information."
              ]
            },
            {
              "slug": "prioritize-long-term-problems",
              "title": "Don't prioritize temporary problems over long-term problems",
              "description": "Occasionally when weighing pros and cons of different approaches to a feature or solution, you'll have issues with each implementation on the pros and cons list. An important factor when evaluating the cons is whether the problems are long term or temporary. Focus on solving long-term problems rather than temporary ones if the solution is intended to last longer than the temporary problems.",
              "examples": [
                "As I write this, there's a debate on how to implement CSS masonry. A new `display: masonry` property would simplify learning and configuration but risks some redundancy with `grid`. Integrating masonry into `grid` would make progressive enhancement easier, but the added complexity to implementation and learning would be a lasting drawback. The progressive enhancement challenges are temporary (eventually all browsers will support `masonry`), the learning curve and configuration issues of `grid` integration are long-term. So the `display: masonry` is the better approach."
              ]
            }
          ]
        },
        {
          "slug": "choosing-tools",
          "title": "Choosing your tools",
          "principles": [
            {
              "slug": "no-right-tool",
              "title": "There is no such thing as the 'right tool for the job'",
              "description": "There are many tools and approaches that can solve the same problem. You evaluate each tool on its own merits and in the context of the tradeoffs you have available to you. When you can leverage your existing knowledge and experience, you can move faster.",
              "examples": [
                "A project requires some server-side rendering, so you evaluate both Next.js and Remix based on your team's familiarity with each, scalability, and maintainability. After weighing the options, you select the tool that aligns best with your team's current strengths and project goals rather than assuming one is universally 'best'.",
                "You need a database for storing user data and consider both SQLite and Postgres. Instead of defaulting to one, you evaluate which is more suitable for the specific requirements (for example no latency vs external connections) and choose based on those needs."
              ]
            },
            {
              "slug": "default-to-standards",
              "title": "Default to standards",
              "description": "The ability to transfer skills to different contexts reduces the amount of wasted time and increases velocity. A focus on platform standards will enable greater transferability of skills. This also impacts the ability to bring in others who can join and contribute productively and makes them more likely to do so. There must be a compelling reason to deviate from standards.",
              "examples": [
                "When building a library for configuration-based redirects, you base your API around web standards like Request/Response, rather than a custom request/response implementation.",
                "When deciding how to handle caching of non-dynamic requests, you use cache-control header directives and a CDN rather than inventing a custom caching mechanism."
              ]
            }
          ]
        }
      ]
    },
    {
      "slug": "testing-and-performance",
      "title": "Testing & Performance",
      "description": "Guidelines for testing, performance optimization, and quality assurance.",
      "principles": [
        {
          "slug": "tests-should-resemble-users",
          "title": "Tests should resemble users",
          "description": "The more your tests resemble the way your software is used, the more confidence they can give you. Automated tests are by nature more abstract than your users, but using tools that enable you to simulate users as closely as possible will result in more confidence in shipping good experiences and help you avoid test babysitting that results from implementation details-based tests.",
          "examples": [
            "You're testing a sign-up form that includes name, email, and password fields. Instead of testing the internal function that formats the form data, you write a test that fills in the form fields with realistic values (e.g., name: 'Jane Doe', email: 'jane@example.com') and submits it. Then, you assert that the resulting screen shows a welcome message or an error message if something went wrong, just as a user would experience it.",
            "While testing a 'Submit Feedback' button, rather than triggering a click handler directly, you simulate a full user journey: enter feedback text, click the submit button, and check for confirmation. This approach ensures you test all dependencies in context (button, form, submit handler), resembling the way a user interacts with the system."
          ]
        },
        {
          "slug": "make-assertions-specific",
          "title": "Make assertions specific",
          "description": "When you make an assertion (most often in tests, but also in validation/parsing), make the assertion specific enough that people who see the error understand what the intended behavior is and what about the current state falls short of that intended behavior.",
          "examples": [
            "You're testing a profile update form, and instead of writing an assertion like `expect(document.body).toMatchSnapshot()` which effectively asserts the entire page, you write `expect(screen.getByText(/success/i)).toBeInTheDocument()`. This makes it clear what the specific expectation is, allowing developers to understand at a glance that the update should produce a success message specific to the profile.",
            "In data validation, instead of writing `if (!response.ok) throw new Error('user data request failed')` you write `if (!response.ok) throw new Error(`user data request failed with status ${response.status}: ${response.statusText}`)`. Giving as much information as you reasonably can in the error message."
          ]
        }
      ]
    },
    {
      "slug": "debugging-and-resilience",
      "title": "Debugging & Resilience",
      "description": "Principles for debugging, error handling, and building resilient systems.",
      "principles": [
        {
          "slug": "least-privilege",
          "title": "Least privilege",
          "description": "Give users, processes, and components only the permissions and access they absolutely need. Reduces the risk of unintended behaviors and increases security.",
          "examples": [
            "You're setting up a cloud database that allows different access levels. Instead of giving full read/write permissions to all developers, you limit access so that only admins can modify the schema, while regular developers have read-only access. This reduces the chance of accidental schema changes that could disrupt production.",
            "For a user-facing app, you configure permissions so that logged-in users can only access their own data. If a user tries to access someone else's data, they are automatically denied access by default permissions settings, avoiding unnecessary data exposure."
          ]
        },
        {
          "slug": "fail-fast-and-early",
          "title": "Design to fail fast and early",
          "description": "Design systems and processes that catch errors early, ideally at compile or test time rather than at runtime. Implement strict type checks and use automated testing to catch potential issues before code even reaches production. If there's a situation you think should never happen, but the types suggest that it is in fact possible, rather than glazing over the type warnings, add code to handle that case and throw an error with a useful error message indicating that things are in an unusual state.",
          "examples": [
            "You're working on a user submitted form, and instead of validating data only at the database level, you add validation rules directly in your form. For example, fields like 'email' or 'password' are validated on the client side before submission. This catches errors early, reducing back-and-forth with the server.",
            "You're integrating with a third party HTTP API. Instead of ignoring type errors, you add parsing of their responses and error out with a useful error message if something is unexpected."
          ]
        },
        {
          "slug": "optimize-debugging-experience",
          "title": "Optimize for the debugging experience",
          "description": "Write code that is easy to debug and troubleshoot. This can mean adding meaningful error messages, clear logging, or using tools that make debugging easier. You want to do the setup for these kinds of things now, before production is on fire.",
          "examples": [
            "When building a file uploader, you add specific error messages for each type of failure (e.g., 'File too large,' 'Unsupported format'). This helps you or another developer quickly diagnose why a file upload failed, reducing the time needed to find the root cause.",
            "You create a logging utility that includes contextual information, such as the user ID and request ID, with each log entry. This way, if an error occurs in production, you can immediately see which user was affected and trace the error back through their request history, making debugging easier. (You also take care to not include any sensitive information that would get you in trouble with PPI laws)."
          ]
        },
        {
          "slug": "install-extinguishers",
          "title": "Install extinguishers before the fire starts",
          "description": "No matter how well you write your code, eventually disaster will strike and you want to have processes and automations in place to make it as easy as possible for recovery. Automatic backups with simple restore automations you can run is an example of how to do this.",
          "examples": [
            "Instead of relying solely on manual backups, you set up automatic daily backups with a retention period of 30 days. You also periodically test the restore process to ensure it works smoothly in case you need it.",
            "You configure alerting on critical error logs and set up a Slack channel for notifications. This allows your team to catch production issues early and respond before users experience significant disruptions."
          ]
        }
      ]
    },
    {
      "slug": "developer-experience",
      "title": "Developer Experience",
      "description": "Principles for improving the development process and team productivity.",
      "principles": [
        {
          "slug": "adopt-productive-tools",
          "title": "Adapt to and adopt productive tools",
          "description": "The landscape of developer tools changes on a regular basis. A productive engineer keeps on the lookout for tools that will help them become more productive. Identifying tools and workflow changes that actually make you more productive can be a challenge and weighing the value of the tool against the cost of onboarding is an important skill. It's easy to spend far too much time working on your development environment (\"What theme and font is that!?\") so avoid spinning your wheels on this. But it's an important skill to continue to stay relevant in the field by adapting to and adopting more productive tools and workflows.",
          "examples": [
            "If you had an opportunity to hire an intern to help you with your work, you would do this despite knowing they will require training and they will occasionally deliver less optimal output. AI Assistants are (currently) like interns, except they are incredibly fast, knowledgeable, and are always available. They are like the rubber duck that talks back. You use them responsibly to help speed up your workflow in areas where they help and develop the skill of reviewing their output for quality."
          ]
        },
        {
          "slug": "document-your-work",
          "title": "Document your work",
          "description": "Code comments explain the 'why.' Variables/function names explain the 'what.' Code flow explains the 'how.' Documenting public functions and properties (via jsdoc for example) can be extremely helpful.\n\nSometimes you need to go beyond the code and explain overarching patterns and architectural structure and decisions. This is where decision documents and project-level documentation can come in handy.\n\nKeeping this documentation up-to-date over time is challenging, but important for projects which are intended for long-term maintenance and work from a team. Keep the documentation as close to the code as possible to make it easier.",
          "examples": [
            "You implement a custom authentication flow and, in addition to code comments, you write a short document explaining why the unique constraints and requirements made you take this approach over more standard methods. The document is stored alongside the code in a docs folder, so new developers can reference it easily."
          ]
        },
        {
          "slug": "offline-development",
          "title": "Offline development matters",
          "description": "When you can develop offline, it enables you to tighten your feedback loop, iterate faster, and deliver more value. Not because you regularly work without a network connection (though you can), but because it forces you to be more thoughtful about the services upon which you depend and the challenge of setting those things up locally. This also helps your tests be more reliable and issues more reproducible.",
          "examples": [
            "You use msw (Mock Service Worker) to simulate backend API responses in your local environment. This allows you to develop most features without needing a connection to a live server, making it easier to work offline or in a low-network setup while ensuring reliability in your API integration.",
            "You set up a local database on each developer's machine instead of connecting to a shared development database. This allows developers to work offline and prevents conflicts from shared data, resulting in fewer interruptions during local development."
          ]
        },
        {
          "slug": "deployable-commits",
          "title": "Deployable commits",
          "description": "Your primary branch should be deployable at all times. This requires all validation checks (tests, linting, type checking) to pass before a commit makes it into the main branch. This also typically means when changes are merged, they either bring in a set of commits which can each be deployable on their own or are squashed into a single commit.\n\nHaving this kind of discipline makes it easier to rollback to any point in time, perform a bisect when trying to identify when a bug was introduced, and understand the evolution of the codebase.",
          "examples": [
            "You enforce branch protection rules so that all pull requests into the main branch require passing tests and a successful build before they're merged. This ensures the main branch is always in a deployable state, enabling quick rollbacks if needed and reducing last-minute issues in production.",
            "Use feature flags to deploy to production even if the feature isn't fully ready for users. If issues are found in production, you can disable the feature via the flag without needing a rollback."
          ]
        },
        {
          "slug": "small-merge-requests",
          "title": "Small and short lived merge requests",
          "description": "Maintaining a branch with many changes over a long period of time is cumbersome and error prone. Even the best reviewers get tired and confused and will miss important changes in large merge requests.\n\nUse of feature flags can help ensure a feature can be merged before being complete while still enabling the commit to be deployable.",
          "examples": [
            "You're tasked with a new signup flow and it's a massive undertaking. Rather than making one large pull request, you break it into small chunks, such as 'Create signup page UI' and 'Add validation for signup form.' Each small merge request is reviewed and merged quickly, keeping the main branch up to date and reducing conflicts."
          ]
        },
        {
          "slug": "go-down-to-level-up",
          "title": "Go down to level up",
          "description": "In the process of shipping software, you often get things working and then move on to the next step. When you're ready to increase your velocity, you dive into the abstractions you use to understand how they work so you can use them more effectively.",
          "examples": [
            "You've been using a JavaScript library for date manipulation, but you want a deeper understanding of how it works. You spend time learning the basics of JavaScript Date objects and create a few date functions manually. You even build your own mini-version of the library. Now, when you use the library, you understand its underlying principles and can troubleshoot edge cases more effectively.",
            "You use useEffect in React extensively and find some unexpected re-renders. To understand why, you study the React lifecycle and learn about how dependencies affect re-renders. This insight allows you to optimize your component behavior and avoid unnecessary updates, making you a better React developer."
          ]
        }
      ]
    },
    {
      "slug": "career",
      "title": "Career",
      "description": "Teamwork, ethics, communication, and career development.",
      "subsections": [
        {
          "slug": "professional-growth",
          "title": "Professional Growth",
          "principles": [
            {
              "slug": "solidify-knowledge-through-teaching",
              "title": "Solidify knowledge through teaching",
              "description": "Sharing knowledge with others forces you to ask questions like 'why does this work?' 'is this the best way?' and 'can this be improved?' This deepens your understanding and makes you and those you teach more effective software engineers.",
              "examples": [
                "You just completed a challenging feature related to form validation. To reinforce your understanding, you write a short blog post for your team, explaining how you approached the problem, common pitfalls, and the benefits of your solution.",
                "After learning a new state management approach in React, you volunteer to give a presentation in a team meeting. Preparing forces you to fully understand the topic, and your team benefits from the new knowledge, leading to a shared understanding and higher code quality."
              ]
            },
            {
              "slug": "magnify-conversation-impact",
              "title": "Magnify your conversation impact",
              "description": "You can have terrific conversations with coworkers and friends about things you're learning and doing in this industry. Professional conversations can have a much bigger impact depending on their packaging and distribution. Look for ways to increase the reach and impact of the knowledge sharing that naturally occurs when having professional conversations.",
              "examples": [
                "You're reviewing a pull request and a new engineer left off an important part of a cache key which will lead to false positive cache hits. As the senior engineer you know it's important to take this opportunity to teach and guide the engineer. Instead of posting a few paragraphs in a comment in the pull request, you write about it in a blog post (being careful to remove any code specific to your company) and then share a link to the blog post.",
                "You're a relatively new engineer and you want to have conversations with experienced engineers. So you start a podcast and invite your peers and progressively more experienced engineers to come on and talk about challenges they've had in the industry and what they've learned."
              ]
            },
            {
              "slug": "communicate-value",
              "title": "Communicate value",
              "description": "The very best programmers and teams will fail without effective communication. Opportunities for collaboration are missed and gratitude and kudos are withheld. This has career-wide implications. Your marketing value and communication with the business (also a form of marketing) will focus on the value that's been created for users rather than technical accomplishments. You'll also always give credit where it is due.",
              "examples": [
                "You finished a performance optimization that decreased load times by 50%. Instead of highlighting only the technical changes, you explain to stakeholders how the optimization will improve the user experience and reduce bounce rates (which you have been tracking), directly connecting it to business goals.",
                "Your team implemented a new testing framework. When sharing the update with management, you communicate that the improved tests will catch more bugs early, reduce QA workload, and help deliver reliable features faster, tying the technical choice back to business value."
              ]
            },
            {
              "slug": "know-where-to-make-money",
              "title": "Know where to make money",
              "description": "There are tons of little ways to make little bits of money. You don't get sucked into this. Introducing money impacts the relationship and people start to feel entitled to more of you and your time. You determine what it is you make your money doing and you make money doing that, and then the rest of your activities you do for free or do not do at all.",
              "examples": [
                "You run a tech blog and have the option to add ads for small extra income. However, you realize this would diminish the reading experience, potentially turning off readers who value an ad-free site. You decide not to add ads, focusing on building a strong reader base instead so you can direct them to paid offerings you have.",
                "You run a paid course and often get requests for personalized support outside the course's scope. To protect your time, you set clear boundaries, offering such support only as an upsell. This way, you reserve your main efforts for paid interactions, avoiding burnout."
              ]
            },
            {
              "slug": "focus-on-unique-value",
              "title": "Focus on unique value proposition",
              "description": "It's easy to get distracted by all of the things you could pack into your product offering or tech stack. So you regularly ask yourself whether the problems you're solving are your unique value proposition or if you should outsource this time and energy. The more time you spend on things outside of your differentiators, the less time you spend on solving the problem for which you're building.",
              "examples": [
                "You're developing an app that helps users send nice text messages to their loved ones. Instead of spending time building a sophisticated payment system from scratch, you integrate Stripe, which allows you to process payments securely and efficiently. This lets you focus on your app's unique text-sending features rather than getting bogged down in payment processing, which isn't core to your product's unique value."
              ]
            },
            {
              "slug": "keep-learning",
              "title": "Keep learning",
              "description": "You will never know everything. There will be gaps in your knowledge and understanding. It can be easy to immediately reject things which are new and unfamiliar, but do not fall into this trap. The world continues to evolve and while you don't want to be swept away by every fad that comes and goes, you should approach the new with an open and curious mind.\n\nThis will not only expand your own knowledge and exposure, but also help you make and keep friends by not getting defensive whenever something new challenges your current understanding.\n\nAs your understanding crystalizes and experience increases with time and exposure, you can update your solutions and even your principles to better reflect your updated context. You avoid stagnation by re-evaluating your principles and practices.\n\nMaintain a growth mindset and don't settle with your current level of ability. Always strive to improve.",
              "examples": [
                "You hear about a new database technology that's gaining popularity for handling real-time data streams. Instead of immediately dismissing it as unnecessary, you attend a workshop to learn about its benefits and drawbacks, expanding your knowledge for when you might need it in the future.",
                "Your project involves complex forms, and you're unfamiliar with React's useReducer hook. You decide to experiment with it in a side project and attend a virtual conference session on React's state management techniques, broadening your understanding and potential solutions for complex form handling."
              ]
            }
          ]
        },
        {
          "slug": "personal-growth",
          "title": "Personal Growth",
          "principles": [
            {
              "slug": "prioritize-relationships",
              "title": "Prioritize relationships",
              "description": "No success in life can compensate for failure in your most important relationships. Find people you care about and who care about you. Make lasting commitments to them. Keep those commitments. This is where happiness comes from. The perspective you get from these relationships will make you a more effective and efficient person.",
              "examples": [
                "While maintaining healthy boundaries, you are there for your family and fulfill the commitments you make to the family you were born in and more especially your chosen partner and those born or adopted into your immediate family."
              ]
            },
            {
              "slug": "strive-for-excellence",
              "title": "Strive for excellence",
              "description": "'What E'er Thou Art, Act Well Thy Part'\n\n– John Allan\n\nIn practice, this means when you commit to something, you do it and you do it well. Otherwise, don't commit to it in the first place.",
              "examples": [
                "You agree to build a reporting feature that aggregates user activity data. You take the time to design a system that not only meets the current requirements but is also flexible enough to add more metrics in the future. By building with care and attention to detail, you make it easier for future improvements without having to redo everything.",
                "You're assigned to update a legacy feature with known bugs. Instead of just patching the most visible issues, you refactor the code for readability and long-term maintainability, ensuring future developers will have an easier time understanding and working on this feature.",
                "You've agreed to speak at an event, but an unavoidable family commitment comes up. You of course prioritize the family relationships, but reach out to the event organizers as quickly as possible to let them know of the conflict and do what you can to make up for the missed commitment."
              ]
            },
            {
              "slug": "be-honest",
              "title": "Be honest",
              "description": "Be honest in your dealings with each other and your customers.",
              "examples": [
                "During a project meeting, a feature you implemented isn't functioning as expected. Instead of deflecting or downplaying the issue, you openly acknowledge the problem, explain what went wrong, and outline your plan to address it. This honesty helps your team trust you and see you as a reliable problem-solver.",
                "You're discussing the project timeline with stakeholders, and you realize the current schedule is overly optimistic. Rather than promising an unrealistic deadline, you honestly convey the expected delays and what's needed to get back on track, setting clear expectations and fostering trust."
              ]
            },
            {
              "slug": "embrace-reality",
              "title": "Embrace reality",
              "description": "Strive to understand the reality of relevant context. Your hopes, dreams, and goals are grounded in the current reality and what you can do to push the limits of what is currently possible. You don't complain about reality (beyond what's necessary to understand it), but adjust your position within reality to give you the greatest outcomes.",
              "examples": [
                "A former coworker left the codebase in shambles and you're left to pick up the pieces. Instead of whining and complaining about the unfair circumstances, you explain the reality of the situation in a level headed manner and then work to make things better from where things stand."
              ]
            },
            {
              "slug": "take-personal-responsibility",
              "title": "Take personal responsibility",
              "description": "Take responsibility for your actions (or inaction), strive to rectify issues, and move forward.",
              "examples": [
                "A new feature rollout caused unexpected performance issues in production, and it was partly due to a code change you authored. Instead of making excuses or blaming others, you accept responsibility, roll back the change, and quickly start investigating a solution to prevent similar issues in the future.",
                "You realize you missed a crucial detail in the project requirements, resulting in some wasted development time. You acknowledge the oversight, communicate openly with the team about it, and adjust your approach to ensure a clearer understanding of requirements moving forward."
              ]
            }
          ]
        }
      ]
    }
  ]
} 
