mutation CreateUser($data: users_insert_input!) {
  insert_users_one(object: $data) {
    email
    emailVerified
    id
    name
    image
  }
}

query GetUser($id: uuid!) {
  users_by_pk(id: $id) {
    id
    name
    email
    image
    emailVerified
  }
}

query QueryUser($where: users_bool_exp!) {
  users(where: $where) {
    email
    emailVerified
    id
    image
    name
  }
}

query GetSessionAndUser($sessionToken: String) {
  sessions(where: { sessionToken: { _eq: $sessionToken } }) {
    expires
    id
    sessionToken
    userId
    user {
      email
      id
      emailVerified
      image
      name
    }
  }
}

mutation UpdateUser($id: uuid!, $data: users_set_input!) {
  update_users_by_pk(_set: $data, pk_columns: { id: $id }) {
    email
    emailVerified
    id
    image
    name
  }
}

mutation LinkAccount($data: accounts_insert_input!) {
  insert_accounts_one(object: $data) {
    access_token
    expires_at
    id
    id_token
    oauth_token
    oauth_token_secret
    provider
    scope
    refresh_token
    refresh_token_expires_in
    providerAccountId
    session_state
    token_type
    type
    userId
  }
}

mutation CreateSession($data: sessions_insert_input!) {
  insert_sessions_one(object: $data) {
    expires
    id
    sessionToken
    userId
  }
}

mutation UpdateSession($sessionToken: String, $data: sessions_set_input!) {
  update_sessions(
    where: { sessionToken: { _eq: $sessionToken } }
    _set: $data
  ) {
    returning {
      expires
      id
      sessionToken
      userId
    }
  }
}

mutation UnlinkAccount($provider: String!, $providerAccountId: String!) {
  delete_accounts(
    where: {
      provider: { _eq: $provider }
      providerAccountId: { _eq: $providerAccountId }
    }
  ) {
    returning {
      access_token
      expires_at
      id
      id_token
      oauth_token_secret
      oauth_token
      provider
      providerAccountId
      refresh_token
      refresh_token_expires_in
      session_state
      scope
      token_type
      type
      userId
    }
  }
}

mutation DeleteSession($sessionToken: String) {
  delete_sessions(where: { sessionToken: { _eq: $sessionToken } }) {
    returning {
      id
      expires
      sessionToken
      userId
    }
  }
}

mutation CreateVerificationToken($data: verification_tokens_insert_input!) {
  insert_verification_tokens_one(object: $data) {
    expires
    identifier
    token
  }
}

mutation UseVerificationToken($identifier: String!, $token: String!) {
  delete_verification_tokens(
    where: { token: { _eq: $token }, identifier: { _eq: $identifier } }
  ) {
    returning {
      expires
      identifier
      token
    }
  }
}