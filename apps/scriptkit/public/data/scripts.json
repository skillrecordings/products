[
	{
		"menu": "Mouse Mover",
		"description": "Moves your mouse so you don't go inactive in Slack or Microsoft Teams",
		"author": "Benjamin Modayil",
		"twitter": "@24props",
		"title": "Mouse Mover (Python Script + ScriptKit)",
		"user": "benjaminmodayil",
		"content": "😅 This one is more of a Python script, but I use ScriptKit to launch it. There are moments where I have to leave my computer to address something in another room or need more time than the allotted 10 minutes that Slack provides before it makes it look like I'm unavailable. For the most part, even if I'm in another room, I am still available for conversation/inquiries, so I don't want my coworkers to think I can't be bothered if my status looks like I'm away, but in reality I just might be eating/cooking. So this keeps my computer + work messaging app status in the green so it doesn't look like I'm unavailable.\r\n\r\nThe Python script requires `pyautogui` and `time` modules. I'm not the best for Python troubleshooting as I just learned some Python through YouTube tutorials. All I remember from when I wrote this was that it was a pain to get my computer using the latest version of Python.\r\n\r\nFrom the Python script below, `pyautogui` lets you __exit the script from taking control of your mouse by running `ctrl + c` or moving your mouse to the top right corner of your screen__. Because you can't run `ctrl + c` into a non-existent terminal when using it through ScriptKit, you need to move your mouse to the top right corner of your monitor to exit. \r\n\r\n**Note:** Before connecting/disconnecting external displays while the script is active, you must exit the script first, otherwise you'll have to reconnect/disconnect your displays to the condition of your computer when you started the script to exit.\r\n\r\nYou'll have to squint to see the mouse once the script starts + I only run it for three seconds before closing... Sorry about that.\r\n\r\nhttps://user-images.githubusercontent.com/12306850/135878354-7ab7e798-c63d-4a5e-8ee8-78e938d66b9a.mp4\r\n\r\n```python\r\n\r\n#! /usr/bin/env python3\r\nimport pyautogui\r\nimport time\r\n\r\nwhile True:\r\n    pyautogui.moveRel(0, 50, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(0, -50, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(50, 0, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(-50, 0, duration=1.5)\r\n    time.sleep(1)\r\n\r\n# You can remove a bunch of the repetition above. I just like seeing the mouse move a lot to know it's working.\r\n\r\n```\r\n\r\nHere's the ScriptKit launcher. This will vary depending on your Python path + Python script path.\r\n\r\n```js\r\n// Menu: Mouse Mover\r\n// Description: Moves your mouse so you don't go inactive in Slack or Microsoft Teams\r\n// Author: Benjamin Modayil\r\n// Twitter: @24props\r\n\r\nawait exec(`/PATH-TO-PYTHON-EXECUTABLE/python3.9 /PATH-TO-SCRIPT/i-am-here.py`)\r\n```",
		"command": "mouse-mover-python-script-scriptkit",
		"url": "https://github.com/johnlindquist/kit/discussions/467",
		"extension": ".md"
	},
	{
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"description": "Displays Image Info of Selected File",
		"title": "Image Info from Finder",
		"user": "johnlindquist",
		"content": "![CleanShot 2021-09-30 at 12 28 58](https://user-images.githubusercontent.com/36073/135510901-7559fcd9-f8e3-4875-be16-f70057efdb26.png)\r\n\r\n\r\n[Install image-info](https://scriptkit.com/api/new?name=image-info&url=https://gist.githubusercontent.com/johnlindquist/3bffee49a8128b0ebf8be12d47dce93a/raw/4b08de2b5cafc79f4244cafe6bd946e660224a61/image-info.ts\")\r\n\r\n```js\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n// Description: Displays Image Info of Selected File\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet sharp = await npm(\"sharp\")\r\n\r\nlet metadata = await sharp(\r\n  await getSelectedFile()\r\n).metadata()\r\n\r\nawait div(\r\n  md(`\r\n~~~json\r\n${JSON.stringify(metadata, null, \"\\t\")}\r\n~~~\r\n`)\r\n)\r\n\r\n```\r\n",
		"command": "image-info-from-finder",
		"url": "https://github.com/johnlindquist/kit/discussions/466",
		"extension": ".md"
	},
	{
		"menu": "Switch osx theme",
		"shortcut": "option command t",
		"author": "Oskars Ezerins",
		"title": "Switch osx theme",
		"user": "OskarsEzerins",
		"content": "Kit has to be given permission for System events in Settings -> Security & Privacy -> Privacy -> Automation\r\n\r\n```js\r\n// Menu: Switch osx theme\r\n// Shortcut: option command t\r\n// Author: Oskars Ezerins\r\n\r\nconst toggleTheme = async () => {\r\n  let script = `\r\n  tell application \"System Events\"\r\n    tell appearance preferences\r\n      set dark mode to not dark mode\r\n    end tell\r\n  end tell\r\n  `.trim()\r\n  return await global.applescript(script)\r\n}\r\n\r\ntoggleTheme()\r\n\r\n```\r\n",
		"command": "switch-osx-theme",
		"url": "https://github.com/johnlindquist/kit/discussions/456",
		"extension": ".md"
	},
	{
		"menu": "React Sandbox",
		"description": "Barebones React Starter",
		"author": "S.Barakat",
		"log": "false",
		"prompt to reset settings\r\nlet resetSettings = await arg(\"Reset settings?\", [\"no\", \"yes\"]);\r\nif (resetSettings === \"yes\") {\r\n  reset = true;\r\n}\r\n\r\n// Prompt for the project name\r\nlet projectName = await arg(\"Project name\");\r\n// Remove any spaces or uppercase letters from project name.\r\nprojectName = await projectName.toLowerCase().replace(/\\s/g, '');\r\n\r\n// Prompt for the project directory\r\nlet projectDir = await env(\"PROJECT_DIR\", {\r\n  placeholder": "\"Project directory ~/yourDir\",",
		"prompt for the package manager\r\n// let packageManager = await arg(\"Choose package manager": "\", [\"npm\", \"yarn\"]);",
		"\"home\" is a helper to create paths in your home dir\r\ncd(home());\r\nmkdir(projectDir);\r\ncd(projectDir);\r\n\r\n// Create new app with CRA\r\nawait $`npx create-react-app ${projectName.toLowerCase()}`;\r\n\r\ncd(path.resolve(projectName, \"src\"));\r\n\r\n// Note": "\"rm\" is actually mapped to \"trash\" so files get moved to your trash bin instead of permenantly deleted",
		"remove web-vitals and testing-library\r\nawait $`${packageManager} remove web-vitals @testing-library/jest-dom @testing-library/react @testing-library/user-event`\r\n\r\nlet filePath = path.resolve();\r\n\r\nawait removeLine([\"logo\"], \"App.js\");\r\nawait removeLine([\"WebVitals\", \"vitals\", \"performance\"], \"index.js\");\r\n\r\n// Download to current dir\r\nawait download(\"https": "//meyerweb.com/eric/tools/css/reset/reset.css\", \".\");",
		"title": "React Sandbox",
		"user": "stevebarakat",
		"content": "\r\n[Install react-sandbox](https://scriptkit.com/api/new?name=react-sandbox&url=https://gist.githubusercontent.com/stevebarakat/fcb2d504ba35eb653b72f0b78d1e26b5/raw/433accc5cfc9b35974fffa141d05c410d44b1875/react-sandbox.js\")\r\n\r\n```js\r\n// Menu: React Sandbox\r\n// Description: Barebones React Starter\r\n// Author: S.Barakat\r\n\r\n//Log: false\r\n\r\n// Prevent Scriptkit from closing until script finishes\r\nsetIgnoreBlur(true);\r\n\r\n// Find and replace\r\nlet replaceInFile = async (filePath, regex, string) => {\r\n  let content = await readFile(filePath, \"utf-8\")\r\n  let updatedContent = content.replace(\r\n    new RegExp(regex),\r\n    string\r\n  )\r\n  await writeFile(filePath, updatedContent)\r\n}\r\n\r\n// $`` is using the \"zx\" tool which wraps around \"exec\"\r\n// \"sed\" is a very powerful search/replace tool. We can use it for removing lines:\r\nlet removeLine = async (searchArgs, file) => {\r\n  for (let n = 0; n < searchArgs.length; n++) {\r\n    await $`sed -i .bak /${searchArgs[n]}/d ${file}`;\r\n  }\r\n}\r\n\r\n/**************\r\n  START SCRIPT\r\n **************/\r\n\r\nlet reset = false;\r\n// Prompt to reset settings\r\nlet resetSettings = await arg(\"Reset settings?\", [\"no\", \"yes\"]);\r\nif (resetSettings === \"yes\") {\r\n  reset = true;\r\n}\r\n\r\n// Prompt for the project name\r\nlet projectName = await arg(\"Project name\");\r\n// Remove any spaces or uppercase letters from project name.\r\nprojectName = await projectName.toLowerCase().replace(/\\s/g, '');\r\n\r\n// Prompt for the project directory\r\nlet projectDir = await env(\"PROJECT_DIR\", {\r\n  placeholder: \"Project directory ~/yourDir\",\r\n  reset: reset\r\n});\r\n\r\n// Prompt for the package manager\r\n// let packageManager = await arg(\"Choose package manager:\", [\"npm\", \"yarn\"]);\r\nlet packageManager = await env(\"PACKAGE_MANAGER\", {\r\n  placeholder: \"Select a package manager:\",\r\n  choices: [\"npm\", \"yarn\"],\r\n  reset: reset\r\n});\r\n\r\nif (!which(await packageManager)) {\r\n  await terminal(`~/.kit/bin/kit sync-path`);\r\n  await div(md(\"Your PATH had to be set. Please re-run command.\"));\r\n  await exit();\r\n}\r\n\r\n// \"home\" is a helper to create paths in your home dir\r\ncd(home());\r\nmkdir(projectDir);\r\ncd(projectDir);\r\n\r\n// Create new app with CRA\r\nawait $`npx create-react-app ${projectName.toLowerCase()}`;\r\n\r\ncd(path.resolve(projectName, \"src\"));\r\n\r\n// Note: \"rm\" is actually mapped to \"trash\" so files get moved to your trash bin instead of permenantly deleted\r\nrm([\r\n  `App.test.js`,\r\n  `index.css`,\r\n  `setUpTests.js`,\r\n  `reportWebVitals.js`,\r\n  `logo.svg`,\r\n]);\r\n\r\n// remove web-vitals and testing-library\r\nawait $`${packageManager} remove web-vitals @testing-library/jest-dom @testing-library/react @testing-library/user-event`\r\n\r\nlet filePath = path.resolve();\r\n\r\nawait removeLine([\"logo\"], \"App.js\");\r\nawait removeLine([\"WebVitals\", \"vitals\", \"performance\"], \"index.js\");\r\n\r\n// Download to current dir\r\nawait download(\"https://meyerweb.com/eric/tools/css/reset/reset.css\", \".\");\r\n\r\nawait replaceInFile(\r\n  filePath + \"/App.js\",\r\n  `<header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>`,\r\n  `App`\r\n)\r\n\r\nawait replaceInFile(\r\n  filePath + \"/index.js\",\r\n  `import './index.css'`,\r\n  `import './reset.css'`\r\n);\r\n\r\nawait replaceInFile(\r\n  filePath + \"/App.css\",\r\n  /^(?=[\\S\\s]{10,8000})[\\S\\s]*$/im,\r\n  `\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }`\r\n);\r\n\r\nrm([\r\n  `index.js.bak`,\r\n  `App.js.bak`\r\n]);\r\n\r\nsetIgnoreBlur(false);\r\nedit(`${filePath}/../`);\r\n```\r\n",
		"command": "react-sandbox",
		"url": "https://github.com/johnlindquist/kit/discussions/444",
		"extension": ".md"
	},
	{
		"menu": "GitLab - next MR",
		"description": "Open next MR that I have not approved",
		"author": "Jakub Olek",
		"twitter": "@JakubOlek",
		"shortcut": "ctrl opt \\",
		"title": "(Gitlab) Open next MR that awaits approval",
		"user": "hakubo",
		"content": "\r\n[Install nextMR](https://scriptkit.com/api/new?name=nextMR&url=https://gist.githubusercontent.com/hakubo/9b08be9ee12fa5862dd5e10d8d5ac8b4/raw/1ccb059df8f5017f51250377c71425d81389efaf/nextMR.js\")\r\n\r\n```js\r\n// Menu: GitLab - next MR\r\n// Description: Open next MR that I have not approved\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: ctrl opt \\\r\n\r\nconst { request, gql, GraphQLClient } = await npm(\"graphql-request\");\r\nconst dayjs = await npm(\"dayjs\");\r\nimport relativeTime from \"dayjs/plugin/relativeTime.js\";\r\ndayjs.extend(relativeTime);\r\n\r\nconst domain = await env(\"GITLAB_DOMAIN\");\r\nconst token = await env(\"GITLAB_TOKEN\");\r\nconst username = await env(\"GITLAB_USERNAME\");\r\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\r\nconst requiredApprovals = Number(await env(\"GITLAB_REQUIRED_APPROVALS\"));\r\nconst debug = false;\r\n\r\nfunction log(...args) {\r\n  if (debug) {\r\n    console.log(...args);\r\n  }\r\n}\r\n\r\nconst graphQLClient = new GraphQLClient(domain + \"/api/graphql\", {\r\n  headers: {\r\n    \"PRIVATE-TOKEN\": token,\r\n  },\r\n});\r\n\r\nconst projects = gql`\r\n  query($name: String!) {\r\n    projects(search: $name, membership: true) {\r\n      nodes {\r\n        nameWithNamespace\r\n        fullPath\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nif (!env.GITLAB_PROJECT_PATH) {\r\n  const fullPath = await arg(\"Search project\", async (input) => {\r\n    return (\r\n      await graphQLClient.request(projects, { name: input })\r\n    ).projects.nodes.map((project) => ({\r\n      name: project.nameWithNamespace,\r\n      description: project.fullPath,\r\n      value: project.fullPath,\r\n    }));\r\n  });\r\n\r\n  await cli(\"set-env-var\", \"GITLAB_PROJECT_PATH\", fullPath);\r\n}\r\n\r\nconst queryMrs = gql`\r\n  query($projectPath: ID!) {\r\n    project(fullPath: $projectPath) {\r\n      mergeRequests(state: opened, sort: UPDATED_DESC) {\r\n        nodes {\r\n          title\r\n          webUrl\r\n          iid\r\n          draft\r\n          description\r\n          createdAt\r\n          approvedBy {\r\n            nodes {\r\n              name\r\n              username\r\n            }\r\n          }\r\n          author {\r\n            name\r\n            username\r\n            avatarUrl\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst query = gql`\r\n  query($iid: String!, $projectPath: ID!) {\r\n    project(fullPath: $projectPath) {\r\n      mergeRequest(iid: $iid) {\r\n        commitsWithoutMergeCommits(first: 1) {\r\n          nodes {\r\n            authoredDate\r\n          }\r\n        }\r\n        headPipeline {\r\n          status\r\n        }\r\n        notes {\r\n          nodes {\r\n            updatedAt\r\n            author {\r\n              username\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nlet nextMR;\r\nconst myMrs = [];\r\nconst drafts = [];\r\nconst awaitingReview = [];\r\nconst alreadyCommented = [];\r\nconst haveAuthorCommented = [];\r\nconst haveOthersCommented = [];\r\nconst haveFailingPipeline = [];\r\nconst alreadyApprovedByMe = [];\r\nconst alreadyApprovedByOthers = [];\r\n\r\nconst {\r\n  project: {\r\n    mergeRequests: { nodes: mergeRequests },\r\n  },\r\n} = await graphQLClient.request(queryMrs, {\r\n  projectPath: env.GITLAB_PROJECT_PATH,\r\n});\r\n\r\narg(\"Processing...\");\r\nlog(\"Show list\", flag.showList);\r\nlog(\"Checking\", mergeRequests.length, \"MRs\");\r\n\r\nfor (let mr of mergeRequests) {\r\n  log(\"Checking MR\", mr.title, `(${mr.author.username})`);\r\n  const approvedBy = mr.approvedBy.nodes.map((node) => node.username);\r\n\r\n  if (mr.author.username === username) {\r\n    log(\"^ This is my MR\");\r\n    myMrs.push(mr);\r\n    continue;\r\n  }\r\n\r\n  if (mr.draft) {\r\n    drafts.push(mr);\r\n    log(\"^ This is a draft\");\r\n    continue;\r\n  }\r\n\r\n  if (approvedBy.includes(username)) {\r\n    log(\"^ Approved by me\");\r\n    alreadyApprovedByMe.push(mr);\r\n    continue;\r\n  } else {\r\n    if (approvedBy.length >= requiredApprovals) {\r\n      log(\"^ Approved by others\");\r\n      alreadyApprovedByOthers.push(mr);\r\n      continue;\r\n    }\r\n\r\n    const {\r\n      project: { mergeRequest },\r\n    } = await graphQLClient.request(query, {\r\n      iid: mr.iid,\r\n      projectPath: env.GITLAB_PROJECT_PATH,\r\n    });\r\n\r\n    const pipelineStatus = mergeRequest.headPipeline.status;\r\n\r\n    if (pipelineStatus !== \"SUCCESS\") {\r\n      log(\"^ Failed pipeline\");\r\n      haveFailingPipeline.push(mr);\r\n      continue;\r\n    }\r\n\r\n    const comments = mergeRequest.notes.nodes;\r\n\r\n    const anyLatestComment = comments[0];\r\n    const myLatestComment = comments.find(\r\n      (comment) => comment.author.username === username\r\n    );\r\n    const authorLatestComment = comments.find(\r\n      (comment) => comment.author.username === mr.author.username\r\n    );\r\n\r\n    if (myLatestComment) {\r\n      const latestCommitTime = dayjs(\r\n        mergeRequest.commitsWithoutMergeCommits.nodes[0].authoredDate\r\n      );\r\n      const myLatestCommentTime = dayjs(myLatestComment.updatedAt);\r\n\r\n      if (latestCommitTime.isBefore(myLatestCommentTime)) {\r\n        log(\"^ awaits new commits after my comments\");\r\n        alreadyCommented.push(mr);\r\n        continue;\r\n      }\r\n\r\n      if (authorLatestComment) {\r\n        const authorLatestCommentTime = dayjs(authorLatestComment.updatedAt);\r\n\r\n        if (authorLatestCommentTime.isAfter(myLatestComment.updatedAt)) {\r\n          log(\"^ have some comments by the MR author after my comment\");\r\n          haveAuthorCommented.push(mr);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (anyLatestComment) {\r\n        const latestCommentTime = dayjs(anyLatestComment.updatedAt);\r\n\r\n        if (latestCommentTime.isAfter(myLatestComment.updatedAt)) {\r\n          log(\"^ have some comments by other after my comment\");\r\n          haveOthersCommented.push(mr);\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!flag.showList) {\r\n      nextMR = mr;\r\n      break;\r\n    } else {\r\n      awaitingReview.push(mr);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createJiraLinks(text) {\r\n  return text.replace(\r\n    /[A-Z]{1,5}-[0-9]*/g,\r\n    (ticketNumber) => `[${ticketNumber}](${jiraDomain}}/browse/${ticketNumber})`\r\n  );\r\n}\r\n\r\nfunction getName(mr) {\r\n  if (mr.author.username === username) {\r\n    return `${!mr.draft && mr.approvedBy.nodes.length < 2 ? \"!A \" : \"\"}${\r\n      mr.title\r\n    }`;\r\n  }\r\n\r\n  return mr.title;\r\n}\r\n\r\nfunction getChoices(mrs, description) {\r\n  return mrs.map((mr) => ({\r\n    name: getName(mr),\r\n    value: mr.webUrl,\r\n    description: description,\r\n    img: mr.author.avatarUrl.includes(\"http\")\r\n      ? mr.author.avatarUrl\r\n      : domain + mr.author.avatarUrl,\r\n    preview: md(\r\n      `# ${createJiraLinks(mr.title)}\r\n## Created ${dayjs(mr.createdAt).fromNow()} by ${mr.author.name}\r\n\r\n## ${description}\r\n\r\n## Approved by\r\n${\r\n  mr.approvedBy.nodes.length\r\n    ? mr.approvedBy.nodes\r\n        .map(\r\n          (user) => `* ${user.name}\r\n`\r\n        )\r\n        .join(\"\")\r\n    : \"- nobody\"\r\n}\r\n\r\n${createJiraLinks(\r\n  mr.description.replace(\r\n    /\\/uploads\\//g,\r\n    domain + \"/uploads/\" + env.GITLAB_PROJECT_PATH + \"/\"\r\n  )\r\n)}`\r\n    ),\r\n  }));\r\n}\r\n\r\nif (nextMR) {\r\n  await focusTab(nextMR.webUrl);\r\n} else {\r\n  const choices = [\r\n    ...getChoices(awaitingReview, \"Awaiting Review\"),\r\n    ...getChoices(haveAuthorCommented, \"Author have comments after you\"),\r\n    ...getChoices(haveOthersCommented, \"Someone have comments after you\"),\r\n    ...getChoices(myMrs, \"My merge request\"),\r\n    ...getChoices(haveFailingPipeline, \"Failing Pipeline\"),\r\n    ...getChoices(alreadyCommented, \"You have commented on this\"),\r\n    ...getChoices(alreadyApprovedByOthers, \"Already approved by others\"),\r\n    ...getChoices(alreadyApprovedByMe, \"Already approved by you\"),\r\n    ...getChoices(drafts, \"Draft\"),\r\n  ];\r\n\r\n  if (choices.length) {\r\n    const mr = await arg(\"Open MR:\", choices);\r\n\r\n    if (mr) {\r\n      focusTab(mr);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n```\r\n\r\nThis one I use every day at work. It checks a project for any MR that have no approvals and open it for me automatically.\r\nIn case there is no MR that I should review - it opens arg with a list of all MRs that I might be interested in in this order:\r\n\r\n1. All MRs that I approved but author have comments after me\r\n2. All MRs that I approved but someone have comments after me\r\n3. All my MRs\r\n4. All MRs that have a pipeline failing\r\n5. All MRs that I have already commented\r\n6. All MRs that is already approved by others\r\n7. All MR s that is already approved by me\r\n8. All Draft Mrs.\r\n\r\nFirst time you run it i'll ask you to configure it with gitlab domain, token and your username, jira domain and number of approvals required for each MR.",
		"command": "gitlab-open-next-mr-that-awaits-approval",
		"url": "https://github.com/johnlindquist/kit/discussions/440",
		"extension": ".md"
	},
	{
		"menu": "Conventional comment",
		"description": "Comments that are easy to grok and grep",
		"author": "Jakub Olek",
		"twitter": "@JakubOlek",
		"shortcut": "opt 0",
		"based on": "https://hemdan.hashnode.dev/conventional-comments",
		"title": "Conventional comments",
		"user": "hakubo",
		"content": "\r\n[Install comment](https://scriptkit.com/api/new?name=comment&url=https://gist.githubusercontent.com/hakubo/7813751d84d00da902f997df98a4b9a6/raw/d8e610f13ae4f943c70370195d27497124ee817e/comment.js\")\r\n\r\n```js\r\n// Menu: Conventional comment\r\n// Description: Comments that are easy to grok and grep\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt 0\r\n// Based on: https://hemdan.hashnode.dev/conventional-comments\r\n\r\nconst type = await arg(\"Label\", [\r\n  {\r\n    name: \"👏 praise\",\r\n    value: \"**👏 praise**: \",\r\n    description:\r\n      \"Praises highlight something positive. Try to leave at least one of these comments per review (if it exists :^)\",\r\n  },\r\n  {\r\n    name: \"🤓 nitpick\",\r\n    value: \"**🤓 nitpick**: \",\r\n    description:\r\n      \"Nitpicks are small, trivial, but necessary changes. Distinguishing nitpick comments significantly helps direct the reader's attention to comments requiring more involvement.\",\r\n  },\r\n  {\r\n    name: \"🎯 suggestion\",\r\n    value: \"**🎯 suggestion**: \",\r\n    description:\r\n      \"Suggestions are specific requests to improve the subject under review. It is assumed that we all want to do what's best, so these comments are never dismissed as “mere suggestions”, but are taken seriously.\",\r\n  },\r\n  {\r\n    name: \"🔨 issue\",\r\n    value: \"**🔨 issue**: \",\r\n    description:\r\n      \"Issues represent user-facing problems. If possible, it's great to follow this kind of comment with a suggestion.\",\r\n  },\r\n  {\r\n    name: \"❔ question\",\r\n    value: \"**❔ question**: \",\r\n    description:\r\n      \"Questions are appropriate if you have a potential concern but are not quite sure if it's relevant or not. Asking the author for clarification or investigation can lead to a quick resolution.\",\r\n  },\r\n  {\r\n    name: \"💭 thought\",\r\n    value: \"**💭 thought**: \",\r\n    description:\r\n      \"Thoughts represent an idea that popped up from reviewing. These comments are non-blocking by nature, but they are extremely valuable and can lead to more focused initiatives and mentoring opportunities.\",\r\n  },\r\n  {\r\n    name: \"💣 chore\",\r\n    value: \"**💣 chore**: \",\r\n    description:\r\n      \"Chores are simple tasks that must be done before the subject can be “officially” accepted. Usually, these comments reference some common processes. Try to leave a link to the process described so that the reader knows how to resolve the chore.\",\r\n  },\r\n]);\r\n\r\nsetSelectedText(type);\r\n\r\n```\r\n\r\nSimple list of conventional comments ready to be used.\r\nhttps://conventionalcomments.org/\r\n\r\n",
		"command": "conventional-comments",
		"url": "https://github.com/johnlindquist/kit/discussions/439",
		"extension": ".md"
	},
	{
		"menu": "Computer Info",
		"description": "Gets Computer info",
		"author": "S.Barakat",
		"title": "Computer Info",
		"user": "stevebarakat",
		"content": "\r\n[Install computer-info](https://scriptkit.com/api/new?name=computer-info&url=https://gist.githubusercontent.com/stevebarakat/f8c4140f0fc23638cc851a4ae352811a/raw/3dbfd57e6e24f5065cbafc43917a129ab4bc5f2e/computer-info.js\")\r\n\r\n```js\r\n// Menu: Computer Info\r\n// Description: Gets Computer info\r\n// Author: S.Barakat\r\n\r\nimport os from \"os\";\r\n\r\nconst homeDirectory = os.homedir();\r\n\r\nconst osPlatform = os.platform();\r\n\r\nconst cpu = os.cpus();\r\nconst coreCount = cpu.length;\r\nconst cpuModel = cpu[0].model;\r\nconst cpuSpeed = cpu[0].speed;\r\n\r\nlet info = `\r\n* OS: ${osPlatform}\r\n* Home: ${homeDirectory}\r\n* CPU: ${cpuModel}\r\n* Speed: ${cpuSpeed} MHz\r\n* Cores: ${coreCount}\r\n`\r\n\r\n\r\nawait say(\r\n  `\r\n  Your home directory is: ${homeDirectory}. \r\n  The OS platform is: ${osPlatform}. \r\n  The processor speed is ${cpuSpeed} megahertz.\r\n  Your ${cpuModel} has ${coreCount} cores.\r\n  `\r\n);\r\n\r\nawait div(md(info), `p-4`)\r\n```\r\n",
		"command": "computer-info",
		"url": "https://github.com/johnlindquist/kit/discussions/433",
		"extension": ".md"
	},
	{
		"menu": "New Post",
		"description": "Create a new blog post",
		"author": "Kent C. Dodds",
		"shortcut": "command option control p",
		"twitter": "@kentcdodds",
		"prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser": "'markdown',",
		"title": "Create new Blog Post",
		"user": "kentcdodds",
		"content": "I'm even using metascraper to scrape unsplash for an image, it's alt text, and author (unsplash does not make any of these things easy, yes I realize they have an API, but their terms say you have to hotlink to them if you use it and I don't want to).\r\n\r\nI'm using cloudinary auto-uploads so I don't have to bother uploading the photo manually either :)\r\n\r\n[Install new-post](https://scriptkit.com/api/new?name=new-post&url=https://gist.githubusercontent.com/kentcdodds/f9a5b9f24f8866e75138ff1629bab071/raw/ba9205394f971b62e56064ea528a905b49e10768/new-post.js\")\r\n\r\n```js\r\n// Menu: New Post\r\n// Description: Create a new blog post\r\n// Author: Kent C. Dodds\r\n// Shortcut: command option control p\r\n// Twitter: @kentcdodds\r\n\r\nconst dateFns = await npm('date-fns')\r\nconst prettier = await npm('prettier')\r\nconst YAML = await npm('yaml')\r\nconst slugify = await npm('@sindresorhus/slugify')\r\nconst {format: formatDate} = await npm('date-fns')\r\nconst makeMetascraper = await npm('metascraper')\r\nconst {$filter, toRule} = await npm('@metascraper/helpers')\r\n\r\nconst unsplashTitleToAlt = toRule(str => str.replace(/ photo – .*$/, ''))\r\nconst unsplashOGTitleToAuthor = toRule(str =>\r\n  str.replace(/Photo by (.*?) on Unsplash/, '$1'),\r\n)\r\nconst unsplashImageToPhotoId = toRule(str =>\r\n  new URL(str).pathname.replace('/', ''),\r\n)\r\n\r\nconst metascraper = makeMetascraper([\r\n  {\r\n    unsplashPhotoId: [\r\n      unsplashImageToPhotoId($ =>\r\n        $('meta[property=\"og:image\"]').attr('content'),\r\n      ),\r\n    ],\r\n  },\r\n  {\r\n    author: [\r\n      unsplashOGTitleToAuthor($ =>\r\n        $('meta[property=\"og:title\"]').attr('content'),\r\n      ),\r\n    ],\r\n  },\r\n  {alt: [unsplashTitleToAlt($ => $('title').text())]},\r\n])\r\n\r\nasync function getMetadata(url) {\r\n  const html = await fetch(url).then(res => res.text())\r\n  return metascraper({html, url})\r\n}\r\n\r\nconst blogDir = await env(\r\n  'KCD_BLOG_CONTENT_DIR',\r\n  `What's the path to the blog content directory on this machine?`,\r\n)\r\n\r\nconst title = await arg({\r\n  placeholder: `What's the title of this post?`,\r\n  hint: 'Title',\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst description = await arg({\r\n  placeholder: `What's the description of this post?`,\r\n  hint: 'Description',\r\n  input: 'TODO: add a description',\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst categories = (\r\n  await arg({\r\n    placeholder: `What are the categories of this post?`,\r\n    hint: 'Categories (comma separated)',\r\n    ignoreBlur: true,\r\n  })\r\n)\r\n  .split(',')\r\n  .map(c => c.trim())\r\n\r\nconst keywords = (\r\n  await arg({\r\n    placeholder: `What are the keywords of this post?`,\r\n    hint: 'Keywords (comma separated)',\r\n    ignoreBlur: true,\r\n  })\r\n)\r\n  .split(',')\r\n  .map(c => c.trim())\r\n\r\nconst unsplashPhotoInput = await arg({\r\n  placeholder: `What's the unsplash photo?`,\r\n  hint: 'Unsplash Photo',\r\n  ignoreBlur: true,\r\n})\r\nconst unsplashPhotoUrl = unsplashPhotoInput.startsWith('http')\r\n  ? unsplashPhotoInput\r\n  : `https://unsplash.com/photos/${unsplashPhotoInput}`\r\n\r\nconst metadata = await getMetadata(unsplashPhotoUrl)\r\n\r\nconst frontmatter = YAML.stringify({\r\n  title,\r\n  date: dateFns.format(new Date(), 'yyyy-MM-dd'),\r\n  description,\r\n  categories,\r\n  meta: {keywords},\r\n  bannerCloudinaryId: `unsplash/${metadata.unsplashPhotoId}`,\r\n  bannerAlt: metadata.alt,\r\n  bannerCredit: `Photo by [${metadata.author}](${unsplashPhotoUrl})`,\r\n})\r\n\r\nconst md = `---\r\n${frontmatter}\r\n---\r\n\r\nBe excellent to each other.\r\n`\r\n\r\n// prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser: 'markdown',\r\n  arrowParens: 'avoid',\r\n  bracketSpacing: false,\r\n  embeddedLanguageFormatting: 'auto',\r\n  htmlWhitespaceSensitivity: 'css',\r\n  insertPragma: false,\r\n  jsxBracketSameLine: false,\r\n  jsxSingleQuote: false,\r\n  printWidth: 80,\r\n  proseWrap: 'always',\r\n  quoteProps: 'as-needed',\r\n  requirePragma: false,\r\n  semi: false,\r\n  singleQuote: true,\r\n  tabWidth: 2,\r\n  trailingComma: 'all',\r\n  useTabs: false,\r\n  vueIndentScriptAndStyle: false,\r\n})\r\n\r\nconst filename = slugify(title, {decamelize: false})\r\nconst newFile = path.join(blogDir, `${filename}.mdx`)\r\nawait writeFile(newFile, prettyMd)\r\nawait edit(newFile)\r\n\r\n```\r\n",
		"command": "create-new-blog-post",
		"url": "https://github.com/johnlindquist/kit/discussions/420",
		"extension": ".md"
	},
	{
		"title": "Github Actions",
		"user": "hariombalhara",
		"content": "[Github Actions Script](https://gist.github.com/hariombalhara/969bd98ec14006d5b8b60fb51d018aa2)\r\n\r\nI have my blog using Notion API and whenever I want to publish a post to my blog, I trigger a GitHub Workflow that does the job.\r\n\r\nEarlier, I used to do it using a bookmark for the workflow and 1-2 additional clicks in Github UI. \r\n",
		"command": "github-actions",
		"url": "https://github.com/johnlindquist/kit/discussions/409",
		"extension": ".md"
	},
	{
		"shortcode": "mdn",
		"menu": "Search MDN",
		"description": "Search and open MDN docs",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"title": "Search MDN",
		"user": "johnlindquist",
		"content": "\r\n[Install mdn-search](https://scriptkit.com/api/new?name=mdn-search&url=https://gist.githubusercontent.com/johnlindquist/3c3b581c19e5ad78d2a0a8d659dafee8/raw/bc7e56597e2eb90872b1133e17ee77d5b380760e/mdn-search.js\")\r\n\r\n```js\r\n// Shortcode: mdn\r\n// Menu: Search MDN\r\n// Description: Search and open MDN docs\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet searchIndexResponse = await get(\r\n  `https://developer.mozilla.org/en-US/search-index.json`\r\n)\r\n\r\nlet url = await arg(\r\n  `Select doc:`,\r\n  searchIndexResponse.data.map(({ title, url }) => ({\r\n    name: title,\r\n    description: url,\r\n    value: `https://developer.mozilla.org${url}`,\r\n  }))\r\n)\r\n\r\nexec(`open '${url}'`)\r\n\r\n```\r\n",
		"command": "search-mdn",
		"url": "https://github.com/johnlindquist/kit/discussions/400",
		"extension": ".md"
	},
	{
		"menu": "Genius Lyrics Search",
		"title": "Genius Lyrics Lookup",
		"user": "dealingwith",
		"content": "Just what it says on the tin. How can I improve this one?\r\n\r\n[Install song-search](https://scriptkit.com/api/new?name=song-search&url=https://gist.githubusercontent.com/dealingwith/11ca5e660d3873a3e521ad2905e2b5b7/raw/4910306cd3818772b1cd67b1718e0f3d59e7ced5/song-search.js)\r\n\r\n```js\r\n// Menu: Genius Lyrics Search\r\n\r\nlet Genius = await npm('genius-lyrics-api')\r\n\r\nlet geniusUserToken = await env(\"GENIUS_AUTH_TOKEN\")\r\nimport { getLyrics, searchSong } from 'genius-lyrics-api';\r\n\r\nlet songTitle = await arg(\"Song Title\")\r\n\r\nlet options = {\r\n  apiKey: geniusUserToken,\r\n  title: songTitle,\r\n  artist: '',\r\n  optimizeQuery: true\r\n}\r\n\r\nlet returnedSongs = await(searchSong(options).then((r) => r))\r\nlet returnedSongTitles = returnedSongs.map(s => s.title)\r\n\r\nlet chosenSongTitle = await arg(\"Which song?\", returnedSongTitles)\r\n\r\nlet songData = returnedSongs.filter(s => s.title == chosenSongTitle)\r\nlet lyrics = await(getLyrics(songData[0].url).then((r) => r))\r\n\r\nlet whatToDo = await arg(\"\", [\"Copy\", \"View\", \"Visit\"])\r\n\r\nif (whatToDo == \"Copy\") copy(lyrics)\r\nelse if (whatToDo == \"View\") await textarea(lyrics)\r\nelse if (whatToDo == \"Visit\") await focusTab(songData[0].url)\r\n\r\n```\r\n",
		"command": "genius-lyrics-lookup",
		"url": "https://github.com/johnlindquist/kit/discussions/392",
		"extension": ".md"
	},
	{
		"title": "Resize selected images",
		"user": "dealingwith",
		"content": "Resizes selected images to specified width. Note: overwrites existing files.\r\n\r\n[Install batch-image-resize](https://scriptkit.com/api/new?name=batch-image-resize&url=https://gist.githubusercontent.com/dealingwith/3cdc6420882928df72f9671fd8f366d7/raw/cce80aaf26edd7210f15af16ecb3cade4013dd39/batch-image-resize.js)\r\n\r\n```js\r\nlet Jimp = await npm('jimp')\r\n\r\nlet width = await arg('New width in pixels')\r\n\r\nlet selectedFiles = await getSelectedFile();\r\nlet filePaths = selectedFiles.split(\"\\n\");\r\n\r\nfor (let filePath of filePaths) {\r\n  Jimp.read(filePath, (err, image) => {\r\n    if (err) throw err;\r\n    image.resize(parseInt(width), Jimp.AUTO).write(filePath); // save\r\n  });\r\n}\r\n```",
		"command": "resize-selected-images",
		"url": "https://github.com/johnlindquist/kit/discussions/390",
		"extension": ".md"
	},
	{
		"menu": "Pipe Clipboard to Command",
		"decription": "Manipulate clipboard content using the command line",
		"author": "pomdtr",
		"persist clipoard inside a file\r\nconst clipboardContent = await paste();\r\nconst tempfile = `${kit.tempdir()}/input.txt`;\r\nawait kit.writeFile(tempfile, clipboardContent, {\r\n  flag": "\"w\",",
		"title": "Manipulate the clipboard content using the command line",
		"user": "pomdtr",
		"content": "This script allows to quickly run and preview any shell command on the clipboard content using the command line.\r\nExample usecase -> urlencode a string, extract column from a csv, run a jq command...\r\nYou can also chain shell commands using pipes.\r\n\r\n[Install pipe](https://scriptkit.com/api/new?name=pipe&url=https://gist.githubusercontent.com/pomdtr/6d389a4490fd53b6eeaf4ac1e74e820e/raw/65e967a027e2296f620761d949062173979c998b/pipe.js)\r\n\r\n```js\r\n// Menu: Pipe Clipboard to Command\r\n// Decription: Manipulate clipboard content using the command line\r\n// Author: pomdtr\r\n\r\nprocess.env.PATH = `${process.env.HOME}/.local/bin:/usr/local/bin/:${process.env.PATH}`;\r\n\r\nfunction codeblock(text) {\r\n  const triple_backquote = \"```\";\r\n  return `${triple_backquote}shell\\n${text}\\n${triple_backquote}`;\r\n}\r\n\r\n// Persist clipoard inside a file\r\nconst clipboardContent = await paste();\r\nconst tempfile = `${kit.tempdir()}/input.txt`;\r\nawait kit.writeFile(tempfile, clipboardContent, {\r\n  flag: \"w\",\r\n  encoding: \"utf-8\",\r\n});\r\n\r\nlet command = \"\";\r\nlet [stdout, stderr, code] = [null, null, 0];\r\nlet panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\r\n\r\nwhile (true) {\r\n  command = await arg(\r\n    {\r\n      placeholder: \"Input Command:\",\r\n      className: \"p-2\",\r\n      input: command,\r\n      hint: \"Hit enter to run command and save output to clipboard, esc to dismiss window.\"\r\n    },\r\n    md(codeblock(panelContent))\r\n  );\r\n\r\n  if (command) {\r\n    ({ stdout, stderr, code } = exec(`cat ${tempfile} | ${command}`));\r\n    panelContent = code == 0 ? stdout : stderr;\r\n    if (code == 0) {\r\n      panelContent = stdout;\r\n    } else {\r\n      panelContent = stderr;\r\n    }\r\n  } else {\r\n    panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\r\n  }\r\n\r\n  await copy(panelContent);\r\n}\r\n\r\n```\r\n",
		"command": "manipulate-the-clipboard-content-using-the-command-line",
		"url": "https://github.com/johnlindquist/kit/discussions/377",
		"extension": ".md"
	},
	{
		"title": "Generate TS Interfaces from JSON input",
		"description": "Paste your JSON in and get your Interfaces straight to your clipboard",
		"author": "Benjamin Modayil",
		"twitter": "@24props",
		"user": "benjaminmodayil",
		"content": "Hi everyone,\r\n\r\nJust made this quick script and thought I'd share. My company is updating our codebases to use TypeScript and wanted a way to quickly generate interfaces from JSON input. I'm usually right clicking and copying parts of API responses in the Network tab to pick out the JSON and manually type things out. Now I just copy the JSON, paste into Kit, and then save a few moments of my time. \r\n\r\n## Script\r\n\r\n```javascript\r\n// Title: Generate types\r\n// Description: Paste your JSON in and get your Interfaces straight to your clipboard\r\n// Author: Benjamin Modayil\r\n// Twitter: @24props\r\n\r\nlet {json2ts} = await npm('json-ts')\r\n\r\nlet schema = await arg(\"What is the schema?\");\r\nawait copy(`${json2ts(schema)}`)\r\n\r\nnotify({\r\n  title: 'Interfaces copied to the clipboard',\r\n  message: \"Paste your interfaces into a text editor\"\r\n})\r\nexit() // needed otherwise scriptkit hangs open\r\n```\r\n\r\nI haven't tested the script that much yet, but something that could be tweaked would be wrapping `json-ts` in a try/catch and outputting a different notification depending on the result. \r\n\r\nAnother thing to note is that the output from `json-ts` could always be improved from the developer using the script. I would assume for `json-ts` that it's pretty hard to generate union types without more data to comb through and it's up to the developer to determine when you might need flexibility `number | string` or strictness from something like `\"success\" | \"error\" | \"warning\"`. Also, from the example output below, `json-ts` generates the property `previous` as null, based on the data provided, but I'm guessing it's actually supposed to be a string like `next`. All this to say: \"use at your own discretion\".\r\n\r\n## Example\r\n\r\nGo to this [Pokemon API JSON link](https://pokeapi.co/api/v2/pokemon/), copy JSON, paste into script, paste into editor, and see the below output: \r\n\r\n```typescript\r\ninterface IRootObject {\r\n    count: number;\r\n    next: string;\r\n    previous: null;\r\n    results: IResultsItem[];\r\n}\r\ninterface IResultsItem {\r\n    name: string;\r\n    url: string;\r\n}\r\n```\r\n",
		"command": "generate-ts-interfaces-from-json-input",
		"url": "https://github.com/johnlindquist/kit/discussions/373",
		"extension": ".md"
	},
	{
		"menu": "Daily Story",
		"description": "Write a quick story",
		"author": "Kent C. Dodds",
		"shortcut": "command option control o",
		"twitter": "@kentcdodds",
		"prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser": "'markdown',",
		"title": "Daily Story",
		"user": "kentcdodds",
		"content": "Wrote a new script where I can quickly write little stories of what's going on in my life. It's kind of like a little journal. I set the `DAILY_STORY_DIRECTORY` to a folder in dropbox.\r\n\r\nThe only thing I'm unsure of right now is I want to use `textarea` but I don't know how to actually submit what's been typed. Hitting \"enter\" just (correctly) inserts a newline. I tried ⌘+enter and that didn't work. Anyone know how to submit a textarea?\r\n\r\n[Install daily-story](https://scriptkit.com/api/new?name=daily-story&url=https://gist.githubusercontent.com/kentcdodds/1a5d2b4eabd90ae6b45734ddc2a040dc/raw/d59daeb69d8ef54d54fc4823c0b7f2c147d6932e/daily-story.js)\r\n\r\n```js\r\n// Menu: Daily Story\r\n// Description: Write a quick story\r\n// Author: Kent C. Dodds\r\n// Shortcut: command option control o\r\n// Twitter: @kentcdodds\r\n\r\nconst dateFns = await npm('date-fns')\r\nconst filenamify = await npm('filenamify')\r\nconst prettier = await npm('prettier')\r\n\r\nconst storyDir = await env(\r\n  'DAILY_STORY_DIRECTORY',\r\n  `Where do you want daily stories to be saved?`,\r\n)\r\n\r\nconst story = await arg({placeholder: 'Write your story here'})\r\n\r\nconst today = dateFns.format(new Date(), 'yyyy-MM-dd')\r\nconst date = await arg({\r\n  input: today,\r\n  hint: 'When did this happen?',\r\n})\r\nconst title = await arg({\r\n  placeholder: 'What do you want to call this story?',\r\n  hint: 'Title',\r\n})\r\n\r\nconst md = `---\r\ntitle: ${title}\r\ndate: ${date}\r\nwritten: ${today}\r\n---\r\n\r\n${story}\r\n`\r\n\r\n// prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser: 'markdown',\r\n  arrowParens: 'avoid',\r\n  bracketSpacing: false,\r\n  embeddedLanguageFormatting: 'auto',\r\n  htmlWhitespaceSensitivity: 'css',\r\n  insertPragma: false,\r\n  jsxBracketSameLine: false,\r\n  jsxSingleQuote: false,\r\n  printWidth: 80,\r\n  proseWrap: 'always',\r\n  quoteProps: 'as-needed',\r\n  requirePragma: false,\r\n  semi: false,\r\n  singleQuote: true,\r\n  tabWidth: 2,\r\n  trailingComma: 'all',\r\n  useTabs: false,\r\n  vueIndentScriptAndStyle: false,\r\n})\r\n\r\nconst filename = filenamify(\r\n  `${date}-${title.toLowerCase().replace(/ /g, '-')}.md`,\r\n  {replacement: '-'},\r\n)\r\nawait writeFile(path.join(storyDir, filename), prettyMd)\r\n\r\n```\r\n",
		"command": "daily-story",
		"url": "https://github.com/johnlindquist/kit/discussions/357",
		"extension": ".md"
	},
	{
		"menu": "Fake",
		"description": "generate fake data with faker.js",
		"author": "Jacob Cofman",
		"twitter": "@jcofman",
		"title": "Generate fake data with faker.js",
		"user": "JCofman",
		"content": "Here is a simple one to generate fake data with https://github.com/marak/Faker.js/ and save it to clipboard.\r\n\r\n```js\r\n// Menu: Fake\r\n// Description: generate fake data with faker.js\r\n// Author: Jacob Cofman\r\n// Twitter: @jcofman\r\n\r\nconst faker = await npm(\"faker\");\r\n\r\nfunction getMethodFakerData(method) {\r\n  return Object.keys(faker[method]);\r\n}\r\n\r\nconst fakerMethods = [\r\n  \"name\",\r\n  \"address\",\r\n  \"phone\",\r\n  \"internet\",\r\n  \"company\",\r\n  \"image\",\r\n  \"lorem\",\r\n  \"helpers\",\r\n  \"date\",\r\n  \"random\",\r\n  \"finance\",\r\n  \"hacker\",\r\n  \"system\",\r\n  \"commerce\",\r\n  \"database\",\r\n  \"animal\",\r\n  \"git\",\r\n  \"music\",\r\n  \"datatype\",\r\n];\r\n\r\nconst method = await arg(\"Select-Base-Method:\", fakerMethods);\r\n\r\nconst fakerBaseMethods = getMethodFakerData(method);\r\n\r\nconst script = await arg(\"Select-Script:\", fakerBaseMethods);\r\n\r\nconst result = await faker[method][script]();\r\ncopy(result);\r\nawait arg(result);\r\n```",
		"command": "generate-fake-data-with-fakerjs",
		"url": "https://github.com/johnlindquist/kit/discussions/341",
		"extension": ".md"
	},
	{
		"menu": "ConvertKit > Lookup",
		"description": "Query convertkit",
		"author": "Kent C. Dodds",
		"twitter": "@kentcdodds",
		"title": "ConvertKit lookup",
		"user": "kentcdodds",
		"content": "Created a new script to easily query convert kit because I was tired of the manual process of going to convert kit and clicking around to find a particular user. Wrote this in 2 minutes (had some of the convert kit API code already). Man I love ScriptKit.\r\n\r\n[Install convert-kit-lookup](https://scriptkit.com/api/new?name=convert-kit-lookup&url=https://gist.githubusercontent.com/kentcdodds/815c2fad013740830946c17468e3bbb7/raw/7b1c9ba639eb6881ba8d595f14eca04832087af9/convert-kit-lookup.js)\r\n\r\n```js\r\n// Menu: ConvertKit > Lookup\r\n// Description: Query convertkit\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nconst CONVERT_KIT_API_SECRET = await env('CONVERT_KIT_API_SECRET')\r\nconst CONVERT_KIT_API_KEY = await env('CONVERT_KIT_API_KEY')\r\n\r\nconst query = await arg('query')\r\nlet url\r\nif (query.includes('@')) {\r\n  const sub = await getConvertKitSubscriber(query)\r\n  if (sub?.id) {\r\n    url = `https://app.convertkit.com/subscribers/${sub.id}`\r\n  }\r\n}\r\n\r\nif (!url) {\r\n  url = `https://app.convertkit.com/subscribers?utf8=%E2%9C%93&q=${query}&status=all`\r\n}\r\nexec(`open \"${url}\"`)\r\n\r\nasync function getConvertKitSubscriber(email) {\r\n  const url = new URL('https://api.convertkit.com/v3/subscribers')\r\n  url.searchParams.set('api_secret', CONVERT_KIT_API_SECRET)\r\n  url.searchParams.set('email_address', email)\r\n\r\n  const resp = await fetch(url.toString())\r\n  const json = await resp.json()\r\n  const {subscribers: [subscriber] = []} = json\r\n\r\n  return subscriber\r\n}\r\n\r\n```\r\n",
		"command": "convertkit-lookup",
		"url": "https://github.com/johnlindquist/kit/discussions/336",
		"extension": ".md"
	},
	{
		"title": "Title Case Selected Text",
		"user": "dealingwith",
		"content": "Here's a really quick one I decided to spin up this morning:\r\n\r\n[Install title-case](https://scriptkit.com/api/new?name=title-case&url=https://gist.githubusercontent.com/dealingwith/02ad42f0b334ed36faf7d034f8d97c76/raw/14467032b86ce587d70032f4cd29b913ef30234c/title-case.js)\r\n\r\n```js\r\nlet { titleCase } = await npm(\"title-case\");\r\nlet selectedText = await getSelectedText();\r\nlet value = titleCase(selectedText);\r\nawait setSelectedText(value);\r\n```\r\n\r\n\r\n...also, a tiny variant on the above I like to call The Proper Namifier™\r\n\r\n```js\r\nlet { titleCase } = await npm(\"title-case\");\r\nlet selectedText = await getSelectedText();\r\nlet value = titleCase(selectedText) + '™';\r\nawait setSelectedText(value);\r\n``` ",
		"command": "title-case-selected-text",
		"url": "https://github.com/johnlindquist/kit/discussions/335",
		"extension": ".md"
	},
	{
		"menu": "Tinify",
		"description": "Compress selected images with Tinify",
		"author": "Vojta Holik",
		"twitter": "@vjthlk",
		"title": "Compress selected images with Tinify",
		"user": "vojtaholik",
		"content": "![tinify](https://user-images.githubusercontent.com/25487857/123306748-f706ff00-d521-11eb-9f11-6744d7b1e76b.gif)\r\n\r\n```js\r\n// Menu: Tinify\r\n// Description: Compress selected images with Tinify\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\nlet tinify = await npm(\"tinify\");\r\nlet fs = await import(\"fs\");\r\nlet selectedFiles = await getSelectedFile();\r\n\r\ntinify.key = env.TINIFY_API_KEY;\r\n\r\nlet filePaths = selectedFiles.split(\"\\n\");\r\n\r\nfor (let filePath of filePaths) {\r\n  let directory = path.dirname(filePath);\r\n  let extension = path.extname(filePath);\r\n  let originalFileName = path.basename(filePath);\r\n  let suffix = \"-optimized\";\r\n  let newFileName = originalFileName.replace(extension, suffix + extension);\r\n\r\n  fs.readFile(filePath, (err, sourceData) => {\r\n    if (err) throw err;\r\n    tinify.fromBuffer(sourceData).toBuffer((err, resultData) => {\r\n      if (err) throw err;\r\n      fs.writeFile(`${directory}/` + newFileName, resultData, (err) => {\r\n        if (err) throw err;\r\n      });\r\n    });\r\n  });\r\n}\r\n```\r\n\r\nGet your api key on [tinify.com/dashboard/api](https://tinify.com/dashboard/api) _(assuming you're logged in)_ and add it to `~/.kenv/.env` file like so:\r\n```env\r\n# ...\r\nTINIFY_API_KEY=your_key\r\n```\r\n\r\n---\r\n\r\n<details>\r\n  <summary>You can change file names and directory to best suite your workflow. Since I often work with <code>@2x</code> images I adjusted the script to correctly suffix that part.</summary>\r\n\r\n```js\r\nlet isHD = originalFileName.includes(\"@2x\");\r\nlet newFileName = isHD\r\n  ? originalFileName\r\n      .replace(\"@2x\", \"\")\r\n      .replace(extension, `${suffix}@2x${extension}`)\r\n  : originalFileName.replace(extension, `${suffix}${extension}`);\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n",
		"command": "compress-selected-images-with-tinify",
		"url": "https://github.com/johnlindquist/kit/discussions/328",
		"extension": ".md"
	},
	{
		"title": "Paste last item from clipboard",
		"user": "JoepKockelkorn",
		"content": "With two globals you can paste the last item from the clipboard:\r\n\r\n`await setSelectedText(await paste());`",
		"command": "paste-last-item-from-clipboard",
		"url": "https://github.com/johnlindquist/kit/discussions/325",
		"extension": ".md"
	},
	{
		"menu": "Slugify file name",
		"description": "Slugify selected files",
		"author": "Vojta Holik",
		"twitter": "@vjthlk",
		"title": "Slugify selected file names",
		"user": "vojtaholik",
		"content": "<img src=\"https://p-ZmFjNlQ.b3.n0.cdn.getcloudapp.com/items/mXur6N2W/50e6f3d6-8b3d-4b24-a4c6-3ee047a9613e.gif?v=f5fe168354cb0d1e34dcbf405c7891ac\" width=\"700\" />\r\n\r\n```js\r\n// Menu: Slugify file name\r\n// Description: Slugify selected files\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\nlet slugify = await npm(\"slugify\")\r\nlet selectedFiles = await getSelectedFile()\r\n\r\nconst filePaths = selectedFiles.split(\"\\n\")\r\n\r\nfor (let filePath of filePaths) {\r\n  let originalFileName = path.basename(filePath)\r\n  let newFileName = slugify(originalFileName, {\r\n    lower: true,\r\n  })\r\n  let newFilePath = path.join(\r\n    path.dirname(filePath),\r\n    newFileName\r\n  )\r\n\r\n  cp(filePath, newFilePath)\r\n}\r\n```",
		"command": "slugify-selected-file-names",
		"url": "https://github.com/johnlindquist/kit/discussions/320",
		"extension": ".md"
	},
	{
		"menu": "Cloudinary upload",
		"description": "Upload an image to cloudinary",
		"shortcut": "command option control c",
		"author": "Kent C. Dodds",
		"twitter": "@kentcdodds",
		"title": "Cloudinary upload",
		"user": "kentcdodds",
		"content": "I made this handy little script that makes it really easy for me to upload images to cloudinary.\r\n\r\nI just realized that I need to make it so I can create a new folder from script kit (right now you can only choose from folders that already exist). But it should make it much easier for me to get images up to cloudinary while I'm in the zone writing a blog post :)\r\n\r\n```js\r\n// Menu: Cloudinary upload\r\n// Description: Upload an image to cloudinary\r\n// Shortcut: command option control c\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport path from 'path'\r\n\r\nconst cloudinaryCloudName = await env('CLOUDINARY_CLOUD_NAME')\r\nconst cloudinaryKey = await env('CLOUDINARY_API_KEY')\r\nconst cloudinarySecret = await env('CLOUDINARY_API_SECRET')\r\nconst cloudiaryConsoleId = await env('CLOUDINARY_CONSOLE_ID')\r\n\r\nawait npm('cloudinary')\r\nimport cloudinary from 'cloudinary'\r\n\r\nconst cacheDb = await db('cloudinary-cache', {lastChoice: '', folders: {}})\r\nawait cacheDb.read()\r\n\r\ncloudinary.config({\r\n  cloud_name: cloudinaryCloudName,\r\n  api_key: cloudinaryKey,\r\n  api_secret: cloudinarySecret,\r\n  secure: true,\r\n})\r\n\r\nconst actions = {\r\n  CREATE_NEW: 'creating new folder',\r\n  REFRESH_CACHE: 'refreshing cache',\r\n  OPEN_DIR: 'opening directory',\r\n}\r\n\r\nlet chosenDirectory = await cacheDb.data.lastChoice\r\nlet lastSelection\r\nwhile (true) {\r\n  // if the last action was to create a new directory then we know the chosen\r\n  // directory is new and has no folders otherwise we have to wait a few seconds\r\n  // for the API to be prepared for us to make a request for the contents.\r\n  const directories =\r\n    lastSelection === actions.CREATE_NEW\r\n      ? []\r\n      : await getFolders(chosenDirectory)\r\n  lastSelection = await arg(\r\n    `Select directory in ${chosenDirectory}`,\r\n    [\r\n      {name: '.', value: '.', description: '✅ Choose this directory'},\r\n      !chosenDirectory\r\n        ? null\r\n        : {name: '..', value: '..', description: '⤴️ Go up a directory'},\r\n      ...directories.map(folder => ({\r\n        name: folder.name,\r\n        value: folder.path,\r\n        description: '⤵️ Select directory',\r\n      })),\r\n      {\r\n        name: 'Open directory',\r\n        value: actions.OPEN_DIR,\r\n        description: '🌐 Open this directory in the browser',\r\n      },\r\n      {\r\n        name: 'Refresh cache',\r\n        value: actions.REFRESH_CACHE,\r\n        description: '🔄 Refresh the cache for this directory',\r\n      },\r\n      {\r\n        name: 'Create new directory',\r\n        value: actions.CREATE_NEW,\r\n        description: '➕ Create a new directory here',\r\n      },\r\n    ].filter(Boolean),\r\n  )\r\n  if (lastSelection === '..') {\r\n    chosenDirectory = chosenDirectory.split('/').slice(0, -1).join('/')\r\n  } else if (lastSelection === '.') {\r\n    break\r\n  } else if (lastSelection === actions.CREATE_NEW) {\r\n    const newFolderName = await arg(`What's the new folder name?`)\r\n    const newDirectory = `${chosenDirectory}/${newFolderName}`\r\n    const result = await cloudinary.v2.api.create_folder(newDirectory)\r\n    delete cacheDb.data.folders[chosenDirectory]\r\n    chosenDirectory = newDirectory\r\n  } else if (lastSelection === actions.REFRESH_CACHE) {\r\n    delete cacheDb.data.folders[chosenDirectory]\r\n  } else if (lastSelection === actions.OPEN_DIR) {\r\n    await openFolder(chosenDirectory)\r\n  } else {\r\n    chosenDirectory = lastSelection\r\n  }\r\n}\r\n\r\ncacheDb.data.lastChoice = chosenDirectory\r\nawait cacheDb.write()\r\n\r\nconst images = await arg({\r\n  placeholder: 'Drop the image(s) you want to upload',\r\n  drop: true,\r\n  ignoreBlur: true,\r\n})\r\nfor (const image of images) {\r\n  const defaultName = path.parse(image.path).name\r\n\r\n  const name =\r\n    (await arg({\r\n      placeholder: `Name of this image?`,\r\n      hint: `Default is: \"${defaultName}\"`,\r\n    })) || defaultName\r\n\r\n  const uploadedImage = await cloudinary.v2.uploader.upload(image.path, {\r\n    public_id: name,\r\n    overwrite: false,\r\n    folder: chosenDirectory,\r\n  })\r\n\r\n  // If you have multiple files then this isn't really useful unless you have\r\n  // clipbloard history (which I recommend you get!)\r\n  await copy(uploadedImage.secure_url)\r\n}\r\n\r\nawait openFolder(chosenDirectory)\r\n\r\nfunction openFolder(folder) {\r\n  const encodedFolder = encodeURIComponent(folder)\r\n  console.log('opening')\r\n  return exec(\r\n    `open \"https://cloudinary.com/console/${cloudiaryConsoleId}/media_library/folders/${encodedFolder}\"`,\r\n  )\r\n}\r\n\r\nasync function getFolders(directory) {\r\n  const cachedDirectories = cacheDb.data.folders[directory]\r\n  if (cachedDirectories) {\r\n    return cachedDirectories\r\n  }\r\n\r\n  try {\r\n    const {folders: directories} = !directory\r\n      ? await cloudinary.v2.api.root_folders()\r\n      : await cloudinary.v2.api.sub_folders(directory)\r\n\r\n    cacheDb.data.folders[directory] = directories\r\n\r\n    await cacheDb.write()\r\n\r\n    return directories\r\n  } catch (error) {\r\n    console.error('error with the directory')\r\n    return []\r\n  }\r\n}\r\n```",
		"command": "cloudinary-upload",
		"url": "https://github.com/johnlindquist/kit/discussions/310",
		"extension": ".md"
	},
	{
		"menu": "New task",
		"description": "Add a new task in Notion",
		"title": "My attempt with Notion API",
		"user": "Alarid",
		"content": "Hey folks 👋 \r\n\r\nSo I have this big \"Tasks\" database in Notion where I put all my tasks (personal/work/projects). Each task has many properties, including a \"Status\" (_ToDo, Doing, Done, ..._) and a \"Day\" (_Monday, Tuesday, ...) which I use in a view called \"Week planner\". It's a board view, one column for each value of the property \"Day\", which allows me to have a nice view of what needs to be done this week. I found myself using mainly this view for inserting new tasks. In fact, if I need to do something for tomorrow or the day after, then I add a new task in this column. \r\n\r\nSince Notion released their APIs, I thought \"How cool it would be to do this with Kit!\". I finally did it, and I'm loving it already. This is gonna save me so much time. If I'm working on something and a new task pop into my mind, I can add it from anywhere in a few seconds.\r\n\r\nHere is the script for those interested _(UPDATED VERSION: thanks John for the tips)_\r\n\r\n```js\r\n// Menu: New task\r\n// Description: Add a new task in Notion\r\n\r\nconst { newTask, getProperties, syncProperties } = await lib(\"notion-tasks\")\r\n\r\nlet taskName = await arg({\r\n  placeholder: \"Task name\",\r\n  hint: `Type \"sync\" to sync`,\r\n})\r\nif (taskName === \"sync\") {\r\n  try {\r\n    await syncProperties()\r\n    notify({\r\n      title: \"✅ Notion sync\",\r\n      message: \"Tasks properties successfully cached locally\",\r\n    })\r\n  } catch (err) {\r\n    notify({\r\n      title: \"⛔️ Notion sync\",\r\n      message: \"Something went wrong\",\r\n    })\r\n    console.error(err)\r\n  }\r\n  taskName = await arg(\"Task name\")\r\n}\r\n\r\nconst { statusOptions, dayOptions, tagOptions } = getProperties()\r\n\r\nconst status = await arg(\r\n  \"Status\",\r\n  statusOptions.map((opt) => opt.name)\r\n)\r\nconst day = await arg(\r\n  \"Day\",\r\n  dayOptions.map((opt) => opt.name)\r\n)\r\nconst tag = await arg(\r\n  \"Tag\",\r\n  tagOptions.map((opt) => opt.name)\r\n)\r\n\r\ntry {\r\n  await newTask(taskName, status, day, tag)\r\n  send(\"HIDE_APP\")\r\n  notify({\r\n    title: \"✅ New task added\",\r\n    message: `${taskName} for ${day} (${status})`,\r\n  })\r\n} catch (err) {\r\n  send(\"HIDE_APP\")\r\n  notify({\r\n    title: \"⛔️ New task\",\r\n    message: `Something went wrong`,\r\n  })\r\n  console.error(err)\r\n}\r\n```\r\n\r\nAnd the lib file (`.kenv/lib/notion-tasks.js`)\r\n\r\n```js\r\nconst notionToken = await env(\"NOTION_USER_TOKEN\")\r\nconst databaseId = \"06d55db47a994f429132d5d8fd9edd2a\"\r\nconst tasksDb = await db(\"tasks\", {\r\n  properties: {\r\n    statusOptions: [],\r\n    dayOptions: [],\r\n    tagOptions: [],\r\n  },\r\n})\r\nexport const getProperties = () => tasksDb.properties\r\n\r\nexport async function syncProperties() {\r\n  const { data } = await get(\r\n    `https://api.notion.com/v1/databases/${databaseId}`,\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${notionToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Notion-Version\": \"2021-05-13\",\r\n      },\r\n    }\r\n  )\r\n  const {\r\n    Status: {\r\n      select: { options: statusOptions },\r\n    },\r\n    Day: {\r\n      multi_select: { options: dayOptions },\r\n    },\r\n    Tag: {\r\n      multi_select: { options: tagOptions },\r\n    },\r\n  } = data.properties\r\n\r\n  tasksDb.properties = { statusOptions, dayOptions, tagOptions }\r\n  await tasksDb.write()\r\n}\r\n\r\nexport async function newTask(taskName, status, day, tag) {\r\n  return await post(\r\n    \"https://api.notion.com/v1/pages\",\r\n    {\r\n      parent: { database_id: databaseId },\r\n      properties: {\r\n        Name: {\r\n          title: [{ text: { content: taskName } }],\r\n        },\r\n        Status: {\r\n          select: { name: status },\r\n        },\r\n        Day: {\r\n          multi_select: [{ name: day }],\r\n        },\r\n        Tag: {\r\n          multi_select: [{ name: tag }],\r\n        },\r\n      },\r\n    },\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${notionToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Notion-Version\": \"2021-05-13\",\r\n      },\r\n    }\r\n  )\r\n}\r\n```\r\n\r\n~Maybe I'm missing something about caching though 😅~ Any feedback/improvement ideas appreciated. And once again, thanks @johnlindquist for this amazing app, I use it every single day and it has definitely made my life easier 🙏 ",
		"command": "my-attempt-with-notion-api",
		"url": "https://github.com/johnlindquist/kit/discussions/306",
		"extension": ".md"
	},
	{
		"title": "Another Notion example -- select a random item from a database",
		"user": "dealingwith",
		"content": "Like the [last Notion example I posted](https://github.com/johnlindquist/kit/discussions/286), this one interfaces with my giant, singular Tasks database in Notion. This one selects one task at random (that does not have a status of Done or Archive).\r\n\r\n[Install notion-random-task](https://scriptkit.com/api/new?name=notion-random-task&url=https://gist.githubusercontent.com/dealingwith/43c1079690c14481ec2e76737e5f60fc/raw/f77a17b9cfe93b0a4b8eb0f533f014aeaaadbb9f/notion-random-task.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\n\r\nlet {data} = await post(\r\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\r\n{\r\n  \"filter\": {\r\n    \"and\": [\r\n      {\r\n        \"property\": \"Status\",\r\n        \"select\": {\r\n          \"does_not_equal\": \"Done\"\r\n        }\r\n      },\r\n      {\r\n        \"property\": \"Status\",\r\n        \"select\": {\r\n          \"does_not_equal\": \"Archive\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  page_size: 100\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet tasks = data.results\r\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\r\nlet pageID = task.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\ncopy(pageURL)\r\n\r\nawait focusTab(pageURL, \"Google Chrome Beta\")\r\n```\r\n\r\nI also created one that only queries for tasks with no status (the \"inbox\")...\r\n\r\n[Install notion-random-from-inbox](https://scriptkit.com/api/new?name=notion-random-from-inbox&url=https://gist.githubusercontent.com/dealingwith/24ccf1b94413168939eff0369a25bd9f/raw/019aa8bf68265fce8e9119b4a6409c1b5fc2ef7c/notion-random-from-inbox.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\n\r\nlet {data} = await post(\r\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\r\n{\r\n  \"filter\": \r\n  {\r\n    \"property\": \"Status\",\r\n    \"select\": {\r\n      \"is_empty\": true\r\n    }\r\n  },\r\n  page_size: 50\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet tasks = data.results\r\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\r\nlet pageID = task.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\ncopy(pageURL)\r\n\r\nawait focusTab(pageURL, \"Google Chrome Beta\")\r\n```\r\n\r\n~Is there a better way to open the link in a browser? I stole this method from Ian Jones.~",
		"command": "another-notion-example-select-a-random-item-from-a-database",
		"url": "https://github.com/johnlindquist/kit/discussions/297",
		"extension": ".md"
	},
	{
		"menu": "Shorten",
		"description": "Shorten a given URL with a given short name via netlify-shortener",
		"shortcut": "command option control s",
		"author": "Kent C. Dodds",
		"twitter": "@kentcdodds",
		"tODO": "figure out how to make this optional",
		"title": "Shorten with netlify-shortener",
		"user": "kentcdodds",
		"content": "[netlify-shortener](https://github.com/kentcdodds/netlify-shortener)\r\n\r\n[Install shorten](https://scriptkit.com/api/new?name=shorten&url=https://gist.githubusercontent.com/kentcdodds/539bb0543b8d8056e5a8d0dada61e140/raw/7f4b2cf571afddbcfea6bf1dcd18f3227e5fd4b5/shorten.js)\r\n\r\n```js\r\n// Menu: Shorten\r\n// Description: Shorten a given URL with a given short name via netlify-shortener\r\n// Shortcut: command option control s\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nconst dir = await env(\r\n  'SHORTEN_REPO_DIRECTORY',\r\n  'Where is your netlify-shortener repo directory?',\r\n)\r\n\r\nconst longURL = await arg(`What's the full URL?`)\r\n// TODO: figure out how to make this optional\r\nconst shortName = await arg(`What's the short name?`)\r\nconst netlifyShortenerPath = path.join(\r\n  dir,\r\n  'node_modules/netlify-shortener/dist/index.js',\r\n)\r\nconst {baseUrl} = JSON.parse(await readFile(path.join(dir, 'package.json')))\r\n\r\nsetPlaceholder(`Creating redirect: ${baseUrl}/${shortName} -> ${longURL}`)\r\nconst result = exec(\r\n  `node \"${netlifyShortenerPath}\" \"${longURL}\" \"${shortName}\"`,\r\n)\r\n\r\nconst {stderr, stdout} = result\r\n\r\nif (result.code === 0) {\r\n  const lastLine = stdout.split('\\n').filter(Boolean).slice(-1)[0]\r\n  notify({\r\n    title: '✅ Short URL created',\r\n    message: lastLine,\r\n  })\r\n} else {\r\n  const getErr = str => str.match(/Error: (.+)\\n/)?.[1]\r\n  const error = getErr(stderr) ?? getErr(stdout) ?? 'Unknown error'\r\n  console.error({stderr, stdout})\r\n  notify({\r\n    title: '❌ Short URL not created',\r\n    message: error,\r\n  })\r\n}\r\n\r\n```\r\n\r\nIt's a bit of a hack in some places, but it works!",
		"command": "shorten-with-netlify-shortener",
		"url": "https://github.com/johnlindquist/kit/discussions/295",
		"extension": ".md"
	},
	{
		"shortcut": "command option k",
		"menu": "Kill Notification",
		"description": "Kill pesky mac os notification inspired by 240px-invisible-pixels @ https://tyler.io/240-invisible-pixels/",
		"author": "Gary McCann",
		"title": "Kill Notification",
		"user": "gm90",
		"content": "Inspired by Tyler Hall, a quick shortcut key to clear a mac notification with the awkward Big Sur UX  with the tiny cross click area.\r\n\r\n```javascript\r\n// Shortcut: command option k\r\n// Menu: Kill Notification\r\n// Description: Kill pesky mac os notification inspired by 240px-invisible-pixels @ https://tyler.io/240-invisible-pixels/\r\n// Author: Gary McCann\r\n\r\nconst robot = await npm (\"robotjs\");\r\nconst screenSize = robot.getScreenSize();\r\nconst xPosition = screenSize.width - 354;\r\nconst yPosition = 47;\r\n\r\nrobot.moveMouse(xPosition, yPosition);\r\n\r\nsetTimeout(() => {  \r\n  robot.mouseClick();\r\n}, 100)",
		"command": "kill-notification",
		"url": "https://github.com/johnlindquist/kit/discussions/288",
		"extension": ".md"
	},
	{
		"title": "Post to Notion",
		"user": "dealingwith",
		"content": "<img width=\"418\" alt=\"Screen Shot 2021-05-19 at 11 06 46 PM\" src=\"https://user-images.githubusercontent.com/124208/118917657-f8c41e00-b8f6-11eb-9c5d-de7be826ec4c.png\">\r\n\r\nI thought the Notion API might be a fun thing to play with via Script Kit. I have a singular \"tasks\" database that I use to capture all manner of things, so I always want to insert pages into it in order to process them later. These scripts will require you to update the databaseID value in the code itself. I could see an expansion of this script to allow for the selection of a specific Notion database from a list.\r\n\r\nThe second script below takes a second input in order to insert content into the new page -- I was wondering if there is a way to allow multiline text input via Script Kit, which would make that script more robust.\r\n\r\nYou can get a Notion API token [here](https://developers.notion.com/) and find quick-start instructions [here](https://developers.notion.com/docs), as well as the API reference [here](https://developers.notion.com/reference/intro).\r\n\r\nFor a quick overview of the data model, [check out Chris Biscardi's video here](https://www.youtube.com/watch?v=apKz987OLcE&t=1s). For a more in-depth overview, check out [this Notion blog post](https://www.notion.so/blog/data-model-behind-notion).\r\n\r\n[Install notion-add-task](https://scriptkit.com/api/new?name=notion-add-task&url=https://gist.githubusercontent.com/dealingwith/d8e701f2e0e5e64cb820103af96a08d2/raw/b2c11daf28ed7e4b40f2809bda428b527dd78b24/notion-add-task.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\nlet content = await arg('Enter Task')\r\n\r\nlet {data} = await post(\r\n  'https://api.notion.com/v1/pages', {\r\n  \"parent\": { \"database_id\": databaseID },\r\n  \"properties\": {\r\n    \"Name\": {\r\n      \"title\": [\r\n        {\r\n          \"text\": {\r\n            \"content\": content\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n  }\r\n})\r\n\r\nlet pageID = data.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\n\r\ncopy(pageURL)\r\n```\r\n\r\n\r\n[Install notion-add-task-with-content](https://scriptkit.com/api/new?name=notion-add-task-with-content&url=https://gist.githubusercontent.com/dealingwith/99c4da33565dddb115b5c173e1e29f48/raw/0c5b31b56b0fcc39fa3f589f7e2dcd4312f5c53a/notion-add-task-with-content.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\nlet content = await arg('Enter Task')\r\n\r\nlet {data} = await post(\r\n  'https://api.notion.com/v1/pages', {\r\n  \"parent\": { \"database_id\": databaseID },\r\n  \"properties\": {\r\n    \"Name\": {\r\n      \"title\": [\r\n        {\r\n          \"text\": {\r\n            \"content\": content\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet bodyContent = await arg('Enter Content')\r\n\r\nlet {bodyData} = await patch(\r\n  `https://api.notion.com/v1/blocks/${data.id}/children`, {\r\n  \"children\": [\r\n    {\r\n      \"object\": \"block\",\r\n      \"type\": \"paragraph\",\r\n      \"paragraph\": {\r\n        \"text\": [\r\n          {\r\n            \"type\": \"text\",\r\n            \"text\": {\r\n              \"content\": bodyContent\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet pageID = data.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\n\r\ncopy(pageURL)\r\n```\r\n\r\n(I just noticed that I haven't updated the first script to pass the \"Notion-Version\" header, but it seems unnecessary for now.)",
		"command": "post-to-notion",
		"url": "https://github.com/johnlindquist/kit/discussions/286",
		"extension": ".md"
	},
	{
		"menu": "npm",
		"description": "Search npm",
		"author": "Ian Sutherland",
		"twitter": "@iansu",
		"title": "npm search",
		"user": "iansu",
		"content": "[Install npm](https://scriptkit.com/api/new?name=npm&url=https://gist.githubusercontent.com/iansu/7f0227f191865e18b5a2b7ff616d6fd9/raw/6e18ce83af9eedc2a3fde3b39f35f682e3d841e4/npm.js)\r\n\r\nThis is a very simple script that I made to search npm and open the results in your browser. I took a quick look and didn't see anything similar here so I figured I would share it, even though the script itself isn't particularly interesting.\r\n\r\n```js\r\n// Menu: npm\r\n// Description: Search npm\r\n// Author: Ian Sutherland\r\n// Twitter: @iansu\r\n\r\nawait arg(\"Search query:\", async () => {\r\n  let query = await arg(\"Search query:\")\r\n\r\n  exec(`open https://www.npmjs.com/search?q=${query}`)\r\n})\r\n```",
		"command": "npm-search",
		"url": "https://github.com/johnlindquist/kit/discussions/283",
		"extension": ".md"
	},
	{
		"menu": "Twimage Download",
		"description": "Download twitter images and set their exif info based on the tweet metadata",
		"shortcut": "fn ctrl opt cmd t",
		"author": "Kent C. Dodds",
		"twitter": "@kentcdodds",
		"title": "Twimage Download (tweet image)",
		"user": "kentcdodds",
		"content": "I made a little script to download images from tweets and set exif data to info derived from the tweet. Especially helpful is the creation date and the GPS data (if the tweet includes location).\r\n\r\nI'm using this to go back to pictures people have taken of me speaking at conferences and adding them to my personal photo library and make sure they appear at the right time in my photo library timeline.\r\n\r\n[Install twimage-download](https://scriptkit.com/api/new?name=twimage-download&url=https://gist.githubusercontent.com/kentcdodds/acfa864608d00af8a37a074cc857c657/raw/82294cd894a5b04800f642b02faaf3f829f550fc/twimage-download.js)\r\n\r\n```js\r\n// Menu: Twimage Download\r\n// Description: Download twitter images and set their exif info based on the tweet metadata\r\n// Shortcut: fn ctrl opt cmd t\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport fs from 'fs'\r\nimport {fileURLToPath, URL} from 'url'\r\n\r\nconst exiftool = await npm('node-exiftool')\r\nconst exiftoolBin = await npm('dist-exiftool')\r\nconst fsExtra = await npm('fs-extra')\r\n\r\nconst baseOut = home('Pictures/twimages')\r\n\r\nconst token = await env('TWITTER_BEARER_TOKEN')\r\nconst twitterUrl = await arg('Twitter URL')\r\nconsole.log(`Starting with ${twitterUrl}`)\r\n\r\nconst tweetId = new URL(twitterUrl).pathname.split('/').slice(-1)[0]\r\nconst params = new URLSearchParams()\r\nparams.set('ids', tweetId)\r\nparams.set('user.fields', 'username')\r\nparams.set('tweet.fields', 'author_id,created_at,geo')\r\nparams.set('media.fields', 'url')\r\nparams.set('expansions', 'author_id,attachments.media_keys,geo.place_id')\r\nconst response = await get(\r\n  `https://api.twitter.com/2/tweets?${params.toString()}`,\r\n  {\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  },\r\n)\r\n\r\nconst json = /** @type import('../types/twimage-download').JsonResponse */ (\r\n  response.data\r\n)\r\n\r\nconst ep = new exiftool.ExiftoolProcess(exiftoolBin)\r\n\r\nawait ep.open()\r\n\r\nfor (const tweet of json.data) {\r\n  const {attachments, geo, id, text, created_at} = tweet\r\n  if (!attachments) throw new Error(`No attachements: ${tweet.id}`)\r\n  const author = json.includes.users.find(u => u.id === tweet.author_id)\r\n  if (!author) throw new Error(`wut? No author? ${tweet.id}`)\r\n\r\n  const link = `https://twitter.com/${author.username}/status/${id}`\r\n  const {latitude, longitude} = geo ? await getGeoCoords(geo.place_id) : {}\r\n\r\n  for (const mediaKey of attachments.media_keys) {\r\n    const media = json.includes.media.find(m => mediaKey === m.media_key)\r\n    if (!media) throw new Error(`Huh... no media found...`)\r\n    const formattedDate = formatDate(created_at)\r\n    const colonDate = formattedDate.replace(/-/g, ':')\r\n    const formattedTimestamp = formatTimestamp(created_at)\r\n    const filename = new URL(media.url).pathname.split('/').slice(-1)[0]\r\n    const filepath = path.join(\r\n      baseOut,\r\n      formattedDate.split('-').slice(0, 2).join('-'),\r\n      filename,\r\n    )\r\n\r\n    await download(media.url, filepath)\r\n\r\n    console.log(`Updating exif metadata for ${filepath}`)\r\n    await ep.writeMetadata(\r\n      filepath,\r\n      {\r\n        ImageDescription: `${text} – ${link}`,\r\n        Keywords: 'photos from tweets',\r\n        DateTimeOriginal: formattedTimestamp,\r\n        FileModifyDate: formattedTimestamp,\r\n        ModifyDate: formattedTimestamp,\r\n        CreateDate: formattedTimestamp,\r\n        ...(geo\r\n          ? {\r\n              GPSLatitudeRef: latitude > 0 ? 'North' : 'South',\r\n              GPSLongitudeRef: longitude > 0 ? 'East' : 'West',\r\n              GPSLatitude: latitude,\r\n              GPSLongitude: longitude,\r\n              GPSDateStamp: colonDate,\r\n              GPSDateTime: formattedTimestamp,\r\n            }\r\n          : null),\r\n      },\r\n      ['overwrite_original'],\r\n    )\r\n  }\r\n}\r\n\r\nawait ep.close()\r\nconsole.log(`All done with ${twitterUrl}`)\r\n\r\nfunction formatDate(t) {\r\n  const d = new Date(t)\r\n  return `${d.getFullYear()}-${padZero(d.getMonth() + 1)}-${padZero(\r\n    d.getDate(),\r\n  )}`\r\n}\r\nfunction formatTimestamp(t) {\r\n  const d = new Date(t)\r\n  const formattedDate = formatDate(t)\r\n  return `${formatDate(t)} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\r\n}\r\nfunction padZero(n) {\r\n  return String(n).padStart(2, '0')\r\n}\r\n\r\nasync function getGeoCoords(placeId) {\r\n  const response = await get(\r\n    `https://api.twitter.com/1.1/geo/id/${placeId}.json`,\r\n    {\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    },\r\n  )\r\n  const [longitude, latitude] = response.data.centroid\r\n  return {latitude, longitude}\r\n}\r\n\r\nasync function download(url, out) {\r\n  console.log(`downloading ${url} to ${out}`)\r\n  await fsExtra.ensureDir(path.dirname(out))\r\n\r\n  const writer = fs.createWriteStream(out)\r\n  const response = await get(url, {responseType: 'stream'})\r\n  response.data.pipe(writer)\r\n\r\n  return new Promise((resolve, reject) => {\r\n    writer.on('finish', () => resolve(out))\r\n    writer.on('error', reject)\r\n  })\r\n}\r\n```\r\n",
		"command": "twimage-download-tweet-image",
		"url": "https://github.com/johnlindquist/kit/discussions/269",
		"extension": ".md"
	},
	{
		"menu": "Create gist from clipboard",
		"description": "Creates a new GitHub Gist with the contents of your current clipboard",
		"author": "Gregor Martynus",
		"twitter": "@gr2m",
		"https": "//github.com/gr2m/scriptkit-octokit/",
		"copy the content from the current clipboard\r\nconst content = await paste();\r\n\r\nif (!content) {\r\n  console.log(\"clipboard is empty\");\r\n  exit();\r\n}\r\n\r\nconst { data } = await octokit.rest.gists.create({\r\n  description": "\"Created using https://github.com/johnlindquist/kit/discussions/266\",",
		"shortcut": "command option g",
		"title": "Create Gist from Clipboard",
		"user": "gr2m",
		"content": "<kbd><a href=\"https://scriptkit.com/api/new?name=create-gist-from-clipboard&url=https://gist.githubusercontent.com/gr2m/f5d7ee961664ee1e2561ca29311026c6/raw/dbecf63ff2a68dcc4778a2d4d26a42af2b3998bf/create-gist-from-clipboard.js\">Install create-gist-from-clipboard</a></kbd>\r\n\r\n```js\r\n// Menu: Create gist from clipboard\r\n// Description: Creates a new GitHub Gist with the contents of your current clipboard\r\n// Author: Gregor Martynus\r\n// Twitter: @gr2m\r\n\r\n// https://github.com/gr2m/scriptkit-octokit/\r\nconst { Octokit } = await npm(\"scriptkit-octokit\");\r\nconst octokit = new Octokit({\r\n  auth: {\r\n    scopes: [\"gist\"],\r\n  },\r\n});\r\n\r\n// copy the content from the current clipboard\r\nconst content = await paste();\r\n\r\nif (!content) {\r\n  console.log(\"clipboard is empty\");\r\n  exit();\r\n}\r\n\r\nconst { data } = await octokit.rest.gists.create({\r\n  description: \"Created using https://github.com/johnlindquist/kit/discussions/266\",\r\n  public: false,\r\n  files: {\r\n    \"clipboard.txt\": { content },\r\n  },\r\n});\r\n\r\nawait copy(data.html_url);\r\nconsole.log(\"Gist created at %s\", data.html_url);\r\n```\r\n\r\nI highly recommend setting a shortcut, e.g. add to the top:\r\n\r\n```js\r\n// Shortcut: command option g\r\n```",
		"command": "create-gist-from-clipboard",
		"url": "https://github.com/johnlindquist/kit/discussions/266",
		"extension": ".md"
	},
	{
		"menu": "Word Game",
		"description": "Guess letters to win!",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"title": "Word Game 🎯",
		"user": "johnlindquist",
		"content": "\r\n[Install word-game](https://scriptkit.com/api/new?name=word-game&url=https://gist.githubusercontent.com/johnlindquist/0388865384e7a761e92c0bfa5b176a9a/raw/9c7214c1533f43fd09ac418d8cfc4c574f8e655a/word-game.js)\r\n\r\n```js\r\n// Menu: Word Game\r\n// Description: Guess letters to win!\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet playAgain = true\r\n\r\nwhile (playAgain) {\r\n  let {\r\n    data: [word],\r\n  } = await get(\r\n    `https://random-word-api.herokuapp.com/word`\r\n  )\r\n\r\n  let correct = false\r\n  let guesses = []\r\n\r\n  while (!correct) {\r\n    let [...letters] = await arg(\r\n      { placeholder: \"Guess a letter/s:\", hint: word }, //remove hint to make it more challenging 😉\r\n      word\r\n        .split(\"\")\r\n        .map(char => (guesses.includes(char) ? char : \"*\"))\r\n        .join(\"\")\r\n    )\r\n    guesses = guesses.concat(...letters)\r\n\r\n    correct = word\r\n      .split(\"\")\r\n      .every(char => guesses.includes(char))\r\n  }\r\n\r\n  playAgain = await arg(`🏆 \"${word}\"! Play Again?`, [\r\n    { name: \"Yes\", value: true },\r\n    { name: \"No\", value: false },\r\n  ])\r\n}\r\n```\r\n",
		"command": "word-game",
		"url": "https://github.com/johnlindquist/kit/discussions/253",
		"extension": ".md"
	},
	{
		"menu": "Open a GitHub Repo",
		"description": "Launch a GitHub repo in your browser",
		"author": "Mandi Wise",
		"twitter": "@mandiwise",
		"https": "//docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token",
		"graphQL operations\r\n\r\nconst GetAccounts = `query GetAccounts($first": "Int) {",
		"get user and their organizations in a list\r\n\r\nlet dots = 0;\r\nconst accountsPlaceholderIntervalId = setInterval(() => {\r\n  setPlaceholder(`Loading GitHub accounts`.padEnd(++dots, \".\"));\r\n}, 100);\r\n\r\nconst { viewer } = await octokit.graphql(GetAccounts, { first": "ORGS_PER_PAGE });",
		"get repo list for the user or organization\r\n\r\nlet repositoriesAndLoadMore = [];\r\n\r\nasync function fetchRepositories(variables) {\r\n  const reposPlaceholderIntervalId = setInterval(() => {\r\n    setPlaceholder(`Loading repositories`.padEnd(++dots, \".\"));\r\n  }, 100);\r\n\r\n  let edges, endCursor, hasNextPage;\r\n  const oldLoadMore = repositoriesAndLoadMore.find(({ value }) =>\r\n    value.startsWith(\"load-more-after-\")\r\n  );\r\n\r\n  if (oldLoadMore) {\r\n    repositoriesAndLoadMore.pop();\r\n  }\r\n\r\n  if (accountType === \"org\") {\r\n    ({\r\n      viewer": "{",
		"title": "Open a GitHub repo (including org and private repos, as well as pagination)",
		"user": "mandiwise",
		"content": "This script allows you to authenticate with a GitHub personal access token and open repos from your user account or any organizations you belong to. It also displays private repos and handles pagination if the repo count exceeds 100 (just scroll to the bottom of the list and you'll see a \"Load more...\" option, when applicable).\r\n\r\n![Opening an org repo](https://user-images.githubusercontent.com/1518780/117495102-70c33900-af32-11eb-9e04-be54ca374032.gif)\r\n\r\n```js\r\n// Menu: Open a GitHub Repo\r\n// Description: Launch a GitHub repo in your browser\r\n// Author: Mandi Wise\r\n// Twitter: @mandiwise\r\n\r\n// Learn how to create a personal access token for GitHub here:\r\n// https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\r\n\r\nlet { Octokit } = await npm(\"octokit\");\r\n\r\nconst GH_PERSONAL_ACCESS_TOKEN = await env(\"GH_PERSONAL_ACCESS_TOKEN\");\r\nconst octokit = new Octokit({ auth: GH_PERSONAL_ACCESS_TOKEN });\r\n\r\nconst ORGS_PER_PAGE = 20;\r\nconst REPOS_PER_PAGE = 100;\r\n\r\n// GraphQL operations\r\n\r\nconst GetAccounts = `query GetAccounts($first: Int) { \r\n  viewer { \r\n    organizations(first: $first) {\r\n      edges {\r\n        node {\r\n          login\r\n          name\r\n          url\r\n        }\r\n      }\r\n    }\r\n    login\r\n    name\r\n    url\r\n  }\r\n}`;\r\n\r\nconst ReposPage = `fragment ReposPage on RepositoryConnection {\r\n  edges {\r\n    node {\r\n      name\r\n      description\r\n      url\r\n    }\r\n  }\r\n  pageInfo {\r\n    endCursor\r\n    hasNextPage\r\n  }\r\n}`;\r\n\r\nconst GetOrgRepos = `query GetOrgRepos($first: Int, $after: String, $login: String!) {\r\n  viewer { \r\n    organization(login: $login) {\r\n      repositories(\r\n        first: $first\r\n        after: $after\r\n        orderBy: { field: UPDATED_AT, direction: DESC }\r\n      ) {\r\n        ...ReposPage\r\n      }\r\n    }\r\n  }\r\n}\r\n${ReposPage}\r\n`;\r\n\r\nconst GetUserRepos = `query GetUserRepos($first: Int, $after: String) {\r\n  viewer { \r\n    repositories(\r\n      first: $first\r\n      after: $after\r\n      orderBy: {field: UPDATED_AT, direction: DESC}\r\n      affiliations: OWNER\r\n    ) {\r\n      ...ReposPage\r\n    }\r\n  }\r\n}\r\n${ReposPage}\r\n`;\r\n\r\n// Get user and their organizations in a list\r\n\r\nlet dots = 0;\r\nconst accountsPlaceholderIntervalId = setInterval(() => {\r\n  setPlaceholder(`Loading GitHub accounts`.padEnd(++dots, \".\"));\r\n}, 100);\r\n\r\nconst { viewer } = await octokit.graphql(GetAccounts, { first: ORGS_PER_PAGE });\r\n\r\nif (!viewer) {\r\n  exit(1);\r\n}\r\n\r\nconst { login, name, url, organizations } = viewer;\r\nconst accounts = [\r\n  { name, value: login, description: url, type: \"user\" },\r\n  ...organizations.edges.map(({ node: { login, name, url } }) => ({\r\n    name,\r\n    value: login,\r\n    description: url,\r\n    type: \"org\"\r\n  }))\r\n].sort((a, b) => (a.name > b.name ? 1 : -1));\r\n\r\nclearInterval(accountsPlaceholderIntervalId);\r\ndots = 0;\r\n\r\nconst accountChoice = await arg(\"Which account?\", accounts);\r\nconst { type: accountType } = accounts.find(\r\n  account => accountChoice === account.value\r\n);\r\n\r\n// Get repo list for the user or organization\r\n\r\nlet repositoriesAndLoadMore = [];\r\n\r\nasync function fetchRepositories(variables) {\r\n  const reposPlaceholderIntervalId = setInterval(() => {\r\n    setPlaceholder(`Loading repositories`.padEnd(++dots, \".\"));\r\n  }, 100);\r\n\r\n  let edges, endCursor, hasNextPage;\r\n  const oldLoadMore = repositoriesAndLoadMore.find(({ value }) =>\r\n    value.startsWith(\"load-more-after-\")\r\n  );\r\n\r\n  if (oldLoadMore) {\r\n    repositoriesAndLoadMore.pop();\r\n  }\r\n\r\n  if (accountType === \"org\") {\r\n    ({\r\n      viewer: {\r\n        organization: {\r\n          repositories: {\r\n            edges,\r\n            pageInfo: { endCursor, hasNextPage }\r\n          }\r\n        }\r\n      }\r\n    } = await octokit.graphql(GetOrgRepos, {\r\n      login: accountChoice,\r\n      ...variables\r\n    }));\r\n  } else {\r\n    ({\r\n      viewer: {\r\n        repositories: {\r\n          edges,\r\n          pageInfo: { endCursor, hasNextPage }\r\n        }\r\n      }\r\n    } = await octokit.graphql(GetUserRepos, variables));\r\n  }\r\n\r\n  repositoriesAndLoadMore = [\r\n    ...repositoriesAndLoadMore,\r\n    ...edges.map(({ node: { description, name, url } }) => ({\r\n      name,\r\n      description,\r\n      value: url\r\n    }))\r\n  ];\r\n\r\n  if (hasNextPage) {\r\n    repositoriesAndLoadMore.push({\r\n      name: \"Load more...\",\r\n      value: `load-more-after-${endCursor}`\r\n    });\r\n  }\r\n\r\n  clearInterval(reposPlaceholderIntervalId);\r\n  dots = 0;\r\n\r\n  if (!repositoriesAndLoadMore.length) {\r\n    exit(1);\r\n  }\r\n\r\n  let repoChoice = await arg(\"Which project?\", repositoriesAndLoadMore);\r\n\r\n  if (repoChoice.startsWith(\"load-more-after-\")) {\r\n    await fetchRepositories({\r\n      first: REPOS_PER_PAGE,\r\n      after: repoChoice.split(\"-\").pop()\r\n    });\r\n  } else {\r\n    exec(`open ${repoChoice}`);\r\n  }\r\n}\r\n\r\nawait fetchRepositories({ first: REPOS_PER_PAGE });\r\n```",
		"command": "open-a-github-repo-including-org-and-private-repos-as-well-as-pagination",
		"url": "https://github.com/johnlindquist/kit/discussions/252",
		"extension": ".md"
	},
	{
		"menu": "Snippets",
		"description": "Snippets collection",
		"author": "Jakub Olek",
		"twitter": "@JakubOlek",
		"shortcut": "opt -",
		"title": "Snippets",
		"user": "hakubo",
		"content": "Small snippets manager with builtin support for variables.\r\nVariables are defined as an array of function so they can be anything, arg, getSelectedText etc.\r\nSnippet can also be a simple string if it has no variables\r\n\r\n[Install Snippets](https://scriptkit.com/api/new?name=snippets&url=https://gist.githubusercontent.com/hakubo/3ce0072320188e189025548bdb460b5e/raw/d3aff955e0442c8ed20d1ca7a3c03ac9f945eae2/snippets.js)\r\n\r\n```js\r\n// Menu: Snippets\r\n// Description: Snippets collection\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt -\r\n\r\nconst { setSelectedText } = await kit(\"text\");\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nconst snippetMap = {\r\n  useState: {\r\n    args: [() => arg(\"variable name\"), () => arg(\"variable value\")],\r\n    template: (name, value) =>\r\n      `const [${name}, set${capitalizeFirstLetter(name)}] = useState(${value})`,\r\n  },\r\n  name: \"Jakub Olek\",\r\n  date: new Date().toLocaleDateString(\"en-GB\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  }),\r\n  test: {\r\n    args: [() => arg(\"should\")],\r\n    template: (testName) => `test(\"should ${testName}\", function() {\r\n\r\n  })`,\r\n  },\r\n  component: {\r\n    args: [() => arg(\"component name\")],\r\n    template: (componentName) => `function ${capitalizeFirstLetter(\r\n      componentName\r\n    )}() {\r\n      return\r\n    }`,\r\n  },\r\n};\r\n\r\nconst snippetName = await arg(\"Snippet\", Object.keys(snippetMap));\r\n\r\nlet result = snippetMap[snippetName];\r\nconst { args, template } = result;\r\n\r\nif (template) {\r\n  const variables = [];\r\n\r\n  if (args) {\r\n    for (let i = 0; i < args.length; i++) {\r\n      const variable = args[i];\r\n\r\n      if (typeof variable !== \"string\") {\r\n        variables.push(await variable());\r\n      }\r\n    }\r\n  }\r\n\r\n  setSelectedText(template(...variables));\r\n} else {\r\n  setSelectedText(result);\r\n}\r\n\r\n```",
		"command": "snippets",
		"url": "https://github.com/johnlindquist/kit/discussions/249",
		"extension": ".md"
	},
	{
		"shortcut": "command shift -",
		"menu": "Set GitHub Status",
		"description": "Sets the status text on your GitHub Profile",
		"title": "Set GitHub profile status",
		"user": "gr2m",
		"content": "[Install set-github-status](https://scriptkit.com/api/new?name=set-github-status&url=https://gist.githubusercontent.com/gr2m/b336c3c76de58a7b65299b9e224564c5/raw/187c618b70b943b117e452bd63799a2be7785b95/set-github-status.js)\r\n\r\n```js\r\n//Shortcut: command shift -\r\n// Menu: Set GitHub Status\r\n// Description: Sets the status text on your GitHub Profile\r\n\r\nconst message = await arg(\"What would you like to say?\");\r\nconst token = await env(\"GITHUB_STATUS_TOKEN\", {\r\n  secret: true,\r\n  ignoreBlur: true,\r\n  hint: md(\r\n    `Create a token [on GitHub](https://github.com/settings/tokens/new?scopes=user&description=kit%20script)`\r\n  ),\r\n});\r\n\r\nconst response = await post(\r\n  \"https://api.github.com/graphql\",\r\n  {\r\n    query: `mutation ($text:String) {\r\n      changeUserStatus(input:{message:$text}) {\r\n        status {\r\n          message\r\n        }\r\n      }\r\n    }`,\r\n    variables: {\r\n      text: message,\r\n    },\r\n  },\r\n  {\r\n    headers: {\r\n      authorization: `token ${token}`,\r\n    },\r\n  }\r\n);\r\n\r\n```\r\n",
		"command": "set-github-profile-status",
		"url": "https://github.com/johnlindquist/kit/discussions/246",
		"extension": ".md"
	},
	{
		"lib/image-grid.js\r\n\r\nconst DEFAULT_LIMIT = 10000; // 1000; // 100;\r\nconst DEBUG = { ENABLED": "false };",
		"menu": "View Download",
		"description": "View Download Attachments",
		"author": "Zach Zeleznick",
		"twitter": "@zzxiv",
		"shortcut": "cmd shift 0",
		"nOTE": "Need to grant Kit app full disk access in Security and Privacy or find will return 0 results",
		"title": "Low-Fi Finder Image Grid View 🖼️",
		"user": "zzeleznick",
		"content": "## Low-Fi Finder Image Grid View 🖼️\r\n\r\nWhile list views are nice, sometimes you just want a grid 😄. Here, I played around with displaying images in a grid layout.\r\n\r\nI'd even say that grids feel like a natural extension to the layouts in #231 🤓 \r\n\r\nI started this project a little while back, and am currently using the html panel as opposed to `choice.html`. To support custom actions on selection (e.g. copy image filepath to clipboard on choice selection) within a grid context, I think that there is at least one missing piece.\r\n\r\n> Enable setting `className` / styles of choice button parent container\r\n\r\nIn my example, I'm doing a self-described css injection to add new styles (e.g. `.grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}`), but the styles probably could be done in-line.\r\n\r\n## Demo\r\n\r\n![image_grid](https://user-images.githubusercontent.com/5779832/116947457-acf45200-ac31-11eb-8982-f1445d1aaf52.gif)\r\n\r\n## Code\r\n\r\n<details>\r\n<summary>\r\n<code>lib/image-grid.js</code>\r\n</summary>\r\n\r\n```js\r\n// lib/image-grid.js\r\n\r\nconst DEFAULT_LIMIT = 10000; // 1000; // 100;\r\nconst DEBUG = { ENABLED: false };\r\n\r\nconst debug = (...args) => DEBUG.ENABLED && console.log(...args)\r\nconst info = (...args) => console.log(...args)\r\n\r\nexport const enableDebugMode = () => { DEBUG.ENABLED = true }\r\n\r\nconst getImages = (filepath, maxdepth) => {\r\n  // NOTE: options to use \"-ctime -90d\" / \"-atime -90d\" to filter more results\r\n  const findCommand = `find -E ${filepath} -iregex '.*\\.(jpg|jpeg|png|gif)' -maxdepth ${maxdepth}`\r\n  const findSortedCommand = `${findCommand} -print0 | xargs -0 ls -at`\r\n  debug(\"findSortedCommand\", findSortedCommand)\r\n  return exec(findSortedCommand, { silent: true }).toString().split(\"\\n\").filter(v => v)\r\n}\r\n\r\nconst buildImageModal = (payload) => {\r\n  let {file} = payload;\r\n  const img = `<img src=\"${file}\">`\r\n  return `<div class=\"imgContainer\">${img}</div>`\r\n}\r\n\r\nconst injectCss = (html) => {\r\n  // our tailwind build doesn't include grid css\r\n  // we add some custom styles as well\r\n  const css = `\r\n    /* Mimic tailwind grid css */\r\n    .grid {display:grid}\r\n    .grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}\r\n    .grid-cols-4 {grid-template-columns: repeat(4, minmax(0, 1fr))}\r\n    .grid-cols-5 {grid-template-columns: repeat(5, minmax(0, 1fr))}\r\n    /* custom css to center images in grid */\r\n    .grid div {place-items: center; padding: clamp(1px, 4%, 25px);}\r\n    .imgContainer {display: flex;}\r\n  `\r\n  const style = `<style type=\"text/css\">${css}</style>`\r\n  return `${style}${html}`\r\n}\r\n\r\n\r\nconst buildPage = (imageObjects, limit = DEFAULT_LIMIT) => {\r\n  const subset = imageObjects\r\n      .slice(0, limit)\r\n      .map(file => { return { file } })\r\n\r\n  const columns = subset.length > 32 ? (subset.length > 64 ? 5 : 4) : 3\r\n  const modals = subset.map(buildImageModal).join('\\n')\r\n\r\n  const html = `<div class=\"grid grid-cols-${columns} pt-1 m-1\">${modals}</div>`\r\n  const page = injectCss(html)\r\n  debug(page);\r\n  info('buildPage: Done')\r\n  return page\r\n}\r\n\r\nexport const buildImagesPanel = async (filepath, maxdepth, limit) => {\r\n  const images = getImages(filepath, maxdepth);\r\n  info(`Found ${images.length} images`);\r\n  await arg({\r\n    input: \" \",\r\n  }, buildPage(images, limit));\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-desktop.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Desktop\r\n// Description: View Desktop Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift d\r\n\r\nconst {buildImagesPanel} = await lib(\"image-grid\")\r\n\r\nconst filepath = \"~/Desktop\"\r\nconst depth = \"3\"\r\n\r\nawait buildImagesPanel(filepath, depth)\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-attachments.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Attachment\r\n// Description: View iMessage Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift l\r\n\r\nconst {buildImagesPanel} = await lib(\"image-grid\")\r\n\r\n// NOTE: Need to grant Kit app full disk access in Security and Privacy or find will return 0 results \r\nconst filepath = \"~/Library/Messages/Attachments\"\r\nconst depth = \"4\"\r\n\r\nawait buildImagesPanel(filepath, depth)\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-downloads.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Download\r\n// Description: View Download Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift 0\r\n\r\nconst {buildImagesPanel, enableDebugMode} = await lib(\"image-grid\")\r\n\r\nconst filepath = \"~/Downloads\"\r\nconst depth = \"2\"\r\nconst limit = 42\r\n\r\nenableDebugMode()\r\n\r\nawait buildImagesPanel(filepath, depth, limit)\r\n```\r\n</details>\r\n\r\n\r\n### Reference\r\n\r\nHere are a few screenshots of the native Finder window on macOS 10.14 that I intended to recreate in low-fidelity.\r\n<table>\r\n<tr>\r\n<td><img width=\"863\" alt=\"Native View\" src=\"https://user-images.githubusercontent.com/5779832/116947788-7a972480-ac32-11eb-9e22-10dfb1fa3dff.png\"></td>\r\n<td><img width=\"490\" alt=\"Sorting Options\" src=\"https://user-images.githubusercontent.com/5779832/116947778-779c3400-ac32-11eb-9378-4bb8c97012d6.png\"></td>\r\n</tr>\r\n<tr>\r\n<td>Example search for `png` files on my Desktop</td>\r\n<td>Sorting options</td>\r\n</tr>\r\n</table>\r\n\r\n\r\n\r\n\r\n",
		"command": "low-fi-finder-image-grid-view",
		"url": "https://github.com/johnlindquist/kit/discussions/237",
		"extension": ".md"
	},
	{
		"title": "Drag and Drop Files for Data Entry and Syncing",
		"user": "zacjones93",
		"content": "My fiancé does product shots for a local plant shop in the area. She will have dozens of plants to shoot that result in hundreds of photos.\r\n\r\nPart of the job is organizing and uploading them to google photos. This means she has been renaming hundreds of files individually. 😭  \r\n\r\nThe system they have down is: `{PLANT_NAME}{DETAIL?}{POT_SIZE}_{number}`. So for any given plant it will have several 'product' shots and several 'detail' shots taken for it.\r\n\r\nA simple script but going to save hours of data entry!\r\n\r\n\r\nhttps://user-images.githubusercontent.com/6188161/116919398-377f8600-ac1f-11eb-8f1c-94dc083501e8.mp4\r\n\r\n\r\n[Download Link](https://scriptkit.com/api/new?name=upload-photos&url=https://gist.githubusercontent.com/zacjones93/d9b153917062eb7da1a520deef4b54e4/raw/e87e3e4f98cc0b7b395a7f0b3961e05dc559cddc/upload-photos.js)\r\n\r\n<details>\r\n<summary>code</summary>\r\n<br>\r\n\r\n```js\r\nconst fs = await npm(\"fs\"); \r\nconst plantName = await arg(\"Enter a plant name:\");\r\nconst potSize = await arg(\"Enter pot size: \");\r\nconst shotType = await arg(\"Is this product or detail?\", [\"product\", \"detail\"]);\r\n\r\nconst photos = await drop(\"Drop your images\");\r\nconsole.log(photos);\r\n\r\n\r\nlet renamePhotoToDirectory = (path, plantName) => {\r\n // going to be a env variable\r\n  let targetDirectory = \"/Users/zac/Desktop/photops/photos\";\r\n\r\n  let photoPath = `${targetDirectory}/${plantName}`;\r\n\r\n  fs.rename(path, photoPath, (err) => {\r\n    if (err) return console.log(\"there was an error: \", err);\r\n\r\n    console.log(\"selectedFiles renamed\");\r\n  });\r\n};\r\n\r\nphotos.map((plant, index) => {\r\n  if (shotType === \"detail\") {\r\n    renamePhotoToDirectory(\r\n      plant.path,\r\n      `${plantName}Detail${potSize}_${index + 1}.png`\r\n    );\r\n  } else {\r\n    renamePhotoToDirectory(plant.path, `${plantName}${potSize}_${index + 1}.png`);\r\n  }\r\n});\r\n```\r\n\r\n</details>",
		"command": "drag-and-drop-files-for-data-entry-and-syncing",
		"url": "https://github.com/johnlindquist/kit/discussions/236",
		"extension": ".md"
	},
	{
		"shortcut": "opt t",
		"title": "Tweet Script",
		"user": "chrislaughlin",
		"content": "Send Tweet from Kit, provides a way to send a tweet directly from Kit. When the script is run it will ask you to enter a tweet then it will run sentiment analysis on the tweet. If the tweet is positive it will be posted, if it's negative you will be prompted to confirm the send. \r\n\r\n```javascript \r\n// Shortcut: opt t\r\nlet Twitter = await npm('twitter-lite');\r\nlet Sent = await npm('sentiment');\r\n\r\nlet envOptions = {\r\n    hint: md(\r\n      `You need to [create an app](https://developer.twitter.com/en/apps) to get these keys/tokens`,\r\n    ),\r\n    ignoreBlur: true,\r\n    secret: true,\r\n  }\r\n  \r\n\r\nlet client = new Twitter({\r\n    consumer_key: await env('TWITTER_CONSUMER_KEY', envOptions),\r\n    consumer_secret: await env('TWITTER_CONSUMER_SECRET', envOptions),\r\n    access_token_key: await env('TWITTER_ACCESS_TOKEN_KEY', envOptions),\r\n    access_token_secret: await env('TWITTER_ACCESS_TOKEN_SECRET', envOptions),\r\n});\r\n\r\nconst sentiment = new Sent();\r\n\r\nlet tweet = await arg(\"what's on your mind?\");\r\n\r\nconst { score } = sentiment.analyze(tweet);\r\n\r\nconst isNeg = score < 0;\r\n\r\nlet shouldPost = await arg(\"Thats a little 🧂y\", [\r\n    { name: \"yeah I know sean anyway\", value: true },\r\n    {name: \"oh yeah don't post that\", value: false },\r\n])\r\n\r\nif (shouldPost) {\r\n    await client.post('statuses/update', {\r\n        status: `Random thought: ${tweet}`,\r\n    }).catch(error => console.log(error));\r\n}\r\n```",
		"command": "tweet-script",
		"url": "https://github.com/johnlindquist/kit/discussions/235",
		"extension": ".md"
	},
	{
		"menu": "My IP",
		"description": "Displays and copies IP to clipboard",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"title": "My IP",
		"user": "johnlindquist",
		"content": "\r\n[Install my-ip](https://scriptkit.com/api/new?name=my-ip&url=https://gist.githubusercontent.com/johnlindquist/47637881382e39f2bf738354f57ac7d7/raw/e9d1ff50a9d5bc03ca4c1af880a6c50f7a6c1ce6/my-ip.js)\r\n\r\n```js\r\n// Menu: My IP\r\n// Description: Displays and copies IP to clipboard\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet network = await npm(\"network\")\r\nlet { promisify } = await npm(\"es6-promisify\")\r\n\r\nlet ip = await promisify(network.get_public_ip)()\r\n\r\ncopy(ip)\r\nawait arg(ip)\r\n\r\n```\r\n",
		"command": "my-ip",
		"url": "https://github.com/johnlindquist/kit/discussions/234",
		"extension": ".md"
	},
	{
		"menu": "Google Home Speak Text",
		"description": "Tell Google Home to speak a message",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"find your device IP on your router or\r\n// Home App -> Device -> Settings Gear -> Device Information\r\nlet home = new GoogleHome(\"10.0.0.3\")\r\n\r\nhome.speak(await arg(\"Speak": "\"))",
		"title": "Google Home Speak Text",
		"user": "johnlindquist",
		"content": "\r\n[Install google-home-speak](https://scriptkit.com/api/new?name=google-home-speak&url=https://gist.githubusercontent.com/johnlindquist/995c76d4d3999568241ab0eb22760c98/raw/f11eeddd2ae73522543ab596fd775992dbe9600a/google-home-speak.js)\r\n\r\n```js\r\n// Menu: Google Home Speak Text\r\n// Description: Tell Google Home to speak a message\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet GoogleHome = await npm(\"google-home-push\")\r\n// Find your device IP on your router or\r\n// Home App -> Device -> Settings Gear -> Device Information\r\nlet home = new GoogleHome(\"10.0.0.3\")\r\n\r\nhome.speak(await arg(\"Speak:\"))\r\n\r\n```\r\n",
		"command": "google-home-speak-text",
		"url": "https://github.com/johnlindquist/kit/discussions/233",
		"extension": ".md"
	},
	{
		"menu": "AWS Select Profile",
		"description": "Select AWS profile from you AWS config",
		"author": "Daniel Schroeder",
		"twitter": "@udondan",
		"title": "AWS Select profile",
		"user": "udondan",
		"content": "This is a helper to switch AWS profiles, which then can be used by other scripts.\r\n\r\nThe script parses the `~/.aws/config` file and let's the user select one of the configured profiles. The current active profile is marked with a star.\r\n\r\n![Preview](https://user-images.githubusercontent.com/6443408/116851958-bbbc1400-abf3-11eb-9149-361c4e3a5553.png)\r\n\r\nThe selected value then will be stored as `AWS_PROFILE` in the env file.\r\n\r\nTo use the profile name in another script, you can get the value via:\r\n\r\n```js\r\nconst region = await env('AWS_PROFILE');\r\n```\r\n\r\n```js\r\n// Menu: AWS Select Profile\r\n// Description: Select AWS profile from you AWS config\r\n// Author: Daniel Schroeder\r\n// Twitter: @udondan\r\nimport { readFileSync } from 'fs';\r\n\r\nconst ini = await npm('ini');\r\nconst awsConf = `${process.env.HOME}/.aws/config`;\r\n\r\nconst config = ini.parse(readFileSync(awsConf, 'utf-8'));\r\n\r\nconst currentMarker = ' ★';\r\nconst currentProfile = env['AWS_PROFILE'];\r\n\r\nconst sections = Object.keys(config).reduce(function (filtered, section) {\r\n  if (section.startsWith('profile ')) {\r\n    let profileName = section.replace('profile ', '');\r\n    if (profileName == currentProfile) {\r\n      profileName += currentMarker;\r\n    }\r\n    filtered.push(profileName);\r\n  }\r\n  return filtered;\r\n}, []);\r\n\r\nconst profile = await arg(\r\n  {\r\n    placeholder: 'Select profile',\r\n    hint: `parsed from ${awsConf}`,\r\n  },\r\n  sections.sort()\r\n);\r\nawait cli('set-env-var', 'AWS_PROFILE', profile.replace(currentMarker, ''));\r\n```",
		"command": "aws-select-profile",
		"url": "https://github.com/johnlindquist/kit/discussions/232",
		"extension": ".md"
	},
	{
		"menu": "GitHub Trending",
		"description": "Pulls down trending repos from github and save to database",
		"schedule": "0 * * * *",
		"exclude": "true",
		"title": "View GitHub Trending Repos",
		"user": "lannonbr",
		"content": "This was a fun one to build. So GitHub does not have an API endpoint for their [trending](https://github.com/trending) page. So to work around this I used playwright to scrape the pages for various languages. Then I'd create a tab for a variety of language. What I ran into though was given the data likely doesn't change too often, going and scraping on every tab change was slow. To resolve this, I wrote a second script that runs on an hourly cron and then saves the data to a `lowdb` database with the preloaded `db` function. This now makes the main script run instantly as the entries are cached on my system.\r\n\r\n![Screen Shot 2021-05-02 at 10 25 49 AM](https://user-images.githubusercontent.com/3685876/116816783-61f31580-ab31-11eb-99ff-71b21070ef40.png)\r\n\r\n## Scripts\r\n\r\nMain Script:\r\n\r\n```js\r\n// Menu: GitHub Trending\r\n// Description: Show today's Trending GitHub Repos for various languages\r\n\r\nconst trendingDB = db(\"github-trending\");\r\n\r\nconst langs = [\"rust\", \"javascript\", \"typescript\", \"go\", \"python\", \"ruby\"];\r\nfor (const lang of langs) {\r\n  onTab(lang, async () => {\r\n    const repo = await arg(\"Select a repo to open it\", trendingDB.get(lang));\r\n    exec(`open ${repo}`);\r\n  });\r\n}\r\n```\r\n\r\nBackground puller script:\r\n\r\n```js\r\n// Description: Pulls down trending repos from github and save to database\r\n// Schedule: 0 * * * *\r\n// Exclude: true\r\n\r\n/** @type typeof import('playwright') */\r\nconst playwright = await npm(\"playwright\");\r\n\r\nlet dbDefaults = {};\r\n\r\nconst langs = [\"rust\", \"javascript\", \"typescript\", \"go\", \"python\", \"ruby\"];\r\n\r\nfor (const lang of langs) {\r\n  dbDefaults[lang] = [];\r\n}\r\n\r\nconst trendingDB = db(\"github-trending\", dbDefaults);\r\n\r\nconst browser = await playwright.chromium.launch();\r\n\r\nfor (const lang of langs) {\r\n  const context = await browser.newContext();\r\n\r\n  const page = await context.newPage();\r\n\r\n  await page.goto(`https://github.com/trending/${lang}`);\r\n\r\n  const repos = await page.evaluate(() => {\r\n    const repos = document.querySelectorAll(\".Box-row\");\r\n\r\n    const results = [];\r\n\r\n    for (let repo of repos) {\r\n      const repoName = repo.querySelector(\"h1 a\").getAttribute(\"href\").slice(1);\r\n      let description = repo.querySelector(\"p\")?.textContent.trim();\r\n      const starCount = repo\r\n        .querySelector(\"div span.d-inline-block.float-sm-right\")\r\n        ?.textContent.trim();\r\n\r\n      if (!description) {\r\n        description = starCount;\r\n      } else {\r\n        description = `${starCount} | ${description}`;\r\n      }\r\n\r\n      results.push({\r\n        name: repoName,\r\n        value: `https://github.com/${repoName}`,\r\n        description,\r\n      });\r\n    }\r\n\r\n    return results;\r\n  });\r\n\r\n  trendingDB.set(lang, repos).write();\r\n}\r\nawait browser.close();\r\n```",
		"command": "view-github-trending-repos",
		"url": "https://github.com/johnlindquist/kit/discussions/228",
		"extension": ".md"
	},
	{
		"title": "First one, simple text / string transformations",
		"user": "letanure",
		"content": "Just created a simple one, no deps, for simple text transformations\r\n\r\n- Remove duplicated spaces\r\n- Uppercase [AAA BBB]\r\n- Lowercase [aaa bbb]\r\n- Capitalize words [Aaa Bbb]\r\n- Snake case [aaa_bbb]\r\n- kebab-case [aaa-bbb]\r\n- camelCase [aaaBbb]\r\n- PascalCase [AaaBbb]\r\n- Remove numbers [aa1aBb2b => aaaBbb]\r\n- Keep only numbers [aa1aBb2b => 12]\r\n- Remove HTML tags\r\n- Remove HTML attributes\r\n- Remove accents & diacritics [âêì => aei]\r\n- URL slugfy\r\n\r\nhttps://codesandbox.io/s/funny-sun-zt1ur?file=/src/index.js\r\n\r\nhttps://gist.github.com/letanure/ee7db17b3b381966f61aab9812862870\r\n\r\n\r\n\r\nhttps://user-images.githubusercontent.com/81244/116789299-7cd07600-aaae-11eb-9fa2-3bbfa58ff053.mp4\r\n\r\n\r\n",
		"command": "first-one-simple-text-string-transformations",
		"url": "https://github.com/johnlindquist/kit/discussions/227",
		"extension": ".md"
	},
	{
		"menu": "Available Node versions",
		"description": "View all supported versions of NodeJS",
		"author": "Benjamin Lannon",
		"twitter": "@lannonbr",
		"title": "View supported versions of node",
		"user": "lannonbr",
		"content": "The NodeJS core team provides a JSON file in [nodejs/release](https://github.com/nodejs/Release/): https://github.com/nodejs/Release/blob/main/schedule.json which details all of the major versions of Node, their initial release date, EOL, maintenance mode date, as well as LTS date.\r\n\r\nI wanted to do a test run with this document of parsing it and getting some initial results. As Node 10 went EOL at the end of today, I thought it could be neat to use this to track node versions in projects you work on and if you're using a node version that is no longer supported, it could inform you of such and tell you to upgrade to the latest LTS. As a test run, I pull down the JSON file and parse it out to list the versions of Node which are still being supported.\r\n\r\n![Screen Shot 2021-04-30 at 10 33 07 PM](https://user-images.githubusercontent.com/3685876/116768468-c6648680-aa04-11eb-8eb2-02ed6fef0cd0.png)\r\n\r\n(Also as a fun aside, I am tending more and more of using `arg()` to display a list of content even if I don't then select one & go further with it. I enjoy the way it presents the data & it is filterable by default. I know of the `img` and `html` fields are around but I have yet to find neat ways of using them.)\r\n\r\n## Code:\r\n\r\n```js\r\n// Menu: Available Node versions\r\n// Description: View all supported versions of NodeJS\r\n// Author: Benjamin Lannon\r\n// Twitter: @lannonbr\r\n\r\nlet resp = await get(\r\n  \"https://raw.githubusercontent.com/nodejs/Release/main/schedule.json\"\r\n);\r\nconst data = Object.entries(resp.data);\r\n\r\n/** @type typeof import('dayjs') */\r\nlet dayjs = await npm(\"dayjs\");\r\n\r\nlet opts = [];\r\n\r\nfor (let [version, info] of data) {\r\n  let isSupported =\r\n    dayjs(info.start).diff(dayjs(), \"days\") < 0 &&\r\n    dayjs(info.end).diff(dayjs(), \"days\") > 0;\r\n\r\n  if (isSupported) {\r\n    opts.push({\r\n      name: `Node ${version}`,\r\n      description: `Maintainence ends on ${dayjs(info.end).format(\r\n        \"MMMM DD, YYYY\"\r\n      )}`,\r\n      endDate: info.end,\r\n    });\r\n  }\r\n}\r\n\r\nopts = opts.sort((a, b) => {\r\n  return dayjs(a.endDate).unix() - dayjs(b.endDate).unix();\r\n});\r\n\r\nawait arg(\"These versions of NodeJS are currently maintained\", opts);\r\n```\r\n",
		"command": "view-supported-versions-of-node",
		"url": "https://github.com/johnlindquist/kit/discussions/223",
		"extension": ".md"
	},
	{
		"menu": "project-scaffolder 👷‍♂️",
		"description": "Step by step project scaffolding with Vite",
		"title": "Vite Scaffolder",
		"user": "austincrim",
		"content": "Put together a quick script to scaffold Vite projects using a variety of my common choices. I've got plans to expand beyond Vite to include Next.js, SvelteKit, etc. as well as setting up individual libraries like Tailwind.\r\n\r\n```javascript\r\n// Menu: project-scaffolder 👷‍♂️\r\n// Description: Step by step project scaffolding with Vite\r\n\r\nconst projectsDirectory = '/Users/austin/repos';\r\nconst folder = await arg({\r\n    placeholder: 'Enter project name 📁',\r\n    validate: (choice) => (choice ? true : 'Please enter a folder name.')\r\n});\r\nconst framework = await arg('Pick a framework 👨‍💻', [\r\n    'react',\r\n    'svelte',\r\n    'preact',\r\n    'vanilla'\r\n]);\r\nconst useTypescript =\r\n    framework === 'vanilla'\r\n        ? 'false'\r\n        : await arg('Pick a flavor 🍦', [\r\n              { name: 'TypeScript', value: true },\r\n              { name: 'JavaScript', value: false }\r\n          ]);\r\nconst packageManager = await arg('Package Manager?', ['npm', 'yarn', 'pnpm']);\r\nsetPlaceholder('building...🔨');\r\nconst command = `${packageManager} ${\r\n    packageManager === 'yarn' ? 'create' : 'init'\r\n} @vitejs/app ${folder} -- --template ${framework}${useTypescript ? '-ts' : ''}`;\r\n\r\ncd(projectsDirectory);\r\nexec(command);\r\nedit(`${projectsDirectory}/${folder}`);\r\n```",
		"command": "vite-scaffolder",
		"url": "https://github.com/johnlindquist/kit/discussions/222",
		"extension": ".md"
	},
	{
		"menu": "Copy GitHub user name",
		"description": "Copies a GitHub user's first name, fallback to @login",
		"author": "Gregor Martynus",
		"twitter": "@gr2m",
		"set GitHub Token unless it's already set\r\nlet octokit;\r\nif (env.GITHUB_TOKEN_NO_SCOPES) {\r\n  octokit = new Octokit({\r\n    auth": "env.GITHUB_TOKEN_NO_SCOPES,",
		"title": "Copy GitHub name",
		"user": "gr2m",
		"content": "[install](https://gist.githubusercontent.com/gr2m/89b659fc885062a5d22221d62fe9655f/raw/3cb845257ed17a03aae8364ce7d17a43833e21d9/copy-github-name.js)\r\n\r\n```js\r\n// Menu: Copy GitHub user name\r\n// Description: Copies a GitHub user's first name, fallback to @login\r\n// Author: Gregor Martynus\r\n// Twitter: @gr2m\r\n\r\nconst { Octokit } = await npm(\"octokit\");\r\n\r\nconst { createOAuthDeviceAuth } = await npm(\"@octokit/auth-oauth-device\");\r\n\r\n// set GitHub Token unless it's already set\r\nlet octokit;\r\nif (env.GITHUB_TOKEN_NO_SCOPES) {\r\n  octokit = new Octokit({\r\n    auth: env.GITHUB_TOKEN_NO_SCOPES,\r\n  });\r\n} else {\r\n  const auth = createOAuthDeviceAuth({\r\n    clientType: \"oauth-app\",\r\n    clientId: \"34e4eac44e03b0daa82b\",\r\n    onVerification(verification) {\r\n      copy(verification.user_code);\r\n      arg({\r\n        placeholder: `Press <enter> after granting permissions`,\r\n        ignoreBlur: true,\r\n        hint: `\r\n          Open <a href=\"${verification.verification_uri}\">${verification.verification_uri}</a>, paste code from clipboard\r\n        `,\r\n      });\r\n    },\r\n  });\r\n\r\n  const { token } = await auth({\r\n    type: \"oauth\",\r\n  });\r\n\r\n  octokit = new Octokit({\r\n    auth: token,\r\n  });\r\n\r\n  await cli(\"set-env-var\", \"GITHUB_TOKEN_NO_SCOPES\", token);\r\n}\r\n\r\nconst { data: me } = await octokit.rest.users.getAuthenticated();\r\n\r\nconst username = await arg(\"Enter a GitHub username:\");\r\n\r\nlet { data: user } = await octokit.rest.users.getByUsername({ username });\r\n\r\nconst userFirstNameOrUsername = user.name.trim()\r\n  ? user.name.trim().split(/\\s+/)[0]\r\n  : `@${user.login}`;\r\n\r\ncopy(userFirstNameOrUsername);\r\nsetPlaceholder(`\"${userFirstNameOrUsername}\" copied to your clipboard`);\r\nsetIgnoreBlur(false);\r\nsetHint(`Press esc to close this prompt`);\r\n```\r\n\r\n---\r\n\r\nPS: I tried to publish via the built-in publish feature, but it doesn't work for me: https://github.com/johnlindquist/kit/issues/219. I created the install link above manually based on your link here: https://github.com/johnlindquist/kit/discussions/217",
		"command": "copy-github-name",
		"url": "https://github.com/johnlindquist/kit/discussions/221",
		"extension": ".md"
	},
	{
		"menu": "Open Graph Image Grabber",
		"description": "Attempts to scrape the Open Graph image from the focused chrome tab",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"📣 Note": "Playwright takes ~20 seconds or so to install...",
		"title": "Open Graph Image Grabber",
		"user": "johnlindquist",
		"content": "Here's a script I talked about on @bdougie 's stream today. Someone in chat asked me to share, so I dug it up:\r\n\r\n[Install open-graph-image-grabber](https://scriptkit.com/api/new?name=open-graph-image-grabber&url=https://gist.githubusercontent.com/johnlindquist/812bc470edcdb277fc532a3ae4d51fcc/raw/fb6b7638b99fc876b8105da216679ccc832267c6/open-graph-image-grabber.js)\r\n\r\n```js\r\n// Menu: Open Graph Image Grabber\r\n// Description: Attempts to scrape the Open Graph image from the focused chrome tab\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\n//📣 Note: Playwright takes ~20 seconds or so to install...\r\n\r\nlet { getActiveTab } = await kit(\"chrome\")\r\nlet { attribute } = await kit(\"playwright\")\r\nlet { copyPathAsPicture } = await kit(\"file\")\r\nlet download = await npm(\"image-downloader\")\r\nlet sharp = await npm(\"sharp\")\r\n\r\nlet tab = await getActiveTab()\r\nconsole.log({ tab })\r\nsetPlaceholder(`og:image of ${tab}`)\r\n\r\nlet url = \"\"\r\ntry {\r\n  url = await attribute(\r\n    tab,\r\n    'head meta[property=\"og:image\"]',\r\n    \"content\"\r\n  )\r\n} catch (error) {\r\n  setPlaceholder(\r\n    `og:image not found. Checking twitter:image`\r\n  )\r\n  try {\r\n    url = await attribute(\r\n      tab,\r\n      'head meta[name=\"twitter:image\"]',\r\n      \"content\"\r\n    )\r\n  } catch (error) {\r\n    console.log(error)\r\n    setPlaceholder(`Sorry, giving up`)\r\n    await wait(1000)\r\n    exit()\r\n  }\r\n}\r\n\r\nconsole.log({ url })\r\n\r\nsetPlaceholder(`Found ${url}`)\r\nconsole.log({ url })\r\n\r\nlet checkRedirects = await get(url)\r\nurl = checkRedirects.request.res.responseUrl\r\n\r\nconsole.log({ redirectedUrl: url })\r\n\r\nlet imageName = tab.split(\"/\").pop()\r\nif (!imageName)\r\n  imageName = tab.split(\"//\").pop().replace(\"/\", \"\")\r\nif (!imageName.endsWith(\".png\"))\r\n  imageName = `${imageName}.png`\r\n\r\nconsole.log({ imageName })\r\n\r\nlet dest = kenvPath(\"tmp\", imageName)\r\n\r\nlet { filename: image } = await download\r\n  .image({\r\n    url,\r\n    dest,\r\n  })\r\n  .catch(error => {\r\n    console.log(error)\r\n  })\r\n\r\nconsole.log({ image })\r\n\r\nlet width = parseInt(await arg(\"Enter width:\"), 10)\r\n\r\nsetPlaceholder(`Resizing to ${width}`)\r\nlet metadata = await sharp(image).metadata()\r\n\r\nlet newHeight = Math.floor(\r\n  metadata.height * (width / metadata.width)\r\n)\r\n\r\nlet lastDot = /.(?!.*\\.)/\r\nlet resizedImageName = image.replace(lastDot, `-${width}.`)\r\n\r\nawait sharp(image)\r\n  .resize(width, newHeight)\r\n  .toFile(resizedImageName)\r\n\r\nconsole.log({ resizedImageName })\r\n\r\nawait copyPathAsPicture(resizedImageName)\r\n\r\nsetPlaceholder(`Copied to clipboard`)\r\nawait wait(500)\r\n\r\n```\r\n",
		"command": "open-graph-image-grabber",
		"url": "https://github.com/johnlindquist/kit/discussions/217",
		"extension": ".md"
	},
	{
		"menu": "Decode JWT",
		"description": "Enter any string which contains valid jwt.",
		"author": "Ravi Sharma",
		"twitter": "@irvisharma",
		"title": "Decode JWT",
		"user": "rvisharma",
		"content": "\r\n[Gist](https://gist.githubusercontent.com/rvisharma/13e86edfdef3094924a702f64645ade6/raw/aac968af82b34eb9cc530f2e9c1a6416fa8d49d5/jwt-decode.js) | [Install Decode JWT](https://scriptkit.app/api/new?name=jwt-decode&url=https://gist.githubusercontent.com/rvisharma/13e86edfdef3094924a702f64645ade6/raw/aac968af82b34eb9cc530f2e9c1a6416fa8d49d5/jwt-decode.js)\r\n\r\njwt.io is too slow to load for me. This is instant!\r\n\r\n- Extracts out the token from the entered string and then decodes it.\r\n- Provides live hint of entered string if contains valid token or not.\r\n\r\nhttps://user-images.githubusercontent.com/5556114/116467402-4071ff80-a88d-11eb-86b4-ad58771d7bd6.mov\r\n\r\n```js\r\n// Menu: Decode JWT\r\n// Description: Enter any string which contains valid jwt.\r\n// Author: Ravi Sharma\r\n// Twitter: @irvisharma\r\n\r\n/** @type typeof import(\"jsonwebtoken\") */\r\nconst jwt = await npm('jsonwebtoken');\r\n\r\ntry {\r\n  const dirtyEncodedToken = await arg('Paste token here', generateLiveHint);\r\n  const decoded = decodeToken(dirtyEncodedToken)\r\n\r\n  if (decoded === null) {\r\n    throw 'cannot parse, invalid token'\r\n  }\r\n\r\n  showOutput(decoded);\r\n  console.log(decoded);\r\n\r\n} catch (e) {\r\n  showError(e)\r\n}\r\n\r\nfunction decodeToken(dirtyEncodedToken){\r\n  try{\r\n    const extractedToken = dirtyEncodedToken.match(/[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*/)[0]\r\n    return jwt.decode(extractedToken);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function generateLiveHint(userInput){\r\n  const tokenValidHint = decodeToken(userInput) !== null ? '✅ Found valid token' : `❌ Could not parse <br><br> ${userInput}`;\r\n  return md(`\r\n  _Press enter after entering to token show details_\r\n  <br/><br/>\r\n  ${userInput && tokenValidHint}\r\n  `)\r\n}\r\n\r\nfunction showOutput(value) {\r\n  return show(`\r\n<pre style=\"font-family: Menlo; background: darkslategray; color: navajowhite; font-size: 1.2rem; padding: 1.5em;\">\r\n${JSON.stringify(value, null, 2)}\r\n</pre>\r\n`);\r\n}\r\n\r\nfunction showError(e){\r\n  show(`\r\n<h1 style=\"background: darkslategray; color: white; font-family: Menlo;\">Could not decode, Did you entered valid token? <br/><br/> ${e}</h1>\r\n`);\r\n}\r\n\r\n```\r\n",
		"command": "decode-jwt",
		"url": "https://github.com/johnlindquist/kit/discussions/208",
		"extension": ".md"
	},
	{
		"menu": "Open Github Repo",
		"description": "Open the repo page in the browser",
		"title": "Open Github repository in browser",
		"user": "Alarid",
		"content": "I created a simple script to open one of my Github repositories in the browser. It starts by fetching the repositories, and ask which one to open. Obviously, you would need to change `Alarid` to your GitHub username if you would like to use this script 😊\r\n\r\n~~Also, if someone knows how to make a \"loading state\" to avoid having just an empty prompt while fetching, that would be awesome! It only takes a few seconds, but still...~~\r\n\r\nUPDATE: thanks @johnlindquist for the tip on the loading state, here is the updated version:\r\n\r\n```javascript\r\n// Menu: Open Github Repo\r\n// Description: Open the repo page in the browser\r\n\r\nconst USERNAME = \"Alarid\"\r\n\r\nlet dots = 0\r\nlet placeholderIntervalId = setInterval(() => {\r\n  setPlaceholder(`Loading ${USERNAME} github repos`.padEnd(++dots, \".\"))\r\n}, 100)\r\n\r\nconst response = await get(`https://api.github.com/users/${USERNAME}/repos`)\r\nconst repositories = response.data\r\nclearInterval(placeholderIntervalId)\r\n\r\nif (!repositories) exit(1)\r\n\r\nconst choice = await arg(\r\n  \"Which project?\",\r\n  repositories.map((repo) => ({\r\n    name: repo.name,\r\n    description: repo.description,\r\n    value: repo.html_url,\r\n  }))\r\n)\r\n\r\nexec(`open ${choice}`)\r\n\r\n```",
		"command": "open-github-repository-in-browser",
		"url": "https://github.com/johnlindquist/kit/discussions/203",
		"extension": ".md"
	},
	{
		"menu": "URL Actions \"App\"",
		"description": "Add your urls and include parameters",
		"shortcut": "cmd shift u",
		"author": "Ashkan Hosseini",
		"title": "URL actions (inspired by Alfred)",
		"user": "ashkanhosseini",
		"content": "Hey, I put together a script for URL actions very similar to the one from Alfred. It also works with {parameters}. Hope you find it useful. \r\n\r\n```js\r\n// Menu: URL Actions \"App\"\r\n// Description: Add your urls and include parameters\r\n// Shortcut: cmd shift u\r\n// Author: Ashkan Hosseini\r\n\r\nlet { getUrl, getUrls, addUrl, removeUrl } = await lib('urls');\r\n\r\nlet urlsChoices = () =>\r\n  getUrls().map(({ name, url, id }) => ({\r\n    name: `${name} (${url})`,\r\n    value: id,\r\n  }));\r\n\r\nlet useUrl = async () => {\r\n  let id = await arg('Use url:', urlsChoices());\r\n  let { url } = await getUrl(id);\r\n\r\n  const matches = url.match(/\\{(.*?)\\}/g);\r\n  if (matches && matches.length) {\r\n    const params = {};\r\n    for (let key of matches) {\r\n      key.replace('{', '').replace('}', '');\r\n      params[key] = await arg(`Enter value for param ${key}`);\r\n    }\r\n    url = Object.entries(params).reduce((acc, [key, value]) => {\r\n      return acc.replace(new RegExp(`${key}`, 'g'), value);\r\n    }, url);\r\n  }\r\n\r\n  exec(`open ${url}`);\r\n};\r\n\r\nlet add = async () => {\r\n  const name = await arg('Enter a URL name:');\r\n  const url = await arg('Enter a URL address:');\r\n\r\n  addUrl(name, url);\r\n  await add();\r\n};\r\n\r\nlet remove = async () => {\r\n  let id = await arg('Remove url:', urlsChoices());\r\n  removeUrl(id);\r\n  await remove();\r\n};\r\n\r\nonTab('Use', useUrl);\r\nonTab('Add', add);\r\nonTab('Remove', remove);\r\n\r\n```\r\n\r\nalso the urls module: \r\n\r\n```js\r\nlet urlsDb = db('urls', { urls: [] });\r\nexport let urls = urlsDb.get('urls');\r\n\r\nexport let getUrls = () => urls.value();\r\n\r\nexport let addUrl = (name, url) => {\r\n  urls.insert({ name, url }).write();\r\n};\r\n\r\nexport let removeUrl = (id) => {\r\n  urls.remove({ id }).write();\r\n};\r\n\r\nexport let getUrl = async (id) => {\r\n  const urls = await getUrls();\r\n  return urls.find((obj) => obj.id == id);\r\n};\r\n\r\n```",
		"command": "url-actions-inspired-by-alfred",
		"url": "https://github.com/johnlindquist/kit/discussions/201",
		"extension": ".md"
	},
	{
		"menu": "AWS Log Group",
		"description": "Quickly find and open your log groups",
		"author": "David Boyne",
		"twitter": "@boyney123",
		"title": "AWS Log Group: Quickly search and open log groups",
		"user": "boyney123",
		"content": "Hey @johnlindquist \r\n\r\nI created a quick script that allows me to search and open up log groups quickly.\r\n\r\nI spent a fair amount of time doing this, so thought I would help myself out.\r\n\r\nIf anyone else is interested script is here:\r\n\r\n```javascript\r\n// Menu: AWS Log Group\r\n// Description: Quickly find and open your log groups\r\n// Author: David Boyne\r\n// Twitter: @boyney123\r\n\r\nconst AWS = await npm('aws-sdk');\r\nconst { format } = await npm('date-fns');\r\n\r\nconst region = await env('AWS_REGION');\r\n\r\nAWS.config.update({ region: region });\r\n\r\nvar cloudwatchlogs = new AWS.CloudWatchLogs();\r\n\r\ncloudwatchlogs.describeLogGroups({ logGroupNamePrefix: '/aws/' }, async function (err, data) {\r\n  if (err) inspect(err);\r\n  // an error occurred\r\n  else {\r\n\r\n    // await inspect(data); // successful response\r\n    const groups = data.logGroups.map(({ logGroupName, creationTime, retentionInDays }) => ({\r\n      name: logGroupName,\r\n      value: logGroupName,\r\n      html: `<div> \r\n            <div style=\"font-size:10px; padding:0; margin:0;\">\r\n            Created ${format(new Date(creationTime), 'yyyy-MM-dd')} | Retention ${retentionInDays} days\r\n            </div>\r\n            <div style=\"font-size:14px; font-weight:bold;\">${logGroupName}</div>\r\n        </div>`,\r\n    }));\r\n    const logGroup = await arg('Search for a log group:', groups);\r\n\r\n    const url = `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#logsV2:log-groups/log-group/${encodeURIComponent(logGroup)}`;\r\n\r\n    exec(`open ${url}`);\r\n  }\r\n});\r\n\r\n```\r\n\r\n### To get working and still left to do\r\n\r\n- Make sure your AWS access keys and tokens are in the `.env` file.\r\n- Use the API to loop over the log groups it only returns 50 at the moment, but easy enough to do if thats a problem for anyone.",
		"command": "aws-log-group-quickly-search-and-open-log-groups",
		"url": "https://github.com/johnlindquist/kit/discussions/199",
		"extension": ".md"
	},
	{
		"menu": "Compress Or Die",
		"description": "Sends an image directly to compress-or-die",
		"twitter": "@ant_laguna",
		"title": "Drag and Drop to compress or die!",
		"user": "Antonio-Laguna",
		"content": "Just made a quick script to send an image to compress-or-die. Will convert to service with automaitor (to be read with John's voice)\r\n\r\n```js\r\n// Menu: Compress Or Die\r\n// Description: Sends an image directly to compress-or-die\r\n// Twitter: @ant_laguna\r\nconst http = await npm('http');\r\n\r\nconst [input] = await drop('Drop an image');\r\n\r\nconst { name, path, type } = input;\r\n\r\nfunction getProcess(image) {\r\n  if (image.includes('png')) {\r\n    return '/png-process';\r\n  } else if (image.includes('svg')) {\r\n    return '/svg-process';\r\n  } else {\r\n    return '/jpg-process';\r\n  }\r\n}\r\n\r\nif (!type.startsWith('image')) {\r\n  await arg(`File type not supported`);\r\n} else {\r\n  const file = await readFile(path);\r\n  const fileSize = Buffer.byteLength(file);\r\n\r\n  const options = {\r\n    method: 'POST',\r\n    hostname: 'compress-or-die.com',\r\n    port: 80,\r\n    path: '/api',\r\n    headers: {\r\n      'Content-Type': type,\r\n      'Content-Length': fileSize,\r\n      'X-Document-Name': name\r\n    }\r\n  };\r\n  const data = [];\r\n\r\n  const session = await new Promise((accept, reject) => {\r\n    const request = http.request(options, response => {\r\n      response.on('data', chunk => data.push(chunk));\r\n      response.on('end', () => {\r\n        const response = Buffer.concat(data).toString('utf-8');\r\n        const regex = /(_.+):(.+)/g;\r\n        let result;\r\n        const fields = {};\r\n\r\n        while (result = regex.exec(response)) {\r\n          fields[result[1]] = result[2];\r\n        }\r\n\r\n        if (fields._VERSION !== '1') {\r\n          accept('');\r\n          console.log('Version missmatch');\r\n        } else {\r\n          accept(fields._SESSION);\r\n        }\r\n      });\r\n\r\n      response.on('error', reject);\r\n    });\r\n\r\n    request.write(file);\r\n    request.end();\r\n  });\r\n\r\n  if (!session) {\r\n    await arg('An error occurred');\r\n  } else {\r\n    const url = `https://compress-or-die.com${getProcess(type)}?session=${session}`\r\n    await exec(`open ${url}`);\r\n  }\r\n}\r\n```",
		"command": "drag-and-drop-to-compress-or-die",
		"url": "https://github.com/johnlindquist/kit/discussions/190",
		"extension": ".md"
	},
	{
		"menu": "Simple calculator",
		"description": "Make simple calculations",
		"author": "Jakub Olek",
		"twitter": "@JakubOlek",
		"shortcut": "opt =",
		"title": "Simple Calculator",
		"user": "hakubo",
		"content": "Hey, thanks for the awesome tool.\r\n\r\nI constantly need to make some simple calculations and that's one of a feature that I liked about Alfred. \r\n\r\nWith ScriptKit I think I made it slightly better:\r\n- live preview of your calculation\r\n- select to copy to clipboard\r\n- remembers last 10 calculations\r\n- auto fixing , to . - so you don't have to do it manually\r\n\r\nhttps://user-images.githubusercontent.com/1018759/116007328-8f126600-a60f-11eb-8588-4a978bac47c9.mov\r\n\r\n```js\r\n// Menu: Simple calculator\r\n// Description: Make simple calculations\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt =\r\n\r\nconst calcDb = db('calc', {history: []});\r\n\r\nfunction createResult(calculationResult, input) {\r\n    return {name: calculationResult, description: input, value: {calculationResult, input}}\r\n}\r\n\r\nconst {calculationResult, input, ...rest} = await arg(\"calculate:\", async (input) => {\r\n    const choices = [];\r\n\r\n    if (input) {\r\n        choices.push(createResult((await exec(`bc <<<\"${input.replace(/\\,/g, \".\")}\" -l`)).replace(/^\\./, \"0.\"), input))\r\n    }\r\n\r\n    return choices.concat(calcDb.get('history').value())\r\n})\r\n\r\nif (calculationResult) {\r\n    const history = calcDb.get('history').value();\r\n\r\n    history.unshift(createResult(calculationResult, input));\r\n\r\n    calcDb.set('history', history.filter(({description}, index) => index === 0 || description !== input).slice(0, 10)).write()\r\n}\r\n\r\ncopy(calculationResult)\r\n```",
		"command": "simple-calculator",
		"url": "https://github.com/johnlindquist/kit/discussions/189",
		"extension": ".md"
	},
	{
		"menu": "Translate",
		"description": "Translate Text",
		"author": "Arnon Eilat",
		"title": "Translate Text",
		"user": "ArnonEilat",
		"content": "I've written a script to translate from English to Hebrew.\r\n\r\nThe target language can modify by changing the URL parameters\r\n\r\n```javascript\r\n// Menu: Translate\r\n// Description: Translate Text\r\n// Author: Arnon Eilat\r\n\r\nlet { getSelectedText } = await kit(\"text\");\r\n\r\nconst getWord = async () => {\r\n  let word = await arg(\"Word to Translate\");\r\n  if (word === \"\") {\r\n    word = await getSelectedText();\r\n  }\r\n  return encodeURIComponent(word.trim());\r\n};\r\n\r\nconst open = (url) => exec(`open \"${url}\"`);\r\n\r\nonTab(\"Google Translate \", async () => {\r\n  const word = await getWord();\r\n  const url = `https://translate.google.com/#view=home&op=translate&sl=en&tl=iw&text=${word}`;\r\n  open(url);\r\n});\r\n\r\nonTab(\"Yandex Translate\", async () => {\r\n  const word = await getWord();\r\n  const url = `https://translate.yandex.com/?lang=en-he&text=${word}`;\r\n  open(url);\r\n});\r\n```\r\n\r\n",
		"command": "translate-text",
		"url": "https://github.com/johnlindquist/kit/discussions/188",
		"extension": ".md"
	},
	{
		"menu": "Todoist Tasks",
		"description": "View this week's tasks from Todoist",
		"author": "Benjamin Lannon",
		"twitter": "@lannonbr",
		"aPI Token can be found here": "https://todoist.com/prefs/integrations",
		"title": "View current week's tasks from Todoist",
		"user": "lannonbr",
		"content": "I use Todoist as my main todo app. This is a script I can use to view all of the tasks I want to get done in the next 7 days.\r\n\r\n![Screen Shot 2021-04-25 at 12 51 41 AM](https://user-images.githubusercontent.com/3685876/115981258-76974280-a560-11eb-9767-889b5dc9a837.png)\r\n\r\n## Code\r\n\r\n```js\r\n// Menu: Todoist Tasks\r\n// Description: View this week's tasks from Todoist\r\n// Author: Benjamin Lannon\r\n// Twitter: @lannonbr\r\n\r\n/** @type typeof import('todoist') */\r\nconst todoistPackage = await npm(\"todoist\");\r\n\r\n/** @type typeof import('dayjs') */\r\nconst dayjs = await npm(\"dayjs\");\r\n\r\n// API Token can be found here: https://todoist.com/prefs/integrations\r\nconst token = await env(\"TODOIST_TOKEN\");\r\n\r\nconst client = todoistPackage.v8(token);\r\n\r\nawait client.sync();\r\n\r\nlet items = client.items.get();\r\n\r\nitems = items.filter((item) => {\r\n  let dueDate = dayjs(item.due.date);\r\n\r\n  return dueDate.diff(dayjs(), \"day\") <= 7;\r\n});\r\n\r\nawait arg(\r\n  \"View this week's tasks\",\r\n  items.map((item) => {\r\n    return {\r\n      name: item.content,\r\n      description: `Due: ${item.due.date}`,\r\n    };\r\n  })\r\n);\r\n```",
		"command": "view-current-weeks-tasks-from-todoist",
		"url": "https://github.com/johnlindquist/kit/discussions/182",
		"extension": ".md"
	},
	{
		"menu": "Update Twitter Name",
		"description": "Change your name on twitter",
		"title": "Update Twitter Name",
		"user": "johnlindquist",
		"content": "\r\n[Install update-twitter-name](https://scriptkit.app/api/new?name=update-twitter-name&url=https://gist.githubusercontent.com/johnlindquist/9ff193e24f0ba19146db0a875bce86aa/raw/e603da880e9bff7c2e67998fbf945e87e2d60144/update-twitter-name.js)\r\n\r\n```js\r\n// Menu: Update Twitter Name\r\n// Description: Change your name on twitter\r\n\r\nlet Twitter = await npm(\"twitter-lite\")\r\n\r\nlet envOptions = {\r\n  hint: md(\r\n    `You need to [create an app](https://developer.twitter.com/en/apps) to get these keys/tokens`\r\n  ),\r\n  ignoreBlur: true,\r\n  secret: true,\r\n}\r\n\r\nlet client = new Twitter({\r\n  consumer_key: await env(\r\n    \"TWITTER_CONSUMER_KEY\",\r\n    envOptions\r\n  ),\r\n  consumer_secret: await env(\r\n    \"TWITTER_CONSUMER_SECRET\",\r\n    envOptions\r\n  ),\r\n  access_token_key: await env(\r\n    \"TWITTER_ACCESS_TOKEN_KEY\",\r\n    envOptions\r\n  ),\r\n  access_token_secret: await env(\r\n    \"TWITTER_ACCESS_TOKEN_SECRET\",\r\n    envOptions\r\n  ),\r\n})\r\n\r\nlet name = await arg(\"Enter new twitter name:\")\r\n\r\nlet response = await client\r\n  .post(\"account/update_profile\", {\r\n    name,\r\n  })\r\n  .catch(error => console.log(error))\r\n\r\n```\r\n",
		"command": "update-twitter-name",
		"url": "https://github.com/johnlindquist/kit/discussions/179",
		"extension": ".md"
	},
	{
		"shortcut": "opt r",
		"title": "Browse Reddit Directly in Script Kit",
		"user": "johnlindquist",
		"content": "https://user-images.githubusercontent.com/36073/115759214-3b78f180-a35d-11eb-9c96-2af22c268803.mp4\r\n\r\n[Install reddit](https://scriptkit.app/api/new?name=reddit&url=https://gist.githubusercontent.com/johnlindquist/05c75efeebd2c2ca0149ee4e92aeb58d/raw/4ad69ed25572d5527db84f2db5c578ad0aacde25/reddit.js)\r\n\r\n```js\r\n//Shortcut: opt r\r\n\r\n/**\r\n * @typedef {typeof import(\"reddit\")} Reddit\r\n */\r\n\r\n/*\r\nFirst, create a Reddit App.\r\n\r\nClick \"Create app\"\r\nFor simple scripts, you can select a type of \"script\".\r\nYou can enter anything in the \"about URL\" and \"redirect URL\" fields.\r\nNote your app ID (appears below the app name) and your app secret.\r\n*/\r\n\r\n/** @type Reddit */\r\nlet Reddit = await npm(\"reddit\")\r\n\r\nlet envOptions = {\r\n  ignoreBlur: true,\r\n  hint: md(\r\n    `[Create a reddit app](https://www.reddit.com/prefs/apps)`\r\n  ),\r\n  secret: true,\r\n}\r\n\r\nlet reddit = new Reddit({\r\n  username: await env(\"REDDIT_USERNAME\"),\r\n  password: await env(\"REDDIT_PASSWORD\"),\r\n  appId: await env(\"REDDIT_APP_ID\", envOptions),\r\n  appSecret: await env(\"REDDIT_APP_SECRET\", envOptions),\r\n  userAgent: `ScriptKit/1.0.0 (https://scriptkit.com)`,\r\n})\r\n\r\nlet subreddits = [\r\n  \"funny\",\r\n  \"aww\",\r\n  \"dataisbeautiful\",\r\n  \"mildlyinteresting\",\r\n  \"RocketLeague\",\r\n]\r\n\r\nsubreddits.forEach(sub => {\r\n  onTab(sub, async () => {\r\n    await arg(\"Select post to open:\", async () => {\r\n      let best = await reddit.get(`/r/${sub}/hot`)\r\n\r\n      return best.data.children.map(({ data }) => {\r\n        let {\r\n          title,\r\n          thumbnail,\r\n          url,\r\n          subreddit_name_prefixed,\r\n          preview,\r\n        } = data\r\n\r\n        let resolutions = preview?.images?.[0]?.resolutions\r\n        let previewImage =\r\n          resolutions?.[resolutions?.length - 1]?.url\r\n\r\n        return {\r\n          name: title,\r\n          description: subreddit_name_prefixed,\r\n          value: url,\r\n          img: thumbnail,\r\n          ...(previewImage && {\r\n            preview: md(`\r\n![${title}](${previewImage})\r\n\r\n### ${title}          \r\n                `),\r\n          }),\r\n        }\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\n```\r\n\r\n\r\n\r\n",
		"command": "browse-reddit-directly-in-script-kit",
		"url": "https://github.com/johnlindquist/kit/discussions/177",
		"extension": ".md"
	},
	{
		"menu": "HEIC Converter",
		"description": "Convert the currently selected HEIC file to either JPEG or PNG",
		"author": "Gary McCann",
		"title": "HEIC Converter",
		"user": "gm90",
		"content": "Loving Kit! ❤️  Awesome work @johnlindquist 🔥 \r\n\r\nThe simplicity of Airdrop between Apple devices is great until your image turns up in a file format that most file uploads still don't support. Used to spend a few mins opening up preview and re-exporting. So wrote this little script to do the heavy lifting.\r\n\r\n```javascript\r\n// Menu: HEIC Converter\r\n// Description: Convert the currently selected HEIC file to either JPEG or PNG\r\n// Author: Gary McCann\r\n\r\nconst { getSelectedFile } = await kit(\"file\");\r\nconst { promises: fs } = await npm(\"fs\");\r\nconst path = await npm(\"path\");\r\nconst convert = await npm(\"heic-convert\");\r\n\r\nconst imagePath = await getSelectedFile();\r\nconst { dir, name: imageName, ext } = path.parse(imagePath);\r\n\r\nconst format = await arg(\r\n  \"Which format would you like to convert to:\",\r\n  async () => {\r\n    let options = [\"JPEG\", \"PNG\"];\r\n\r\n    return options.map((format) => {\r\n      return {\r\n        name: format,\r\n        value: format,\r\n      };\r\n    });\r\n  }\r\n);\r\n\r\nconst buffer = await fs.readFile(imagePath);\r\nconst outputBuffer = await convert({\r\n  buffer,\r\n  format,\r\n  quality: 1,\r\n});\r\n\r\nconst updatedFilePath = `${dir}/${imageName}.${format}`;\r\n\r\nawait fs.writeFile(updatedFilePath, outputBuffer);\r\n```\r\n\r\nFew bits to add:\r\n\r\n1. Validation to make sure a HEIC file is selected.\r\n2. Would like to maybe show some sort of progress bar, whilst its doing its business. ",
		"command": "heic-converter",
		"url": "https://github.com/johnlindquist/kit/discussions/174",
		"extension": ".md"
	},
	{
		"menu": "Speak Text",
		"description": "Speaks Text Using Google's Text-to-Speech",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"https": "//cloud.google.com/text-to-speech",
		"cache voices\r\nif (voices.length === 0) {\r\n  let [{ voices": "englishVoices }] = await client.listVoices(",
		"from the terminal or run\r\n// speak-text \"I like tacos\" --voice 5\r\n// await run(\"speak-text\", \"I like tacos\", \"--voice\", \"5\")\r\nlet voice =\r\n  typeof arg?.voice === \"number\"\r\n    ? voices[arg?.voice].value": "await arg(\"Select voice\", voices)",
		"title": "Speak Text with Google's Text-to-Speech",
		"user": "johnlindquist",
		"content": "I use this script a lot, especially since I can call it from other scripts. It does require setting up a Google Cloud account on your machine, but totally worth it for way higher quality voices.\r\n\r\n\r\nHere's how you run this from another script. You can select a voice by changing `5` to whatever:\r\n```js\r\nawait run(\"speak-text\", \"I like tacos\", \"--voice\", 5)\r\n```\r\n\r\nThe script in full:\r\n\r\n[Install speak-text](https://scriptkit.app/api/new?name=speak-text&url=https://gist.githubusercontent.com/johnlindquist/b5a43152f5cbe2fa7ffe48601b1faac5/raw/4fb50d3e0df110fab3ebe902408499502d617e79/speak-text.js)\r\n\r\n```js\r\n// Menu: Speak Text\r\n// Description: Speaks Text Using Google's Text-to-Speech\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\n// Requires a Google Cloud account and configuration:\r\n// https://cloud.google.com/text-to-speech\r\n\r\nlet { playAudioFile } = await kit(\"audio\")\r\nlet { format } = await npm(\"date-fns\")\r\n\r\n/** @type typeof import(\"@google-cloud/text-to-speech\") */\r\nlet textToSpeech = await npm(\"@google-cloud/text-to-speech\")\r\nlet client = new textToSpeech.TextToSpeechClient()\r\n\r\nlet text = await arg(\"What should I say?\")\r\n\r\nlet voicesDB = db(\"voices\", { voices: [] })\r\nlet voices = voicesDB.get(\"voices\").value()\r\n\r\n//cache voices\r\nif (voices.length === 0) {\r\n  let [{ voices: englishVoices }] = await client.listVoices(\r\n    {\r\n      languageCode: \"en\",\r\n    }\r\n  )\r\n\r\n  let voiceChoices = englishVoices.map(voice => {\r\n    return {\r\n      name: `${voice.ssmlGender} - ${voice.name}`,\r\n      value: {\r\n        ...voice,\r\n        languageCode: voice.name.slice(0, 4),\r\n      },\r\n    }\r\n  })\r\n\r\n  voicesDB.set(\"voices\", voiceChoices).write()\r\n  voices = voicesDB.get(\"voices\").value()\r\n}\r\n\r\n// From the terminal or run\r\n// speak-text \"I like tacos\" --voice 5\r\n// await run(\"speak-text\", \"I like tacos\", \"--voice\", \"5\")\r\nlet voice =\r\n  typeof arg?.voice === \"number\"\r\n    ? voices[arg?.voice].value\r\n    : await arg(\"Select voice\", voices)\r\n\r\nlet effectsProfileId = [\"headphone-class-device\"]\r\n\r\nlet createRequest = (voice, text) => {\r\n  let speakingRate = 1\r\n  return {\r\n    input: { text },\r\n    voice,\r\n    audioConfig: {\r\n      audioEncoding: \"MP3\",\r\n      effectsProfileId,\r\n      speakingRate,\r\n    },\r\n  }\r\n}\r\n\r\nlet request = createRequest(voice, text)\r\n\r\nlet safeFileName = text\r\n  .slice(0, 10)\r\n  .replace(/[^a-z0-9]/gi, \"-\")\r\n  .toLowerCase()\r\n\r\nlet date = format(new Date(), \"yyyy-MM-dd-hh-mm-ss\")\r\nlet fileName = `${date}-${safeFileName}.mp3`\r\n\r\n// Performs the text-to-speech request\r\nlet [response] = await client.synthesizeSpeech(request)\r\n\r\n// Write the .mp3 locally\r\nlet textAudioPath = tmp(fileName)\r\nawait writeFile(\r\n  textAudioPath,\r\n  response.audioContent,\r\n  \"binary\"\r\n)\r\n\r\nplayAudioFile(textAudioPath)\r\n\r\n```\r\n",
		"command": "speak-text-with-googles-text-to-speech",
		"url": "https://github.com/johnlindquist/kit/discussions/164",
		"extension": ".md"
	},
	{
		"title": "Create a new Jekyll post with Script Kit",
		"user": "dealingwith",
		"content": "For years I've used Rake tasks to manage my Jekyll blog writing & publishing flow. I'm starting to migrate those to Kit. They were stolen from an old version of [Octopress](https://github.com/octopress/octopress) which itself hasn't had an update in five years, so it's time. \r\n\r\n[Here's the first](https://gist.github.com/dealingwith/baed8abe1ce1413cb7b897c32c4aa74d), which creates a new Jekyll post. I figure this might be useful to others new to Kit who want to do stuff with files or using static site generators.\r\n\r\n```javascript\r\nlet {format} = await npm('date-fns')\r\n\r\nlet title = await arg('Name of post')\r\nlet file_title = title.toLowerCase().replaceAll(' ', '-')\r\nlet posts_path = '/Users/danielmiller/code/daniel-industries/_posts/'\r\n\r\nlet date = new Date()\r\nlet date_for_path = format(date, 'yyyy-MM-dd')\r\nlet date_for_yml = format(date, 'yyyy-MM-dd hh:mm:ss z')\r\n\r\nlet file_path = posts_path + date_for_path + '-' + file_title + '.markdown'\r\nlet file_contents = `---\r\nlayout: post\r\ntitle: \"${ title }\"\r\nexcerpt: \r\ndate: ${ date_for_yml }\r\ncategories: \r\n---\r\n\r\n`\r\n\r\nwriteFile(file_path, file_contents)\r\nexec(`code ${file_path} --new-window`)\r\n```\r\n\r\nThe last line is a nice bonus I gave myself, opening the new file in a dedicated VS Code window.",
		"command": "create-a-new-jekyll-post-with-script-kit",
		"url": "https://github.com/johnlindquist/kit/discussions/153",
		"extension": ".md"
	},
	{
		"menu": "Basecamp - Create Task",
		"description": "Create a Basecamp task",
		"title": "Basecamp API Library",
		"user": "peterjohnhunt",
		"content": "This is very much still WIP, but i've been building a library for the [Basecamp 3 api](https://github.com/basecamp/bc3-api) so i can build a bunch of automations against that.\r\n\r\nHere is a gist of the lib file:\r\n\r\nhttps://gist.github.com/peterjohnhunt/128ded029c93fb8f6c4845df7fc590c2\r\n\r\nand here is an example of how it could be used to create a task\r\n\r\n```\r\n// Menu: Basecamp - Create Task\r\n// Description: Create a Basecamp task\r\n\r\nlet { me, selectTodoList, createTodo } = await lib(\"basecamp\")\r\n\r\nlet list = await selectTodoList()\r\n\r\nsetHint(`${list.bucket.name} - ${list.title}`)\r\n\r\nlet title = await arg('Task name:')\r\n\r\nlet today = new Date()\r\nlet dd = String(today.getDate()).padStart(2, '0')\r\nlet mm = String(today.getMonth() + 1).padStart(2, '0')\r\nlet yyyy = today.getFullYear()\r\n\r\nlet response = await createTodo({\r\n  content: title,\r\n  assignee_ids: [me.id],\r\n  due_on: `${yyyy}-${mm}-${dd}`\r\n}, list.bucket.id, list.id)\r\n\r\nsetHint(`${title} Created!`)\r\n\r\nwait(2000)\r\n```",
		"command": "basecamp-api-library",
		"url": "https://github.com/johnlindquist/kit/discussions/148",
		"extension": ".md"
	},
	{
		"menu": "Analyze Text",
		"description": "Select a text and see data about it",
		"author": "Filip Tammergård",
		"twitter": "@filipang",
		"shortcut": "cmd opt shift control t",
		"title": "Text analyzer script",
		"user": "filiptammergard",
		"content": "I made a little script for getting number of characters, words and estimated reading time of currently selected text. Much easier than copying something into a text editor to see these things.\r\n\r\nhttps://user-images.githubusercontent.com/44197016/114854865-8f2b8e00-9de5-11eb-9308-050d9f865575.mov\r\n\r\n```js\r\n// Menu: Analyze Text\r\n// Description: Select a text and see data about it\r\n// Author: Filip Tammergård\r\n// Twitter: @filipang\r\n// Shortcut: cmd opt shift control t\r\n\r\nconst { countCharacters, countWords, getReadingTime } = await npm(\r\n  \"text-analyzer\"\r\n);\r\nconst { getSelectedText } = await kit(\"text\");\r\nconst selectedText = await getSelectedText();\r\n\r\nconst characters = countCharacters(selectedText);\r\nconst words = countWords(selectedText);\r\nconst readingTime = getReadingTime(selectedText);\r\n\r\nconst readingTimeMinutes = readingTime.minutes;\r\n\r\nshow(`\r\n<section style=\"margin:10px\">\r\n  <p>Characters: ${characters}</p>\r\n  <p>Words: ${words}</p>\r\n  <p>Reading time: ${readingTimeMinutes} minutes</p>\r\n</section>\r\n`);\r\n```\r\n\r\nCould be extended a lot!\r\n\r\nIs it possible to set the size of the window that pops up with `show`?",
		"command": "text-analyzer-script",
		"url": "https://github.com/johnlindquist/kit/discussions/147",
		"extension": ".md"
	},
	{
		"title": "Run a Script from Right-Click in Finder",
		"user": "johnlindquist",
		"content": "\r\nhttps://user-images.githubusercontent.com/36073/114775451-8d52c380-9d2e-11eb-8964-aaca64881203.mp4\r\n\r\n",
		"command": "run-a-script-from-right-click-in-finder",
		"url": "https://github.com/johnlindquist/kit/discussions/143",
		"extension": ".md"
	},
	{
		"title": "Simple Zoom Room Quick Links",
		"user": "peterjohnhunt",
		"content": "Hey @johnlindquist! First off, thank you so much for this app! one of the coolest things i've played around with in a long time! I've already spent a bunch of time prototyping a bunch of scripts and automations. Definitely is going to make much easier a lot of the automation type scripts i usually end up writing in bash a bit more clunkily.\r\n\r\nI built a super simple zoom room quick launcher: https://gist.github.com/peterjohnhunt/043b9051ff097d415efc8215889d6a25\r\n\r\n**A couple questions:**\r\n\r\n1) For me when doing certain actions (like trying to share) via the UI, it seems to \"get confused\". For instance, when i try and share a script via \"Create install link\" it asks me for a github token, but when i enter it i get this error:\r\n\r\n`[warn] ENOENT: no such file or directory, open '/Users/peterjohnhunt/.kenv/scripts/MYTOKENHERE`\r\n\r\nIt feels like it's using the token as the file it's supposed to share. Doing the share process through the terminal works fine, and after the token is set, the UI works fine as well (since it doesn't prompt for a token)\r\n\r\n2) Following the pattern of the \"todos app\" i built a db interface as a \"lib\". Is there an easy way to share the full \"script\" including that file to others?\r\n\r\n3) For something like opening a url in the default browser, is exec(\"open MYURL\") the best method, or is there a helper function i'm missing?\r\n\r\n4) One other thought, it'd be cool if there was a programatic way to change the tab. An example scenario: After adding a new item to the db, it would be cool if i could trigger it to auto change back to the main tab.",
		"command": "simple-zoom-room-quick-links",
		"url": "https://github.com/johnlindquist/kit/discussions/138",
		"extension": ".md"
	},
	{
		"menu": "Brave Bookmarks",
		"description": "Select and open a bookmark from Brave",
		"title": "Brave bookmarks recursively",
		"user": "Alarid",
		"content": "Hey there 👋 \r\n\r\nI just discovered Script Kit today, and I absolutely love it, awesome idea @johnlindquist 🔥\r\n\r\nI made a few changes to your script `chrome-bookmarks` so I can use it with Brave (small change), but also to parse the bookmarks JSON recursively. This is particularly useful to me as I nest all my bookmarks in subfolders of the bookmark bar. With this change, I can open any bookmark (however deep it is nested in the bookmarks JSON). \r\n\r\nI thought I'd share the script here, in case anyone find it useful too.\r\n\r\n```javascript\r\n// Menu: Brave Bookmarks\r\n// Description: Select and open a bookmark from Brave\r\n\r\nfunction parseBookmarks(node) {\r\n  const bookmarks = [];\r\n  node.forEach((item) => {\r\n    if (item.type === \"url\") {\r\n      bookmarks.push(item);\r\n    } else if (item.type === \"folder\") {\r\n      bookmarks.push(...parseBookmarks(item.children));\r\n    }\r\n  });\r\n  return bookmarks;\r\n}\r\n\r\nlet bookmarksFile = await readFile(\r\n  home(\r\n    \"Library/Application Support/BraveSoftware/Brave-Browser/Default/Bookmarks\"\r\n  )\r\n);\r\nconst rootNode = JSON.parse(bookmarksFile);\r\nconst bookmarkBar = rootNode.roots.bookmark_bar;\r\nconst bookmarks = parseBookmarks(bookmarkBar.children);\r\n\r\nlet url = await arg(\r\n  \"Select bookmark\",\r\n  bookmarks.map(({ name, url }) => {\r\n    return {\r\n      name: name || url,\r\n      description: url,\r\n      value: url,\r\n    };\r\n  })\r\n);\r\n\r\nexec(`open ${url}`);\r\n\r\n```",
		"command": "brave-bookmarks-recursively",
		"url": "https://github.com/johnlindquist/kit/discussions/136",
		"extension": ".md"
	},
	{
		"menu": "SVGO",
		"description": "Optimize SVG on drop",
		"author": "Jhey Tompkins",
		"twitter": "@jh3yy",
		"title": "Breezy SVG Optimization",
		"user": "jh3y",
		"content": "Tweet 👉  [here](https://twitter.com/jh3yy/status/1381661563246018562?s=20)\r\n\r\nOne thing that feels very cumbersome in my creation process is handling SVG export for my animations, etc.\r\nOften I create an SVG in whichever editor I feel like using that day and when I'm ready to bring it to the browser, I have a process.\r\n\r\n1. Export SVG to the repo I need it in.\r\n2. Copy the markup or drag the file into [SVGOMG](https://jakearchibald.github.io/svgomg/).\r\n3. Tweak the SVGO settings to get what I need.\r\n4. Copy the output or download it.\r\n5. Create a new file next to the original with an `--optimized.svg` suffix.\r\n\r\nBut, with ScriptKit, I can get direct access to `svgo` from the system now 🤩 \r\n\r\n```javascript\r\n// Menu: SVGO\r\n// Description: Optimize SVG on drop\r\n// Author: Jhey Tompkins\r\n// Twitter: @jh3yy\r\n\r\nlet svgo = await npm('svgo')\r\nlet { setSelectedText } = await kit('text')\r\n\r\nlet [svg] = await arg({\r\n  placeholder: 'Drop an SVG',\r\n  drop: true,\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst SVG_STRING = await readFile(svg.path, 'utf-8')\r\n\r\n// My SVGO config\r\nconst CONFIG = {...}\r\n// Optimize it using my preferred config\r\nlet result = await svgo.optimize(SVG_STRING, CONFIG)\r\n// Write to file\r\nawait writeFile(svg.path.replace('.svg', '--optimized.svg'), result.data)\r\n// Copy to clipboard\r\nsetSelectedText(result.data)\r\n```\r\nThis saves me a bunch of time! And I get my preferred settings every time. \r\nAlso, my config becomes version controlled with my other scripts 🙌 \r\n\r\nHow could it be improved?\r\n- Drag files straight from VSCode. Currently, this gives an empty Array.\r\n- Show a preview in the prompt like we can with images and sharp.\r\n\r\nLove ScriptKit 👍 👍 \r\n\r\nKeep up the great work John! 👏 ",
		"command": "breezy-svg-optimization",
		"url": "https://github.com/johnlindquist/kit/discussions/134",
		"extension": ".md"
	},
	{
		"menu": "Update EpicReact deps",
		"description": "Update all the dependencies in the epicreact workshop repos",
		"title": "Epic React update-deps script",
		"user": "kentcdodds",
		"content": "Whenever I update [react-workshop-app](https://github.com/kentcdodds/react-workshop-app), I need to update all my EpicReact workshop repos. I have a script in each one called `update-deps` which looks like this:\r\n\r\nhttps://github.com/kentcdodds/react-hooks/blob/119a8c9182664e7b28e6a426b7ca861f045f729e/scripts/update-deps\r\n\r\nSo I've put together a little script that opens an individual terminal window for each of the repos and runs the update-deps script and pushes. Really straightforward and saves me a lot of time.\r\n\r\n```javascript\r\n// Menu: Update EpicReact deps\r\n// Description: Update all the dependencies in the epicreact workshop repos\r\n\r\nconst repos = [\r\n  'advanced-react-hooks',\r\n  'advanced-react-patterns',\r\n  'bookshelf',\r\n  'react-fundamentals',\r\n  'react-hooks',\r\n  'react-performance',\r\n  'react-suspense',\r\n  'testing-react-apps',\r\n]\r\n\r\nconst script = `git add -A && git stash && git checkout main && git pull && ./scripts/update-deps && git commit -am \"update all deps\" --no-verify && git push && git status`\r\nfor (const repo of repos) {\r\n  const scriptString = JSON.stringify(\r\n    `cd ~/code/epic-react/${repo} && ${script}`,\r\n  )\r\n  exec(\r\n    `osascript -e 'tell application \"Terminal\" to activate' -e 'tell application \"Terminal\" to do script ${scriptString}'`,\r\n  )\r\n}\r\n```",
		"command": "epic-react-update-deps-script",
		"url": "https://github.com/johnlindquist/kit/discussions/125",
		"extension": ".md"
	},
	{
		"menu": "Open Project",
		"description": "Opens a project in code",
		"shortcut": "cmd shift .",
		"title": "Open Project in VSCode Script",
		"user": "kentcdodds",
		"content": "As requested by John: https://twitter.com/johnlindquist/status/1381251960817418246\r\n\r\nI have my projects in `~/code` and temporary projects in `~/Desktop`. Sometimes they're in sub-directories as well. Every project has a root-level `package.json`, so I put together this script to quickly open a project in vscode:\r\n\r\n```javascript\r\n// Menu: Open Project\r\n// Description: Opens a project in code\r\n// Shortcut: cmd shift .\r\n\r\nasync function getProjects(parentDir) {\r\n  const codeDir = await ls(parentDir)\r\n  const choices = []\r\n  for (const dir of codeDir) {\r\n    if (dir.includes('node_modules')) continue\r\n\r\n    const fullPath = path.join(parentDir, dir)\r\n    if (await isFile(path.join(fullPath, 'package.json'))) {\r\n      choices.push({\r\n        name: dir,\r\n        value: fullPath,\r\n        description: fullPath,\r\n      })\r\n    } else {\r\n      choices.push(...(await getProjects(fullPath)))\r\n    }\r\n  }\r\n  return choices\r\n}\r\n\r\nconst choice = await kitPrompt({\r\n  placeholder: 'Which project?',\r\n  choices: [\r\n    ...(await getProjects('~/code')),\r\n    ...(await getProjects('~/Desktop')),\r\n  ],\r\n})\r\n\r\nexec(`code ${choice}`)\r\n```\r\n\r\nWorks great!",
		"command": "open-project-in-vscode-script",
		"url": "https://github.com/johnlindquist/kit/discussions/124",
		"extension": ".md"
	},
	{
		"menu": "Google Image Grid",
		"description": "Create a Grid of Images",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"title": "Google Image Grid",
		"user": "johnlindquist",
		"content": "\r\n\r\nhttps://user-images.githubusercontent.com/36073/114246458-e0ec9800-994f-11eb-88ea-04ddf6cfec6f.mp4\r\n\r\n\r\n[Install google-image-grid](https://scriptkit.app/api/new?name=google-image-grid&url=https://gist.githubusercontent.com/johnlindquist/9bd0b6c2e48cb04c86b19643968d54e8/raw/a934eb5ef967b15726f41dab7922126fa049f886/google-image-grid.js)\r\n\r\n```js\r\n// Menu: Google Image Grid\r\n// Description: Create a Grid of Images\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet gis = await npm(\"g-i-s\")\r\n\r\nawait arg(\"Search for images:\", async input => {\r\n  if (input.length < 3) return ``\r\n\r\n  let searchResults = await new Promise(res => {\r\n    gis(input, (_, results) => {\r\n      res(results)\r\n    })\r\n  })\r\n\r\n  return `<div class=\"flex flex-wrap\">${searchResults\r\n    .map(({ url }) => `<img class=\"h-32\" src=\"${url}\" />`)\r\n    .join(\"\")}</div>`\r\n})\r\n\r\n```\r\n",
		"command": "google-image-grid",
		"url": "https://github.com/johnlindquist/kit/discussions/120",
		"extension": ".md"
	},
	{
		"menu": "Change Extension",
		"description": "Drag and drop files to change their extension",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"title": "Change Extension",
		"user": "johnlindquist",
		"content": "[Install change-extension](https://scriptkit.app/api/new?name=change-extension&url=https://gist.githubusercontent.com/johnlindquist/244216e5192eaa50f0c3089c0131d984/raw/120e17ef7debb9acb0e72aa76ef3e12cc5069b79/change-extension)\r\n\r\n```js\r\n// Menu: Change Extension\r\n// Description: Drag and drop files to change their extension\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\n/** @type {File[]} */\r\nlet droppedFiles = await arg(\"Drop files\")\r\n\r\nlet extension = await arg({\r\n  placeholder: \"Extension\",\r\n  hint: \"ts, js, mp4, etc\",\r\n})\r\n\r\nfor await (let { path } of droppedFiles) {\r\n  let tsPath = path.replace(/[^.]*$/, extension)\r\n  mv(path, tsPath)\r\n}\r\n```",
		"command": "change-extension",
		"url": "https://github.com/johnlindquist/kit/discussions/116",
		"extension": ".md"
	},
	{
		"menu": "Kit Scripts",
		"description": "View + Copy Scripts",
		"author": "Zach Zeleznick",
		"twitter": "@zzxiv",
		"adapted from kit/cli/info.js\r\nconst getByMarker = marker => text => {\r\n  const exp = new RegExp(`${marker}(.*)`);\r\n  const match = text.match(exp)\r\n  if (!match) return\r\n  return match[1].trim()\r\n}\r\n\r\nconst extractMetadata = (text) => {\r\n  const mapping = {\r\n    menu": "'Menu:',",
		"mARK": "currently unused",
		"nOTE": "couldn't trigger the app.on('open-url') and would instead get the app in a bad state ...",
		"const buildUrl = (name) => `kit": "//${name.split('.')[0]}?url=https://${repo}/scripts/${author}/${name}`",
		"title": "View Scripts Kit Scripts in Script Kit 🤯",
		"user": "zzeleznick",
		"content": "## View Scripts Kit Scripts in Script Kit 🤯 \r\n\r\nIn today's microsite adventure, I built @johnlindquist's scriptkit.app [page](https://scriptkit.app/scripts/johnlindquist) in Kit.\r\n\r\n## Demo\r\n![kit-scripts](https://user-images.githubusercontent.com/5779832/113468644-4561a180-93fc-11eb-9fef-7c664ac5fc7a.gif)\r\n\r\n## Bells & Whistles\r\n\r\n- Uses a cache to only fetch files from Github when the local cache files are missing or changed\r\n- Applies light/dark theme auto-magically\r\n- Should be fairly easy to extend to support viewing files in other repos / paths\r\n\r\n## Code\r\n\r\n<details>\r\n<summary>Click for code\r\n</summary>\r\n\r\n```js\r\n// Menu: Kit Scripts\r\n// Description: View + Copy Scripts\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n\r\nconst Prism = await npm('prismjs')\r\n\r\nconst scriptsDB = db(\"kit-scripts\", { scripts: [] });\r\nconst scriptsRef = scriptsDB.get(\"scripts\");\r\n\r\nconst owner = `eggheadio`\r\nconst repo = `scriptkit.app`\r\nconst branch = `main`\r\nconst author = `johnlindquist`\r\nconst treepath = `public/scripts/${author}`\r\nconst ref = `${branch}:${treepath}`\r\n\r\nconst githubURL = \"https://api.github.com/graphql\";\r\n\r\nlet token = env.GITHUB_ACCESS_TOKEN;\r\n\r\nconst config = {\r\n  headers: {\r\n    \"Authorization\": `Bearer ${token}`,\r\n  }\r\n}\r\n\r\nif (!token) {\r\n  const element = `\r\n  <div class=\"flex flex-col justify-center\">\r\n    <div>\r\n      <a href=\"https://github.com/settings/tokens/new\">Create a token</a> with \"public_repo\" enabled.\r\n    </div>\r\n    <br>\r\n    <div>\r\n      Then, copy + paste the token above or set <code>GITHUB_REPO_TOKEN</code> inside <code>~/.kenv/.env</code>\r\n    </div>\r\n  </div>`\r\n\r\n  token = await env(\"GITHUB_ACCESS_TOKEN\", {\r\n    info: `Create and enter your personal access token`,\r\n    choices: element,\r\n  });\r\n}\r\n\r\nconst repoTreeQuery = `\r\nquery {\r\n  repository(owner: \"${owner}\", name: \"${repo}\") {\r\n    object(expression: \"${ref}\") {\r\n      ... on Tree {\r\n        entries {\r\n          name,\r\n          oid,\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst fetchTreeObjects = async () => {\r\n  let response;\r\n  try {\r\n    response = await post(githubURL,\r\n      {\r\n        query: repoTreeQuery\r\n      },\r\n      config\r\n    );\r\n  }\r\n  catch (err) {\r\n    console.warn(\"fetchTreeObjects failed:\", err);\r\n    return\r\n  }\r\n  const graphqlResponse = response.data;\r\n  // console.log(repoTreeQuery, graphqlResponse);\r\n  const {\r\n    data: {\r\n      repository: {\r\n        object: {\r\n          entries\r\n        }\r\n      }\r\n    }\r\n  } = graphqlResponse;\r\n  return entries\r\n}\r\n\r\nconst fetchScript = async (name) => {\r\n  const scriptUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${treepath}/${name}`;\r\n  // NOTE: https://scriptkit.app/scripts/${author}/${name} should also work by design\r\n  const response = await get(scriptUrl);\r\n  return response.data;\r\n}\r\n\r\n// adapted from kit/cli/info.js\r\nconst getByMarker = marker => text => {\r\n  const exp = new RegExp(`${marker}(.*)`);\r\n  const match = text.match(exp)\r\n  if (!match) return\r\n  return match[1].trim()\r\n}\r\n\r\nconst extractMetadata = (text) => {\r\n  const mapping = {\r\n    menu: 'Menu:',\r\n    description: 'Description:',\r\n    author: 'Author:',\r\n    twitter: 'Twitter:',\r\n  }\r\n  return Object.entries(mapping)\r\n      .reduce((a, [k,v]) => {\r\n        return {...a, [k]: getByMarker(v)(text)}\r\n  }, {});\r\n}\r\n\r\n\r\nconst loadScriptBundle = async (name, oid) => {\r\n  const entry = scriptsRef.find({ name });\r\n  const cached = entry.value();\r\n  if (cached) {\r\n    console.log(`Found cached for: ${name}`);\r\n    const localOid = cached.oid;\r\n    if (localOid === oid) {\r\n      console.log(`No remote changes for: ${name}`);\r\n      return cached\r\n    }\r\n    console.log(`Git object mismatch for: ${name} – local:${localOid} != remote:${oid}`);\r\n  }\r\n  console.log(`Fetching remote ${name}`);\r\n  const text = await fetchScript(name);\r\n  const metadata = extractMetadata(text);\r\n  console.log(`Fetched remote ${name} with metadata: ${JSON.stringify(metadata)}`);\r\n  const payload = { ...metadata, text, name, oid}\r\n  // TODO: should probably remove old files\r\n  // TODO: should clean up this function – doing too much\r\n  if (cached) {\r\n    entry.assign(payload).write()\r\n  } else {\r\n    scriptsRef.insert(payload).write();\r\n  }\r\n  return payload\r\n}\r\n\r\n// MARK: currently unused\r\nconst injectCustomClass = async () => {\r\n  // Load per suggestion on https://github.com/PrismJS/prism/issues/1171#issuecomment-470929808\r\n  // Source: https://github.com/PrismJS/prism/blob/master/plugins/custom-class/prism-custom-class.js\r\n  await npm('prismjs/plugins/custom-class/prism-custom-class')\r\n  // injects into Prism.plugins (e.g run 'console.log(Object.keys(Prism.plugins))' before + after)\r\n  Prism.plugins.customClass.add(({language, type, content}) => {\r\n    if (language === 'javascript') {\r\n      return 'overflow-scroll';\r\n    }\r\n  });\r\n}\r\n\r\nconst buildCodeBlock = (code) => {\r\n  const html = Prism.highlight(code, Prism.languages.javascript, 'javascript');\r\n  return `<div class=\"h-full p-1 pt-2 pb-2 text-xs w-screen\"><pre><code>${html}</code></pre></div>` \r\n}\r\n\r\nconst smallTextify = (field) => {\r\n  return field ? `<div class=\"text-xs\">${field}</div>` : ''\r\n}\r\n\r\n// NOTE: couldn't trigger the app.on('open-url') and would instead get the app in a bad state ...\r\n// const buildUrl = (name) => `kit://${name.split('.')[0]}?url=https://${repo}/scripts/${author}/${name}`\r\n\r\nconst buildUrl = (name) => `https://${repo}/scripts/${author}/${name.split('.')[0]}`\r\n\r\nconst buildCodeModal = (payload) => {\r\n  let {name, text: code, description, author, twitter} = payload;\r\n  const block = buildCodeBlock(code)\r\n  const download = `<a class=\"group font-mono font-bold inline-flex\" href=\"${buildUrl(name)}\">Install</a>`\r\n  name = name ? `<div class=\"text-lg font-mono font-bold\">${name.split('.')[0]}</div>` : ''\r\n  const row = `<div class=\"flex w-full justify-between\">${name}${download}</div>`\r\n  const meta = [row].concat([description, author, twitter].map(smallTextify)).join('\\n');\r\n  // ideally add some fancier styles like 'box-border border-4 bg-white' here\r\n  const metaStyle = \"border-bottom: 2px solid rgba(0, 0, 0, .025)\"\r\n  const header = `<div class=\"h-full p-3\" style=\"${metaStyle}\">${meta}</div>`\r\n  const style = \"border: 2px solid rgba(0, 0, 0, .05); overflow: scroll;\"\r\n  return `<div class=\"h-full w-full p-1 pb-2 mb-2 \" style=\"${style}\">${header}${block}</div>`\r\n}\r\n\r\nconst injectCss = (html) => {\r\n  // see https://unpkg.com/prism-theme-night-owl@1.4.0/build/light.css\r\n  // source: https://github.com/SaraVieira/prism-theme-night-owl\r\n  const css = `code[class*=language-],pre[class*=language-]{color:#403f53;font-family:Consolas,Monaco,\"Andale Mono\",\"Ubuntu Mono\",monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}code[class*=language-] ::-moz-selection,code[class*=language-]::-moz-selection,pre[class*=language-] ::-moz-selection,pre[class*=language-]::-moz-selection{text-shadow:none;background:#fbfbfb}code[class*=language-] ::selection,code[class*=language-]::selection,pre[class*=language-] ::selection,pre[class*=language-]::selection{text-shadow:none;background:#fbfbfb}@media print{code[class*=language-],pre[class*=language-]{text-shadow:none}}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto}:not(pre)>code[class*=language-],pre[class*=language-]{color:#fff;background:#fbfbfb}:not(pre)>code[class*=language-]{padding:.1em;border-radius:.3em;white-space:normal}.token.cdata,.token.comment,.token.prolog{color:#989fb1;font-style:italic}.token.punctuation{color:#994cc3}.namespace{color:#0c969b}.token.deleted{color:rgba(239,83,80,.56);font-style:italic}.token.keyword,.token.operator,.token.property,.token.symbol{color:#0c969b}.token.tag{color:#994cc3}.token.boolean{color:#bc5454}.token.number{color:#aa0982}.language-css .token.string,.style .token.string,.token.builtin,.token.char,.token.constant,.token.entity,.token.string,.token.url{color:#4876d6}.token.doctype,.token.function,.token.selector{color:#994cc3;font-style:italic}.token.attr-name,.token.inserted{color:#4876d6;font-style:italic}.token.atrule,.token.attr-value,.token.class-name{color:#111}.token.important,.token.regex,.token.variable{color:#c96765}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}`\r\n  const style = `<style type=\"text/css\">${css}</style>`\r\n  return `${style}${html}`\r\n}\r\n\r\nconst createRegEx = (input = '') => {\r\n  input = input.trim().toLowerCase()\r\n  let matcher = input\r\n  try {\r\n    matcher = new RegExp(input)\r\n  } catch (err) {\r\n    console.warn(\"Invalid expression\", input)\r\n  }\r\n  return matcher\r\n}\r\n\r\nconst fetchAllFileObjects = async () => {\r\n  const entries = await fetchTreeObjects();\r\n  const limit = 50; // fake limit\r\n  const promises = entries.slice(0,limit).map(({name, oid}) => loadScriptBundle(name, oid));\r\n  return await Promise.all(promises);\r\n}\r\n\r\nconst buildPage = (fileObjects) => (input) => {\r\n  const matcher = createRegEx(input)\r\n  const modals = fileObjects\r\n     .filter(({name}) => name.match(matcher) !== null)\r\n     .map(buildCodeModal)\r\n  const results = `<div style=\"overflow: hidden;\">${modals.join('\\n')}</div>`\r\n  const metaPanel = `<div class=\"text-xl font-semibold font-mono pb-2\">Found ${modals.length} hits</div>`\r\n  const html = `<div>${metaPanel}${results}</div>`\r\n  const page = injectCss(html)\r\n  console.log(page);\r\n  return page\r\n}\r\n\r\nconst buildScriptRxPanel = async () => {\r\n  const objects = await fetchAllFileObjects();\r\n  await arg({\r\n    message: \"Search for scripts:\",\r\n    input: \"\",\r\n  }, buildPage(objects));\r\n}\r\n\r\nawait buildScriptRxPanel()\r\n\r\n```\r\n\r\n</details>",
		"command": "view-scripts-kit-scripts-in-script-kit",
		"url": "https://github.com/johnlindquist/kit/discussions/111",
		"extension": ".md"
	},
	{
		"title": "ScriptKit is cool! - Here's how it is helping me with manual repetitive tasks.",
		"user": "rvisharma",
		"content": "I had a use-case where the local development server needs the oauth token from a deployed application to be stored on a local file. Problem is that the expiry of token is short which interrupts my flow of work and then i have to again do the following steps..\r\n- Open the deployed application\r\n- Login in with credentials\r\n- Snip the token from devtools\r\n- Switch over local file and replace the token.\r\n\r\nAlthough, it just takes one minute, but this task is dreadful to me.\r\n\r\nMy initial idea was to create a chrome extension which will snip the token from the website and will ping a local server endpoint which in turn will update the local-file with new token using `fs`\r\n\r\n***Enter Scriptkit***\r\n\r\nIt does everything i needed with a solid framework to invoke 💪🏻\r\n\r\nI'm using, Playwright for browser automation _(open -> login -> read token)_ and then using `fs` update the local file.\r\nI can invoke it via terminal OR via prompt. It just works.\r\n\r\nCLI | Prompt\r\n------------ | -------------\r\n![in-cli](https://user-images.githubusercontent.com/5556114/113440541-41d51700-940a-11eb-9562-3a820e981890.gif) | ![in-prompt](https://user-images.githubusercontent.com/5556114/113440545-46013480-940a-11eb-9e4b-5fb3b80c0d22.gif)\r\n\r\n\r\nThank you for the script kit. I'm already thinking about my next task to automate.\r\n\r\n",
		"command": "scriptkit-is-cool-heres-how-it-is-helping-me-with-manual-repetitive-tasks",
		"url": "https://github.com/johnlindquist/kit/discussions/108",
		"extension": ".md"
	},
	{
		"menu": "Kit Emojis",
		"description": "View + Copy Emojis",
		"author": "Zach Zeleznick",
		"twitter": "@zzxiv",
		"shortcut": "cmd e",
		"nOTE": "tabs don't play nicely with choices + panels",
		"onTab(\"Choices\", buildChoicesEmojis);\r\n// onTab(\"Panel\", buildReactivePrompt);\r\n\r\n```\r\n</details>\r\n\r\n### Appendix\r\n\r\nI've been a fan of emojipedia.org, but now that I learned the mac keyboard shortcut (`ctrl + cmd + space`), I might use it more often...\r\n\r\n<table>\r\n<tr>\r\n<td>\r\n<img width=\"476\" alt=\"Emoji Keyboard\" src=\"https": "//user-images.githubusercontent.com/5779832/113372024-897d7500-931c-11eb-90be-da508ed18d28.png\">",
		"title": "Emoji Picker ⚒️",
		"user": "zzeleznick",
		"content": "## Emoji Picker ⚒️\r\n\r\nWhile you can press `ctrl + cmd + space` to launch the native emoji keyboard, or select an emoji from newer Mac's touch-bar, sometimes it's fun to build your own!\r\n\r\nHere, you can find two demos – the first uses the panel html feature to enable regex filtering of the emojis, whereas the second uses the built in filtering for choices.\r\n\r\nWhile currently the UI's don't match, perhaps in future releases, the same look could be achieved 😄 \r\n\r\n### Panel Demo\r\n\r\nhttps://user-images.githubusercontent.com/5779832/113371307-e4ae6800-931a-11eb-8e31-bfb8d93aec5d.mp4\r\n\r\n\r\n### Choices Demo\r\n\r\nhttps://user-images.githubusercontent.com/5779832/113371326-e7a95880-931a-11eb-87d6-5f93535ec9a6.mp4\r\n\r\n### Code\r\n<details>\r\n<summary>Click for code</summary>\r\n\r\n```js\r\n// Menu: Kit Emojis\r\n// Description: View + Copy Emojis\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd e\r\n\r\nconst emojisDB = db(\"emojis\", { emojis: {} });\r\nconst emojisRef = emojisDB.get(\"emojis\");\r\n\r\n// NOTE: Should extract this into a lib since emojis db used in kit-discussions ...\r\nconst fetchEmojis = async () => {\r\n  // Could install and use as an npm package, but we just need a k-v map ...\r\n  const emojiURL = 'https://raw.githubusercontent.com/omnidan/node-emoji/master/lib/emoji.json';\r\n  const response = await get(emojiURL);\r\n  const emojis = response.data;\r\n  emojisDB.set(\"emojis\", emojis).write();\r\n}\r\n\r\nconst setupEmojis = async () => {\r\n  const emojis = emojisRef.value();\r\n  if (!emojis || !Object.keys(emojis).length) {\r\n    await fetchEmojis()\r\n  }\r\n  return emojis\r\n}\r\n\r\nconst createRegEx = (input = '') => {\r\n  input = input.trim().toLowerCase()\r\n  // NOTE: don't check length here for snappy ux\r\n  // input = input.length < 3 ? '' : input\r\n  let matcher = input\r\n  try {\r\n    matcher = new RegExp(input)\r\n  } catch (err) {\r\n    console.warn(\"Invalid expression\", input)\r\n  }\r\n  return matcher\r\n}\r\n\r\nconst showEmojis = (emojis) => (input) => {\r\n  const matcher = createRegEx(input)\r\n  const inner = Object.entries(emojis)\r\n    .filter(([k,v]) => k.match(matcher) !== null)\r\n    .map(([k,v]) => `<div class=\"flex h-10 w-full justify-start items-center\">\r\n        <div class=\"text-base font-bold font-sans mr-8\"> ${v} </div>\r\n        <div class=\"text-xs font-mono\"> ${k} </div>\r\n    </div>`).join('\\n');\r\n  const html = `\r\n  <div class=\"grid grid-cols-1\">\r\n   ${inner}\r\n  </div>`\r\n  return html\r\n}\r\n\r\nconst buildEmojisRxPanel = async () => {\r\n  const emojis = await setupEmojis();\r\n  await arg({\r\n    message: \"Search for emoji:\",\r\n    input: \"\",\r\n  }, showEmojis(emojis));\r\n}\r\n\r\nconst buildEmojisChoices = async () => {\r\n  const emojis = await setupEmojis();\r\n  const choices = Object.entries(emojis)\r\n    .map(([k,v]) => {\r\n    return {\r\n      name: k,\r\n      value: v,\r\n      html: `<div> ${v} </div>`\r\n    }\r\n  });\r\n  const emoji = await arg(\"Search for emoji:\", choices);\r\n  copy(emoji);\r\n}\r\n\r\nconst panel = true // would be nice to set based on whether shift is pressed with shortcut cmd\r\n\r\npanel ? await buildEmojisRxPanel() : await buildEmojisChoices();\r\n\r\n\r\n// NOTE: tabs don't play nicely with choices + panels\r\n\r\n// onTab(\"Choices\", buildChoicesEmojis);\r\n// onTab(\"Panel\", buildReactivePrompt);\r\n\r\n```\r\n</details>\r\n\r\n### Appendix\r\n\r\nI've been a fan of emojipedia.org, but now that I learned the mac keyboard shortcut (`ctrl + cmd + space`), I might use it more often...\r\n\r\n<table>\r\n<tr>\r\n<td>\r\n<img width=\"476\" alt=\"Emoji Keyboard\" src=\"https://user-images.githubusercontent.com/5779832/113372024-897d7500-931c-11eb-90be-da508ed18d28.png\">\r\n</td>\r\n<td>\r\n<img width=\"455\" alt=\"Emoji Keyboard Search\" src=\"https://user-images.githubusercontent.com/5779832/113372021-86828480-931c-11eb-8e4f-d714ef39c46e.png\">\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n Mac Emoji Keyboard on terminal cursor\r\n</td>\r\n<td>\r\n Mac Emoji Keyboard supports search\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n<table>\r\n<tr>\r\n<td>\r\n<img width=\"621\" alt=\"Emoji Character Viewer\" src=\"https://user-images.githubusercontent.com/5779832/113372177-e2e5a400-931c-11eb-821e-97992adb56e9.png\">\r\n</td>\r\n<td>\r\n<img width=\"616\" alt=\"Emoji Viewer Search\" src=\"https://user-images.githubusercontent.com/5779832/113372171-dfeab380-931c-11eb-8976-7f84725b8b48.png\">\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n Mac Emoji Character Viewer Menu\r\n</td>\r\n<td>\r\n Mac Character Viewer Menu also supports search\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n**PS.** For future work, it could be cool to extend the emoji list (see instructions on [node-emoji](https://www.npmjs.com/package/node-emoji)) to support adding custom emojis.",
		"command": "emoji-picker",
		"url": "https://github.com/johnlindquist/kit/discussions/107",
		"extension": ".md"
	},
	{
		"menu": "Kit Colors",
		"description": "View CSS Colors",
		"author": "Zach Zeleznick",
		"twitter": "@zzxiv",
		"inspired by colours.neilorangepeel.com\r\n// Also see colors.commutercreative.com/grid\r\n\r\nconst colors = {\"aliceblue\"": "[240,248,255],\"antiquewhite\":[250,235,215],\"aqua\":[0,255,255],\"aquamarine\":[127,255,212],\"azure\":[240,255,255],\"beige\":[245,245,220],\"bisque\":[255,228,196],\"black\":[0,0,0],\"blanchedalmond\":[255,235,205],\"blue\":[0,0,255],\"blueviolet\":[138,43,226],\"brown\":[165,42,42],\"burlywood\":[222,184,135],\"cadetblue\":[95,158,160],\"chartreuse\":[127,255,0],\"chocolate\":[210,105,30],\"coral\":[255,127,80],\"cornflowerblue\":[100,149,237],\"cornsilk\":[255,248,220],\"crimson\":[220,20,60],\"cyan\":[0,255,255],\"darkblue\":[0,0,139],\"darkcyan\":[0,139,139],\"darkgoldenrod\":[184,134,11],\"darkgray\":[169,169,169],\"darkgreen\":[0,100,0],\"darkgrey\":[169,169,169],\"darkkhaki\":[189,183,107],\"darkmagenta\":[139,0,139],\"darkolivegreen\":[85,107,47],\"darkorange\":[255,140,0],\"darkorchid\":[153,50,204],\"darkred\":[139,0,0],\"darksalmon\":[233,150,122],\"darkseagreen\":[143,188,143],\"darkslateblue\":[72,61,139],\"darkslategray\":[47,79,79],\"darkslategrey\":[47,79,79],\"darkturquoise\":[0,206,209],\"darkviolet\":[148,0,211],\"deeppink\":[255,20,147],\"deepskyblue\":[0,191,255],\"dimgray\":[105,105,105],\"dimgrey\":[105,105,105],\"dodgerblue\":[30,144,255],\"firebrick\":[178,34,34],\"floralwhite\":[255,250,240],\"forestgreen\":[34,139,34],\"fuchsia\":[255,0,255],\"gainsboro\":[220,220,220],\"ghostwhite\":[248,248,255],\"gold\":[255,215,0],\"goldenrod\":[218,165,32],\"gray\":[128,128,128],\"green\":[0,128,0],\"greenyellow\":[173,255,47],\"grey\":[128,128,128],\"honeydew\":[240,255,240],\"hotpink\":[255,105,180],\"indianred\":[205,92,92],\"indigo\":[75,0,130],\"ivory\":[255,255,240],\"khaki\":[240,230,140],\"lavender\":[230,230,250],\"lavenderblush\":[255,240,245],\"lawngreen\":[124,252,0],\"lemonchiffon\":[255,250,205],\"lightblue\":[173,216,230],\"lightcoral\":[240,128,128],\"lightcyan\":[224,255,255],\"lightgoldenrodyellow\":[250,250,210],\"lightgray\":[211,211,211],\"lightgreen\":[144,238,144],\"lightgrey\":[211,211,211],\"lightpink\":[255,182,193],\"lightsalmon\":[255,160,122],\"lightseagreen\":[32,178,170],\"lightskyblue\":[135,206,250],\"lightslategray\":[119,136,153],\"lightslategrey\":[119,136,153],\"lightsteelblue\":[176,196,222],\"lightyellow\":[255,255,224],\"lime\":[0,255,0],\"limegreen\":[50,205,50],\"linen\":[250,240,230],\"magenta\":[255,0,255],\"maroon\":[128,0,0],\"mediumaquamarine\":[102,205,170],\"mediumblue\":[0,0,205],\"mediumorchid\":[186,85,211],\"mediumpurple\":[147,112,219],\"mediumseagreen\":[60,179,113],\"mediumslateblue\":[123,104,238],\"mediumspringgreen\":[0,250,154],\"mediumturquoise\":[72,209,204],\"mediumvioletred\":[199,21,133],\"midnightblue\":[25,25,112],\"mintcream\":[245,255,250],\"mistyrose\":[255,228,225],\"moccasin\":[255,228,181],\"navajowhite\":[255,222,173],\"navy\":[0,0,128],\"oldlace\":[253,245,230],\"olive\":[128,128,0],\"olivedrab\":[107,142,35],\"orange\":[255,165,0],\"orangered\":[255,69,0],\"orchid\":[218,112,214],\"palegoldenrod\":[238,232,170],\"palegreen\":[152,251,152],\"paleturquoise\":[175,238,238],\"palevioletred\":[219,112,147],\"papayawhip\":[255,239,213],\"peachpuff\":[255,218,185],\"peru\":[205,133,63],\"pink\":[255,192,203],\"plum\":[221,160,221],\"powderblue\":[176,224,230],\"purple\":[128,0,128],\"rebeccapurple\":[102,51,153],\"red\":[255,0,0],\"rosybrown\":[188,143,143],\"royalblue\":[65,105,225],\"saddlebrown\":[139,69,19],\"salmon\":[250,128,114],\"sandybrown\":[244,164,96],\"seagreen\":[46,139,87],\"seashell\":[255,245,238],\"sienna\":[160,82,45],\"silver\":[192,192,192],\"skyblue\":[135,206,235],\"slateblue\":[106,90,205],\"slategray\":[112,128,144],\"slategrey\":[112,128,144],\"snow\":[255,250,250],\"springgreen\":[0,255,127],\"steelblue\":[70,130,180],\"tan\":[210,180,140],\"teal\":[0,128,128],\"thistle\":[216,191,216],\"tomato\":[255,99,71],\"turquoise\":[64,224,208],\"violet\":[238,130,238],\"wheat\":[245,222,179],\"white\":[255,255,255],\"whitesmoke\":[245,245,245],\"yellow\":[255,255,0],\"yellowgreen\":[154,205,50]};",
		"adapted from https": "//stackoverflow.com/a/3943023",
		"await arg(\"all\", showCategory())\r\n// NOTE": "current api requires typing before panel is displayed if we pass in a function like (input) => {}",
		"title": "CSS Named Colors 🎨",
		"user": "zzeleznick",
		"content": "## CSS Named Colors\r\n\r\nI've been an admirer of the microsite [colours.neilorangepeel.com](colours.neilorangepeel.com) that displays the named css colors, which I've used for selecting background colors for [`reveal.js`](https://github.com/hakimel/reveal.js/) presentations.\r\n\r\nUsing the new panel feature (see #95 and #100), I built the colours microsite in Kit. \r\n\r\n## Demo\r\n![kit-colors](https://user-images.githubusercontent.com/5779832/113340865-47830d80-92e1-11eb-850b-750b80502b7a.gif)\r\n\r\n## Notes\r\n- I expected the tabs component to scroll on x-overflow instead of increasing the width of the page\r\n- For each tab, I'd ideally be able to set a custom style (e.g. solid background) or provide an html element instead of displaying the color text\r\n- Text input currently doesn't do anything – I was hoping that the panel would be displayed on the first render without needing to type a character to show the panel\r\n\r\n## Code\r\n\r\n<details>\r\n<summary>\r\nClick for code\r\n</summary>\r\n\r\n```js\r\n// Menu: Kit Colors\r\n// Description: View CSS Colors\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n\r\n// Inspired by colours.neilorangepeel.com\r\n// Also see colors.commutercreative.com/grid\r\n\r\nconst colors = {\"aliceblue\":[240,248,255],\"antiquewhite\":[250,235,215],\"aqua\":[0,255,255],\"aquamarine\":[127,255,212],\"azure\":[240,255,255],\"beige\":[245,245,220],\"bisque\":[255,228,196],\"black\":[0,0,0],\"blanchedalmond\":[255,235,205],\"blue\":[0,0,255],\"blueviolet\":[138,43,226],\"brown\":[165,42,42],\"burlywood\":[222,184,135],\"cadetblue\":[95,158,160],\"chartreuse\":[127,255,0],\"chocolate\":[210,105,30],\"coral\":[255,127,80],\"cornflowerblue\":[100,149,237],\"cornsilk\":[255,248,220],\"crimson\":[220,20,60],\"cyan\":[0,255,255],\"darkblue\":[0,0,139],\"darkcyan\":[0,139,139],\"darkgoldenrod\":[184,134,11],\"darkgray\":[169,169,169],\"darkgreen\":[0,100,0],\"darkgrey\":[169,169,169],\"darkkhaki\":[189,183,107],\"darkmagenta\":[139,0,139],\"darkolivegreen\":[85,107,47],\"darkorange\":[255,140,0],\"darkorchid\":[153,50,204],\"darkred\":[139,0,0],\"darksalmon\":[233,150,122],\"darkseagreen\":[143,188,143],\"darkslateblue\":[72,61,139],\"darkslategray\":[47,79,79],\"darkslategrey\":[47,79,79],\"darkturquoise\":[0,206,209],\"darkviolet\":[148,0,211],\"deeppink\":[255,20,147],\"deepskyblue\":[0,191,255],\"dimgray\":[105,105,105],\"dimgrey\":[105,105,105],\"dodgerblue\":[30,144,255],\"firebrick\":[178,34,34],\"floralwhite\":[255,250,240],\"forestgreen\":[34,139,34],\"fuchsia\":[255,0,255],\"gainsboro\":[220,220,220],\"ghostwhite\":[248,248,255],\"gold\":[255,215,0],\"goldenrod\":[218,165,32],\"gray\":[128,128,128],\"green\":[0,128,0],\"greenyellow\":[173,255,47],\"grey\":[128,128,128],\"honeydew\":[240,255,240],\"hotpink\":[255,105,180],\"indianred\":[205,92,92],\"indigo\":[75,0,130],\"ivory\":[255,255,240],\"khaki\":[240,230,140],\"lavender\":[230,230,250],\"lavenderblush\":[255,240,245],\"lawngreen\":[124,252,0],\"lemonchiffon\":[255,250,205],\"lightblue\":[173,216,230],\"lightcoral\":[240,128,128],\"lightcyan\":[224,255,255],\"lightgoldenrodyellow\":[250,250,210],\"lightgray\":[211,211,211],\"lightgreen\":[144,238,144],\"lightgrey\":[211,211,211],\"lightpink\":[255,182,193],\"lightsalmon\":[255,160,122],\"lightseagreen\":[32,178,170],\"lightskyblue\":[135,206,250],\"lightslategray\":[119,136,153],\"lightslategrey\":[119,136,153],\"lightsteelblue\":[176,196,222],\"lightyellow\":[255,255,224],\"lime\":[0,255,0],\"limegreen\":[50,205,50],\"linen\":[250,240,230],\"magenta\":[255,0,255],\"maroon\":[128,0,0],\"mediumaquamarine\":[102,205,170],\"mediumblue\":[0,0,205],\"mediumorchid\":[186,85,211],\"mediumpurple\":[147,112,219],\"mediumseagreen\":[60,179,113],\"mediumslateblue\":[123,104,238],\"mediumspringgreen\":[0,250,154],\"mediumturquoise\":[72,209,204],\"mediumvioletred\":[199,21,133],\"midnightblue\":[25,25,112],\"mintcream\":[245,255,250],\"mistyrose\":[255,228,225],\"moccasin\":[255,228,181],\"navajowhite\":[255,222,173],\"navy\":[0,0,128],\"oldlace\":[253,245,230],\"olive\":[128,128,0],\"olivedrab\":[107,142,35],\"orange\":[255,165,0],\"orangered\":[255,69,0],\"orchid\":[218,112,214],\"palegoldenrod\":[238,232,170],\"palegreen\":[152,251,152],\"paleturquoise\":[175,238,238],\"palevioletred\":[219,112,147],\"papayawhip\":[255,239,213],\"peachpuff\":[255,218,185],\"peru\":[205,133,63],\"pink\":[255,192,203],\"plum\":[221,160,221],\"powderblue\":[176,224,230],\"purple\":[128,0,128],\"rebeccapurple\":[102,51,153],\"red\":[255,0,0],\"rosybrown\":[188,143,143],\"royalblue\":[65,105,225],\"saddlebrown\":[139,69,19],\"salmon\":[250,128,114],\"sandybrown\":[244,164,96],\"seagreen\":[46,139,87],\"seashell\":[255,245,238],\"sienna\":[160,82,45],\"silver\":[192,192,192],\"skyblue\":[135,206,235],\"slateblue\":[106,90,205],\"slategray\":[112,128,144],\"slategrey\":[112,128,144],\"snow\":[255,250,250],\"springgreen\":[0,255,127],\"steelblue\":[70,130,180],\"tan\":[210,180,140],\"teal\":[0,128,128],\"thistle\":[216,191,216],\"tomato\":[255,99,71],\"turquoise\":[64,224,208],\"violet\":[238,130,238],\"wheat\":[245,222,179],\"white\":[255,255,255],\"whitesmoke\":[245,245,245],\"yellow\":[255,255,0],\"yellowgreen\":[154,205,50]};\r\nconst colorGroups = {\"pink\":[\"pink\",\"lightpink\",\"hotpink\",\"deeppink\",\"palevioletred\",\"mediumvioletred\"],\"purple\":[\"lavender\",\"thistle\",\"plum\",\"orchid\",\"violet\",\"fuchsia\",\"magenta\",\"mediumorchid\",\"darkorchid\",\"darkviolet\",\"blueviolet\",\"darkmagenta\",\"purple\",\"mediumpurple\",\"mediumslateblue\",\"slateblue\",\"darkslateblue\",\"rebeccapurple\",\"indigo\"],\"red\":[\"lightsalmon\",\"salmon\",\"darksalmon\",\"lightcoral\",\"indianred\",\"crimson\",\"red\",\"firebrick\",\"darkred\"],\"orange\":[\"orange\",\"darkorange\",\"coral\",\"tomato\",\"orangered\"],\"yellow\":[\"gold\",\"yellow\",\"lightyellow\",\"lemonchiffon\",\"lightgoldenrodyellow\",\"papayawhip\",\"moccasin\",\"peachpuff\",\"palegoldenrod\",\"khaki\",\"darkkhaki\"],\"green\":[\"greenyellow\",\"chartreuse\",\"lawngreen\",\"lime\",\"limegreen\",\"palegreen\",\"lightgreen\",\"mediumspringgreen\",\"springgreen\",\"mediumseagreen\",\"seagreen\",\"forestgreen\",\"green\",\"darkgreen\",\"yellowgreen\",\"olivedrab\",\"darkolivegreen\",\"mediumaquamarine\",\"darkseagreen\",\"lightseagreen\",\"darkcyan\",\"teal\"],\"cyan\":[\"aqua\",\"cyan\",\"lightcyan\",\"paleturquoise\",\"aquamarine\",\"turquoise\",\"mediumturquoise\",\"darkturquoise\"],\"blue\":[\"cadetblue\",\"steelblue\",\"lightsteelblue\",\"lightblue\",\"powderblue\",\"lightskyblue\",\"skyblue\",\"cornflowerblue\",\"deepskyblue\",\"dodgerblue\",\"royalblue\",\"blue\",\"mediumblue\",\"darkblue\",\"navy\",\"midnightblue\"],\"brown\":[\"cornsilk\",\"blanchedalmond\",\"bisque\",\"navajowhite\",\"wheat\",\"burlywood\",\"tan\",\"rosybrown\",\"sandybrown\",\"goldenrod\",\"darkgoldenrod\",\"peru\",\"chocolate\",\"olive\",\"saddlebrown\",\"sienna\",\"brown\",\"maroon\"],\"white\":[\"white\",\"snow\",\"honeydew\",\"mintcream\",\"azure\",\"aliceblue\",\"ghostwhite\",\"whitesmoke\",\"seashell\",\"beige\",\"oldlace\",\"floralwhite\",\"ivory\",\"antiquewhite\",\"linen\",\"lavenderblush\",\"mistyrose\"],\"gray\":[\"gainsboro\",\"lightgray\",\"silver\",\"darkgray\",\"dimgray\",\"gray\",\"lightslategray\",\"slategray\",\"darkslategray\",\"black\"]}\r\nconst allColors = Object.values(colorGroups).reduce((a,b) => a.concat(b), []);\r\n\r\n// Adapted from https://stackoverflow.com/a/3943023\r\nconst pickTextColor = ([r, g, b]) => {\r\n  const L = r * 0.299 + g * 0.587 + b * 0.114;\r\n  return (L > 186) ? \"black\" : \"white\";\r\n}\r\n\r\nconst componentToHex = (v) => v.toString(16).padStart(2, 0)\r\n\r\nconst rgbToHex = ([r, g, b]) => `#${[r,g,b].map(componentToHex).join('').toUpperCase()}`\r\n\r\nconst formatRgb = ([r, g, b]) => `rgb(${r},${g},${b})`\r\n\r\nconst showCategory = (category) => {\r\n  const dataset = category ? colorGroups[category] : allColors;\r\n  const inner = dataset.map(name => {\r\n    const rgb = colors[name]\r\n    // console.log(`rgb: ${rgb}, name: ${name}`);\r\n    const color = pickTextColor(rgb);\r\n    return `<div class=\"flex flex-col h-20 w-full justify-center items-center\" style=\"background: ${name}\">\r\n        <div style=\"color:${color}\" class=\"text-base font-bold font-sans\"> ${name.toUpperCase()} </div>\r\n        <div style=\"color:${color}\" class=\"text-xs font-mono\"> ${rgbToHex(rgb)} ${formatRgb(rgb)} </div>\r\n    </div>`\r\n  }).join('\\n');\r\n const html = `\r\n  <div class=\"grid grid-cols-1\">\r\n   ${inner}\r\n  </div>`\r\n  // console.log(`category: ${category}`, html);\r\n  return html\r\n}\r\n\r\nconst buildTabs = () => {\r\n  const groups = Object.keys(colorGroups);\r\n  let tabs = [ {\r\n    name: \"All\",\r\n    method: async () => await arg(\"all\", showCategory())\r\n  }];\r\n  groups.map(name => {\r\n    tabs.push( { name, method: async () => await arg(name, showCategory(name)) } )\r\n  });\r\n  tabs.map(({name, method}) => {\r\n   onTab(name, method);\r\n  });\r\n}\r\n\r\n// await arg(\"all\", showCategory())\r\n// NOTE: current api requires typing before panel is displayed if we pass in a function like (input) => {}\r\n\r\nbuildTabs();\r\n```\r\n</details>",
		"command": "css-named-colors",
		"url": "https://github.com/johnlindquist/kit/discussions/105",
		"extension": ".md"
	},
	{
		"menu": "GitHub Advanced Search",
		"description": "Search GitHub for Code",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"title": "GitHub Advanced Search",
		"user": "johnlindquist",
		"content": "This isn't nearly as fancy as it sounds, but I use it fairly often 😇\r\n\r\n```js\r\n//Menu: GitHub Advanced Search\r\n//Description: Search GitHub for Code\r\n//Author: John Lindquist\r\n//Twitter: @johnlindquist\r\n\r\nlet languages = [\r\n  \"JavaScript\",\r\n  \"TypeScript\",\r\n  \"C\",\r\n  \"C#\",\r\n  \"C++\",\r\n  \"CoffeeScript\",\r\n  \"CSS\",\r\n  \"Dart\",\r\n  \"DM\",\r\n  \"Elixir\",\r\n  \"Go\",\r\n  \"Groovy\",\r\n  \"HTML\",\r\n  \"Java\",\r\n  \"Kotlin\",\r\n  \"Objective-C\",\r\n  \"Perl\",\r\n  \"PHP\",\r\n  \"PowerShell\",\r\n  \"Python\",\r\n  \"Ruby\",\r\n  \"Rust\",\r\n  \"Scala\",\r\n  \"Shell\",\r\n  \"Swift\",\r\n]\r\n\r\nlet query = await arg(\"Enter search query:\")\r\nquery = query.replace(\" \", \"+\")\r\nlet lang = await arg(\"Select language:\", languages)\r\n\r\nlet url = `https://github.com/search?l=&q=${query}+language%3A${lang}&type=code`\r\n\r\nexec(`open \"${url}\"`)\r\n```",
		"command": "github-advanced-search",
		"url": "https://github.com/johnlindquist/kit/discussions/104",
		"extension": ".md"
	},
	{
		"menu": "Kit Discusssions",
		"description": "View Kit Discussions",
		"author": "Zach Zeleznick",
		"twitter": "@zzxiv",
		"const humanizeDuration = await npm('humanize-duration')\r\n\r\nconst emojisDB = db(\"emojis\", { emojis": "{} });",
		"nOTE": "can use `categoryId` in discussions query",
		"to limit results or could just fetch all and filter\r\n\r\nconst discussionInnerQuery = `\r\n# type": "DiscussionConnection",
		"title": "Show Github Discussions of Kit repo",
		"user": "zzeleznick",
		"content": "## Kit Discussions\r\n\r\nI was feeling inspired and riffed on #75 and #96 to render the kit repo's discussions in kit.\r\n\r\n### Demo\r\n![kit-discussions](https://user-images.githubusercontent.com/5779832/113230234-6d5ed280-924d-11eb-99b8-4b0838eee8c9.gif)\r\n\r\nI've also been meaning to play around (also see procrastinating) with graphql, and since I couldn't find a REST API for Github's discussions, writing this script was a good intro :)\r\n\r\n### Notes\r\n\r\n- Uses the improved support for html (e.g. links) showcased in #95 to help instruct the user how to create an access token which is set as an environment variable\r\n- Elected to write my own humanize duration function instead of requiring `humanize-duration` to hit 0 external dependencies\r\n- Attempted to match time labels with Github's UI, but noticed that their UI appears to round days based on duration instead of using calendar days (see below)\r\n\r\ne.g.\r\n<table>\r\n <tr>\r\n<td>\r\n<img width=\"525\" alt=\"6 days ago actual\" src=\"https://user-images.githubusercontent.com/5779832/113231006-1a861a80-924f-11eb-9706-d98956b68c40.png\">\r\n</td>\r\n<td>\r\n<img width=\"556\" alt=\"7 days ago rounded\" src=\"https://user-images.githubusercontent.com/5779832/113231004-18bc5700-924f-11eb-91c9-35448536f6d1.png\">\r\n</td>\r\n</tr>\r\n<tr>\r\n<td> March 25th appearing as 6 days ago</d>\r\n<td> March 25th appearing as 7 days ago</d>\r\n</tr>\r\n</table>\r\n\r\n### Quirks\r\n\r\n- Downloads and caches a json object of emojis instead of requiring `node-emoji`\r\n- Caches the github discussion categories and does not set a TTL / check for future updates\r\n\r\n### Code\r\n\r\n<details>\r\n<summary>Click for (not very clean) code </summary>\r\n\r\n```js\r\n// Menu: Kit Discusssions\r\n// Description: View Kit Discussions\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n\r\nconst {focusTab} = await kit('chrome')\r\n// const humanizeDuration = await npm('humanize-duration')\r\n\r\nconst emojisDB = db(\"emojis\", { emojis: {} });\r\nconst emojisRef = emojisDB.get(\"emojis\");\r\nconst categoriesDB = db(\"kit-discussions\", { categories: [] });\r\nconst categoriesRef = categoriesDB.get(\"categories\");\r\n\r\nconst githubURL = \"https://api.github.com/graphql\";\r\n\r\nlet token = env.GITHUB_ACCESS_TOKEN;\r\n\r\nif (!token) {\r\n  const element = `\r\n  <div class=\"flex flex-col justify-center\">\r\n    <div>\r\n      <a href=\"https://github.com/settings/tokens/new\">Create a token</a> with \"public_repo\" enabled.\r\n    </div>\r\n    <br>\r\n    <div>\r\n      Then, copy + paste the token above or set <code>GITHUB_REPO_TOKEN</code> inside <code>~/.kenv/.env</code>\r\n    </div>\r\n  </div>`\r\n\r\n  token = await env(\"GITHUB_ACCESS_TOKEN\", {\r\n    info: `Create and enter your personal access token`,\r\n    choices: element,\r\n  });\r\n}\r\n\r\nconst fetchEmojis = async () => {\r\n  // Could install and use as an npm package, but we just need a k-v map ...\r\n  const emojiURL = 'https://raw.githubusercontent.com/omnidan/node-emoji/master/lib/emoji.json';\r\n  const response = await get(emojiURL);\r\n  const emojis = response.data;\r\n  // console.log(JSON.stringify(emojis, null, 2));\r\n  emojisDB.set(\"emojis\", emojis).write();\r\n}\r\n\r\nconst setupEmojis = async () => {\r\n  const emojis = emojisRef.value();\r\n  if (!emojis || !Object.keys(emojis).length) {\r\n    await fetchEmojis()\r\n  }\r\n  return emojis\r\n}\r\n\r\nconst lookupEmoji = (key) => {\r\n  const emojis = emojisRef.value();\r\n  return emojis[key.slice(1, key.length - 1)]\r\n}\r\n\r\nconst config = {\r\n  headers: {\r\n    \"Authorization\": `Bearer ${token}`,\r\n    \"GraphQL-Features\": \"discussions_api\",\r\n  }\r\n}\r\n\r\nconst categoriesQuery = `\r\nquery {\r\n  repository(owner: \"johnlindquist\", name: \"kit\") {\r\n    discussionCategories(first: 10) {\r\n      # type: DiscussionConnection\r\n      totalCount # Int!\r\n      nodes {\r\n        id,\r\n        name,\r\n        emoji,\r\n        # emojiHTML,\r\n        description,\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst fetchCategories = async () => {\r\n  let response;\r\n  try {\r\n    response = await post(githubURL,\r\n      {\r\n        query: categoriesQuery\r\n      },\r\n      config\r\n    );\r\n  }\r\n  catch (err) {\r\n    console.warn(\"fetchCategories failed:\", err);\r\n    return\r\n  }\r\n  const graphqlResponse = response.data;\r\n  // console.log(JSON.stringify(categories, null, 2));\r\n  const {\r\n    data: {\r\n      repository: {\r\n        discussionCategories: {\r\n          totalCount,\r\n          nodes\r\n        }\r\n      }\r\n    }\r\n  } = graphqlResponse;\r\n  categoriesDB.set(\"categories\", nodes).write();\r\n}\r\n\r\nconst setupCategories = async () => {\r\n  const categories = categoriesRef.value();\r\n  if (!categories || !categories.length) {\r\n    await fetchCategories()\r\n  }\r\n  return categories\r\n}\r\n\r\n// NOTE: can use `categoryId` in discussions query\r\n// to limit results or could just fetch all and filter\r\n\r\nconst discussionInnerQuery = `\r\n# type: DiscussionConnection\r\n  totalCount # Int!\r\n  nodes {\r\n    # type: Discussion\r\n    id,\r\n    title,\r\n    # bodyText,\r\n    createdAt,\r\n    resourcePath,\r\n    category {\r\n      id,\r\n      name,\r\n      emoji,\r\n    },\r\n    author {\r\n      login,\r\n      # avatarUrl,\r\n    }\r\n  }\r\n`\r\n\r\nconst allDiscussionsQuery = `\r\nquery {\r\n  repository(owner: \"johnlindquist\", name: \"kit\") {\r\n    discussions(first: 10, orderBy: {\r\n      field: CREATED_AT,\r\n      direction: DESC,\r\n    }) {\r\n      ${discussionInnerQuery}\r\n    }\r\n  }\r\n}`\r\n\r\nconst buildCategoryQuery = (categoryId) => `\r\nquery {\r\n  repository(owner: \"johnlindquist\", name: \"kit\") {\r\n    discussions(first: 10, categoryId: \"${categoryId}\", orderBy: {\r\n      field: CREATED_AT,\r\n      direction: DESC,\r\n    }) {\r\n      ${discussionInnerQuery}\r\n    }\r\n  }\r\n}`\r\n\r\nconst fetchDiscussions = async (categoryId = \"\") => {\r\n  let response;\r\n  const query = categoryId ? buildCategoryQuery(categoryId) : allDiscussionsQuery;\r\n  try {\r\n    response = await post(githubURL,\r\n      {\r\n        query,\r\n      },\r\n      config\r\n    );\r\n  }\r\n  catch (err) {\r\n    console.warn(\"fetchDiscussions failed:\", err);\r\n    return\r\n  }\r\n  const {data, errors } = response.data;\r\n  if (errors) {\r\n    console.warn(\"fetchDiscussions errors:\", errors);\r\n    // todo: handle errors\r\n  }\r\n  const {\r\n    repository: {\r\n      discussions: {\r\n        totalCount,\r\n        nodes\r\n      }\r\n    }\r\n  } = data;\r\n  // console.log(JSON.stringify(nodes, null, 2));\r\n  return nodes;\r\n}\r\n\r\nconst allDiscussions = async () => await fetchDiscussions();\r\n\r\nconst buildHtml = ({emoji}) => {\r\n  const glyph = lookupEmoji(emoji)\r\n  return `<div class=\"flex justify-center\">\r\n    <div> ${glyph} </div>\r\n  </div>\r\n  `\r\n}\r\n\r\nconst humanizeDuration = (duration) => {\r\n  // intend to mirror `humanizeDuration(duration, { round: true, largest: 1 })`\r\n  // note that 36 hours (1.5 days) would round to 2 days which isn't always the goal\r\n  // e.g.\r\n  // '2021-03-30T06:00:00Z' <> '2021-03-31T18:00:00Z' 36 hours, expect 1 vs 2\r\n  // '2021-03-30T18:00:00Z' <> '2021-04-01T06:00:00Z' 36 hours, expect 2\r\n  const components = {\r\n    \"seconds\": 1000,\r\n    \"minutes\": 60000,\r\n    \"hours\":   3600000,\r\n    \"days\":    86400000,\r\n  }\r\n  const units = Object.keys(components);\r\n  for (let i = units.length - 1; i > -1; i--) {\r\n    let unit = units[i];\r\n    const divisor = components[unit];\r\n    const val = duration / divisor;\r\n    const fval = Math.floor(val);\r\n    const rval = Math.round(val);\r\n    if (fval === 0) {\r\n      continue\r\n    }\r\n    unit = rval === 1 ? unit.slice(0, unit.length -1) : unit;\r\n    return `${rval} ${unit}`\r\n  }\r\n}\r\n\r\nconst humanizeTime = (createdAt, fakeTime) => {\r\n  const then = new Date(createdAt);\r\n  const now = fakeTime ? new Date(fakeTime) : new Date();\r\n  let duration = now - then; // implicitly calls getTime();\r\n  // NOTE: Github UI rounds (so this interesting)\r\n  if (duration > 86400000) { // handle rounding case for days\r\n    const loffset = (then.getHours() - 12) * 3600000;\r\n    const roffset = (12 - now.getHours()) * 3600000;\r\n    duration = duration + loffset + roffset;\r\n  }\r\n  if (duration < 2592000000) { // within 30 days (in ms)\r\n    return `${humanizeDuration(duration)} ago`;\r\n  }\r\n  const sameYear = now.getYear() === then.getYear();\r\n  const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n  const options = { timeZone, year: sameYear ? undefined : 'numeric', month: 'short', day: 'numeric' };\r\n  return `on ${then.toLocaleDateString('en-US', options)}`\r\n}\r\n\r\nconst buildChoice = (node) => {\r\n  const {\r\n    title,\r\n    resourcePath,\r\n    createdAt,\r\n    category: {\r\n      name,\r\n      emoji,\r\n    },\r\n    author: {\r\n      login\r\n    },\r\n  } = node;\r\n  const url = `https://github.com${resourcePath}`\r\n  const description = `${login} created ${humanizeTime(createdAt)} in ${name}`\r\n  const html = buildHtml({emoji})\r\n  return {\r\n      name: title,\r\n      value: url,\r\n      description,\r\n      html,\r\n  }\r\n}\r\n\r\nconst showCategory = async (categoryId) => {\r\n  const nodes = await fetchDiscussions(categoryId);\r\n  const choices = nodes.map(buildChoice);\r\n  const selectedIssue = await arg(\"Search discussions:\", choices);\r\n  focusTab(selectedIssue);\r\n}\r\n\r\nconst buildTabs = async () => {\r\n  const categories = await setupCategories();\r\n  let tabs = [ {\r\n    name: \"All\",\r\n    method: showCategory\r\n  }];\r\n  categories.map(({name, id}) => {\r\n    tabs.push( { name, method: async () => await showCategory(id) } )\r\n  });\r\n  tabs.map(({name, method}) => {\r\n   onTab(name, method);\r\n  });\r\n}\r\n\r\nawait setupEmojis();\r\n\r\nbuildTabs();\r\n\r\n```\r\n</details>",
		"command": "show-github-discussions-of-kit-repo",
		"url": "https://github.com/johnlindquist/kit/discussions/103",
		"extension": ".md"
	},
	{
		"menu": "Lannonbr.com Garden",
		"description": "Search posts on lannonbr.com",
		"author": "Benjamin Lannon",
		"twitter": "@lannonbr",
		"title": "Searching my Digital Garden",
		"user": "lannonbr",
		"content": "Based on [An Alfred Workflow](https://lannonbr.com/blog/search-digital-garden-alfred) I've previously written, I wrote a script with the same functionality of search through the posts on my site, open a post in a chrome tab, and copy the link to the clipboard:\r\n\r\n```js\r\n// Menu: Lannonbr.com Garden\r\n// Description: Search posts on lannonbr.com\r\n// Author: Benjamin Lannon\r\n// Twitter: @lannonbr\r\n\r\nlet resp = await get(\"https://lannonbr.com/posts.json\");\r\n\r\nlet post = await arg(\"What post do you want to read\", resp.data.items);\r\n\r\nlet { focusTab } = await kit(\"chrome\");\r\n\r\nfocusTab(post);\r\ncopy(post);\r\n```",
		"command": "searching-my-digital-garden",
		"url": "https://github.com/johnlindquist/kit/discussions/102",
		"extension": ".md"
	},
	{
		"title": "Run scripts from Stream Deck with Script Kit",
		"user": "johnlindquist",
		"content": "https://user-images.githubusercontent.com/36073/113206178-61aee400-922c-11eb-8c62-573f8beca69d.mp4\r\n\r\nYou can find a \"Prepare Script for Stream Deck\" command in the main menu:\r\n\r\n![CleanShot 2021-09-14 at 07 45 45](https://user-images.githubusercontent.com/36073/133269177-18b1ddec-21c1-4b2e-9d12-903ea77bc072.png)\r\n\r\n(the code examples below are a bit out-dated)\r\n",
		"command": "run-scripts-from-stream-deck-with-script-kit",
		"url": "https://github.com/johnlindquist/kit/discussions/101",
		"extension": ".md"
	},
	{
		"menu": "Rotate Dropped Image",
		"description": "Drop an image in and rotate it",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"title": "Flexin' new features (drag and drop + panel)",
		"user": "johnlindquist",
		"content": "\r\n\r\nhttps://user-images.githubusercontent.com/36073/113066114-36b68880-9177-11eb-9499-4654bc3ef10a.mp4\r\n\r\n> Updated to new drop API on 4/11/2021\r\n\r\n[Install rotate-dropped-image](https://scriptkit.app/api/new?name=rotate-dropped-image&url=https://gist.githubusercontent.com/johnlindquist/be0b09b3a15232527ed0230056c1e5cb/raw/22d0ffce812e88725d8e4687cc95b7781165e24c/rotate-dropped-image.js)\r\n\r\n```js\r\n// Menu: Rotate Dropped Image\r\n// Description: Drop an image in and rotate it\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet sharp = await npm(\"sharp\")\r\n\r\nlet [file] = await arg({\r\n  placeholder: \"Drop an image\",\r\n  drop: true,\r\n  ignoreBlur: true,\r\n})\r\n\r\nawait arg(\"Rotate:\", async input => {\r\n  let rotate = 0\r\n  try {\r\n    rotate = parseInt(input || 0, 10)\r\n  } catch {}\r\n  let buffer = await sharp(file.path)\r\n    .rotate(rotate)\r\n    .toBuffer()\r\n\r\n  return `\r\n<img style=\"height:10rem\" src=\"data:image/jpg;base64,${buffer.toString(\r\n    \"base64\"\r\n  )}\" alt=\"\">\r\n`\r\n})\r\n\r\n```",
		"command": "flexin-new-features-drag-and-drop-panel",
		"url": "https://github.com/johnlindquist/kit/discussions/100",
		"extension": ".md"
	},
	{
		"description": "Open the Discussions pane of a GitHub repo",
		"author": "Benjamin Lannon",
		"twitter": "@lannonbr",
		"title": "Open GitHub Discussion listing of repo",
		"user": "lannonbr",
		"content": "Did a quick remix on the `chrome-tab` script @johnlindquist made so I could quickly navigate to the discussions tab of any repo.\r\n\r\n```js\r\n// Description: Open the Discussions pane of a GitHub repo\r\n// Author: Benjamin Lannon\r\n// Twitter: @lannonbr\r\n\r\nlet { focusTab } = await kit('chrome')\r\nlet repo = await arg('Enter repo (ex: johnlindquist/kit):')\r\n\r\nfocusTab(`https://github.com/${repo}/discussions`)\r\n```",
		"command": "open-github-discussion-listing-of-repo",
		"url": "https://github.com/johnlindquist/kit/discussions/96",
		"extension": ".md"
	},
	{
		"menu": "Testing Arg Panel",
		"description": "Testing the sequence",
		"author": "johnlindquist",
		"twitter": "@johnlindquist",
		"title": "Preview of the Panel component",
		"user": "johnlindquist",
		"content": "\r\nhttps://user-images.githubusercontent.com/36073/112905085-13bca380-90a7-11eb-9247-7f68638a5cce.mp4\r\n\r\nThis is releasing late tonight. Here's the code for the above video:\r\n\r\n```js\r\n//Menu: Testing Arg Panel\r\n//Description: Testing the sequence\r\n//Author: johnlindquist\r\n//Twitter: @johnlindquist\r\n\r\nlet showGif = await arg(\r\n  \"You can display anything\",\r\n  `<div class=\"flex justify-center\">\r\n  <img src=\"https://media3.giphy.com/media/efCPDKBWq8qfZuYR34/giphy-downsized-medium.gif?cid=0b9ef2f4xptdlgxr2p76xp8gi9hezyptzhbhgggo76e30zcl&rid=giphy-downsized-medium.gif\" alt=\"\">\r\n  </div>`\r\n)\r\n\r\nlet showLinks = await arg(\r\n  \"Including links\",\r\n  md(`\r\n[Visit scriptkit.app](http://scriptkit.app)\r\n\r\n[Join the discussion](http://github.com/johnlindquist/kit/discussions)\r\n`)\r\n)\r\n\r\nlet term = await arg(\r\n  \"This still returns the input\",\r\n  md(`## What kind of joke would you like to hear?`)\r\n)\r\n\r\nlet joke = await arg(\r\n  `Here's a ${term} joke to get your day started:`,\r\n  async () => {\r\n    let response = await get(\r\n      `https://icanhazdadjoke.com/search?term=${term}`,\r\n      {\r\n        headers: {\r\n          Accept: \"text/plain\",\r\n        },\r\n      }\r\n    )\r\n\r\n    return md(\r\n      `${response.data\r\n        .split(\"\\n\")\r\n        .filter(string => string?.trim()?.length)\r\n        .map(\r\n          joke => `* ${joke}\r\n`\r\n        )\r\n        .join(\"\")}`\r\n    )\r\n  }\r\n)\r\n\r\nlet autoUpdate = await arg(\r\n  \"Auto-update works too!\",\r\n  input => `Have a ${input} day!`\r\n)\r\n```",
		"command": "preview-of-the-panel-component",
		"url": "https://github.com/johnlindquist/kit/discussions/95",
		"extension": ".md"
	},
	{
		"menu": "Google",
		"description": "Query google. Open link.",
		"author": "johnlindquist",
		"twitter": "@johnlindquist",
		"https": "//www.npmjs.com/package/google-it",
		"title": "Google It",
		"user": "johnlindquist",
		"content": "[Install Google It](https://scriptkit.app/api/new?name=google-it&url=https://gist.githubusercontent.com/johnlindquist/3ee7f5ddd0a1e70fa8f6eebf2ab8bb96/raw/790b5e400ea8df206d89f0dea2ada08d455eeb3f/google-it)\r\n\r\n```js\r\n// Menu: Google\r\n// Description: Query google. Open link.\r\n// Author: johnlindquist\r\n// Twitter: @johnlindquist\r\n\r\n//https://www.npmjs.com/package/google-it\r\nlet googleIt = await npm(\"google-it\")\r\n\r\nlet link = await arg(\"Search Google\", async query => {\r\n  if (query?.length < 3) return []\r\n\r\n  return (await googleIt({ query })).map(\r\n    ({ title, link, snippet }) => ({\r\n      name: `${title} + ${link}`,\r\n      value: link,\r\n      description: snippet,\r\n    })\r\n  )\r\n})\r\n\r\nexec(`open ${link}`)\r\n```",
		"command": "google-it",
		"url": "https://github.com/johnlindquist/kit/discussions/94",
		"extension": ".md"
	},
	{
		"menu": "Pokedex",
		"description": "Display Pokemon",
		"author": "Zach Zeleznick",
		"twitter": "@zzxiv",
		"title": "Pokémon Finder",
		"user": "zzeleznick",
		"content": "## Pokémon Finder\r\n\r\nThis demo showcases use of the `img` property for choices to show a pretty list of pokemon.\r\n\r\n### Mac Demo\r\n![pokemon-app](https://user-images.githubusercontent.com/5779832/112702159-cc88a580-8e4f-11eb-9d71-e66a089185b0.gif)\r\n\r\n### Terminal Demo\r\n![pokemon-term](https://user-images.githubusercontent.com/5779832/112702162-ceeaff80-8e4f-11eb-9bcb-f4c9ef16278c.gif)\r\n\r\n## Code\r\n<details>\r\n<summary>\r\nClick for code\r\n</summary>\r\n\r\n```js\r\n// Menu: Pokedex\r\n// Description: Display Pokemon\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n\r\nconst {focusTab} = await kit('chrome')\r\n\r\nconst pokemon = [{\"name\":\"bulbasaur\",\"id\":\"1\"},{\"name\":\"charmander\",\"id\":\"4\"},{\"name\":\"squirtle\",\"id\":\"7\"},{\"name\":\"caterpie\",\"id\":\"10\"},{\"name\":\"weedle\",\"id\":\"13\"},{\"name\":\"pidgey\",\"id\":\"16\"},{\"name\":\"rattata\",\"id\":\"19\"},{\"name\":\"spearow\",\"id\":\"21\"},{\"name\":\"ekans\",\"id\":\"23\"},{\"name\":\"sandshrew\",\"id\":\"27\"},{\"name\":\"nidoran♀\",\"id\":\"29\"},{\"name\":\"nidoran♂\",\"id\":\"32\"},{\"name\":\"vulpix\",\"id\":\"37\"},{\"name\":\"zubat\",\"id\":\"41\"},{\"name\":\"oddish\",\"id\":\"43\"},{\"name\":\"paras\",\"id\":\"46\"},{\"name\":\"venonat\",\"id\":\"48\"},{\"name\":\"diglett\",\"id\":\"50\"},{\"name\":\"meowth\",\"id\":\"52\"},{\"name\":\"psyduck\",\"id\":\"54\"},{\"name\":\"mankey\",\"id\":\"56\"},{\"name\":\"growlithe\",\"id\":\"58\"},{\"name\":\"poliwag\",\"id\":\"60\"},{\"name\":\"abra\",\"id\":\"63\"},{\"name\":\"machop\",\"id\":\"66\"},{\"name\":\"bellsprout\",\"id\":\"69\"},{\"name\":\"tentacool\",\"id\":\"72\"},{\"name\":\"geodude\",\"id\":\"74\"},{\"name\":\"venusaur\",\"id\":\"3\"},{\"name\":\"charmeleon\",\"id\":\"5\"},{\"name\":\"charizard\",\"id\":\"6\"},{\"name\":\"wartortle\",\"id\":\"8\"},{\"name\":\"blastoise\",\"id\":\"9\"},{\"name\":\"metapod\",\"id\":\"11\"},{\"name\":\"butterfree\",\"id\":\"12\"},{\"name\":\"kakuna\",\"id\":\"14\"},{\"name\":\"beedrill\",\"id\":\"15\"},{\"name\":\"pidgeotto\",\"id\":\"17\"},{\"name\":\"pidgeot\",\"id\":\"18\"},{\"name\":\"raticate\",\"id\":\"20\"},{\"name\":\"fearow\",\"id\":\"22\"},{\"name\":\"arbok\",\"id\":\"24\"},{\"name\":\"pikachu\",\"id\":\"25\"},{\"name\":\"raichu\",\"id\":\"26\"},{\"name\":\"sandslash\",\"id\":\"28\"},{\"name\":\"nidorina\",\"id\":\"30\"},{\"name\":\"nidoqueen\",\"id\":\"31\"},{\"name\":\"nidorino\",\"id\":\"33\"},{\"name\":\"nidoking\",\"id\":\"34\"},{\"name\":\"clefairy\",\"id\":\"35\"},{\"name\":\"clefable\",\"id\":\"36\"},{\"name\":\"ninetales\",\"id\":\"38\"},{\"name\":\"jigglypuff\",\"id\":\"39\"},{\"name\":\"wigglytuff\",\"id\":\"40\"},{\"name\":\"golbat\",\"id\":\"42\"},{\"name\":\"gloom\",\"id\":\"44\"},{\"name\":\"vileplume\",\"id\":\"45\"},{\"name\":\"parasect\",\"id\":\"47\"},{\"name\":\"venomoth\",\"id\":\"49\"},{\"name\":\"dugtrio\",\"id\":\"51\"},{\"name\":\"persian\",\"id\":\"53\"},{\"name\":\"golduck\",\"id\":\"55\"},{\"name\":\"primeape\",\"id\":\"57\"},{\"name\":\"arcanine\",\"id\":\"59\"},{\"name\":\"poliwhirl\",\"id\":\"61\"},{\"name\":\"poliwrath\",\"id\":\"62\"},{\"name\":\"kadabra\",\"id\":\"64\"},{\"name\":\"alakazam\",\"id\":\"65\"},{\"name\":\"machoke\",\"id\":\"67\"},{\"name\":\"machamp\",\"id\":\"68\"},{\"name\":\"weepinbell\",\"id\":\"70\"},{\"name\":\"victreebel\",\"id\":\"71\"},{\"name\":\"tentacruel\",\"id\":\"73\"},{\"name\":\"graveler\",\"id\":\"75\"},{\"name\":\"ponyta\",\"id\":\"77\"},{\"name\":\"slowpoke\",\"id\":\"79\"},{\"name\":\"magnemite\",\"id\":\"81\"},{\"name\":\"farfetchd\",\"id\":\"83\"},{\"name\":\"doduo\",\"id\":\"84\"},{\"name\":\"seel\",\"id\":\"86\"},{\"name\":\"grimer\",\"id\":\"88\"},{\"name\":\"shellder\",\"id\":\"90\"},{\"name\":\"gastly\",\"id\":\"92\"},{\"name\":\"onix\",\"id\":\"95\"},{\"name\":\"drowzee\",\"id\":\"96\"},{\"name\":\"krabby\",\"id\":\"98\"},{\"name\":\"voltorb\",\"id\":\"100\"},{\"name\":\"exeggcute\",\"id\":\"102\"},{\"name\":\"cubone\",\"id\":\"104\"},{\"name\":\"lickitung\",\"id\":\"108\"},{\"name\":\"koffing\",\"id\":\"109\"},{\"name\":\"rhyhorn\",\"id\":\"111\"},{\"name\":\"tangela\",\"id\":\"114\"},{\"name\":\"kangaskhan\",\"id\":\"115\"},{\"name\":\"horsea\",\"id\":\"116\"},{\"name\":\"goldeen\",\"id\":\"118\"},{\"name\":\"staryu\",\"id\":\"120\"},{\"name\":\"scyther\",\"id\":\"123\"},{\"name\":\"pinsir\",\"id\":\"127\"},{\"name\":\"tauros\",\"id\":\"128\"},{\"name\":\"magikarp\",\"id\":\"129\"},{\"name\":\"lapras\",\"id\":\"131\"},{\"name\":\"ditto\",\"id\":\"132\"},{\"name\":\"eevee\",\"id\":\"133\"},{\"name\":\"porygon\",\"id\":\"137\"},{\"name\":\"omanyte\",\"id\":\"138\"},{\"name\":\"kabuto\",\"id\":\"140\"},{\"name\":\"aerodactyl\",\"id\":\"142\"},{\"name\":\"articuno\",\"id\":\"144\"},{\"name\":\"zapdos\",\"id\":\"145\"},{\"name\":\"moltres\",\"id\":\"146\"},{\"name\":\"dratini\",\"id\":\"147\"},{\"name\":\"mewtwo\",\"id\":\"150\"},{\"name\":\"rapidash\",\"id\":\"78\"},{\"name\":\"slowbro\",\"id\":\"80\"},{\"name\":\"magneton\",\"id\":\"82\"},{\"name\":\"dodrio\",\"id\":\"85\"},{\"name\":\"dewgong\",\"id\":\"87\"},{\"name\":\"muk\",\"id\":\"89\"},{\"name\":\"cloyster\",\"id\":\"91\"},{\"name\":\"haunter\",\"id\":\"93\"},{\"name\":\"gengar\",\"id\":\"94\"},{\"name\":\"hypno\",\"id\":\"97\"},{\"name\":\"kingler\",\"id\":\"99\"},{\"name\":\"electrode\",\"id\":\"101\"},{\"name\":\"exeggutor\",\"id\":\"103\"},{\"name\":\"marowak\",\"id\":\"105\"},{\"name\":\"hitmonlee\",\"id\":\"106\"},{\"name\":\"hitmonchan\",\"id\":\"107\"},{\"name\":\"weezing\",\"id\":\"110\"},{\"name\":\"rhydon\",\"id\":\"112\"},{\"name\":\"chansey\",\"id\":\"113\"},{\"name\":\"seadra\",\"id\":\"117\"},{\"name\":\"seaking\",\"id\":\"119\"},{\"name\":\"starmie\",\"id\":\"121\"},{\"name\":\"mr-mime\",\"id\":\"122\"},{\"name\":\"jynx\",\"id\":\"124\"},{\"name\":\"electabuzz\",\"id\":\"125\"},{\"name\":\"magmar\",\"id\":\"126\"},{\"name\":\"gyarados\",\"id\":\"130\"},{\"name\":\"vaporeon\",\"id\":\"134\"},{\"name\":\"jolteon\",\"id\":\"135\"},{\"name\":\"flareon\",\"id\":\"136\"},{\"name\":\"omastar\",\"id\":\"139\"},{\"name\":\"kabutops\",\"id\":\"141\"},{\"name\":\"snorlax\",\"id\":\"143\"},{\"name\":\"dragonair\",\"id\":\"148\"},{\"name\":\"dragonite\",\"id\":\"149\"},{\"name\":\"mew\",\"id\":\"151\"},{\"name\":\"ivysaur\",\"id\":\"2\"},{\"name\":\"golem\",\"id\":\"76\"}]\r\n\r\nconst translations = {\r\n  \"mr-mime\": \"Mr._Mime\",\r\n  \"farfetchd\": \"Farfetch'd\"\r\n}\r\n\r\nconst toTitleCase = (str) => {\r\n  return str.split(' ').map(s => s.charAt(0).toUpperCase() + s.substr(1).toLowerCase()).join(' ');\r\n}\r\n\r\nconst buildImageUrl = (id) => {\r\n  // e.g. https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\r\n  const baseUrl = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon\"\r\n  return `${baseUrl}/${id}.png`\r\n}\r\n\r\nconst buildOpenUrl = (name) => {\r\n  // e.g. https://bulbapedia.bulbagarden.net/wiki/Nidoran%E2%99%80_(Pok%C3%A9mon)\r\n  const baseUrl = \"https://bulbapedia.bulbagarden.net/wiki\"\r\n  let translated = translations[name] ? translations[name] : toTitleCase(name);\r\n  return encodeURI(`${baseUrl}/${translated}_(Pokémon)`);\r\n}\r\n\r\nconst buildChoices = () => {\r\n  return pokemon.map(({name, id}) => {\r\n    return {\r\n      name: toTitleCase(name),\r\n      value: name,\r\n      description: `Pokedex entry: ${id.padStart(3, 0)}`,\r\n      img: buildImageUrl(id)\r\n    }\r\n  });\r\n}\r\n\r\nconst name = await arg(\"View Gen 1 Pokemon:\", buildChoices());\r\nfocusTab(buildOpenUrl(name));\r\n\r\n```\r\n\r\n</details>",
		"command": "pokemon-finder",
		"url": "https://github.com/johnlindquist/kit/discussions/79",
		"extension": ".md"
	},
	{
		"menu": "Kit Stocks",
		"description": "Display Stocks",
		"author": "Zach Zeleznick",
		"twitter": "@zzxiv",
		"helper in the case all tickers are removed – we should reinit or return empty result\r\nconst initDB = () => {\r\n  const tickers = populateFrom(defaultSymbols);\r\n  tickersDB.set(\"tickers\", tickers).write();\r\n}\r\n\r\nconst urlToOpen = (ticker) => {\r\n  return `https": "//finance.yahoo.com/quote/${ticker}?p=${ticker}`",
		"title": "Stock Watchlist",
		"user": "zzeleznick",
		"content": "# Stock Watchlist\r\n\r\nWhile it's no bloomberg terminal, I'd like to share my first kit script 🥳 \r\n\r\nThanks @johnlindquist for building this! \r\n\r\n![stonks-demo-zz](https://user-images.githubusercontent.com/5779832/112568877-6bee5f80-8da0-11eb-914b-89c3d2919ec9.gif)\r\n\r\n## Code\r\n\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n```js\r\n// Menu: Kit Stocks\r\n// Description: Display Stocks\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n\r\nconst {focusTab} = await kit('chrome')\r\n\r\nconst defaultSymbols = [\"GME\", \"AMC\", \"SNAP\"];\r\nconst apiUrl = `https://query1.finance.yahoo.com/v7/finance/quote?lang=en-US&region=US&corsDomain=finance.yahoo.com&symbols=`\r\n\r\nconst populateFrom = (symbols) => symbols.map((v, i) => {return {symbol: v, id: `id-${i}` }})\r\n\r\nconst tickersDB = db(\"tickers\", { tickers: populateFrom(defaultSymbols) });\r\nconst tickersRef = tickersDB.get(\"tickers\");\r\n\r\n// helper in the case all tickers are removed – we should reinit or return empty result\r\nconst initDB = () => {\r\n  const tickers = populateFrom(defaultSymbols);\r\n  tickersDB.set(\"tickers\", tickers).write();\r\n}\r\n\r\nconst urlToOpen = (ticker) => {\r\n  return `https://finance.yahoo.com/quote/${ticker}?p=${ticker}`\r\n}\r\n\r\nconst getTickers = () => tickersRef.value()\r\n\r\nconst tickersToSymbols = () => getTickers().map(({symbol}) => symbol)\r\n\r\nconst tickersToChoices = () => {\r\n  return getTickers().map(({symbol, id}) => {\r\n    return {\r\n      name: symbol,\r\n      value: id,\r\n    }\r\n  });\r\n}\r\n\r\nconst getStocks = async (stocks) => {\r\n  stocks = stocks ? stocks : defaultSymbols;\r\n  stocks = Array.isArray(stocks) ? stocks.join(\",\") : stocks;\r\n  const response = await get(`${apiUrl}${stocks}`);\r\n  const { quoteResponse: { result, error } } = response.data;\r\n  // TODO: handle errors \r\n  // console.log(JSON.stringify(result, null, 2));\r\n  return result;\r\n}\r\n\r\nconst buildHtml = ({price, percentChange}) => {\r\n  let color = 'gray';\r\n  const significance = Math.abs(percentChange) > 0.25; //  arbitray 0.25% cutoff\r\n  // TODO: should filter on significance based on volatility\r\n  const pct = percentChange.toFixed(2);\r\n  color = significance ? (Math.sign(percentChange) === -1 ? \"red\" : \"green\") : color;\r\n  return `<div class=\"h-full w-full p-1 text-xs flex flex-col justify-center items-center font-bold\">\r\n      <div>${price}</div>\r\n      <div style=\"color:${color}\">${pct}%</div>\r\n</div>`\r\n}\r\n\r\nconst quoteResponseToChoice = (quoteResponse) => {\r\n  const { symbol, displayName, regularMarketPrice,\r\n          regularMarketChange, regularMarketChangePercent,\r\n  } = quoteResponse;\r\n  try {\r\n    return {\r\n      name: symbol,\r\n      value: symbol,\r\n      description: displayName,\r\n      html: buildHtml({price: regularMarketPrice, percentChange: regularMarketChangePercent}),\r\n    }\r\n  } catch(e) {\r\n    console.error(e);\r\n    return null\r\n  }\r\n}\r\n\r\nconst listTickers = async () => {\r\n  let symbols = tickersToSymbols();\r\n  if (!symbols || !symbols.length) {\r\n    await arg(\"Search stocks:\", [{\r\n      name: \"No Results\",\r\n      value: \"__empty__\",\r\n      description: \"Hit enter to reinit default stocks\"\r\n    }]);\r\n    initDB();\r\n    return await listTickers();\r\n  }\r\n  const stocks = await getStocks(symbols);\r\n  const choices = stocks.map(quoteResponseToChoice).filter(x => x);\r\n  const selectedTicker = await arg(\"Search stocks:\", choices);\r\n  focusTab(urlToOpen(selectedTicker)); // open tab for quote\r\n}\r\n\r\nconst addTicker = async () => {\r\n  const symbol = await arg(\"Select stock to add:\");\r\n  tickersRef.insert({ symbol }).write();\r\n  return await addTicker();\r\n};\r\n\r\nconst removeTicker = async () => {\r\n  const choices = tickersToChoices();\r\n  const id = await arg(\"Select stock to remove:\", choices);\r\n  tickersRef.remove({ id }).write();\r\n  return await removeTicker();\r\n};\r\n\r\nonTab(\"List\", listTickers)\r\nonTab(\"Add\", addTicker)\r\nonTab(\"Remove\", removeTicker)\r\n\r\n```\r\n\r\n</details>\r\n\r\n\r\n",
		"command": "stock-watchlist",
		"url": "https://github.com/johnlindquist/kit/discussions/77",
		"extension": ".md"
	},
	{
		"menu": "Time Zones",
		"description": "List of world times",
		"author": "Elijah Manor",
		"twitter": "@elijahmanor",
		"title": "Time Zones Script",
		"user": "elijahmanor",
		"content": "![Kapture 2021-03-25 at 07 53 12](https://user-images.githubusercontent.com/86454/112476058-7d534f80-8d3f-11eb-8734-013cfeb9d6cf.gif)\r\n\r\nThe company I work for has employees all over the world, so I thought it'd be fun to make a Time Zone script in Kit.\r\n\r\nHere is the code...\r\n\r\n```js\r\n// Menu: Time Zones\r\n// Description: List of world times\r\n// Author: Elijah Manor\r\n// Twitter: @elijahmanor\r\n\r\nconst ct = await npm('countries-and-timezones');\r\nconst scriptDB = db('timezone', { recents: [] });\r\nconst timeZones = ct.getAllTimezones();\r\n\r\nconst now = new Date();\r\n\r\nconst addToRecents = async () => {\r\n  const items = Object.keys(timeZones)\r\n    .map((name) => {\r\n      const country = ct.getCountry(timeZones[name].country);\r\n      if (!country) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        name: `${name} (${country.name})`,\r\n        value: name,\r\n        description: `${now.toLocaleTimeString('en-US', {\r\n          hour: '2-digit',\r\n          timeZone: name,\r\n          minute: '2-digit',\r\n          hour12: true,\r\n          weekday: 'short',\r\n          month: 'short',\r\n          day: 'numeric',\r\n        })} (${timeZones[name].utcOffsetStr})`,\r\n      };\r\n    })\r\n    .filter((x) => x);\r\n\r\n  const timeZone = await arg('Select to add to recents...', items);\r\n  const recents = scriptDB.get(\"recents\").value();\r\n  recents.push(items.find((t) => t.value === timeZone));\r\n  scriptDB.set(\"recents\", recents).write();\r\n};\r\n\r\nconst removeFromRecents = async () => {\r\n  let recents = scriptDB.get('recents').value();\r\n  const timeZone = await arg('Select to remove from recents...', recents);\r\n  recents = recents.filter((r) => r.value !== timeZone);\r\n  scriptDB.set('recents', recents).write();\r\n};\r\n\r\nonTab('Search', addToRecents);\r\n\r\nonTab('Recent', removeFromRecents);\r\n```",
		"command": "time-zones-script",
		"url": "https://github.com/johnlindquist/kit/discussions/76",
		"extension": ".md"
	},
	{
		"title": "View AWS Cost for the month",
		"user": "lannonbr",
		"content": "I wrote a script this morning that uses the `aws-cli` to check the cost of my AWS account for a particular time-range:\r\n\r\n```js\r\nlet start = await arg('Enter start date (YYYY-MM-DD)')\r\nlet end = await arg('Enter end date (YYYY-MM-DD)')\r\n\r\nlet {stdout} = exec(`aws ce get-cost-and-usage --time-period Start=${start},End=${end} --granularity MONTHLY --metrics \"BlendedCost\"`)\r\n\r\nlet data = JSON.parse(stdout)\r\n\r\nlet monthCost = data.ResultsByTime[0].Total.BlendedCost\r\n\r\nlet { say } = await kit('speech')\r\nawait say(`Your AWS bill is $${Number(monthCost.Amount).toFixed(2)}`)\r\n```\r\n\r\nI'm thinking in the future of expanding this so if I can get other time granularities (weekly, daily), or drill down based on costs of items based on a tag.",
		"command": "view-aws-cost-for-the-month",
		"url": "https://github.com/johnlindquist/kit/discussions/73",
		"extension": ".md"
	},
	{
		"title": "🥳 Script: Internet speed test",
		"user": "dipakcg",
		"content": "Hello everyone,\r\n\r\nExcited to share that I've released a script that checks internet upload/download speed. More about the script can be found here: https://github.com/dipakcg/script-kit-speedtest\r\n\r\n_* I am working on WordPress – PHP for over a decade, but new to node and never written any such script. This is my first attempt at writing such script/code._ \r\n\r\nThanks @johnlindquist for Script Kit.",
		"command": "script-internet-speed-test",
		"url": "https://github.com/johnlindquist/kit/discussions/72",
		"extension": ".md"
	},
	{
		"title": "Using ScriptKit to Automate Mac Setup",
		"user": "jh3y",
		"content": "Howdy y'all! ＼ʕ •ᴥ•ʔ／\r\n\r\nI decided I'd have one of those \"tech\" weekends where I get all my tech in order 😅  A big part of this was getting my machines onto `Big Sur` with a blank slate and revisiting what things I install etc.\r\n\r\nFor the last few years, I've been using [Kody](https://github.com/jh3y/kody) which is something I built with Node. It's one of those \"If it ain't broke, don't fix it\" kinda things. It works great but once I saw \"ScriptKit\", that was kinda the thing I envisioned those years ago. The GUI part is a bonus!\r\n\r\nEnough ramble. How did it go? What's my process?\r\n\r\n1. Fresh Big Sur install on clean machine.\r\n2. Install ScriptKit\r\n3. That prompts Git installation 👍 \r\n4. Install HomeBrew\r\n5. Install VSCode (Doing this so I can mess about with scripts before running them). Imagine there would be a way to automate the steps from 4 onwards.\r\n6. Use Terminal to add a remote for my scripts.\r\n7. Switch to that branch.\r\n8. This part was a bit of a sticker. I want to run my setup scripts (there a little rough, don't judge! 😅 ) from the CLI initially so I can see what's happening. But, I'm not version controlling the `bin` files. Perhaps there is an automated way for me to do this. Who am I kidding? Of course there is, this is ScriptKit. But, I didn't know if there was an API I could tap into to say \"Hey! Here's my scripts I brought with me. Can you hook them up to bin please?\"\r\n8a. Make a couple of tweaks to `cli`. Expose `basename` from `path` and `rm` from `shelljs`. Expose `iterm` as a global for CodePen script.\r\n9. Then I do a bit of a dance with setting the path in `.zshrc` 😅 \r\n10. Run each of my scripts. One installs all my Homebrew packages from a config file, another symlinks all my dotfiles(which I'm currently keeping in a folder within scripts 😅 ). That sets up my VSCode, sets up my Git Config, ZSH, etc. Then I have another script that runs a shell script with my OSX defaults like hide the dock, set up exposé, etc. And lastly, a script that installs global npm modules, installs VSCode extensions, etc.\r\n11. Lastly, grab my iTerm config and Stream Deck backups from within the \"scripts\" folder and apply them too.\r\n12. 🎉  Machine ready for action.\r\n\r\nI'm thrilled it works. My scripts are a little \"rough\" around the edges 😅 \r\n\r\nBut, as a POC, it works! And this saved me hours of doing this myself and remembering things I install or set up. Migrating what I had already wasn't much hassle at all.\r\n\r\nI've had some thoughts too about ways I could make this easier to sync what I'm using too.\r\n\r\n- Make an install script that updates my config for me upon successful HomeBrew package install 🤩  Same with uninstall.\r\n- Script to grab iTerm profile for me and copy it into my branch.\r\n\r\nAnother note.\r\nThe file selector didn't work for me still 🤔  I'm not sure what's going on there.\r\n\r\nThis was great fun to put together and was totally worth spending the time on to get my tech in order 💪 \r\n\r\nThanks @johnlindquist 🙏  Keep up the great work!",
		"command": "using-scriptkit-to-automate-mac-setup",
		"url": "https://github.com/johnlindquist/kit/discussions/71",
		"extension": ".md"
	},
	{
		"menu": "New daily note",
		"description": "Create a new daily note in Simplenote",
		"author": "Joe Previte",
		"twitter": "@jsjoeio",
		"-------------------------\r\n// Music - Start\r\n// -------------------------\r\n\r\nlet goodMorningFileName = `jarvis-good-morning.mp3 `\r\n\r\nawait run(\"play-audio-file\", goodMorningFileName)\r\n\r\n// -------------------------\r\n// Music - End\r\n// -------------------------\r\n\r\n\r\n// -------------------------\r\n// Window Management - Start\r\n// -------------------------\r\n\r\nawait run(\"press-keyboard-shortcut\", \"Spotify\", \";\", \"command,control\")\r\n\r\n// In order to make it take 2/4ths I have to run the command three times\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"l\", \"command,control\")\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"l\", \"command,control\")\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"l\", \"command,control\")\r\n\r\nawait run(\"press-keyboard-shortcut\", \"Toggl Track\", \"j\", \"command,control\")\r\n\r\n// -------------------------\r\n// Window Management - End\r\n// -------------------------\r\n\r\n\r\n// -------------------------\r\n// Time Tracking  - Start\r\n// -------------------------\r\n\r\nawait run(\"start-toggl\", \"checking in with myself\", \"personal catchall\")\r\n\r\n// -------------------------\r\n// Time Tracking  - End\r\n// -------------------------\r\n\r\n\r\n// -------------------------\r\n// Note Taking  - Start\r\n// -------------------------\r\n\r\nawait run(\"new-daily-note\")\r\n// Toggle focus mode\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"f\", \"command,option\")\r\n\r\n// -------------------------\r\n// Note Taking  - End\r\n// -------------------------\r\n\r\n```\r\n\r\n### `play-audio-file.js`\r\n```js\r\n//Menu": "Play audio file",
		"example": "command,control",
		"this is the project id for \"Coder\"\r\n// e.g. 165657166 -> https": "//track.toggl.com/2151494/projects/165657166/team",
		"defaults to personal catchall\r\nconst pid = projectIds[project] || \"165340149\"\r\n\r\nconst response = await post(\r\n  \"https": "//api.track.toggl.com/api/v8/time_entries/start\",",
		"title": "Start Day Script - plays music, arranges windows, starts timer and creates a note",
		"user": "jsjoeio",
		"content": "## Start Day Script\r\n\r\nI wrote a script that:\r\n\r\n1. Plays \"good morning\" audio clip from Ironman\r\n2. Arranges windows\r\n3. Starts time entry in Toggl Track \r\n4. Creates a new note in Simplenote\r\n\r\n\r\nhttps://user-images.githubusercontent.com/3806031/111811312-28718e00-8894-11eb-89a2-5898c32f40a0.mp4\r\n\r\n\r\n\r\n\r\n### `start-personal.js`\r\n```javascript\r\n//Menu: Start Day\r\n//Description: My script for starting my day before work\r\n//Author: Joe Previte\r\n//Twitter: @jsjoeio\r\n\r\n/* Note about this script\r\n- it assumes the applications are already open (I open them at login)\r\n*/\r\n\r\n// -------------------------\r\n// Music - Start\r\n// -------------------------\r\n\r\nlet goodMorningFileName = `jarvis-good-morning.mp3 `\r\n\r\nawait run(\"play-audio-file\", goodMorningFileName)\r\n\r\n// -------------------------\r\n// Music - End\r\n// -------------------------\r\n\r\n\r\n// -------------------------\r\n// Window Management - Start\r\n// -------------------------\r\n\r\nawait run(\"press-keyboard-shortcut\", \"Spotify\", \";\", \"command,control\")\r\n\r\n// In order to make it take 2/4ths I have to run the command three times\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"l\", \"command,control\")\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"l\", \"command,control\")\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"l\", \"command,control\")\r\n\r\nawait run(\"press-keyboard-shortcut\", \"Toggl Track\", \"j\", \"command,control\")\r\n\r\n// -------------------------\r\n// Window Management - End\r\n// -------------------------\r\n\r\n\r\n// -------------------------\r\n// Time Tracking  - Start\r\n// -------------------------\r\n\r\nawait run(\"start-toggl\", \"checking in with myself\", \"personal catchall\")\r\n\r\n// -------------------------\r\n// Time Tracking  - End\r\n// -------------------------\r\n\r\n\r\n// -------------------------\r\n// Note Taking  - Start\r\n// -------------------------\r\n\r\nawait run(\"new-daily-note\")\r\n// Toggle focus mode\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"f\", \"command,option\")\r\n\r\n// -------------------------\r\n// Note Taking  - End\r\n// -------------------------\r\n\r\n```\r\n\r\n### `play-audio-file.js`\r\n```js\r\n//Menu: Play audio file\r\n//Description: Plays an audio file in the background\r\n//Author: Joe Previte\r\n//Twitter: @jsjoeio\r\n\r\nconst AUDIO_FILE_DIR = `~/Documents/audiofiles`\r\nlet audioFileName = await arg(`What is the name of the audio file?`)\r\n\r\nexec(`afplay ${AUDIO_FILE_DIR}/${audioFileName} &>/dev/null &`)\r\n```\r\n\r\n### `press-keyboard-shortcut.js`\r\n```js\r\n// Menu: Press Keyboard Shortcut\r\n// Description: Presses a keyboard shortcut\r\n\r\n/**\r\n * @description Presses a keyboard shortcut\r\n * @param {string} application - the application form which this keyboard shortcut should be run\r\n * @param {string} key - a single key such as \"j\" or \"q\"\r\n * @typedef {('command'|'control'|'option')} Command - 'command' | 'control | 'option'\r\n * @param {Command[]} commands - an array of commands.\r\n * @example pressKeyboardShortcut(\"j\", [\"command\", \"control\"]) would press `j + ⌘ + ^`\r\n */\r\nasync function pressKeyboardShortcut (application = \"\", key, commands = []) {\r\n  const formattedCommands = formatCommands(commands)\r\n  // Note: we have to activate an application first in order to use this script with it\r\n  // Otherwise, it will run the keyboard shortcut on Script Kit\r\n  return await applescript(\r\n    String.raw`\r\n    activate application \"${application}\"\r\n    tell application \"System Events\"\r\n      keystroke \"${key}\" using {${formattedCommands}}\r\n    end tell\r\n    `\r\n  )\r\n}\r\n\r\nfunction formatCommands(commands = []) {\r\n  // This will turn [\"control\", \"command\"]\r\n  // into this \"control down, command down,\"\r\n  // and then slice the last commma\r\n  return commands.map(command => `${command} down,`).join(\" \").slice(0, -1)\r\n}\r\n\r\n// Example: \"Toggl Track\"\r\nlet application = await arg(`What application should this be run with?`)\r\n// Example: j\r\nlet key = await arg(`What is the key?`)\r\n// Example: command,control\r\nlet unformattedCommands = await arg(`What are the commands? Separate by comma.`)\r\nlet commands = unformattedCommands.split(\",\")\r\n\r\nconsole.log('run with ', application, key, commands)\r\n\r\nawait pressKeyboardShortcut(application, key, commands)\r\n```\r\n\r\n### `start-toggl.js`\r\n\r\n```js\r\nlet btoa = await npm(\"btoa\")\r\nlet TOGGL_TOKEN = await env(\"TOGGL_TOKEN\") //Go here -> https://track.toggl.com/profile\r\nlet wid = await env(\"WORKSPACE_ID\") //The number in your URL, e.g. 5198420 -> https://track.toggl.com/projects/5198420/list\r\n\r\nlet description = await arg(`What are you working on?`)\r\nlet project = await arg('Select project:', [\r\n  'Coder',\r\n  'personal catchall',\r\n  'vim for vscode',\r\n])\r\n\r\n// This is the project id for \"Coder\"\r\n// e.g. 165657166 -> https://track.toggl.com/2151494/projects/165657166/team\r\nconst projectIds = {\r\n  'Coder': \"165657166\",\r\n  \"personal catchall\": \"165660677\",\r\n  \"vim for vscode\": \"165340149\"\r\n}\r\n\r\n// Defaults to personal catchall\r\nconst pid = projectIds[project] || \"165340149\"\r\n\r\nconst response = await post(\r\n  \"https://api.track.toggl.com/api/v8/time_entries/start\",\r\n  {\r\n    time_entry: {\r\n      pid,\r\n      wid,\r\n      description,\r\n      created_with: \"Script Kit\",\r\n    },\r\n  },\r\n  {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization:\r\n        \"Basic \" + btoa(`${TOGGL_TOKEN}:api_token`),\r\n    },\r\n  }\r\n)\r\n```\r\n\r\n### `new-daily-note.js`\r\n```js\r\n//Menu: New daily note\r\n//Description: Create a new daily note in Simplenote\r\n//Author: Joe Previte\r\n//Twitter: @jsjoeio\r\n\r\nlet {format} = await npm('date-fns')\r\nlet date = format(new Date(), 'yyyy-MM-dd')\r\nlet dayOfWeek = format(new Date(), \"eeee\")\r\n\r\nawait run(\"press-keyboard-shortcut\", \"Simplenote\", \"n\", \"command\")\r\nawait applescript(\r\n  String.raw`\r\nactivate application \"Simplenote\"\r\ntell application \"System Events\"\r\n  keystroke \"${date}\" & return & \"Happy ${dayOfWeek} :)\" & return & return & \"Today I'm feeling grateful for:\" & return & \"1.\" & return & \"2.\" & return & \"3.\"\r\nend tell\r\n  `\r\n)\r\n```",
		"command": "start-day-script-plays-music-arranges-windows-starts-timer-and-creates-a-note",
		"url": "https://github.com/johnlindquist/kit/discussions/63",
		"extension": ".md"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/anime-search.js",
		"title": "Search Anime",
		"command": "anime-search",
		"content": "// Menu: Search Anime\n// Description: Use the jikan.moe API to search anime\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet anime = await arg(\"Anime:\")\n\nlet response = await get(\n  `https://api.jikan.moe/v3/search/anime?q=${anime}`\n)\n\nlet { image_url, title } = response.data.results[0]\n\nshowImage(image_url, { title })\n",
		"menu": "Search Anime",
		"description": "Use the jikan.moe API to search anime",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/app-launcher.js",
		"title": "App Launcher",
		"command": "app-launcher",
		"content": "// Menu: App Launcher\n// Description: Search for an app then launch it\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet createChoices = async () => {\n  let apps = await fileSearch(\"\", {\n    onlyin: \"/\",\n    kind: \"application\",\n  })\n\n  let prefs = await fileSearch(\"\", {\n    onlyin: \"/\",\n    kind: \"preferences\",\n  })\n\n  let group = path => apps =>\n    apps\n      .filter(app => app.match(path))\n      .sort((a, b) => {\n        let aName = a.replace(/.*\\//, \"\")\n        let bName = b.replace(/.*\\//, \"\")\n\n        return aName > bName ? 1 : aName < bName ? -1 : 0\n      })\n\n  return [\n    ...group(/^\\/Applications\\/(?!Utilities)/)(apps),\n    ...group(/\\.prefPane$/)(prefs),\n    ...group(/^\\/Applications\\/Utilities/)(apps),\n    ...group(/System/)(apps),\n    ...group(/Users/)(apps),\n  ].map(value => {\n    return {\n      name: value.split(\"/\").pop().replace(\".app\", \"\"),\n      value,\n      description: value,\n    }\n  })\n}\n\nlet appsDb = await db(\"apps\", async () => ({\n  choices: await createChoices(),\n}))\n\nlet app = await arg(\"Select app:\", appsDb.choices)\nlet command = `open -a \"${app}\"`\nif (app.endsWith(\".prefPane\")) {\n  command = `open ${app}`\n}\nexec(command)\n",
		"menu": "App Launcher",
		"description": "Search for an app then launch it",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/book-search.js",
		"title": "Book Search",
		"command": "book-search",
		"content": "// Menu: Book Search\n// Description: Use Open Library API to search for books\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet query = await arg('Search for a book title:')\n\n//This API can be a little slow. Wait a couple seconds\nlet response = await get(`http://openlibrary.org/search.json?q=${query}`)\n\nlet transform = ({title, author_name}) =>\n  `* \"${title}\" - ${author_name?.length && author_name[0]}`\n\nlet markdown = response.data.docs.map(transform).join('\\n')\n\ninspect(markdown, 'md')\n",
		"menu": "Book Search",
		"description": "Use Open Library API to search for books",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"this API can be a little slow. Wait a couple seconds\nlet response = await get(`http": "//openlibrary.org/search.json?q=${query}`)",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/center-app.js",
		"title": "Center App",
		"command": "center-app",
		"content": "// Menu: Center App\n// Description: Center the frontmost app\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { workArea, bounds } = await getActiveScreen()\n\nlet { width, height } = workArea\nlet { x, y } = bounds\nlet padding = 100\n\nlet top = y + padding\nlet left = x + padding\nlet right = x + width - padding\nlet bottom = y + height - padding\n\nsetActiveAppBounds({\n  top,\n  left,\n  right,\n  bottom,\n})\n",
		"menu": "Center App",
		"description": "Center the frontmost app",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/chrome-bookmarks.js",
		"title": "Chrome Bookmarks",
		"command": "chrome-bookmarks",
		"content": "// Menu: Chrome Bookmarks\n// Description: Select and open a bookmark from Chrome\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet bookmarks = await readFile(\n  home(\n    \"Library/Application Support/Google/Chrome/Default/Bookmarks\"\n  )\n)\n\nbookmarks = JSON.parse(bookmarks)\nbookmarks = bookmarks.roots.bookmark_bar.children\n\nlet url = await arg(\n  \"Select bookmark\",\n  bookmarks.map(({ name, url }) => {\n    return {\n      name,\n      description: url,\n      value: url,\n    }\n  })\n)\n\nexec(`open \"${url}\"`)\n",
		"menu": "Chrome Bookmarks",
		"description": "Select and open a bookmark from Chrome",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/chrome-tab-open.js",
		"title": "Open Chrome Tab",
		"command": "chrome-tab-open",
		"content": "// Menu: Open Chrome Tab\n// Description: List all Chrome tabs. Then switch to that tab\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet currentTabs = await getTabs()\n\nlet bookmarks = await readFile(\n  home(\n    \"Library/Application Support/Google/Chrome/Default/Bookmarks\"\n  )\n)\n\nbookmarks = JSON.parse(bookmarks)\nbookmarks = bookmarks.roots.bookmark_bar.children\n\nlet bookmarkChoices = bookmarks.map(({ name, url }) => {\n  return {\n    name: url,\n    description: name,\n    value: url,\n  }\n})\n\nlet currentOpenChoices = currentTabs.map(\n  ({ url, title }) => ({\n    name: url,\n    value: url,\n    description: title,\n  })\n)\n\nlet bookmarksAndOpen = [\n  ...bookmarkChoices,\n  ...currentOpenChoices,\n]\nlet choices = _.uniqBy(bookmarksAndOpen, \"name\")\n\nlet url = await arg(\"Focus Chrome tab:\", choices)\n\nfocusTab(url)\n",
		"menu": "Open Chrome Tab",
		"description": "List all Chrome tabs. Then switch to that tab",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/chrome-tab-switcher.js",
		"title": "Chrome Tab Switcher",
		"command": "chrome-tab-switcher",
		"content": "// Menu: Chrome Tab Switcher\n// Description: List all Chrome tabs. Then switch to that tab\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet tabs = await getTabs()\n\nlet url = await arg(\n  \"Select Chrome tab:\",\n  tabs.map(({ url, title }) => ({\n    name: url,\n    value: url,\n    description: title,\n  }))\n)\n\nfocusTab(url)\n",
		"menu": "Chrome Tab Switcher",
		"description": "List all Chrome tabs. Then switch to that tab",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/chrome-tab.js",
		"title": "chrome-tab",
		"command": "chrome-tab",
		"content": "// Description: Launch a url in Chrome. If url is already open, switch to that tab.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet url = await arg(\"Enter url:\")\nfocusTab(url)\n",
		"description": "Launch a url in Chrome. If url is already open, switch to that tab.",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/color-convert.js",
		"title": "Convert Colors",
		"command": "color-convert",
		"content": "// Menu: Convert Colors\n// Description: Converts colors between rgb, hex, etc\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet convert = await npm(\"color-convert\")\n\nlet createChoice = (type, value, input) => {\n  return {\n    name: type + \": \" + value,\n    value,\n    html: `<div class=\"h-full w-full p-1 text-xs flex justify-center items-center font-bold\" style=\"background-color:${input}\">\n      <span>${value}</span>\n      </div>`,\n  }\n}\n\n//using a function with \"input\" allows you to generate values\nlet conversion = await arg(\"Enter color:\", input => {\n  if (input.startsWith(\"#\")) {\n    return [\"rgb\", \"cmyk\", \"hsl\"].map(type => {\n      let value = convert.hex[type](input).toString()\n      return createChoice(type, value, input)\n    })\n  }\n\n  //two or more lowercase\n  if (input.match(/^[a-z]{2,}/)) {\n    return [\"rgb\", \"hex\", \"cmyk\", \"hsl\"]\n      .map(type => {\n        try {\n          let value =\n            convert.keyword[type](input).toString()\n\n          return createChoice(type, value, input)\n        } catch (error) {\n          return \"\"\n        }\n      })\n      .filter(Boolean)\n  }\n\n  return []\n})\n\nsetSelectedText(conversion)\n",
		"menu": "Convert Colors",
		"description": "Converts colors between rgb, hex, etc",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"using a function with \"input\" allows you to generate values\nlet conversion = await arg(\"Enter color": "\", input => {",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/dev-ss.js",
		"title": "John's personal startup script for scriptkit.com",
		"command": "dev-ss",
		"content": "// Menu: John's personal startup script for scriptkit.com\n// Description: This probably won't run on your machine 😜\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nedit(`~/projects/scriptkit.com`)\niterm(`cd ~/projects/scriptkit.com; vercel dev`)\nawait focusTab(\"http://localhost:3000\")\n",
		"menu": "John's personal startup script for scriptkit.com",
		"description": "This probably won't run on your machine 😜",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/file-search.js",
		"title": "Search for a File",
		"command": "file-search",
		"content": "// Menu: Search for a File\n// Description: File Search\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\n/** Note: This is a very basic search implementation based on \"mdfind\".\n * File search will be a _big_ focus in future versions of Script Kit\n */\n\nlet selectedFile = await arg(\n  \"Search a file:\",\n  async input => {\n    if (input?.length < 4) return []\n    let files = await fileSearch(input)\n\n    return files.map(path => {\n      return {\n        name: path.split(\"/\").pop(),\n        description: path,\n        value: path,\n      }\n    })\n  }\n)\n\nexec(`open ${selectedFile}`)\n",
		"menu": "Search for a File",
		"description": "File Search",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/focus-twitter.js",
		"title": "focus-twitter",
		"command": "focus-twitter",
		"content": "// Description: Launch Twitter in Chrome. If Twitter is already open, switch to that tab.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n// Shortcut: opt t\n\n//runs the \"chrome-tab\" script with twitter.com passed into the first `arg`\nawait run(\"chrome-tab\", \"twitter.com\")\n",
		"description": "Launch Twitter in Chrome. If Twitter is already open, switch to that tab.",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"shortcut": "opt t",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/giphy-search.js",
		"title": "Giphy",
		"command": "giphy-search",
		"content": "// Menu: Giphy\n// Description: Search giphy. Paste link.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet download = await npm(\"image-downloader\")\nlet queryString = await npm(\"query-string\")\n\nlet GIPHY_API_KEY = await env(\"GIPHY_API_KEY\", {\n  hint: md(\n    `Get a [Giphy API Key](https://developers.giphy.com/dashboard/)`\n  ),\n  ignoreBlur: true,\n  secret: true,\n})\n\nlet search = q =>\n  `https://api.giphy.com/v1/gifs/search?api_key=${GIPHY_API_KEY}&q=${q}&limit=10&offset=0&rating=g&lang=en`\n\nlet { input, url } = await arg(\n  \"Search giphy:\",\n  async input => {\n    if (!input) return []\n    let query = search(input)\n    let { data } = await get(query)\n\n    return data.data.map(gif => {\n      return {\n        name: gif.title.trim() || gif.slug,\n        value: {\n          input,\n          url: gif.images.original.url,\n        },\n        preview: `<img src=\"${gif.images.downsized.url}\" alt=\"\">`,\n      }\n    })\n  }\n)\n\nlet formattedLink = await arg(\"Format to paste\", [\n  {\n    name: \"URL Only\",\n    value: url,\n  },\n  {\n    name: \"Markdown Image Link\",\n    value: `![${input}](${url})`,\n  },\n  {\n    name: \"HTML <img>\",\n    value: `<img src=\"${url}\" alt=\"${input}\">`,\n  },\n])\n\nsetSelectedText(formattedLink)\n",
		"menu": "Giphy",
		"description": "Search giphy. Paste link.",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/gist-from-finder.js",
		"title": "Gist from Finder",
		"command": "gist-from-finder",
		"content": "// Menu: Gist from Finder\n// Description: Select a file in Finder, then create a Gist\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet filePath = await getSelectedFile()\nlet file = filePath.split(\"/\").pop()\n\nlet isPublic = await arg(\"Should the gist be public?\", [\n  { name: \"No\", value: false },\n  { name: \"Yes\", value: true },\n])\n\nconst body = {\n  files: {\n    [file]: {\n      content: await readFile(filePath, \"utf8\"),\n    },\n  },\n}\n\nif (isPublic) body.public = true\n\nlet config = {\n  headers: {\n    Authorization:\n      \"Bearer \" +\n      (await env(\"GITHUB_GIST_TOKEN\", {\n        info: `Create a gist token: <a class=\"bg-white\" href=\"https://github.com/settings/tokens/new\">https://github.com/settings/tokens/new</a>`,\n        message: `Set .env GITHUB_GIST_TOKEN:`,\n      })),\n  },\n}\nconst response = await post(\n  `https://api.github.com/gists`,\n  body,\n  config\n)\n\nexec(`open ` + response.data.html_url)\n",
		"menu": "Gist from Finder",
		"description": "Select a file in Finder, then create a Gist",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/google-image-grid.js",
		"title": "Google Image Grid",
		"command": "google-image-grid",
		"content": "// Menu: Google Image Grid\n// Description: Create a Grid of Images\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet gis = await npm(\"g-i-s\")\n\nawait arg(\"Search for images:\", async input => {\n  if (input.length < 3) return ``\n\n  let searchResults = await new Promise(res => {\n    gis(input, (_, results) => {\n      res(results)\n    })\n  })\n\n  return `<div class=\"flex flex-wrap\">${searchResults\n    .map(({ url }) => `<img class=\"h-32\" src=\"${url}\" />`)\n    .join(\"\")}</div>`\n})\n",
		"menu": "Google Image Grid",
		"description": "Create a Grid of Images",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/hello-world.js",
		"title": "Hello World",
		"command": "hello-world",
		"content": "// Menu: Hello World\n// Description: Enter an name, speak it back\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet name = await arg(`What's your name?`)\nsay(`Hello, ${name}!`)\n",
		"menu": "Hello World",
		"description": "Enter an name, speak it back",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/image-metadata.js",
		"title": "Detect Image Width and Height",
		"command": "image-metadata",
		"content": "// Menu: Detect Image Width and Height\n// Description: Show the metadata of an image\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet sharp = await npm(\"sharp\")\n\nlet image = await arg(\"Search an image:\", async input => {\n  if (input.length < 3) return []\n  let files = await fileSearch(input, { kind: \"image\" })\n\n  return files.map(path => {\n    return {\n      name: path.split(\"/\").pop(),\n      value: path,\n      description: path,\n    }\n  })\n})\n\nlet { width, height } = await sharp(image).metadata()\n\nconsole.log({ width, height })\nawait arg(`Width: ${width} Height: ${height}`)\n",
		"menu": "Detect Image Width and Height",
		"description": "Show the metadata of an image",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/image-resize.js",
		"title": "Resize an Image",
		"command": "image-resize",
		"content": "// Menu: Resize an Image\n// Description: Select an image in Finder. Type option + i to resize it.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n// Shortcut: opt i\n\nlet sharp = await npm(\"sharp\")\n\nlet imagePath = await getSelectedFile()\n\nlet width = Number(await arg(\"Enter width:\"))\n\nlet metadata = await sharp(imagePath).metadata()\n\nlet newHeight = Math.floor(\n  metadata.height * (width / metadata.width)\n)\n\nlet lastDot = /.(?!.*\\.)/\nlet resizedImageName = imagePath.replace(\n  lastDot,\n  `-${width}.`\n)\n\nawait sharp(imagePath)\n  .resize(width, newHeight)\n  .toFile(resizedImageName)\n",
		"menu": "Resize an Image",
		"description": "Select an image in Finder. Type option + i to resize it.",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"shortcut": "opt i",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/joke.js",
		"title": "Dad Joke",
		"command": "joke",
		"content": "// Menu: Dad Joke\n// Description: Logs out a Dad Joke from icanhazdadjoke.com\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet response = await get(`https://icanhazdadjoke.com/`, {\n  headers: {\n    Accept: \"text/plain\",\n  },\n})\n\nlet joke = response.data\nsetPanel(joke)\nsay(joke)\n",
		"menu": "Dad Joke",
		"description": "Logs out a Dad Joke from icanhazdadjoke.com",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/new-journal-entry.js",
		"title": "New Journal Entry",
		"command": "new-journal-entry",
		"content": "// Menu: New Journal Entry\n// Description: Generate a file using the current date in a specified folder\n// Author: John Lindquist\n// Twitter: @johnlindquist\nlet { format } = await npm(\"date-fns\")\n\nlet date = format(new Date(), \"yyyy-MM-dd\")\n\nlet journalPath = await env(\"JOURNAL_PATH\")\nif (!(await isDir(journalPath))) {\n  mkdir(\"-p\", journalPath)\n}\n\nlet journalFile = path.join(journalPath, date + \".md\")\nif (!(await isFile(journalFile))) {\n  let journalPrompt = `How are you feeling today?`\n  await writeFile(journalFile, journalPrompt)\n}\n\nedit(journalFile, env?.JOURNAL_PATH)\n",
		"menu": "New Journal Entry",
		"description": "Generate a file using the current date in a specified folder",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/open-project.js",
		"title": "Open Project",
		"command": "open-project",
		"content": "// Menu: Open Project\n// Description: List dev projects\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { projects, write } = await db(\"projects\", {\n  projects: [\n    \"~/.kit\",\n    \"~/projects/kitapp\",\n    \"~/projects/scriptkit.com\",\n  ],\n})\n\nonTab(\"Open\", async () => {\n  let project = await arg(\"Open project:\", projects)\n  edit(project)\n})\n\nonTab(\"Add\", async () => {\n  while (true) {\n    let project = await arg(\n      \"Add path to project:\",\n      md(projects.map(project => `* ${project}`).join(\"\\n\"))\n    )\n\n    projects.push(project)\n    await write()\n  }\n})\n\nonTab(\"Remove\", async () => {\n  while (true) {\n    let project = await arg(\"Open project:\", projects)\n\n    let indexOfProject = projects.indexOf(project)\n    projects.splice(indexOfProject, 1)\n    await write()\n  }\n})\n",
		"menu": "Open Project",
		"description": "List dev projects",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/paste-chrome-url.js",
		"title": "Paste URL",
		"command": "paste-chrome-url",
		"content": "// Menu: Paste URL\n// Description: Copy the current URL from your browser. Paste it at cursor.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet url = await getActiveTab()\nawait setSelectedText(url)\n",
		"menu": "Paste URL",
		"description": "Copy the current URL from your browser. Paste it at cursor.",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/project-name.js",
		"title": "Project Name",
		"command": "project-name",
		"content": "// Menu: Project Name\n// Description: Generate an alliteraive, dashed project name, copies it to the clipboard, and shows a notification\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { generate } = await npm(\"project-name-generator\")\n\nconst name = generate({\n  word: 2,\n  alliterative: true,\n}).dashed\n\nawait setSelectedText(name)\n",
		"menu": "Project Name",
		"description": "Generate an alliteraive, dashed project name, copies it to the clipboard, and shows a notification",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/quick-thoughts.js",
		"title": "Quick Thoughts",
		"command": "quick-thoughts",
		"content": "// Menu: Quick Thoughts\n// Description: Add lines to today's journal page\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { format } = await npm(\"date-fns\")\n\nlet date = format(new Date(), \"yyyy-MM-dd\")\nlet thoughtsPath = await env(\"THOUGHTS_PATH\")\nlet thoughtFile = path.join(thoughtsPath, date + \".md\")\n\nlet firstEntry = true\nlet addThought = async thought => {\n  if (firstEntry) {\n    thought = `\n- ${format(new Date(), \"hh:mmaa\")}\n  ${thought}\\n`\n    firstEntry = false\n  } else {\n    thought = `  ${thought}\\n`\n  }\n\n  await appendFile(thoughtFile, thought)\n}\n\nlet openThoughtFile = async () => {\n  let { stdout } = exec(`wc ${thoughtFile}`, {\n    silent: true,\n  })\n  let lineCount = stdout.trim().split(\" \").shift()\n  edit(thoughtFile, thoughtsPath, lineCount + 1) //open with cursor at end\n  await wait(500)\n  exit()\n}\n\nif (!(await isFile(thoughtFile)))\n  await writeFile(thoughtFile, `# ${date}\\n`)\n\nwhile (true) {\n  let thought = await arg({\n    placeholder: \"Thought:\",\n    hint: `Type \"open\" to open journal`,\n  })\n  if (thought === \"open\") {\n    await openThoughtFile()\n  } else {\n    await addThought(thought)\n  }\n}\n",
		"menu": "Quick Thoughts",
		"description": "Add lines to today's journal page",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/read-news.js",
		"title": "Read News",
		"command": "read-news",
		"content": "// Menu: Read News\n// Description: Scrape headlines from news.google.com then pick headline to read\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet headlines = await scrapeSelector(\n  \"https://news.google.com\",\n  \"h3\",\n  el => ({\n    name: el.innerText,\n    value: el.firstChild.href,\n  })\n)\n\nlet url = await arg(\"What do you want to read?\", headlines)\n\nexec(`open \"${url}\"`)\n",
		"menu": "Read News",
		"description": "Scrape headlines from news.google.com then pick headline to read",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/reddit.js",
		"title": "Reddit",
		"command": "reddit",
		"content": "// Menu: Reddit\n// Description: Browse Reddit from Script Kit\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet Reddit = await npm(\"reddit\")\n\nlet envOptions = {\n  ignoreBlur: true,\n  hint: md(\n    `[Create a reddit app](https://www.reddit.com/prefs/apps)`\n  ),\n  secret: true,\n}\n\nlet reddit = new Reddit({\n  username: await env(\"REDDIT_USERNAME\"),\n  password: await env(\"REDDIT_PASSWORD\"),\n  appId: await env(\"REDDIT_APP_ID\", envOptions),\n  appSecret: await env(\"REDDIT_APP_SECRET\", envOptions),\n  userAgent: `ScriptKit/1.0.0 (https://scriptkit.com)`,\n})\n\nlet subreddits = [\n  \"funny\",\n  \"aww\",\n  \"dataisbeautiful\",\n  \"mildlyinteresting\",\n  \"RocketLeague\",\n]\n\nsubreddits.forEach(sub => {\n  onTab(sub, async () => {\n    let url = await arg(\n      \"Select post to open:\",\n      async () => {\n        let best = await reddit.get(`/r/${sub}/hot`)\n\n        return best.data.children.map(({ data }) => {\n          let {\n            title,\n            thumbnail,\n            url,\n            subreddit_name_prefixed,\n            preview,\n          } = data\n\n          let resolutions =\n            preview?.images?.[0]?.resolutions\n          let previewImage =\n            resolutions?.[resolutions?.length - 1]?.url\n\n          return {\n            name: title,\n            description: subreddit_name_prefixed,\n            value: url,\n            img: thumbnail,\n            ...(previewImage && {\n              preview: md(`\n![${title}](${previewImage})\n\n### ${title}          \n                `),\n            }),\n          }\n        })\n      }\n    )\n\n    exec(`open \"${url}\"`)\n  })\n})\n",
		"menu": "Reddit",
		"description": "Browse Reddit from Script Kit",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/share-selected-file.js",
		"title": "Share Selected File",
		"command": "share-selected-file",
		"content": "// Menu: Share Selected File\n// Description: Select a file in Finder. Creates tunnel and copies link to clipboard.\n// Author: John Lindquist\n// Twitter: @johnlindquistt\n// Background: true\n\nlet ngrok = await npm(\"ngrok\")\nlet handler = await npm(\"serve-handler\")\nlet exitHook = await npm(\"exit-hook\")\nlet http = await import(\"http\")\n\nlet filePath = await getSelectedFile()\n\nlet symLinkName = _.last(\n  filePath.split(path.sep)\n).replaceAll(\" \", \"-\")\nlet symLinkPath = tmp(symLinkName)\n\nconsole.log(`Creating temporary symlink: ${symLinkPath}`)\nln(filePath, symLinkPath)\n\nlet port = 3033\n\nconst server = http.createServer(handler)\n\ncd(tmp())\n\nserver.listen(port, async () => {\n  let tunnel = await ngrok.connect(port)\n  let shareLink = tunnel + \"/\" + symLinkName\n  console.log(\n    chalk`{yellow ${shareLink}} copied to clipboard`\n  )\n  copy(shareLink)\n})\n\nexitHook(() => {\n  server.close()\n  if (test(\"-f\", symLinkPath)) {\n    console.log(\n      `Removing temporary symlink: ${symLinkPath}`\n    )\n    exec(`rm ${symLinkPath}`)\n  }\n})\n",
		"menu": "Share Selected File",
		"description": "Select a file in Finder. Creates tunnel and copies link to clipboard.",
		"author": "John Lindquist",
		"twitter": "@johnlindquistt",
		"background": "true",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/sound-settings.js",
		"title": "Open Sound Prefs",
		"command": "sound-settings",
		"content": "// Menu: Open Sound Prefs\n// Description: Open the Sound prefs panel\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nexec(`open /System/Library/PreferencePanes/Sound.prefPane`)\n",
		"menu": "Open Sound Prefs",
		"description": "Open the Sound prefs panel",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/speak-script.js",
		"title": "Speak Script",
		"command": "speak-script",
		"content": "// Menu: Speak Script\n// Description: Run a Script based on Speech Input\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { scripts } = await db(\"scripts\")\n\nlet escapedScripts = scripts.map(script => ({\n  name: `\"${script.name.replace(/\"/g, '\\\\\"')}\"`, //escape quotes\n  value: script.filePath,\n}))\n\nlet speakableScripts = escapedScripts\n  .map(({ name }) => name)\n  .join(\",\")\n\nlet speech = await applescript(String.raw`\ntell application \"SpeechRecognitionServer\"\n\tlisten for {${speakableScripts}}\nend tell\n`)\n\nlet script = escapedScripts.find(\n  script => script.name == `\"${speech}\"`\n)\n\nawait run(script.value)\n",
		"menu": "Speak Script",
		"description": "Run a Script based on Speech Input",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/speed-reader.js",
		"title": "Speed Reader",
		"command": "speed-reader",
		"content": "// Menu: Speed Reader\n// Description: Display clipboard content at a defined rate\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet wpm = 1000 * (60 / (await arg('Enter words per minute:')))\n\nlet text = await paste()\ntext = text\n  .trim()\n  .split(' ')\n  .filter(Boolean)\n  .flatMap((sentence) => sentence.trim().split(' '))\n\nlet i = 0\n\nlet id = setInterval(() => {\n  setPlaceholder(` ${text[i++]}`)\n  if (i >= text.length) clearInterval(id)\n}, wpm)\n",
		"menu": "Speed Reader",
		"description": "Display clipboard content at a defined rate",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/synonyms.js",
		"title": "Synonym",
		"command": "synonyms",
		"content": "// Menu: Synonym\n// Description: List synonyms\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet synonym = await arg(\"Type a word\", async input => {\n  if (!input || input?.length < 3) return []\n  let url = `https://api.datamuse.com/words?ml=${input}&md=d`\n  let response = await get(url)\n\n  return response.data.map(({ word, defs }) => {\n    return {\n      name: `${word}${defs?.[0] && ` - ${defs[0]}`}`,\n      value: word,\n      selected: `Paste ${word}`,\n    }\n  })\n})\n\nsetSelectedText(synonym)\n",
		"menu": "Synonym",
		"description": "List synonyms",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/title-case.js",
		"title": "Title Case",
		"command": "title-case",
		"content": "// Menu: Title Case\n// Description: Converts the selected text to title case\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { titleCase } = await npm(\"title-case\")\n\nlet text = await getSelectedText()\nlet titleText = titleCase(text)\nawait setSelectedText(titleText)\n",
		"menu": "Title Case",
		"description": "Converts the selected text to title case",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/update-twitter-name.js",
		"title": "Update Twitter Name",
		"command": "update-twitter-name",
		"content": "// Menu: Update Twitter Name\n// Description: Change your name on twitter\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet Twitter = await npm('twitter-lite')\n\nlet envOptions = {\n  hint: md(\n    `You need to [create an app](https://developer.twitter.com/en/apps) to get these keys/tokens`,\n  ),\n  ignoreBlur: true,\n  secret: true,\n}\n\nlet client = new Twitter({\n  consumer_key: await env('TWITTER_CONSUMER_KEY', envOptions),\n  consumer_secret: await env('TWITTER_CONSUMER_SECRET', envOptions),\n  access_token_key: await env('TWITTER_ACCESS_TOKEN_KEY', envOptions),\n  access_token_secret: await env('TWITTER_ACCESS_TOKEN_SECRET', envOptions),\n})\n\nlet name = await arg('Enter new twitter name:')\n\nlet response = await client\n  .post('account/update_profile', {\n    name,\n  })\n  .catch((error) => console.log(error))\n",
		"menu": "Update Twitter Name",
		"description": "Change your name on twitter",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/vocab-quiz.js",
		"title": "Vocab Quiz",
		"command": "vocab-quiz",
		"content": "// Menu: Vocab Quiz\n// Description: Quiz on random vocab words\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nawait npm(\"wordnet-db\")\nlet randomWord = await npm(\"random-word\")\nlet { WordNet } = await npm(\"natural\")\n\nlet wordNet = new WordNet()\nlet words = []\n\nwhile (true) {\n  setPlaceholder(`Finding random word and definitions...`)\n\n  while (words.length < 4) {\n    let quizWord = randomWord()\n    let results = await new Promise(resolve => {\n      wordNet.lookup(quizWord, resolve)\n    })\n    if (results.length) {\n      let [{ lemma, def }] = results\n      words.push({ name: def, value: lemma })\n    }\n  }\n\n  let word = words[0]\n  let result = await arg(\n    `What does \"${word.value}\" mean?`,\n    _.shuffle(words)\n  )\n\n  let correct = word.value === result\n  setPlaceholder(\n    `${correct ? \"✅\" : \"🚫\"} ${word.value}: ${word.name}`\n  )\n  words = []\n\n  await wait(2000)\n}\n",
		"menu": "Vocab Quiz",
		"description": "Quiz on random vocab words",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/word-api.js",
		"title": "Word API",
		"command": "word-api",
		"content": "// Menu: Word API\n// Description: Queries a word api. Pastes selection.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet typeMap = {\n  describe: \"rel_jjb\",\n  trigger: \"rel_trg\",\n  noun: \"rel_jja\",\n  follow: \"lc\",\n  rhyme: \"rel_rhy\",\n  spell: \"sp\",\n  synonym: \"ml\",\n  sounds: \"rel_nry\",\n  suggest: \"suggest\",\n}\n\nlet word = await arg(\"Type a word and hit Enter:\")\nlet typeArg = await arg(\n  \"What would you like to find?\",\n  Object.keys(typeMap)\n)\n\nlet type = typeMap[typeArg]\nword = word.replace(/ /g, \"+\")\n\nlet url = `https://api.datamuse.com/words?${type}=${word}&md=d`\nif (typeArg == \"suggest\")\n  url = `https://api.datamuse.com/sug?s=${word}&md=d`\n\nlet response = await get(url)\nlet formattedWords = response.data.map(({ word, defs }) => {\n  let info = \"\"\n  if (defs) {\n    let [type, meaning] = defs[0].split(\"\\t\")\n    info = `- (${type}): ${meaning}`\n  }\n  return {\n    name: `${word}${info}`,\n    value: word,\n  }\n})\n\nlet pickWord = await arg(\"Select to paste:\", formattedWords)\nsetSelectedText(pickWord)\n",
		"menu": "Word API",
		"description": "Queries a word api. Pastes selection.",
		"author": "John Lindquist",
		"twitter": "@johnlindquist",
		"user": "johnlindquist",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/johnlindquist/zacjones93/main/scripts/upload-photos.js",
		"title": "upload-photos",
		"command": "upload-photos",
		"content": "const fs = await npm(\"fs\"); \nconst plantName = await arg(\"Enter a plant name:\");\nconst potSize = await arg(\"Enter pot size: \");\nconst shotType = await arg(\"Is this product or detail?\", [\"product\", \"detail\"]);\n\nconst photos = await drop(\"Drop your images\");\nconsole.log(photos);\n\n\nlet renamePhotoToDirectory = (path, plantName) => {\n // going to be a env variable\n  let targetDirectory = \"/Users/zac/Desktop/photops/photos\";\n\n  let photoPath = `${targetDirectory}/${plantName}`;\n\n  fs.rename(path, photoPath, (err) => {\n    if (err) return console.log(\"there was an error: \", err);\n\n    console.log(\"selectedFiles renamed\");\n  });\n};\n\nphotos.map((plant, index) => {\n  if (shotType === \"detail\") {\n    renamePhotoToDirectory(\n      plant.path,\n      `${plantName}Detail${potSize}_${index + 1}.png`\n    );\n  } else {\n    renamePhotoToDirectory(plant.path, `${plantName}${potSize}_${index + 1}.png`);\n  }\n});\n",
		"user": "zacjones93",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/cloudinary-upload.js",
		"title": "Cloudinary upload",
		"command": "cloudinary-upload",
		"content": "// Menu: Cloudinary upload\n// Description: Upload an image to cloudinary\n// Shortcut: command option control c\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nimport path from 'path'\n\nconst cloudinaryCloudName = await env('CLOUDINARY_CLOUD_NAME')\nconst cloudinaryKey = await env('CLOUDINARY_API_KEY')\nconst cloudinarySecret = await env('CLOUDINARY_API_SECRET')\nconst cloudiaryConsoleId = await env('CLOUDINARY_CONSOLE_ID')\n\nawait npm('cloudinary')\nimport cloudinary from 'cloudinary'\n\nconst cacheDb = await db('cloudinary-cache', {lastChoice: '', folders: {}})\nawait cacheDb.read()\n\ncloudinary.config({\n  cloud_name: cloudinaryCloudName,\n  api_key: cloudinaryKey,\n  api_secret: cloudinarySecret,\n  secure: true,\n})\n\nconst actions = {\n  CREATE_NEW: 'creating new folder',\n  REFRESH_CACHE: 'refreshing cache',\n  OPEN_DIR: 'opening directory',\n}\n\nlet chosenDirectory = await cacheDb.data.lastChoice\nlet lastSelection\nwhile (true) {\n  // if the last action was to create a new directory then we know the chosen\n  // directory is new and has no folders otherwise we have to wait a few seconds\n  // for the API to be prepared for us to make a request for the contents.\n  const directories =\n    lastSelection === actions.CREATE_NEW\n      ? []\n      : await getFolders(chosenDirectory)\n  lastSelection = await arg(\n    `Select directory in ${chosenDirectory || '/'}`,\n    [\n      {name: '.', value: '.', description: '✅ Choose this directory'},\n      !chosenDirectory\n        ? null\n        : {name: '..', value: '..', description: '⤴️ Go up a directory'},\n      ...directories.map(folder => ({\n        name: folder.name,\n        value: folder.path,\n        description: '⤵️ Select directory',\n      })),\n      {\n        name: 'Open directory',\n        value: actions.OPEN_DIR,\n        description: '🌐 Open this directory in the browser',\n      },\n      {\n        name: 'Refresh cache',\n        value: actions.REFRESH_CACHE,\n        description: '🔄 Refresh the cache for this directory',\n      },\n      {\n        name: 'Create new directory',\n        value: actions.CREATE_NEW,\n        description: '➕ Create a new directory here',\n      },\n    ].filter(Boolean),\n  )\n  if (lastSelection === '..') {\n    chosenDirectory = chosenDirectory.split('/').slice(0, -1).join('/')\n  } else if (lastSelection === '.') {\n    break\n  } else if (lastSelection === actions.CREATE_NEW) {\n    const newFolderName = await arg(`What's the new folder name?`)\n    const newDirectory = `${chosenDirectory}/${newFolderName}`\n    await cloudinary.v2.api.create_folder(newDirectory)\n    delete cacheDb.data.folders[chosenDirectory]\n    chosenDirectory = newDirectory\n  } else if (lastSelection === actions.REFRESH_CACHE) {\n    delete cacheDb.data.folders[chosenDirectory]\n  } else if (lastSelection === actions.OPEN_DIR) {\n    await openFolder(chosenDirectory)\n  } else {\n    chosenDirectory = lastSelection\n  }\n}\n\ncacheDb.data.lastChoice = chosenDirectory\nawait cacheDb.write()\n\nconst images = await drop('Drop the image(s) you want to upload')\n\nlet renameSome = true\nif (images.length > 1) {\n  const renameChoice = await arg('Do you want to rename any of these?', [\n    'yes',\n    'no',\n  ])\n  renameSome = renameChoice === 'yes'\n}\n\nfor (const image of images) {\n  const defaultName = path.parse(image.path).name\n\n  const name = renameSome\n    ? (await arg({\n        placeholder: `Name of this image?`,\n        hint: `Default is: \"${defaultName}\"`,\n      })) || defaultName\n    : defaultName\n\n  setPlaceholder(`Uploading ${name}`)\n  const uploadedImage = await cloudinary.v2.uploader.upload(image.path, {\n    public_id: name,\n    overwrite: false,\n    folder: chosenDirectory,\n  })\n\n  // If you have multiple files then this isn't really useful unless you have\n  // clipbloard history (which I recommend you get!)\n  await copy(uploadedImage.secure_url)\n}\n\nawait openFolder(chosenDirectory)\n\nfunction openFolder(folder) {\n  const encodedFolder = encodeURIComponent(folder)\n  console.log('opening')\n  return exec(\n    `open \"https://cloudinary.com/console/${cloudiaryConsoleId}/media_library/folders/${encodedFolder}\"`,\n  )\n}\n\nasync function getFolders(directory) {\n  const cachedDirectories = cacheDb.data.folders[directory]\n  if (cachedDirectories) {\n    return cachedDirectories\n  }\n\n  try {\n    const {folders: directories} = !directory\n      ? await cloudinary.v2.api.root_folders()\n      : await cloudinary.v2.api.sub_folders(directory)\n\n    cacheDb.data.folders[directory] = directories\n\n    await cacheDb.write()\n\n    return directories\n  } catch (error) {\n    console.error('error with the directory')\n    return []\n  }\n}\n",
		"menu": "Cloudinary upload",
		"description": "Upload an image to cloudinary",
		"shortcut": "command option control c",
		"author": "Kent C. Dodds",
		"twitter": "@kentcdodds",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/convert-kit-lookup.js",
		"title": "ConvertKit > Lookup",
		"command": "convert-kit-lookup",
		"content": "// Menu: ConvertKit > Lookup\n// Description: Query convertkit\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nconst CONVERT_KIT_API_SECRET = await env('CONVERT_KIT_API_SECRET')\nconst CONVERT_KIT_API_KEY = await env('CONVERT_KIT_API_KEY')\n\nconst query = await arg('query')\nlet url\nif (query.includes('@')) {\n  const sub = await getConvertKitSubscriber(query)\n  if (sub?.id) {\n    url = `https://app.convertkit.com/subscribers/${sub.id}`\n  }\n}\n\nif (!url) {\n  url = `https://app.convertkit.com/subscribers?utf8=%E2%9C%93&q=${query}&status=all`\n}\nexec(`open \"${url}\"`)\n\nasync function getConvertKitSubscriber(email) {\n  const url = new URL('https://api.convertkit.com/v3/subscribers')\n  url.searchParams.set('api_secret', CONVERT_KIT_API_SECRET)\n  url.searchParams.set('email_address', email)\n\n  const resp = await fetch(url.toString())\n  const json = await resp.json()\n  const {subscribers: [subscriber] = []} = json\n\n  return subscriber\n}\n",
		"menu": "ConvertKit > Lookup",
		"description": "Query convertkit",
		"author": "Kent C. Dodds",
		"twitter": "@kentcdodds",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/daily-story.js",
		"title": "Daily Story",
		"command": "daily-story",
		"content": "// Menu: Daily Story\n// Description: Write a quick story\n// Author: Kent C. Dodds\n// Shortcut: command option control o\n// Twitter: @kentcdodds\n\nconst dateFns = await npm('date-fns')\nconst filenamify = await npm('filenamify')\nconst prettier = await npm('prettier')\n\nconst storyDir = await env(\n  'DAILY_STORY_DIRECTORY',\n  `Where do you want daily stories to be saved?`,\n)\n\nconst story = await textarea({placeholder: 'Write your story here'})\n\nconst today = dateFns.format(new Date(), 'yyyy-MM-dd')\nconst date = await arg({\n  input: today,\n  hint: 'When did this happen?',\n})\nconst title = await arg({\n  placeholder: 'What do you want to call this story?',\n  hint: 'Title',\n})\n\nconst md = `---\ntitle: ${title}\ndate: ${date}\nwritten: ${today}\n---\n\n${story}\n`\n\n// prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser: 'markdown',\n  arrowParens: 'avoid',\n  bracketSpacing: false,\n  embeddedLanguageFormatting: 'auto',\n  htmlWhitespaceSensitivity: 'css',\n  insertPragma: false,\n  jsxBracketSameLine: false,\n  jsxSingleQuote: false,\n  printWidth: 80,\n  proseWrap: 'always',\n  quoteProps: 'as-needed',\n  requirePragma: false,\n  semi: false,\n  singleQuote: true,\n  tabWidth: 2,\n  trailingComma: 'all',\n  useTabs: false,\n  vueIndentScriptAndStyle: false,\n})\n\nconst filename = filenamify(\n  `${date}-${title.toLowerCase().replace(/ /g, '-')}.md`,\n  {replacement: '-'},\n)\nawait writeFile(path.join(storyDir, filename), prettyMd)\n",
		"menu": "Daily Story",
		"description": "Write a quick story",
		"author": "Kent C. Dodds",
		"shortcut": "command option control o",
		"twitter": "@kentcdodds",
		"prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser": "'markdown',",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/link-kit.js",
		"title": "link-kit",
		"command": "link-kit",
		"content": "await cli(\"install\", \"~/.kit\")",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/new-post.js",
		"title": "New Post",
		"command": "new-post",
		"content": "// Menu: New Post\n// Description: Create a new blog post\n// Author: Kent C. Dodds\n// Shortcut: command option control p\n// Twitter: @kentcdodds\n\nconst dateFns = await npm('date-fns')\nconst prettier = await npm('prettier')\nconst YAML = await npm('yaml')\nconst slugify = await npm('@sindresorhus/slugify')\nconst {format: formatDate} = await npm('date-fns')\nconst makeMetascraper = await npm('metascraper')\nconst {$filter, toRule} = await npm('@metascraper/helpers')\n\nconst unsplashTitleToAlt = toRule(str => str.replace(/ photo – .*$/, ''))\nconst unsplashOGTitleToAuthor = toRule(str =>\n  str.replace(/Photo by (.*?) on Unsplash/, '$1'),\n)\nconst unsplashImageToPhotoId = toRule(str =>\n  new URL(str).pathname.replace('/', ''),\n)\n\nconst metascraper = makeMetascraper([\n  {\n    unsplashPhotoId: [\n      unsplashImageToPhotoId($ =>\n        $('meta[property=\"og:image\"]').attr('content'),\n      ),\n    ],\n  },\n  {\n    author: [\n      unsplashOGTitleToAuthor($ =>\n        $('meta[property=\"og:title\"]').attr('content'),\n      ),\n    ],\n  },\n  {alt: [unsplashTitleToAlt($ => $('title').text())]},\n])\n\nasync function getMetadata(url) {\n  const html = await fetch(url).then(res => res.text())\n  return metascraper({html, url})\n}\n\nconst blogDir = await env(\n  'KCD_BLOG_CONTENT_DIR',\n  `What's the path to the blog content directory on this machine?`,\n)\n\nconst title = await arg({\n  placeholder: `What's the title of this post?`,\n  hint: 'Title',\n  ignoreBlur: true,\n})\n\nconst description = await arg({\n  placeholder: `What's the description of this post?`,\n  hint: 'Description',\n  input: 'TODO: add a description',\n  ignoreBlur: true,\n})\n\nconst categories = (\n  await arg({\n    placeholder: `What are the categories of this post?`,\n    hint: 'Categories (comma separated)',\n    ignoreBlur: true,\n  })\n)\n  .split(',')\n  .map(c => c.trim())\n  .filter(Boolean)\n\nconst keywords = (\n  await arg({\n    placeholder: `What are the keywords of this post?`,\n    hint: 'Keywords (comma separated)',\n    ignoreBlur: true,\n  })\n)\n  .split(',')\n  .map(c => c.trim())\n  .filter(Boolean)\n\nconst filename = slugify(title, {decamelize: false})\nawait exec(`open https://unsplash.com/s/photos/${filename}`)\n\nconst unsplashPhotoInput = await arg({\n  placeholder: `What's the unsplash photo?`,\n  hint: 'Unsplash Photo',\n  ignoreBlur: true,\n})\nconst unsplashPhotoUrl = unsplashPhotoInput.startsWith('http')\n  ? unsplashPhotoInput\n  : `https://unsplash.com/photos/${unsplashPhotoInput}`\n\nconst metadata = await getMetadata(unsplashPhotoUrl)\n\nconst frontmatter = YAML.stringify({\n  title,\n  date: dateFns.format(new Date(), 'yyyy-MM-dd'),\n  description,\n  categories,\n  meta: {keywords},\n  bannerCloudinaryId: `unsplash/${metadata.unsplashPhotoId}`,\n  bannerAlt: metadata.alt,\n  bannerCredit: `Photo by [${metadata.author}](${unsplashPhotoUrl})`,\n})\n\nconst md = `---\n${frontmatter}\n---\n\nBe excellent to each other.\n`\n\n// prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser: 'markdown',\n  arrowParens: 'avoid',\n  bracketSpacing: false,\n  embeddedLanguageFormatting: 'auto',\n  htmlWhitespaceSensitivity: 'css',\n  insertPragma: false,\n  jsxBracketSameLine: false,\n  jsxSingleQuote: false,\n  printWidth: 80,\n  proseWrap: 'always',\n  quoteProps: 'as-needed',\n  requirePragma: false,\n  semi: false,\n  singleQuote: true,\n  tabWidth: 2,\n  trailingComma: 'all',\n  useTabs: false,\n  vueIndentScriptAndStyle: false,\n})\n\nconst newFile = path.join(blogDir, `${filename}.mdx`)\nawait writeFile(newFile, prettyMd)\nawait edit(newFile)\n",
		"menu": "New Post",
		"description": "Create a new blog post",
		"author": "Kent C. Dodds",
		"shortcut": "command option control p",
		"twitter": "@kentcdodds",
		"prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser": "'markdown',",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/open-epic-react-repos.js",
		"title": "Open EpicReact Repos",
		"command": "open-epic-react-repos",
		"content": "// Menu: Open EpicReact Repos\n// Description: Open all the EpicReact Repos in VSCode\n\nconst repos = [\n  'advanced-react-hooks',\n  'advanced-react-patterns',\n  'bookshelf',\n  'react-fundamentals',\n  'react-hooks',\n  'react-performance',\n  'react-suspense',\n  'testing-react-apps',\n]\n\nfor (const repo of repos) {\n  edit(`~/code/epic-react/${repo}`)\n}\n",
		"menu": "Open EpicReact Repos",
		"description": "Open all the EpicReact Repos in VSCode",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/open-project.js",
		"title": "Open Project",
		"command": "open-project",
		"content": "// Menu: Open Project\n// Description: Opens a project in code\n// Shortcut: cmd shift .\nimport path from 'path'\nimport fs from 'fs'\nimport os from 'os'\n\nconst isDirectory = async filePath => {\n  try {\n    const stat = await fs.promises.stat(filePath)\n    return stat.isDirectory()\n  } catch (e) {\n    return false\n  }\n}\nconst isFile = async filePath => {\n  try {\n    const stat = await fs.promises.stat(filePath)\n    return stat.isFile()\n  } catch (e) {\n    return false\n  }\n}\n\nasync function getProjects(parentDir) {\n  const codeDir = (await ls(parentDir)).stdout.split('\\n').filter(Boolean)\n  const choices = []\n  for (const dir of codeDir) {\n    let fullPath = dir\n    if (!path.isAbsolute(dir)) {\n      fullPath = path.join(parentDir, dir)\n    }\n    if (fullPath.includes('/node_modules/')) continue\n    if (fullPath.includes('/build/')) continue\n    if (fullPath.includes('/dist/')) continue\n    if (fullPath.includes('/coverage/')) continue\n\n    const pkgjson = path.join(fullPath, 'package.json')\n    if (await isFile(pkgjson)) {\n      choices.push({\n        name: dir,\n        value: fullPath,\n        description: fullPath,\n      })\n    } else if (await isDirectory(fullPath)) {\n      choices.push(...(await getProjects(fullPath)))\n    }\n  }\n  return choices\n}\n\nconst choice = await arg('Which project?', async () => {\n  const choices = [\n    ...(await getProjects(path.join(os.homedir(), 'code'))),\n    ...(await getProjects(path.join(os.homedir(), 'Desktop'))),\n  ]\n  return choices\n})\n\nawait edit(choice)\n",
		"menu": "Open Project",
		"description": "Opens a project in code",
		"shortcut": "cmd shift .",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/shorten.js",
		"title": "Shorten",
		"command": "shorten",
		"content": "// Menu: Shorten\n// Description: Shorten a given URL with a given short name via netlify-shortener\n// Shortcut: command option control s\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nconst dir = await env(\n  'SHORTEN_REPO_DIRECTORY',\n  'Where is your netlify-shortener repo directory?',\n)\n\nconst longURL = await arg(`What's the full URL?`)\n// TODO: figure out how to make this optional\nconst shortName = await arg(`What's the short name?`)\nconst netlifyShortenerPath = path.join(\n  dir,\n  'node_modules/netlify-shortener/dist/index.js',\n)\nconst {baseUrl} = JSON.parse(await readFile(path.join(dir, 'package.json')))\n\nsetPlaceholder(`Creating redirect: ${baseUrl}/${shortName} -> ${longURL}`)\nconst result = exec(\n  `node \"${netlifyShortenerPath}\" \"${longURL}\" \"${shortName}\"`,\n)\n\nconst {stderr, stdout} = result\n\nif (result.code === 0) {\n  const lastLine = stdout.split('\\n').filter(Boolean).slice(-1)[0]\n  notify({\n    title: '✅ Short URL created',\n    message: lastLine,\n  })\n} else {\n  const getErr = str => str.match(/Error: (.+)\\n/)?.[1]\n  const error = getErr(stderr) ?? getErr(stdout) ?? 'Unknown error'\n  console.error({stderr, stdout})\n  notify({\n    title: '❌ Short URL not created',\n    message: error,\n  })\n}\n",
		"menu": "Shorten",
		"description": "Shorten a given URL with a given short name via netlify-shortener",
		"shortcut": "command option control s",
		"author": "Kent C. Dodds",
		"twitter": "@kentcdodds",
		"tODO": "figure out how to make this optional",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/twimage-download.js",
		"title": "Twimage Download",
		"command": "twimage-download",
		"content": "// Menu: Twimage Download\n// Description: Download twitter images and set their exif info based on the tweet metadata\n// Shortcut: command option control t\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nimport fs from 'fs'\nimport {fileURLToPath, URL} from 'url'\n\nconst exiftool = await npm('node-exiftool')\nconst exiftoolBin = await npm('dist-exiftool')\nconst fsExtra = await npm('fs-extra')\n\nconst baseOut = home('Pictures/twimages')\n\nconst token = await env('TWITTER_BEARER_TOKEN')\nconst twitterUrl = await arg('Twitter URL')\nconsole.log(`Starting with ${twitterUrl}`)\n\nconst tweetId = new URL(twitterUrl).pathname.split('/').slice(-1)[0]\nconst response = await get(\n  `https://api.twitter.com/1.1/statuses/show/${tweetId}.json?include_entities=true`,\n  {\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  },\n)\n\nconst tweet = response.data\nconsole.log({tweet})\n\nconst {\n  geo,\n  id,\n  text,\n  created_at,\n  extended_entities: {media: medias} = {\n    media: [\n      {\n        type: 'photo',\n        media_url_https: await arg({\n          ignoreBlur: true,\n          input: `Can't find media. What's the URL for the media?`,\n          hint: `Media URL`,\n        }),\n      },\n    ],\n  },\n} = tweet\n\nconst [latitude, longitude] = geo?.coordinates || []\n\nconst ep = new exiftool.ExiftoolProcess(exiftoolBin)\n\nawait ep.open()\n\nfor (const media of medias) {\n  let url\n  if (media.type === 'photo') {\n    url = media.media_url_https\n  } else if (media.type === 'video') {\n    let best = {bitrate: 0}\n    for (const variant of media.video_info.variants) {\n      if (variant.bitrate > best.bitrate) best = variant\n    }\n    url = best.url\n  } else {\n    throw new Error(`Unknown media type for ${twitterUrl}: ${media.type}`)\n  }\n  if (!url) throw new Error(`Huh... no media url found for ${twitterUrl}`)\n\n  const formattedDate = formatDate(created_at)\n  const colonDate = formattedDate.replace(/-/g, ':')\n  const formattedTimestamp = formatTimestamp(created_at)\n  const filename = new URL(url).pathname.split('/').slice(-1)[0]\n  const filepath = path.join(\n    baseOut,\n    formattedDate.split('-').slice(0, 2).join('-'),\n    /\\..+$/.test(filename) ? filename : `${filename}.jpg`,\n  )\n\n  await download(url, filepath)\n\n  await ep.writeMetadata(\n    filepath,\n    {\n      ImageDescription: `${text} – ${twitterUrl}`,\n      Keywords: 'photos from tweets',\n      DateTimeOriginal: formattedTimestamp,\n      FileModifyDate: formattedTimestamp,\n      ModifyDate: formattedTimestamp,\n      CreateDate: formattedTimestamp,\n      ...(geo\n        ? {\n            GPSLatitudeRef: latitude > 0 ? 'North' : 'South',\n            GPSLongitudeRef: longitude > 0 ? 'East' : 'West',\n            GPSLatitude: latitude,\n            GPSLongitude: longitude,\n            GPSDateStamp: colonDate,\n            GPSDateTime: formattedTimestamp,\n          }\n        : null),\n    },\n    ['overwrite_original'],\n  )\n}\n\nawait ep.close()\nnotify(`All done with ${twitterUrl}`)\n\nfunction formatDate(t) {\n  const d = new Date(t)\n  return `${d.getFullYear()}-${padZero(d.getMonth() + 1)}-${padZero(\n    d.getDate(),\n  )}`\n}\nfunction formatTimestamp(t) {\n  const d = new Date(t)\n  const formattedDate = formatDate(t)\n  return `${formatDate(t)} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n}\nfunction padZero(n) {\n  return String(n).padStart(2, '0')\n}\n\nasync function getGeoCoords(placeId) {\n  const response = await get(\n    `https://api.twitter.com/1.1/geo/id/${placeId}.json`,\n    {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    },\n  )\n  const [longitude, latitude] = response.data.centroid\n  return {latitude, longitude}\n}\n\nasync function download(url, out) {\n  console.log(`downloading ${url} to ${out}`)\n  await fsExtra.ensureDir(path.dirname(out))\n\n  const writer = fs.createWriteStream(out)\n  const response = await get(url, {responseType: 'stream'})\n  response.data.pipe(writer)\n\n  return new Promise((resolve, reject) => {\n    writer.on('finish', () => resolve(out))\n    writer.on('error', reject)\n  })\n}\n",
		"menu": "Twimage Download",
		"description": "Download twitter images and set their exif info based on the tweet metadata",
		"shortcut": "command option control t",
		"author": "Kent C. Dodds",
		"twitter": "@kentcdodds",
		"user": "kentcdodds",
		"extension": ".js"
	},
	{
		"url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/update-epic-react-deps.js",
		"title": "Update EpicReact deps",
		"command": "update-epic-react-deps",
		"content": "// Menu: Update EpicReact deps\n// Description: Update all the dependencies in the epicreact workshop repos\n\nconst repos = [\n  'advanced-react-hooks',\n  'advanced-react-patterns',\n  'bookshelf',\n  'react-fundamentals',\n  'react-hooks',\n  'react-performance',\n  'react-suspense',\n  'testing-react-apps',\n]\n\nconst script = `git add -A && git stash && git checkout main && git pull && ./scripts/update-deps && git commit -am \"update all deps\" --no-verify && git push && git status`\nfor (const repo of repos) {\n  const scriptString = JSON.stringify(\n    `cd ~/code/epic-react/${repo} && ${script}`,\n  )\n  exec(\n    `osascript -e 'tell application \"Terminal\" to activate' -e 'tell application \"Terminal\" to do script ${scriptString}'`,\n  )\n}\n",
		"menu": "Update EpicReact deps",
		"description": "Update all the dependencies in the epicreact workshop repos",
		"user": "kentcdodds",
		"extension": ".js"
	}
]