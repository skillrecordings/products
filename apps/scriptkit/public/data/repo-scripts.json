[
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/anime-search.js",
    "title": "Search Anime",
    "command": "anime-search",
    "content": "// Menu: Search Anime\n// Description: Use the jikan.moe API to search anime\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet anime = await arg(\"Anime:\")\n\nlet response = await get(\n  `https://api.jikan.moe/v3/search/anime?q=${anime}`\n)\n\nlet { image_url, title } = response.data.results[0]\n\nshowImage(image_url, { title })\n",
    "menu": "Search Anime",
    "description": "Use the jikan.moe API to search anime",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/app-launcher.js",
    "title": "App Launcher",
    "command": "app-launcher",
    "content": "// Menu: App Launcher\n// Description: Search for an app then launch it\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet createChoices = async () => {\n  let apps = await fileSearch(\"\", {\n    onlyin: \"/\",\n    kind: \"application\",\n  })\n\n  let prefs = await fileSearch(\"\", {\n    onlyin: \"/\",\n    kind: \"preferences\",\n  })\n\n  let group = path => apps =>\n    apps\n      .filter(app => app.match(path))\n      .sort((a, b) => {\n        let aName = a.replace(/.*\\//, \"\")\n        let bName = b.replace(/.*\\//, \"\")\n\n        return aName > bName ? 1 : aName < bName ? -1 : 0\n      })\n\n  return [\n    ...group(/^\\/Applications\\/(?!Utilities)/)(apps),\n    ...group(/\\.prefPane$/)(prefs),\n    ...group(/^\\/Applications\\/Utilities/)(apps),\n    ...group(/System/)(apps),\n    ...group(/Users/)(apps),\n  ].map(value => {\n    return {\n      name: value.split(\"/\").pop().replace(\".app\", \"\"),\n      value,\n      description: value,\n    }\n  })\n}\n\nlet appsDb = await db(\"apps\", async () => ({\n  choices: await createChoices(),\n}))\n\nlet app = await arg(\"Select app:\", appsDb.choices)\nlet command = `open -a \"${app}\"`\nif (app.endsWith(\".prefPane\")) {\n  command = `open ${app}`\n}\nexec(command)\n",
    "menu": "App Launcher",
    "description": "Search for an app then launch it",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/book-search.js",
    "title": "Book Search",
    "command": "book-search",
    "content": "// Menu: Book Search\n// Description: Use Open Library API to search for books\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet query = await arg('Search for a book title:')\n\n//This API can be a little slow. Wait a couple seconds\nlet response = await get(`http://openlibrary.org/search.json?q=${query}`)\n\nlet transform = ({title, author_name}) =>\n  `* \"${title}\" - ${author_name?.length && author_name[0]}`\n\nlet markdown = response.data.docs.map(transform).join('\\n')\n\ninspect(markdown, 'md')\n",
    "menu": "Book Search",
    "description": "Use Open Library API to search for books",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "this API can be a little slow. Wait a couple seconds\nlet response = await get(`http": "//openlibrary.org/search.json?q=${query}`)",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/center-app.js",
    "title": "Center App",
    "command": "center-app",
    "content": "// Menu: Center App\n// Description: Center the frontmost app\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { workArea, bounds } = await getActiveScreen()\n\nlet { width, height } = workArea\nlet { x, y } = bounds\nlet padding = 100\n\nlet top = y + padding\nlet left = x + padding\nlet right = x + width - padding\nlet bottom = y + height - padding\n\nsetActiveAppBounds({\n  top,\n  left,\n  right,\n  bottom,\n})\n",
    "menu": "Center App",
    "description": "Center the frontmost app",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/chrome-bookmarks.js",
    "title": "Chrome Bookmarks",
    "command": "chrome-bookmarks",
    "content": "// Menu: Chrome Bookmarks\n// Description: Select and open a bookmark from Chrome\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet bookmarks = await readFile(\n  home(\n    \"Library/Application Support/Google/Chrome/Default/Bookmarks\"\n  )\n)\n\nbookmarks = JSON.parse(bookmarks)\nbookmarks = bookmarks.roots.bookmark_bar.children\n\nlet url = await arg(\n  \"Select bookmark\",\n  bookmarks.map(({ name, url }) => {\n    return {\n      name,\n      description: url,\n      value: url,\n    }\n  })\n)\n\nexec(`open \"${url}\"`)\n",
    "menu": "Chrome Bookmarks",
    "description": "Select and open a bookmark from Chrome",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/chrome-tab-open.js",
    "title": "Open Chrome Tab",
    "command": "chrome-tab-open",
    "content": "// Menu: Open Chrome Tab\n// Description: List all Chrome tabs. Then switch to that tab\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet currentTabs = await getTabs()\n\nlet bookmarks = await readFile(\n  home(\n    \"Library/Application Support/Google/Chrome/Default/Bookmarks\"\n  )\n)\n\nbookmarks = JSON.parse(bookmarks)\nbookmarks = bookmarks.roots.bookmark_bar.children\n\nlet bookmarkChoices = bookmarks.map(({ name, url }) => {\n  return {\n    name: url,\n    description: name,\n    value: url,\n  }\n})\n\nlet currentOpenChoices = currentTabs.map(\n  ({ url, title }) => ({\n    name: url,\n    value: url,\n    description: title,\n  })\n)\n\nlet bookmarksAndOpen = [\n  ...bookmarkChoices,\n  ...currentOpenChoices,\n]\nlet choices = _.uniqBy(bookmarksAndOpen, \"name\")\n\nlet url = await arg(\"Focus Chrome tab:\", choices)\n\nfocusTab(url)\n",
    "menu": "Open Chrome Tab",
    "description": "List all Chrome tabs. Then switch to that tab",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/chrome-tab-switcher.js",
    "title": "Chrome Tab Switcher",
    "command": "chrome-tab-switcher",
    "content": "// Menu: Chrome Tab Switcher\n// Description: List all Chrome tabs. Then switch to that tab\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet tabs = await getTabs()\n\nlet url = await arg(\n  \"Select Chrome tab:\",\n  tabs.map(({ url, title }) => ({\n    name: url,\n    value: url,\n    description: title,\n  }))\n)\n\nfocusTab(url)\n",
    "menu": "Chrome Tab Switcher",
    "description": "List all Chrome tabs. Then switch to that tab",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/chrome-tab.js",
    "title": "chrome-tab",
    "command": "chrome-tab",
    "content": "// Description: Launch a url in Chrome. If url is already open, switch to that tab.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet url = await arg(\"Enter url:\")\nfocusTab(url)\n",
    "description": "Launch a url in Chrome. If url is already open, switch to that tab.",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/color-convert.js",
    "title": "Convert Colors",
    "command": "color-convert",
    "content": "// Menu: Convert Colors\n// Description: Converts colors between rgb, hex, etc\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet convert = await npm(\"color-convert\")\n\nlet createChoice = (type, value, input) => {\n  return {\n    name: type + \": \" + value,\n    value,\n    html: `<div class=\"h-full w-full p-1 text-xs flex justify-center items-center font-bold\" style=\"background-color:${input}\">\n      <span>${value}</span>\n      </div>`,\n  }\n}\n\n//using a function with \"input\" allows you to generate values\nlet conversion = await arg(\"Enter color:\", input => {\n  if (input.startsWith(\"#\")) {\n    return [\"rgb\", \"cmyk\", \"hsl\"].map(type => {\n      let value = convert.hex[type](input).toString()\n      return createChoice(type, value, input)\n    })\n  }\n\n  //two or more lowercase\n  if (input.match(/^[a-z]{2,}/)) {\n    return [\"rgb\", \"hex\", \"cmyk\", \"hsl\"]\n      .map(type => {\n        try {\n          let value =\n            convert.keyword[type](input).toString()\n\n          return createChoice(type, value, input)\n        } catch (error) {\n          return \"\"\n        }\n      })\n      .filter(Boolean)\n  }\n\n  return []\n})\n\nsetSelectedText(conversion)\n",
    "menu": "Convert Colors",
    "description": "Converts colors between rgb, hex, etc",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "using a function with \"input\" allows you to generate values\nlet conversion = await arg(\"Enter color": "\", input => {",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/dev-ss.js",
    "title": "John's personal startup script for scriptkit.com",
    "command": "dev-ss",
    "content": "// Menu: John's personal startup script for scriptkit.com\n// Description: This probably won't run on your machine 😜\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nedit(`~/projects/scriptkit.com`)\niterm(`cd ~/projects/scriptkit.com; vercel dev`)\nawait focusTab(\"http://localhost:3000\")\n",
    "menu": "John's personal startup script for scriptkit.com",
    "description": "This probably won't run on your machine 😜",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/file-search.js",
    "title": "Search for a File",
    "command": "file-search",
    "content": "// Menu: Search for a File\n// Description: File Search\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\n/** Note: This is a very basic search implementation based on \"mdfind\".\n * File search will be a _big_ focus in future versions of Script Kit\n */\n\nlet selectedFile = await arg(\n  \"Search a file:\",\n  async input => {\n    if (input?.length < 4) return []\n    let files = await fileSearch(input)\n\n    return files.map(path => {\n      return {\n        name: path.split(\"/\").pop(),\n        description: path,\n        value: path,\n      }\n    })\n  }\n)\n\nexec(`open ${selectedFile}`)\n",
    "menu": "Search for a File",
    "description": "File Search",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/focus-twitter.js",
    "title": "focus-twitter",
    "command": "focus-twitter",
    "content": "// Description: Launch Twitter in Chrome. If Twitter is already open, switch to that tab.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n// Shortcut: opt t\n\n//runs the \"chrome-tab\" script with twitter.com passed into the first `arg`\nawait run(\"chrome-tab\", \"twitter.com\")\n",
    "description": "Launch Twitter in Chrome. If Twitter is already open, switch to that tab.",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "shortcut": "opt t",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/giphy-search.js",
    "title": "Giphy",
    "command": "giphy-search",
    "content": "// Menu: Giphy\n// Description: Search giphy. Paste link.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet download = await npm(\"image-downloader\")\nlet queryString = await npm(\"query-string\")\n\nlet GIPHY_API_KEY = await env(\"GIPHY_API_KEY\", {\n  hint: md(\n    `Get a [Giphy API Key](https://developers.giphy.com/dashboard/)`\n  ),\n  ignoreBlur: true,\n  secret: true,\n})\n\nlet search = q =>\n  `https://api.giphy.com/v1/gifs/search?api_key=${GIPHY_API_KEY}&q=${q}&limit=10&offset=0&rating=g&lang=en`\n\nlet { input, url } = await arg(\n  \"Search giphy:\",\n  async input => {\n    if (!input) return []\n    let query = search(input)\n    let { data } = await get(query)\n\n    return data.data.map(gif => {\n      return {\n        name: gif.title.trim() || gif.slug,\n        value: {\n          input,\n          url: gif.images.original.url,\n        },\n        preview: `<img src=\"${gif.images.downsized.url}\" alt=\"\">`,\n      }\n    })\n  }\n)\n\nlet formattedLink = await arg(\"Format to paste\", [\n  {\n    name: \"URL Only\",\n    value: url,\n  },\n  {\n    name: \"Markdown Image Link\",\n    value: `![${input}](${url})`,\n  },\n  {\n    name: \"HTML <img>\",\n    value: `<img src=\"${url}\" alt=\"${input}\">`,\n  },\n])\n\nsetSelectedText(formattedLink)\n",
    "menu": "Giphy",
    "description": "Search giphy. Paste link.",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/gist-from-finder.js",
    "title": "Gist from Finder",
    "command": "gist-from-finder",
    "content": "// Menu: Gist from Finder\n// Description: Select a file in Finder, then create a Gist\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet filePath = await getSelectedFile()\nlet file = filePath.split(\"/\").pop()\n\nlet isPublic = await arg(\"Should the gist be public?\", [\n  { name: \"No\", value: false },\n  { name: \"Yes\", value: true },\n])\n\nconst body = {\n  files: {\n    [file]: {\n      content: await readFile(filePath, \"utf8\"),\n    },\n  },\n}\n\nif (isPublic) body.public = true\n\nlet config = {\n  headers: {\n    Authorization:\n      \"Bearer \" +\n      (await env(\"GITHUB_GIST_TOKEN\", {\n        info: `Create a gist token: <a class=\"bg-white\" href=\"https://github.com/settings/tokens/new\">https://github.com/settings/tokens/new</a>`,\n        message: `Set .env GITHUB_GIST_TOKEN:`,\n      })),\n  },\n}\nconst response = await post(\n  `https://api.github.com/gists`,\n  body,\n  config\n)\n\nexec(`open ` + response.data.html_url)\n",
    "menu": "Gist from Finder",
    "description": "Select a file in Finder, then create a Gist",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/google-image-grid.js",
    "title": "Google Image Grid",
    "command": "google-image-grid",
    "content": "// Menu: Google Image Grid\n// Description: Create a Grid of Images\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet gis = await npm(\"g-i-s\")\n\nawait arg(\"Search for images:\", async input => {\n  if (input.length < 3) return ``\n\n  let searchResults = await new Promise(res => {\n    gis(input, (_, results) => {\n      res(results)\n    })\n  })\n\n  return `<div class=\"flex flex-wrap\">${searchResults\n    .map(({ url }) => `<img class=\"h-32\" src=\"${url}\" />`)\n    .join(\"\")}</div>`\n})\n",
    "menu": "Google Image Grid",
    "description": "Create a Grid of Images",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/hello-world.js",
    "title": "Hello World",
    "command": "hello-world",
    "content": "// Menu: Hello World\n// Description: Enter an name, speak it back\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet name = await arg(`What's your name?`)\nsay(`Hello, ${name}!`)\n",
    "menu": "Hello World",
    "description": "Enter an name, speak it back",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/image-metadata.js",
    "title": "Detect Image Width and Height",
    "command": "image-metadata",
    "content": "// Menu: Detect Image Width and Height\n// Description: Show the metadata of an image\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet sharp = await npm(\"sharp\")\n\nlet image = await arg(\"Search an image:\", async input => {\n  if (input.length < 3) return []\n  let files = await fileSearch(input, { kind: \"image\" })\n\n  return files.map(path => {\n    return {\n      name: path.split(\"/\").pop(),\n      value: path,\n      description: path,\n    }\n  })\n})\n\nlet { width, height } = await sharp(image).metadata()\n\nconsole.log({ width, height })\nawait arg(`Width: ${width} Height: ${height}`)\n",
    "menu": "Detect Image Width and Height",
    "description": "Show the metadata of an image",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/image-resize.js",
    "title": "Resize an Image",
    "command": "image-resize",
    "content": "// Menu: Resize an Image\n// Description: Select an image in Finder. Type option + i to resize it.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n// Shortcut: opt i\n\nlet sharp = await npm(\"sharp\")\n\nlet imagePath = await getSelectedFile()\n\nlet width = Number(await arg(\"Enter width:\"))\n\nlet metadata = await sharp(imagePath).metadata()\n\nlet newHeight = Math.floor(\n  metadata.height * (width / metadata.width)\n)\n\nlet lastDot = /.(?!.*\\.)/\nlet resizedImageName = imagePath.replace(\n  lastDot,\n  `-${width}.`\n)\n\nawait sharp(imagePath)\n  .resize(width, newHeight)\n  .toFile(resizedImageName)\n",
    "menu": "Resize an Image",
    "description": "Select an image in Finder. Type option + i to resize it.",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "shortcut": "opt i",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/joke.js",
    "title": "Dad Joke",
    "command": "joke",
    "content": "// Menu: Dad Joke\n// Description: Logs out a Dad Joke from icanhazdadjoke.com\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet response = await get(`https://icanhazdadjoke.com/`, {\n  headers: {\n    Accept: \"text/plain\",\n  },\n})\n\nlet joke = response.data\nsetPanel(joke)\nsay(joke)\n",
    "menu": "Dad Joke",
    "description": "Logs out a Dad Joke from icanhazdadjoke.com",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/new-journal-entry.js",
    "title": "New Journal Entry",
    "command": "new-journal-entry",
    "content": "// Menu: New Journal Entry\n// Description: Generate a file using the current date in a specified folder\n// Author: John Lindquist\n// Twitter: @johnlindquist\nlet { format } = await npm(\"date-fns\")\n\nlet date = format(new Date(), \"yyyy-MM-dd\")\n\nlet journalPath = await env(\"JOURNAL_PATH\")\nif (!(await isDir(journalPath))) {\n  mkdir(\"-p\", journalPath)\n}\n\nlet journalFile = path.join(journalPath, date + \".md\")\nif (!(await isFile(journalFile))) {\n  let journalPrompt = `How are you feeling today?`\n  await writeFile(journalFile, journalPrompt)\n}\n\nedit(journalFile, env?.JOURNAL_PATH)\n",
    "menu": "New Journal Entry",
    "description": "Generate a file using the current date in a specified folder",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/open-project.js",
    "title": "Open Project",
    "command": "open-project",
    "content": "// Menu: Open Project\n// Description: List dev projects\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { projects, write } = await db(\"projects\", {\n  projects: [\n    \"~/.kit\",\n    \"~/projects/kitapp\",\n    \"~/projects/scriptkit.com\",\n  ],\n})\n\nonTab(\"Open\", async () => {\n  let project = await arg(\"Open project:\", projects)\n  edit(project)\n})\n\nonTab(\"Add\", async () => {\n  while (true) {\n    let project = await arg(\n      \"Add path to project:\",\n      md(projects.map(project => `* ${project}`).join(\"\\n\"))\n    )\n\n    projects.push(project)\n    await write()\n  }\n})\n\nonTab(\"Remove\", async () => {\n  while (true) {\n    let project = await arg(\"Open project:\", projects)\n\n    let indexOfProject = projects.indexOf(project)\n    projects.splice(indexOfProject, 1)\n    await write()\n  }\n})\n",
    "menu": "Open Project",
    "description": "List dev projects",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/paste-chrome-url.js",
    "title": "Paste URL",
    "command": "paste-chrome-url",
    "content": "// Menu: Paste URL\n// Description: Copy the current URL from your browser. Paste it at cursor.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet url = await getActiveTab()\nawait setSelectedText(url)\n",
    "menu": "Paste URL",
    "description": "Copy the current URL from your browser. Paste it at cursor.",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/project-name.js",
    "title": "Project Name",
    "command": "project-name",
    "content": "// Menu: Project Name\n// Description: Generate an alliteraive, dashed project name, copies it to the clipboard, and shows a notification\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { generate } = await npm(\"project-name-generator\")\n\nconst name = generate({\n  word: 2,\n  alliterative: true,\n}).dashed\n\nawait setSelectedText(name)\n",
    "menu": "Project Name",
    "description": "Generate an alliteraive, dashed project name, copies it to the clipboard, and shows a notification",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/quick-thoughts.js",
    "title": "Quick Thoughts",
    "command": "quick-thoughts",
    "content": "// Menu: Quick Thoughts\n// Description: Add lines to today's journal page\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { format } = await npm(\"date-fns\")\n\nlet date = format(new Date(), \"yyyy-MM-dd\")\nlet thoughtsPath = await env(\"THOUGHTS_PATH\")\nlet thoughtFile = path.join(thoughtsPath, date + \".md\")\n\nlet firstEntry = true\nlet addThought = async thought => {\n  if (firstEntry) {\n    thought = `\n- ${format(new Date(), \"hh:mmaa\")}\n  ${thought}\\n`\n    firstEntry = false\n  } else {\n    thought = `  ${thought}\\n`\n  }\n\n  await appendFile(thoughtFile, thought)\n}\n\nlet openThoughtFile = async () => {\n  let { stdout } = exec(`wc ${thoughtFile}`, {\n    silent: true,\n  })\n  let lineCount = stdout.trim().split(\" \").shift()\n  edit(thoughtFile, thoughtsPath, lineCount + 1) //open with cursor at end\n  await wait(500)\n  exit()\n}\n\nif (!(await isFile(thoughtFile)))\n  await writeFile(thoughtFile, `# ${date}\\n`)\n\nwhile (true) {\n  let thought = await arg({\n    placeholder: \"Thought:\",\n    hint: `Type \"open\" to open journal`,\n  })\n  if (thought === \"open\") {\n    await openThoughtFile()\n  } else {\n    await addThought(thought)\n  }\n}\n",
    "menu": "Quick Thoughts",
    "description": "Add lines to today's journal page",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/read-news.js",
    "title": "Read News",
    "command": "read-news",
    "content": "// Menu: Read News\n// Description: Scrape headlines from news.google.com then pick headline to read\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet headlines = await scrapeSelector(\n  \"https://news.google.com\",\n  \"h3\",\n  el => ({\n    name: el.innerText,\n    value: el.firstChild.href,\n  })\n)\n\nlet url = await arg(\"What do you want to read?\", headlines)\n\nexec(`open \"${url}\"`)\n",
    "menu": "Read News",
    "description": "Scrape headlines from news.google.com then pick headline to read",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/reddit.js",
    "title": "Reddit",
    "command": "reddit",
    "content": "// Menu: Reddit\n// Description: Browse Reddit from Script Kit\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet Reddit = await npm(\"reddit\")\n\nlet envOptions = {\n  ignoreBlur: true,\n  hint: md(\n    `[Create a reddit app](https://www.reddit.com/prefs/apps)`\n  ),\n  secret: true,\n}\n\nlet reddit = new Reddit({\n  username: await env(\"REDDIT_USERNAME\"),\n  password: await env(\"REDDIT_PASSWORD\"),\n  appId: await env(\"REDDIT_APP_ID\", envOptions),\n  appSecret: await env(\"REDDIT_APP_SECRET\", envOptions),\n  userAgent: `ScriptKit/1.0.0 (https://scriptkit.com)`,\n})\n\nlet subreddits = [\n  \"funny\",\n  \"aww\",\n  \"dataisbeautiful\",\n  \"mildlyinteresting\",\n  \"RocketLeague\",\n]\n\nsubreddits.forEach(sub => {\n  onTab(sub, async () => {\n    let url = await arg(\n      \"Select post to open:\",\n      async () => {\n        let best = await reddit.get(`/r/${sub}/hot`)\n\n        return best.data.children.map(({ data }) => {\n          let {\n            title,\n            thumbnail,\n            url,\n            subreddit_name_prefixed,\n            preview,\n          } = data\n\n          let resolutions =\n            preview?.images?.[0]?.resolutions\n          let previewImage =\n            resolutions?.[resolutions?.length - 1]?.url\n\n          return {\n            name: title,\n            description: subreddit_name_prefixed,\n            value: url,\n            img: thumbnail,\n            ...(previewImage && {\n              preview: md(`\n![${title}](${previewImage})\n\n### ${title}          \n                `),\n            }),\n          }\n        })\n      }\n    )\n\n    exec(`open \"${url}\"`)\n  })\n})\n",
    "menu": "Reddit",
    "description": "Browse Reddit from Script Kit",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/share-selected-file.js",
    "title": "Share Selected File",
    "command": "share-selected-file",
    "content": "// Menu: Share Selected File\n// Description: Select a file in Finder. Creates tunnel and copies link to clipboard.\n// Author: John Lindquist\n// Twitter: @johnlindquistt\n// Background: true\n\nlet ngrok = await npm(\"ngrok\")\nlet handler = await npm(\"serve-handler\")\nlet exitHook = await npm(\"exit-hook\")\nlet http = await import(\"http\")\n\nlet filePath = await getSelectedFile()\n\nlet symLinkName = _.last(\n  filePath.split(path.sep)\n).replaceAll(\" \", \"-\")\nlet symLinkPath = tmp(symLinkName)\n\nconsole.log(`Creating temporary symlink: ${symLinkPath}`)\nln(filePath, symLinkPath)\n\nlet port = 3033\n\nconst server = http.createServer(handler)\n\ncd(tmp())\n\nserver.listen(port, async () => {\n  let tunnel = await ngrok.connect(port)\n  let shareLink = tunnel + \"/\" + symLinkName\n  console.log(\n    chalk`{yellow ${shareLink}} copied to clipboard`\n  )\n  copy(shareLink)\n})\n\nexitHook(() => {\n  server.close()\n  if (test(\"-f\", symLinkPath)) {\n    console.log(\n      `Removing temporary symlink: ${symLinkPath}`\n    )\n    exec(`rm ${symLinkPath}`)\n  }\n})\n",
    "menu": "Share Selected File",
    "description": "Select a file in Finder. Creates tunnel and copies link to clipboard.",
    "author": "John Lindquist",
    "twitter": "@johnlindquistt",
    "background": "true",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/sound-settings.js",
    "title": "Open Sound Prefs",
    "command": "sound-settings",
    "content": "// Menu: Open Sound Prefs\n// Description: Open the Sound prefs panel\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nexec(`open /System/Library/PreferencePanes/Sound.prefPane`)\n",
    "menu": "Open Sound Prefs",
    "description": "Open the Sound prefs panel",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/speak-script.js",
    "title": "Speak Script",
    "command": "speak-script",
    "content": "// Menu: Speak Script\n// Description: Run a Script based on Speech Input\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { scripts } = await db(\"scripts\")\n\nlet escapedScripts = scripts.map(script => ({\n  name: `\"${script.name.replace(/\"/g, '\\\\\"')}\"`, //escape quotes\n  value: script.filePath,\n}))\n\nlet speakableScripts = escapedScripts\n  .map(({ name }) => name)\n  .join(\",\")\n\nlet speech = await applescript(String.raw`\ntell application \"SpeechRecognitionServer\"\n\tlisten for {${speakableScripts}}\nend tell\n`)\n\nlet script = escapedScripts.find(\n  script => script.name == `\"${speech}\"`\n)\n\nawait run(script.value)\n",
    "menu": "Speak Script",
    "description": "Run a Script based on Speech Input",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/speed-reader.js",
    "title": "Speed Reader",
    "command": "speed-reader",
    "content": "// Menu: Speed Reader\n// Description: Display clipboard content at a defined rate\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet wpm = 1000 * (60 / (await arg('Enter words per minute:')))\n\nlet text = await paste()\ntext = text\n  .trim()\n  .split(' ')\n  .filter(Boolean)\n  .flatMap((sentence) => sentence.trim().split(' '))\n\nlet i = 0\n\nlet id = setInterval(() => {\n  setPlaceholder(` ${text[i++]}`)\n  if (i >= text.length) clearInterval(id)\n}, wpm)\n",
    "menu": "Speed Reader",
    "description": "Display clipboard content at a defined rate",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/synonyms.js",
    "title": "Synonym",
    "command": "synonyms",
    "content": "// Menu: Synonym\n// Description: List synonyms\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet synonym = await arg(\"Type a word\", async input => {\n  if (!input || input?.length < 3) return []\n  let url = `https://api.datamuse.com/words?ml=${input}&md=d`\n  let response = await get(url)\n\n  return response.data.map(({ word, defs }) => {\n    return {\n      name: `${word}${defs?.[0] && ` - ${defs[0]}`}`,\n      value: word,\n      selected: `Paste ${word}`,\n    }\n  })\n})\n\nsetSelectedText(synonym)\n",
    "menu": "Synonym",
    "description": "List synonyms",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/title-case.js",
    "title": "Title Case",
    "command": "title-case",
    "content": "// Menu: Title Case\n// Description: Converts the selected text to title case\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet { titleCase } = await npm(\"title-case\")\n\nlet text = await getSelectedText()\nlet titleText = titleCase(text)\nawait setSelectedText(titleText)\n",
    "menu": "Title Case",
    "description": "Converts the selected text to title case",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/update-twitter-name.js",
    "title": "Update Twitter Name",
    "command": "update-twitter-name",
    "content": "// Menu: Update Twitter Name\n// Description: Change your name on twitter\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet Twitter = await npm('twitter-lite')\n\nlet envOptions = {\n  hint: md(\n    `You need to [create an app](https://developer.twitter.com/en/apps) to get these keys/tokens`,\n  ),\n  ignoreBlur: true,\n  secret: true,\n}\n\nlet client = new Twitter({\n  consumer_key: await env('TWITTER_CONSUMER_KEY', envOptions),\n  consumer_secret: await env('TWITTER_CONSUMER_SECRET', envOptions),\n  access_token_key: await env('TWITTER_ACCESS_TOKEN_KEY', envOptions),\n  access_token_secret: await env('TWITTER_ACCESS_TOKEN_SECRET', envOptions),\n})\n\nlet name = await arg('Enter new twitter name:')\n\nlet response = await client\n  .post('account/update_profile', {\n    name,\n  })\n  .catch((error) => console.log(error))\n",
    "menu": "Update Twitter Name",
    "description": "Change your name on twitter",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/vocab-quiz.js",
    "title": "Vocab Quiz",
    "command": "vocab-quiz",
    "content": "// Menu: Vocab Quiz\n// Description: Quiz on random vocab words\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nawait npm(\"wordnet-db\")\nlet randomWord = await npm(\"random-word\")\nlet { WordNet } = await npm(\"natural\")\n\nlet wordNet = new WordNet()\nlet words = []\n\nwhile (true) {\n  setPlaceholder(`Finding random word and definitions...`)\n\n  while (words.length < 4) {\n    let quizWord = randomWord()\n    let results = await new Promise(resolve => {\n      wordNet.lookup(quizWord, resolve)\n    })\n    if (results.length) {\n      let [{ lemma, def }] = results\n      words.push({ name: def, value: lemma })\n    }\n  }\n\n  let word = words[0]\n  let result = await arg(\n    `What does \"${word.value}\" mean?`,\n    _.shuffle(words)\n  )\n\n  let correct = word.value === result\n  setPlaceholder(\n    `${correct ? \"✅\" : \"🚫\"} ${word.value}: ${word.name}`\n  )\n  words = []\n\n  await wait(2000)\n}\n",
    "menu": "Vocab Quiz",
    "description": "Quiz on random vocab words",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "johnlindquist",
    "owner": "johnlindquist",
    "repo": "shared-kenv",
    "url": "https://raw.githubusercontent.com/johnlindquist/shared-kenv/main/scripts/word-api.js",
    "title": "Word API",
    "command": "word-api",
    "content": "// Menu: Word API\n// Description: Queries a word api. Pastes selection.\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet typeMap = {\n  describe: \"rel_jjb\",\n  trigger: \"rel_trg\",\n  noun: \"rel_jja\",\n  follow: \"lc\",\n  rhyme: \"rel_rhy\",\n  spell: \"sp\",\n  synonym: \"ml\",\n  sounds: \"rel_nry\",\n  suggest: \"suggest\",\n}\n\nlet word = await arg(\"Type a word and hit Enter:\")\nlet typeArg = await arg(\n  \"What would you like to find?\",\n  Object.keys(typeMap)\n)\n\nlet type = typeMap[typeArg]\nword = word.replace(/ /g, \"+\")\n\nlet url = `https://api.datamuse.com/words?${type}=${word}&md=d`\nif (typeArg == \"suggest\")\n  url = `https://api.datamuse.com/sug?s=${word}&md=d`\n\nlet response = await get(url)\nlet formattedWords = response.data.map(({ word, defs }) => {\n  let info = \"\"\n  if (defs) {\n    let [type, meaning] = defs[0].split(\"\\t\")\n    info = `- (${type}): ${meaning}`\n  }\n  return {\n    name: `${word}${info}`,\n    value: word,\n  }\n})\n\nlet pickWord = await arg(\"Select to paste:\", formattedWords)\nsetSelectedText(pickWord)\n",
    "menu": "Word API",
    "description": "Queries a word api. Pastes selection.",
    "author": "John Lindquist",
    "twitter": "@johnlindquist",
    "extension": ".js"
  },
  {
    "user": "zacjones93",
    "owner": "johnlindquist",
    "repo": "zacjones93",
    "url": "https://raw.githubusercontent.com/johnlindquist/zacjones93/main/scripts/upload-photos.js",
    "title": "upload-photos",
    "command": "upload-photos",
    "content": "const fs = await npm(\"fs\"); \nconst plantName = await arg(\"Enter a plant name:\");\nconst potSize = await arg(\"Enter pot size: \");\nconst shotType = await arg(\"Is this product or detail?\", [\"product\", \"detail\"]);\n\nconst photos = await drop(\"Drop your images\");\nconsole.log(photos);\n\n\nlet renamePhotoToDirectory = (path, plantName) => {\n // going to be a env variable\n  let targetDirectory = \"/Users/zac/Desktop/photops/photos\";\n\n  let photoPath = `${targetDirectory}/${plantName}`;\n\n  fs.rename(path, photoPath, (err) => {\n    if (err) return console.log(\"there was an error: \", err);\n\n    console.log(\"selectedFiles renamed\");\n  });\n};\n\nphotos.map((plant, index) => {\n  if (shotType === \"detail\") {\n    renamePhotoToDirectory(\n      plant.path,\n      `${plantName}Detail${potSize}_${index + 1}.png`\n    );\n  } else {\n    renamePhotoToDirectory(plant.path, `${plantName}${potSize}_${index + 1}.png`);\n  }\n});\n",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/cloudinary-upload.js",
    "title": "Cloudinary upload",
    "command": "cloudinary-upload",
    "content": "// Menu: Cloudinary upload\n// Description: Upload an image to cloudinary\n// Shortcut: command option control c\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nimport path from 'path'\n\nconst cloudinaryCloudName = await env('CLOUDINARY_CLOUD_NAME')\nconst cloudinaryKey = await env('CLOUDINARY_API_KEY')\nconst cloudinarySecret = await env('CLOUDINARY_API_SECRET')\nconst cloudiaryConsoleId = await env('CLOUDINARY_CONSOLE_ID')\n\nawait npm('cloudinary')\nimport cloudinary from 'cloudinary'\n\nconst cacheDb = await db('cloudinary-cache', {lastChoice: '', folders: {}})\nawait cacheDb.read()\n\ncloudinary.config({\n  cloud_name: cloudinaryCloudName,\n  api_key: cloudinaryKey,\n  api_secret: cloudinarySecret,\n  secure: true,\n})\n\nconst actions = {\n  CREATE_NEW: 'creating new folder',\n  REFRESH_CACHE: 'refreshing cache',\n  OPEN_DIR: 'opening directory',\n}\n\nlet chosenDirectory = await cacheDb.data.lastChoice\nlet lastSelection\nwhile (true) {\n  // if the last action was to create a new directory then we know the chosen\n  // directory is new and has no folders otherwise we have to wait a few seconds\n  // for the API to be prepared for us to make a request for the contents.\n  const directories =\n    lastSelection === actions.CREATE_NEW\n      ? []\n      : await getFolders(chosenDirectory)\n  lastSelection = await arg(\n    `Select directory in ${chosenDirectory || '/'}`,\n    [\n      {name: '.', value: '.', description: '✅ Choose this directory'},\n      !chosenDirectory\n        ? null\n        : {name: '..', value: '..', description: '⤴️ Go up a directory'},\n      ...directories.map(folder => ({\n        name: folder.name,\n        value: folder.path,\n        description: '⤵️ Select directory',\n      })),\n      {\n        name: 'Open directory',\n        value: actions.OPEN_DIR,\n        description: '🌐 Open this directory in the browser',\n      },\n      {\n        name: 'Refresh cache',\n        value: actions.REFRESH_CACHE,\n        description: '🔄 Refresh the cache for this directory',\n      },\n      {\n        name: 'Create new directory',\n        value: actions.CREATE_NEW,\n        description: '➕ Create a new directory here',\n      },\n    ].filter(Boolean),\n  )\n  if (lastSelection === '..') {\n    chosenDirectory = chosenDirectory.split('/').slice(0, -1).join('/')\n  } else if (lastSelection === '.') {\n    break\n  } else if (lastSelection === actions.CREATE_NEW) {\n    const newFolderName = await arg(`What's the new folder name?`)\n    const newDirectory = `${chosenDirectory}/${newFolderName}`\n    await cloudinary.v2.api.create_folder(newDirectory)\n    delete cacheDb.data.folders[chosenDirectory]\n    chosenDirectory = newDirectory\n  } else if (lastSelection === actions.REFRESH_CACHE) {\n    delete cacheDb.data.folders[chosenDirectory]\n  } else if (lastSelection === actions.OPEN_DIR) {\n    await openFolder(chosenDirectory)\n  } else {\n    chosenDirectory = lastSelection\n  }\n}\n\ncacheDb.data.lastChoice = chosenDirectory\nawait cacheDb.write()\n\nconst images = await drop('Drop the image(s) you want to upload')\n\nlet renameSome = true\nif (images.length > 1) {\n  const renameChoice = await arg('Do you want to rename any of these?', [\n    'yes',\n    'no',\n  ])\n  renameSome = renameChoice === 'yes'\n}\n\nfor (const image of images) {\n  const defaultName = path.parse(image.path).name\n\n  const name = renameSome\n    ? (await arg({\n        placeholder: `Name of this image?`,\n        hint: `Default is: \"${defaultName}\"`,\n      })) || defaultName\n    : defaultName\n\n  setPlaceholder(`Uploading ${name}`)\n  const uploadedImage = await cloudinary.v2.uploader.upload(image.path, {\n    public_id: name,\n    overwrite: false,\n    folder: chosenDirectory,\n  })\n\n  // If you have multiple files then this isn't really useful unless you have\n  // clipbloard history (which I recommend you get!)\n  await copy(uploadedImage.secure_url)\n}\n\nawait openFolder(chosenDirectory)\n\nfunction openFolder(folder) {\n  const encodedFolder = encodeURIComponent(folder)\n  console.log('opening')\n  return exec(\n    `open \"https://cloudinary.com/console/${cloudiaryConsoleId}/media_library/folders/${encodedFolder}\"`,\n  )\n}\n\nasync function getFolders(directory) {\n  const cachedDirectories = cacheDb.data.folders[directory]\n  if (cachedDirectories) {\n    return cachedDirectories\n  }\n\n  try {\n    const {folders: directories} = !directory\n      ? await cloudinary.v2.api.root_folders()\n      : await cloudinary.v2.api.sub_folders(directory)\n\n    cacheDb.data.folders[directory] = directories\n\n    await cacheDb.write()\n\n    return directories\n  } catch (error) {\n    console.error('error with the directory')\n    return []\n  }\n}\n",
    "menu": "Cloudinary upload",
    "description": "Upload an image to cloudinary",
    "shortcut": "command option control c",
    "author": "Kent C. Dodds",
    "twitter": "@kentcdodds",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/convert-kit-lookup.js",
    "title": "ConvertKit > Lookup",
    "command": "convert-kit-lookup",
    "content": "// Menu: ConvertKit > Lookup\n// Description: Query convertkit\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nconst CONVERT_KIT_API_SECRET = await env('CONVERT_KIT_API_SECRET')\nconst CONVERT_KIT_API_KEY = await env('CONVERT_KIT_API_KEY')\n\nconst query = await arg('query')\nlet url\nif (query.includes('@')) {\n  const sub = await getConvertKitSubscriber(query)\n  if (sub?.id) {\n    url = `https://app.convertkit.com/subscribers/${sub.id}`\n  }\n}\n\nif (!url) {\n  url = `https://app.convertkit.com/subscribers?utf8=%E2%9C%93&q=${query}&status=all`\n}\nexec(`open \"${url}\"`)\n\nasync function getConvertKitSubscriber(email) {\n  const url = new URL('https://api.convertkit.com/v3/subscribers')\n  url.searchParams.set('api_secret', CONVERT_KIT_API_SECRET)\n  url.searchParams.set('email_address', email)\n\n  const resp = await fetch(url.toString())\n  const json = await resp.json()\n  const {subscribers: [subscriber] = []} = json\n\n  return subscriber\n}\n",
    "menu": "ConvertKit > Lookup",
    "description": "Query convertkit",
    "author": "Kent C. Dodds",
    "twitter": "@kentcdodds",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/daily-story.js",
    "title": "Daily Story",
    "command": "daily-story",
    "content": "// Menu: Daily Story\n// Description: Write a quick story\n// Author: Kent C. Dodds\n// Shortcut: command option control o\n// Twitter: @kentcdodds\n\nconst dateFns = await npm('date-fns')\nconst filenamify = await npm('filenamify')\nconst prettier = await npm('prettier')\n\nconst storyDir = await env(\n  'DAILY_STORY_DIRECTORY',\n  `Where do you want daily stories to be saved?`,\n)\n\nconst story = await textarea({placeholder: 'Write your story here'})\n\nconst today = dateFns.format(new Date(), 'yyyy-MM-dd')\nconst date = await arg({\n  input: today,\n  hint: 'When did this happen?',\n})\nconst title = await arg({\n  placeholder: 'What do you want to call this story?',\n  hint: 'Title',\n})\n\nconst md = `---\ntitle: ${title}\ndate: ${date}\nwritten: ${today}\n---\n\n${story}\n`\n\n// prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser: 'markdown',\n  arrowParens: 'avoid',\n  bracketSpacing: false,\n  embeddedLanguageFormatting: 'auto',\n  htmlWhitespaceSensitivity: 'css',\n  insertPragma: false,\n  jsxBracketSameLine: false,\n  jsxSingleQuote: false,\n  printWidth: 80,\n  proseWrap: 'always',\n  quoteProps: 'as-needed',\n  requirePragma: false,\n  semi: false,\n  singleQuote: true,\n  tabWidth: 2,\n  trailingComma: 'all',\n  useTabs: false,\n  vueIndentScriptAndStyle: false,\n})\n\nconst filename = filenamify(\n  `${date}-${title.toLowerCase().replace(/ /g, '-')}.md`,\n  {replacement: '-'},\n)\nawait writeFile(path.join(storyDir, filename), prettyMd)\n",
    "menu": "Daily Story",
    "description": "Write a quick story",
    "author": "Kent C. Dodds",
    "shortcut": "command option control o",
    "twitter": "@kentcdodds",
    "prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser": "'markdown',",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/link-kit.js",
    "title": "link-kit",
    "command": "link-kit",
    "content": "await cli(\"install\", \"~/.kit\")",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/new-post.js",
    "title": "New Post",
    "command": "new-post",
    "content": "// Menu: New Post\n// Description: Create a new blog post\n// Author: Kent C. Dodds\n// Shortcut: command option control p\n// Twitter: @kentcdodds\n\nconst dateFns = await npm('date-fns')\nconst prettier = await npm('prettier')\nconst YAML = await npm('yaml')\nconst slugify = await npm('@sindresorhus/slugify')\nconst {format: formatDate} = await npm('date-fns')\nconst makeMetascraper = await npm('metascraper')\nconst {$filter, toRule} = await npm('@metascraper/helpers')\n\nconst unsplashTitleToAlt = toRule(str => str.replace(/ photo – .*$/, ''))\nconst unsplashOGTitleToAuthor = toRule(str =>\n  str.replace(/Photo by (.*?) on Unsplash/, '$1'),\n)\nconst unsplashImageToPhotoId = toRule(str =>\n  new URL(str).pathname.replace('/', ''),\n)\n\nconst metascraper = makeMetascraper([\n  {\n    unsplashPhotoId: [\n      unsplashImageToPhotoId($ =>\n        $('meta[property=\"og:image\"]').attr('content'),\n      ),\n    ],\n  },\n  {\n    author: [\n      unsplashOGTitleToAuthor($ =>\n        $('meta[property=\"og:title\"]').attr('content'),\n      ),\n    ],\n  },\n  {alt: [unsplashTitleToAlt($ => $('title').text())]},\n])\n\nasync function getMetadata(url) {\n  const html = await fetch(url).then(res => res.text())\n  return metascraper({html, url})\n}\n\nconst blogDir = await env(\n  'KCD_BLOG_CONTENT_DIR',\n  `What's the path to the blog content directory on this machine?`,\n)\n\nconst title = await arg({\n  placeholder: `What's the title of this post?`,\n  hint: 'Title',\n  ignoreBlur: true,\n})\n\nconst description = await arg({\n  placeholder: `What's the description of this post?`,\n  hint: 'Description',\n  input: 'TODO: add a description',\n  ignoreBlur: true,\n})\n\nconst categories = (\n  await arg({\n    placeholder: `What are the categories of this post?`,\n    hint: 'Categories (comma separated)',\n    ignoreBlur: true,\n  })\n)\n  .split(',')\n  .map(c => c.trim())\n  .filter(Boolean)\n\nconst keywords = (\n  await arg({\n    placeholder: `What are the keywords of this post?`,\n    hint: 'Keywords (comma separated)',\n    ignoreBlur: true,\n  })\n)\n  .split(',')\n  .map(c => c.trim())\n  .filter(Boolean)\n\nconst filename = slugify(title, {decamelize: false})\nawait exec(`open https://unsplash.com/s/photos/${filename}`)\n\nconst unsplashPhotoInput = await arg({\n  placeholder: `What's the unsplash photo?`,\n  hint: 'Unsplash Photo',\n  ignoreBlur: true,\n})\nconst unsplashPhotoUrl = unsplashPhotoInput.startsWith('http')\n  ? unsplashPhotoInput\n  : `https://unsplash.com/photos/${unsplashPhotoInput}`\n\nconst metadata = await getMetadata(unsplashPhotoUrl)\n\nconst frontmatter = YAML.stringify({\n  title,\n  date: dateFns.format(new Date(), 'yyyy-MM-dd'),\n  description,\n  categories,\n  meta: {keywords},\n  bannerCloudinaryId: `unsplash/${metadata.unsplashPhotoId}`,\n  bannerAlt: metadata.alt,\n  bannerCredit: `Photo by [${metadata.author}](${unsplashPhotoUrl})`,\n})\n\nconst md = `---\n${frontmatter}\n---\n\nBe excellent to each other.\n`\n\n// prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser: 'markdown',\n  arrowParens: 'avoid',\n  bracketSpacing: false,\n  embeddedLanguageFormatting: 'auto',\n  htmlWhitespaceSensitivity: 'css',\n  insertPragma: false,\n  jsxBracketSameLine: false,\n  jsxSingleQuote: false,\n  printWidth: 80,\n  proseWrap: 'always',\n  quoteProps: 'as-needed',\n  requirePragma: false,\n  semi: false,\n  singleQuote: true,\n  tabWidth: 2,\n  trailingComma: 'all',\n  useTabs: false,\n  vueIndentScriptAndStyle: false,\n})\n\nconst newFile = path.join(blogDir, `${filename}.mdx`)\nawait writeFile(newFile, prettyMd)\nawait edit(newFile)\n",
    "menu": "New Post",
    "description": "Create a new blog post",
    "author": "Kent C. Dodds",
    "shortcut": "command option control p",
    "twitter": "@kentcdodds",
    "prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser": "'markdown',",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/open-epic-react-repos.js",
    "title": "Open EpicReact Repos",
    "command": "open-epic-react-repos",
    "content": "// Menu: Open EpicReact Repos\n// Description: Open all the EpicReact Repos in VSCode\n\nconst repos = [\n  'advanced-react-hooks',\n  'advanced-react-patterns',\n  'bookshelf',\n  'react-fundamentals',\n  'react-hooks',\n  'react-performance',\n  'react-suspense',\n  'testing-react-apps',\n]\n\nfor (const repo of repos) {\n  edit(`~/code/epic-react/${repo}`)\n}\n",
    "menu": "Open EpicReact Repos",
    "description": "Open all the EpicReact Repos in VSCode",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/open-project.js",
    "title": "Open Project",
    "command": "open-project",
    "content": "// Menu: Open Project\n// Description: Opens a project in code\n// Shortcut: cmd shift .\nimport path from 'path'\nimport fs from 'fs'\nimport os from 'os'\n\nconst isDirectory = async filePath => {\n  try {\n    const stat = await fs.promises.stat(filePath)\n    return stat.isDirectory()\n  } catch (e) {\n    return false\n  }\n}\nconst isFile = async filePath => {\n  try {\n    const stat = await fs.promises.stat(filePath)\n    return stat.isFile()\n  } catch (e) {\n    return false\n  }\n}\n\nasync function getProjects(parentDir) {\n  const codeDir = (await ls(parentDir)).stdout.split('\\n').filter(Boolean)\n  const choices = []\n  for (const dir of codeDir) {\n    let fullPath = dir\n    if (!path.isAbsolute(dir)) {\n      fullPath = path.join(parentDir, dir)\n    }\n    if (fullPath.includes('/node_modules/')) continue\n    if (fullPath.includes('/build/')) continue\n    if (fullPath.includes('/dist/')) continue\n    if (fullPath.includes('/coverage/')) continue\n\n    const pkgjson = path.join(fullPath, 'package.json')\n    if (await isFile(pkgjson)) {\n      choices.push({\n        name: dir,\n        value: fullPath,\n        description: fullPath,\n      })\n    } else if (await isDirectory(fullPath)) {\n      choices.push(...(await getProjects(fullPath)))\n    }\n  }\n  return choices\n}\n\nconst choice = await arg('Which project?', async () => {\n  const choices = [\n    ...(await getProjects(path.join(os.homedir(), 'code'))),\n    ...(await getProjects(path.join(os.homedir(), 'Desktop'))),\n  ]\n  return choices\n})\n\nawait edit(choice)\n",
    "menu": "Open Project",
    "description": "Opens a project in code",
    "shortcut": "cmd shift .",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/shorten.js",
    "title": "Shorten",
    "command": "shorten",
    "content": "// Menu: Shorten\n// Description: Shorten a given URL with a given short name via netlify-shortener\n// Shortcut: command option control s\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nconst dir = await env(\n  'SHORTEN_REPO_DIRECTORY',\n  'Where is your netlify-shortener repo directory?',\n)\n\nconst longURL = await arg(`What's the full URL?`)\n// TODO: figure out how to make this optional\nconst shortName = await arg(`What's the short name?`)\nconst netlifyShortenerPath = path.join(\n  dir,\n  'node_modules/netlify-shortener/dist/index.js',\n)\nconst {baseUrl} = JSON.parse(await readFile(path.join(dir, 'package.json')))\n\nsetPlaceholder(`Creating redirect: ${baseUrl}/${shortName} -> ${longURL}`)\nconst result = exec(\n  `node \"${netlifyShortenerPath}\" \"${longURL}\" \"${shortName}\"`,\n)\n\nconst {stderr, stdout} = result\n\nif (result.code === 0) {\n  const lastLine = stdout.split('\\n').filter(Boolean).slice(-1)[0]\n  notify({\n    title: '✅ Short URL created',\n    message: lastLine,\n  })\n} else {\n  const getErr = str => str.match(/Error: (.+)\\n/)?.[1]\n  const error = getErr(stderr) ?? getErr(stdout) ?? 'Unknown error'\n  console.error({stderr, stdout})\n  notify({\n    title: '❌ Short URL not created',\n    message: error,\n  })\n}\n",
    "menu": "Shorten",
    "description": "Shorten a given URL with a given short name via netlify-shortener",
    "shortcut": "command option control s",
    "author": "Kent C. Dodds",
    "twitter": "@kentcdodds",
    "tODO": "figure out how to make this optional",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/twimage-download.js",
    "title": "Twimage Download",
    "command": "twimage-download",
    "content": "// Menu: Twimage Download\n// Description: Download twitter images and set their exif info based on the tweet metadata\n// Shortcut: command option control t\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nimport fs from 'fs'\nimport {fileURLToPath, URL} from 'url'\n\nconst exiftool = await npm('node-exiftool')\nconst exiftoolBin = await npm('dist-exiftool')\nconst fsExtra = await npm('fs-extra')\n\nconst baseOut = home('Pictures/twimages')\n\nconst token = await env('TWITTER_BEARER_TOKEN')\nconst twitterUrl = await arg('Twitter URL')\nconsole.log(`Starting with ${twitterUrl}`)\n\nconst tweetId = new URL(twitterUrl).pathname.split('/').slice(-1)[0]\nconst response = await get(\n  `https://api.twitter.com/1.1/statuses/show/${tweetId}.json?include_entities=true`,\n  {\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  },\n)\n\nconst tweet = response.data\nconsole.log({tweet})\n\nconst {\n  geo,\n  id,\n  text,\n  created_at,\n  extended_entities: {media: medias} = {\n    media: [\n      {\n        type: 'photo',\n        media_url_https: await arg({\n          ignoreBlur: true,\n          input: `Can't find media. What's the URL for the media?`,\n          hint: `Media URL`,\n        }),\n      },\n    ],\n  },\n} = tweet\n\nconst [latitude, longitude] = geo?.coordinates || []\n\nconst ep = new exiftool.ExiftoolProcess(exiftoolBin)\n\nawait ep.open()\n\nfor (const media of medias) {\n  let url\n  if (media.type === 'photo') {\n    url = media.media_url_https\n  } else if (media.type === 'video') {\n    let best = {bitrate: 0}\n    for (const variant of media.video_info.variants) {\n      if (variant.bitrate > best.bitrate) best = variant\n    }\n    url = best.url\n  } else {\n    throw new Error(`Unknown media type for ${twitterUrl}: ${media.type}`)\n  }\n  if (!url) throw new Error(`Huh... no media url found for ${twitterUrl}`)\n\n  const formattedDate = formatDate(created_at)\n  const colonDate = formattedDate.replace(/-/g, ':')\n  const formattedTimestamp = formatTimestamp(created_at)\n  const filename = new URL(url).pathname.split('/').slice(-1)[0]\n  const filepath = path.join(\n    baseOut,\n    formattedDate.split('-').slice(0, 2).join('-'),\n    /\\..+$/.test(filename) ? filename : `${filename}.jpg`,\n  )\n\n  await download(url, filepath)\n\n  await ep.writeMetadata(\n    filepath,\n    {\n      ImageDescription: `${text} – ${twitterUrl}`,\n      Keywords: 'photos from tweets',\n      DateTimeOriginal: formattedTimestamp,\n      FileModifyDate: formattedTimestamp,\n      ModifyDate: formattedTimestamp,\n      CreateDate: formattedTimestamp,\n      ...(geo\n        ? {\n            GPSLatitudeRef: latitude > 0 ? 'North' : 'South',\n            GPSLongitudeRef: longitude > 0 ? 'East' : 'West',\n            GPSLatitude: latitude,\n            GPSLongitude: longitude,\n            GPSDateStamp: colonDate,\n            GPSDateTime: formattedTimestamp,\n          }\n        : null),\n    },\n    ['overwrite_original'],\n  )\n}\n\nawait ep.close()\nnotify(`All done with ${twitterUrl}`)\n\nfunction formatDate(t) {\n  const d = new Date(t)\n  return `${d.getFullYear()}-${padZero(d.getMonth() + 1)}-${padZero(\n    d.getDate(),\n  )}`\n}\nfunction formatTimestamp(t) {\n  const d = new Date(t)\n  const formattedDate = formatDate(t)\n  return `${formatDate(t)} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n}\nfunction padZero(n) {\n  return String(n).padStart(2, '0')\n}\n\nasync function getGeoCoords(placeId) {\n  const response = await get(\n    `https://api.twitter.com/1.1/geo/id/${placeId}.json`,\n    {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    },\n  )\n  const [longitude, latitude] = response.data.centroid\n  return {latitude, longitude}\n}\n\nasync function download(url, out) {\n  console.log(`downloading ${url} to ${out}`)\n  await fsExtra.ensureDir(path.dirname(out))\n\n  const writer = fs.createWriteStream(out)\n  const response = await get(url, {responseType: 'stream'})\n  response.data.pipe(writer)\n\n  return new Promise((resolve, reject) => {\n    writer.on('finish', () => resolve(out))\n    writer.on('error', reject)\n  })\n}\n",
    "menu": "Twimage Download",
    "description": "Download twitter images and set their exif info based on the tweet metadata",
    "shortcut": "command option control t",
    "author": "Kent C. Dodds",
    "twitter": "@kentcdodds",
    "extension": ".js"
  },
  {
    "user": "kentcdodds",
    "owner": "kentcdodds",
    "repo": ".kenv",
    "url": "https://raw.githubusercontent.com/kentcdodds/.kenv/main/scripts/update-epic-react-deps.js",
    "title": "Update EpicReact deps",
    "command": "update-epic-react-deps",
    "content": "// Menu: Update EpicReact deps\n// Description: Update all the dependencies in the epicreact workshop repos\n\nconst repos = [\n  'advanced-react-hooks',\n  'advanced-react-patterns',\n  'bookshelf',\n  'react-fundamentals',\n  'react-hooks',\n  'react-performance',\n  'react-suspense',\n  'testing-react-apps',\n]\n\nconst script = `git add -A && git stash && git checkout main && git pull && ./scripts/update-deps && git commit -am \"update all deps\" --no-verify && git push && git status`\nfor (const repo of repos) {\n  const scriptString = JSON.stringify(\n    `cd ~/code/epic-react/${repo} && ${script}`,\n  )\n  exec(\n    `osascript -e 'tell application \"Terminal\" to activate' -e 'tell application \"Terminal\" to do script ${scriptString}'`,\n  )\n}\n",
    "menu": "Update EpicReact deps",
    "description": "Update all the dependencies in the epicreact workshop repos",
    "extension": ".js"
  }
]
