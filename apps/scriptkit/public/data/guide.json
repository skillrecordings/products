[{"avatar":"https://avatars.githubusercontent.com/u/180256?v=4","user":"nadeemkhedr","author":"Nadeem Khedr","twitter":"nadeemkhedr","discussion":"https://github.com/johnlindquist/kit/discussions/416","url":"","title":"How to know all the built-in helper functions","command":"how-to-know-all-the-built-in-helper-functions","content":"I do know there are so many nice utils, is there a doc listing them? ","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-08-29T23:37:11Z"},{"avatar":"https://avatars.githubusercontent.com/u/183153?v=4","user":"mikeerickson","author":"Mike Erickson","twitter":"codedungeon","discussion":"https://github.com/johnlindquist/kit/discussions/265","url":"","title":"Where are scripts stored, how to reload, etc.","command":"where-are-scripts-stored-how-to-reload-etc","content":"Hey John\r\n\r\nUsing this gem more and more each day.   I have a few scripts I would like to create and have a few questions (I have been trying to find this info in docs, etc. but not sure)\r\n\r\n1.  Where are scripts scored (so that I can create scripts)\r\n2.  Must I reload the application after creating / editing scripts\r\n3. Must I do anything special to have custom scripts appear in list after pressing hotkey","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-05-13T17:50:22Z"},{"shortcode":"a","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/194","url":"","title":"Shortcodes","command":"shortcodes","content":"> Shortcodes require Kit-1.3.0-beta.6.dmg\r\n\r\nShortcodes are like writing acronyms to quickly get to specific choices of a script.\r\n\r\nTo run the following script and select \"Banana\" and \"Cookie\" type \"a\", space, \"b\", space, \"c\":\r\n\r\n```js\r\n// Shortcode: a\r\n\r\nlet fruit = await arg(\"Type 'b' then spacebar\", [\r\n  {\r\n    name: \"Apple\",\r\n    value: \"apple\",\r\n  },\r\n  {\r\n    name: \"Banana\",\r\n    value: \"banana\",\r\n    shortcode: \"b\",\r\n  },\r\n])\r\n\r\nlet treat = await arg(\"Type 'c' then spacebar\", [\r\n  {\r\n    name: \"Donut\",\r\n    value: \"donut\",\r\n  },\r\n  {\r\n    name: \"Cookie\",\r\n    value: \"cookie\",\r\n    shortcode: \"c\",\r\n  },\r\n])\r\n\r\nawait arg(`${fruit}, ${treat}`)\r\n```\r\n\r\nShortcodes also enable \"English\" shortcuts. From the main menu, type \"go fish \" or \"go eat \" to quickly drill down to one of these choices:\r\n\r\n```js\r\n//Shortcode: go\r\n\r\nlet message = await arg(\"Where?\", [\r\n  {\r\n    name: \"Lunch\",\r\n    shortcode: \"eat\",\r\n    value: \"Gone out to lunch\",\r\n  },\r\n  {\r\n    name: \"Fishing\",\r\n    shortcode: \"fish\",\r\n    value: \"Gone fishin'\",\r\n  },\r\n])\r\n\r\nawait arg(message)\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-26T19:14:17Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/187","url":"","title":"Global API","command":"global-api","content":"Here are the global api methods and their types. \r\nI'll add more explanation/organization soooooon :D\r\n\r\n> Note: These are all proxied/lazy loaded. They won't be \"required\" until you actually invoke the method.\r\n\r\n```js\r\ncd: typeof shelljs.cd\r\ncp: typeof shelljs.cp\r\nchmod: typeof shelljs.chmod\r\necho: typeof shelljs.echo\r\nexec: typeof shelljs.exec\r\nexit: typeof shelljs.exit\r\ngrep: typeof shelljs.grep\r\nln: typeof shelljs.ln\r\nls: typeof shelljs.ls\r\nmkdir: typeof shelljs.mkdir\r\nmv: typeof shelljs.mv\r\nsed: typeof shelljs.sed\r\ntempdir: typeof shelljs.tempdir\r\ntest: typeof shelljs.test\r\nwhich: typeof shelljs.which\r\nrm: typeof trashType //use `trash` instead\r\nspawn: typeof child_process.spawn\r\nspawnSync: typeof child_process.spawnSync\r\nfork: typeof child_process.fork\r\n\r\nget: AxiosInstance[\"get\"]\r\nput: AxiosInstance[\"put\"]\r\npost: AxiosInstance[\"post\"]\r\npatch: AxiosInstance[\"patch\"]\r\n\r\nreadFile: typeof fsPromises.readFile\r\nwriteFile: typeof fsPromises.writeFile\r\nappendFile: typeof fsPromises.appendFile\r\ncreateWriteStream: typeof fs.createWriteStream\r\nreaddir: typeof fsPromises.readdir\r\n\r\ncompile: typeof handlebars.compile_\r\n\r\ncwd: typeof process.cwd\r\npid: typeof process.pid\r\nstderr: typeof process.stderr\r\nstdin: typeof process.stdin\r\nstdout: typeof process.stdout\r\nuptime: typeof process.uptime\r\n\r\npath: typeof import(\"path\")\r\n\r\n_: LoDashStatic\r\n\r\nuuid: typeof uuidType.v4\r\nchalk: ChalkFunction\r\npaste: typeof clipboardy.read\r\ncopy: typeof clipboardy.write\r\n\r\ndb: DB\r\n\r\ntrash: typeof trashType\r\n\r\nwait: Wait\r\n\r\nhome: Path\r\nisFile: IsCheck\r\nisDir: IsCheck\r\nisBin: IsCheck\r\n\r\ntmp: Path\r\ninspect: Inspect\r\n\r\ncompileTemplate: CompileTemplate\r\n\r\nmd: Markdown\r\n\r\napplescript: AppleScript\r\n\r\nsetPlaceholder: SetAppProp\r\nsetPanel: SetAppProp\r\nsetHint: SetAppProp\r\nsetInput: SetAppProp\r\nsetIgnoreBlur: SetAppProp\r\nsetChoices: (choices: Choices<any>) => void\r\n\r\nsendResponse: (value: any) => void\r\n\r\n\r\nshow: ShowAppWindow\r\nshowImage: ShowAppWindow\r\n\r\nedit: Edit\r\n\r\nterminal: (script: string) => Promise<string>\r\niterm: (iterm: string) => Promise<string>\r\n\r\n\r\nnotify: typeof notifyType\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-25T14:27:10Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/186","url":"","title":"User Input","command":"user-input","content":"\r\n### `await arg()`\r\n\r\n```js\r\nlet input = await arg()\r\n```\r\n\r\nLaunches the prompt, waits for user input.\r\n\r\n### `await env(\"SOME_TOKEN\")`\r\n\r\n```js\r\nlet SOME_TOKEN = await env(\"SOME_TOKEN\")\r\n```\r\n\r\nLaunches the prompt if var isn't found in `.env`. Waits for user input. Automatically stores var in `.env`.\r\n\r\n\r\n### `await drop()`\r\n\r\n```js\r\nlet dropData = await drop()\r\n```\r\n\r\nLaunches the prompt as a drop target.\r\n\r\n\r\n\r\n### `await hotkey()`\r\n\r\n```js\r\nlet keyInfo = await hotkey()\r\n```\r\n\r\nLaunches the prompt and waits for a key combination.\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-25T14:10:24Z"},{"shortcut":"cmd opt shift ctrl a","menu":"My Awesome Script","description":"","exclude":"true","schedule":"*/10 * * * * *","system":"unlock-screen","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/185","url":"","title":"Metadata","command":"metadata","content":"### `// Shortcut`\r\n\r\n```js\r\n// Shortcut: cmd opt shift ctrl a\r\n```\r\n\r\nAutomatically assigns a keyboard shortcut to the script. Will update each time you save the file. You can also change shortcuts in `Main Menu -> Help -> Change script shortcut`\r\n\r\n### `// Menu`\r\n\r\n```js\r\n// Menu: My Awesome Script\r\n```\r\n\r\nCustomizes the name of the script in the main menu\r\n\r\n### `// Description`\r\n\r\n```js\r\n// Description: This script does something awesome\r\n```\r\n\r\nDescribes the script in the main menu\r\n\r\n### `// Author` and `// Twitter`\r\n\r\nCredits you when the script runs with a prompt\r\n\r\n## ✨ New ✨ in Kit-1.3.0-beta.4\r\n\r\n### `// Exclude`\r\n\r\n```js\r\n// Exclude: true\r\n```\r\n\r\nHides the script from the Main Menu (can still be run from shortcuts, schedule, system, etc).\r\n\r\n### `// Schedule`\r\n\r\n```js\r\n// Schedule: */10 * * * * *\r\n```\r\n\r\nRuns the script on a cron schedule.\r\n\r\n### `// System`\r\n\r\n```js\r\n// System: unlock-screen\r\n```\r\n\r\nRuns the script on a system event. \r\n\r\nAvailable events:\r\n* suspend\r\n* resume\r\n* on-ac\r\n* on-battery\r\n* shutdown\r\n* lock-screen\r\n* unlock-screen\r\n* user-did-become-active\r\n* user-did-resign-active\r\n\r\n\r\n\r\nRead about the available events [here](https://www.electronjs.org/docs/api/power-monitor#events)\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-25T14:02:49Z"}]
