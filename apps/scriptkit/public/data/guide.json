[{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1264","url":"","title":"The Script Kit Process Lifecycle","command":"the-script-kit-process-lifecycle","content":"# Script Kit Process Lifecycle: Understanding the Process/Script/Prompt Relationships\r\n\r\n## The Idle Process\r\n\r\nWhen the app starts up, it initiates an idle process. This process does the following:\r\n\r\n1. Loads `~/.kit/run/app-prompt.js` to preload the Script Kit libraries from the SDK\r\n\r\n> Note: This will also preload the platform-specific code\r\n\r\n2. Idles and waits for the user to submit a script\r\n3. Enables quick script launching since the process is always ready to go\r\n\r\n## Script Execution and Prompts\r\n\r\nPrompts play a crucial role in Script, but they don't come into play unless the script uses one of the following prompts (grouped by similarity)\r\n\r\n- `arg`, `mini`, `micro`\r\n- `fields` and `form`\r\n- `div` and `splash` (the install screen, used internally)\r\n- `editor` and `textarea`(textarea is pretty much legacy, just use `editor`)\r\n- `hotkey`\r\n- `chat`\r\n- `mic`\r\n- `drop`\r\n\r\n\r\nSince everything in Script Kit is done \"just in time,\" the app doesn't know what will display until the script hits a prompt. When a prompt is encountered, the following occurs:\r\n\r\n1. Sends prompt type/data to the app\r\n2. The app displays the data to the user (e.g., list or HTML)\r\n3. Waits for a submit action before proceeding to the next step\r\n\r\nEach time a prompt is hit, the script waits for the user to submit the prompt before moving forward. When the user triggers the submit event, the script will continue exectuing with the data received from the user. While a script is waiting for the \"submit\" event from the app, you can leverage a few event handlers such as:\r\n\r\n- `onInit` (right after the app receives the prompt config)\r\n- `onInput`\r\n- `onBlur`\r\n- `onChoiceFocus`\r\n- `onSubmit` (right before the script continues from the prompt. Last chance to get data from the app)\r\n- and more...\r\n\r\nThese are all based on the following interface:\r\n```js\r\nexport interface ChannelHandler {\r\n  (input?: string, state?: AppState): void | Promise<void>\r\n}\r\n```\r\n\r\nThese \"ChannelHandlers\" are how the app communicates back to the script. These deserve a blog post of their own.\r\n\r\n## The Main Menu\r\n\r\nThe main menu is a script just like any you authored. The main shortcut (`cmd+;` by default) will the the `~/.kit/run/app-prompt.js` to run the `~/.kit/main/index.js` script. \r\n\r\nAny custom keyboard shortcuts (or other script triggers) you've set up will load your `~/.kenv/scripts/your-script.js` and will not load the main menu.\r\n\r\nWhat makes the main menu feel different is that it's a script that loads another script. In JavaScript terms, it's a module which imports another module.\r\n\r\nAlso, the default behavior for many prompts `onEscape` handler is to \"run the main menu script\", so it can definitely feel more special than your script. Rest assured that the main menu is \"just a script\" that leverages many of more advanced Script Kit features.\r\n\r\n## Script Termination and Process Management\r\n\r\nNow that the process has loaded the SDK and has imported your script, the process will terminate once the script has run all of its code. So the script has either run out of promises/prompts to wait for, event handlers to listen to, or you've blurred/escaped or triggered another event from the app that told the script to end prematurely.\r\n\r\nWhile your script is running, the Script Kit app will always start another idle process in the background to be ready for the next script sent by the user.\r\n\r\n## Recap\r\n\r\nThe core basics of the Script Kit process lifecycle can be summarized as follows:\r\n\r\n1. The app starts an idle process that preloads the Script Kit SDK.\r\n2. The idle process waits for the the script (AKA JavaScript module)\r\n3. When a script is sent to the idle process, the app runs through the script and displays prompts when necessary.\r\n4. The process waits for the user to input and submit for each prompt.\r\n5. Once the script has executed all of its code, the process terminates.\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-22T17:39:11Z"},{"avatar":"https://avatars.githubusercontent.com/u/180256?v=4","user":"nadeemkhedr","author":"Nadeem Khedr","twitter":"nadeemkhedr","discussion":"https://github.com/johnlindquist/kit/discussions/416","url":"","title":"How to know all the built-in helper functions","command":"how-to-know-all-the-built-in-helper-functions","content":"I do know there are so many nice utils, is there a doc listing them? ","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-08-29T23:37:11Z"},{"avatar":"https://avatars.githubusercontent.com/u/183153?v=4","user":"mikeerickson","author":"Mike Erickson","twitter":"codedungeon","discussion":"https://github.com/johnlindquist/kit/discussions/265","url":"","title":"Where are scripts stored, how to reload, etc.","command":"where-are-scripts-stored-how-to-reload-etc","content":"Hey John\r\n\r\nUsing this gem more and more each day.   I have a few scripts I would like to create and have a few questions (I have been trying to find this info in docs, etc. but not sure)\r\n\r\n1.  Where are scripts scored (so that I can create scripts)\r\n2.  Must I reload the application after creating / editing scripts\r\n3. Must I do anything special to have custom scripts appear in list after pressing hotkey","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-05-13T17:50:22Z"},{"shortcode":"a","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/194","url":"","title":"Shortcodes","command":"shortcodes","content":"> Shortcodes require Kit-1.3.0-beta.6.dmg\r\n\r\nShortcodes are like writing acronyms to quickly get to specific choices of a script.\r\n\r\nTo run the following script and select \"Banana\" and \"Cookie\" type \"a\", space, \"b\", space, \"c\":\r\n\r\n```js\r\n// Shortcode: a\r\n\r\nlet fruit = await arg(\"Type 'b' then spacebar\", [\r\n  {\r\n    name: \"Apple\",\r\n    value: \"apple\",\r\n  },\r\n  {\r\n    name: \"Banana\",\r\n    value: \"banana\",\r\n    shortcode: \"b\",\r\n  },\r\n])\r\n\r\nlet treat = await arg(\"Type 'c' then spacebar\", [\r\n  {\r\n    name: \"Donut\",\r\n    value: \"donut\",\r\n  },\r\n  {\r\n    name: \"Cookie\",\r\n    value: \"cookie\",\r\n    shortcode: \"c\",\r\n  },\r\n])\r\n\r\nawait arg(`${fruit}, ${treat}`)\r\n```\r\n\r\nShortcodes also enable \"English\" shortcuts. From the main menu, type \"go fish \" or \"go eat \" to quickly drill down to one of these choices:\r\n\r\n```js\r\n//Shortcode: go\r\n\r\nlet message = await arg(\"Where?\", [\r\n  {\r\n    name: \"Lunch\",\r\n    shortcode: \"eat\",\r\n    value: \"Gone out to lunch\",\r\n  },\r\n  {\r\n    name: \"Fishing\",\r\n    shortcode: \"fish\",\r\n    value: \"Gone fishin'\",\r\n  },\r\n])\r\n\r\nawait arg(message)\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-26T19:14:17Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/187","url":"","title":"Global API","command":"global-api","content":"Here are the global api methods and their types. \r\nI'll add more explanation/organization soooooon :D\r\n\r\n> Note: These are all proxied/lazy loaded. They won't be \"required\" until you actually invoke the method.\r\n\r\n```js\r\ncd: typeof shelljs.cd\r\ncp: typeof shelljs.cp\r\nchmod: typeof shelljs.chmod\r\necho: typeof shelljs.echo\r\nexec: typeof shelljs.exec\r\nexit: typeof shelljs.exit\r\ngrep: typeof shelljs.grep\r\nln: typeof shelljs.ln\r\nls: typeof shelljs.ls\r\nmkdir: typeof shelljs.mkdir\r\nmv: typeof shelljs.mv\r\nsed: typeof shelljs.sed\r\ntempdir: typeof shelljs.tempdir\r\ntest: typeof shelljs.test\r\nwhich: typeof shelljs.which\r\nrm: typeof trashType //use `trash` instead\r\nspawn: typeof child_process.spawn\r\nspawnSync: typeof child_process.spawnSync\r\nfork: typeof child_process.fork\r\n\r\nget: AxiosInstance[\"get\"]\r\nput: AxiosInstance[\"put\"]\r\npost: AxiosInstance[\"post\"]\r\npatch: AxiosInstance[\"patch\"]\r\n\r\nreadFile: typeof fsPromises.readFile\r\nwriteFile: typeof fsPromises.writeFile\r\nappendFile: typeof fsPromises.appendFile\r\ncreateWriteStream: typeof fs.createWriteStream\r\nreaddir: typeof fsPromises.readdir\r\n\r\ncompile: typeof handlebars.compile_\r\n\r\ncwd: typeof process.cwd\r\npid: typeof process.pid\r\nstderr: typeof process.stderr\r\nstdin: typeof process.stdin\r\nstdout: typeof process.stdout\r\nuptime: typeof process.uptime\r\n\r\npath: typeof import(\"path\")\r\n\r\n_: LoDashStatic\r\n\r\nuuid: typeof uuidType.v4\r\nchalk: ChalkFunction\r\npaste: typeof clipboardy.read\r\ncopy: typeof clipboardy.write\r\n\r\ndb: DB\r\n\r\ntrash: typeof trashType\r\n\r\nwait: Wait\r\n\r\nhome: Path\r\nisFile: IsCheck\r\nisDir: IsCheck\r\nisBin: IsCheck\r\n\r\ntmp: Path\r\ninspect: Inspect\r\n\r\ncompileTemplate: CompileTemplate\r\n\r\nmd: Markdown\r\n\r\napplescript: AppleScript\r\n\r\nsetPlaceholder: SetAppProp\r\nsetPanel: SetAppProp\r\nsetHint: SetAppProp\r\nsetInput: SetAppProp\r\nsetIgnoreBlur: SetAppProp\r\nsetChoices: (choices: Choices<any>) => void\r\n\r\nsendResponse: (value: any) => void\r\n\r\n\r\nshow: ShowAppWindow\r\nshowImage: ShowAppWindow\r\n\r\nedit: Edit\r\n\r\nterminal: (script: string) => Promise<string>\r\niterm: (iterm: string) => Promise<string>\r\n\r\n\r\nnotify: typeof notifyType\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-25T14:27:10Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/186","url":"","title":"User Input","command":"user-input","content":"\r\n### `await arg()`\r\n\r\n```js\r\nlet input = await arg()\r\n```\r\n\r\nLaunches the prompt, waits for user input.\r\n\r\n### `await env(\"SOME_TOKEN\")`\r\n\r\n```js\r\nlet SOME_TOKEN = await env(\"SOME_TOKEN\")\r\n```\r\n\r\nLaunches the prompt if var isn't found in `.env`. Waits for user input. Automatically stores var in `.env`.\r\n\r\n\r\n### `await drop()`\r\n\r\n```js\r\nlet dropData = await drop()\r\n```\r\n\r\nLaunches the prompt as a drop target.\r\n\r\n\r\n\r\n### `await hotkey()`\r\n\r\n```js\r\nlet keyInfo = await hotkey()\r\n```\r\n\r\nLaunches the prompt and waits for a key combination.\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-25T14:10:24Z"},{"shortcut":"cmd opt shift ctrl a","menu":"My Awesome Script","description":"","exclude":"true","schedule":"*/10 * * * * *","system":"unlock-screen","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/185","url":"","title":"Metadata","command":"metadata","content":"### `// Shortcut`\r\n\r\n```js\r\n// Shortcut: cmd opt shift ctrl a\r\n```\r\n\r\nAutomatically assigns a keyboard shortcut to the script. Will update each time you save the file. You can also change shortcuts in `Main Menu -> Help -> Change script shortcut`\r\n\r\n### `// Menu`\r\n\r\n```js\r\n// Menu: My Awesome Script\r\n```\r\n\r\nCustomizes the name of the script in the main menu\r\n\r\n### `// Description`\r\n\r\n```js\r\n// Description: This script does something awesome\r\n```\r\n\r\nDescribes the script in the main menu\r\n\r\n### `// Author` and `// Twitter`\r\n\r\nCredits you when the script runs with a prompt\r\n\r\n## ✨ New ✨ in Kit-1.3.0-beta.4\r\n\r\n### `// Exclude`\r\n\r\n```js\r\n// Exclude: true\r\n```\r\n\r\nHides the script from the Main Menu (can still be run from shortcuts, schedule, system, etc).\r\n\r\n### `// Schedule`\r\n\r\n```js\r\n// Schedule: */10 * * * * *\r\n```\r\n\r\nRuns the script on a cron schedule.\r\n\r\n### `// System`\r\n\r\n```js\r\n// System: unlock-screen\r\n```\r\n\r\nRuns the script on a system event. \r\n\r\nAvailable events:\r\n* suspend\r\n* resume\r\n* on-ac\r\n* on-battery\r\n* shutdown\r\n* lock-screen\r\n* unlock-screen\r\n* user-did-become-active\r\n* user-did-resign-active\r\n\r\n\r\n\r\nRead about the available events [here](https://www.electronjs.org/docs/api/power-monitor#events)\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-25T14:02:49Z"}]
