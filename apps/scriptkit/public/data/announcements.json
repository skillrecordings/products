[{"enter":"Rotate Images","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/949","url":"","title":"Script Kit v1.36.0 November 2022 Release","command":"script-kit-v1360-november-2022-release","content":"# Script Kit v1.36.0 November 2022 Release\r\n\r\nDownload from [https://www.scriptkit.com/](https://www.scriptkit.com/)\r\n\r\n\r\n<div align=\"center\">\r\n  <a href=\"https://www.youtube.com/watch?v=bAXPa1Jxcvg\"><img src=\"https://yt-embed.herokuapp.com/embed?v=bAXPa1Jxcvg\" alt=\"Script Kit November Release Video\"></a>\r\n</div>\r\n\r\n\r\n## Script Markdown\r\n\r\nPlace a multiline comment at the top of your script to display Markdown to the user when previewing the script. For example:\r\n\r\n```js\r\n/*\r\n# Rotate Images\r\n- Get the selected image from Finder\r\n- Creates 3 new versions rotated at 90, 180, and 270\r\n*/\r\n```\r\n\r\n## Script `Enter` Metadata\r\n\r\nAdding `Enter` metadata will now change the text displayed by the \"Run\" button in the script preview. For example:\r\n\r\n```js\r\n// Enter: Rotate Images\r\n```\r\n\r\n## Themes (Pro)\r\n\r\nFrom the \"Kit\" tab, you can now select a theme for the Script Kit UI. There are a variety of themes to choose from and in upcoming releases, you'll be able to create your personalized themes that you can share.\r\n\r\n## Log Window (Pro)\r\n\r\nRun a script with `alt+enter` to open the log window. This window will display the output of your script from and commands you run or any console logs.\r\n\r\n## Debugger (Pro)\r\n\r\nRun a script with `ctrl+enter` to open the debugger. The debugger will automatically pause on any `debugger` statements and allow you to step through your script and inspect/modify variables.\r\n\r\n## Account\r\n\r\nYou can now sign in to GitHub to unlock more features. The first feature is `createGist` (which is used behind the scenes in sharing scripts already) which is now exposed to users:\r\n\r\n```js\r\nlet {url} = await createGist(\"My content\")\r\n```\r\n\r\nIn the future, this account will be used for:\r\n- syncing your scripts with a GitHub repo\r\n- connecting to GitHub repos to run GitHub Actions\r\n- displaying stats about your scripts\r\n- pro plan/team plans\r\n- and much more...\r\n\r\n\r\n## Widgets Dynamic Lists\r\n\r\nWidgets can now use dynamic lists and get data from an item selected. Please check out this example and watch the youtube video for more details.\r\n\r\nhttps://github.com/johnlindquist/kit/discussions/948\r\n\r\n## Snippet Keyboard Layouts\r\n\r\nSome users reported that Snippets were not working on non-standard keyboard layouts. The snippet engine has been updated to detect your current system keyboard layout and adjust accordingly.\r\n\r\n## Focus Window\r\n> Requires \"Security & Privacy\" > \"Accessibility\" > \"Screen Recording\" permission to be enabled to work so it can get the window title names.\r\n\r\nHit colon (:) from the main menu to open the focus window script. This lists all of the windows open and allows you to select which window to bring into focus.\r\n\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2022-11-18T17:39:00Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/925","url":"","title":"October 2022 Release (v1.32.2) - Windows Preview 🤩, Debugger 🐞, and Repairs 🛠️","command":"october-2022-release-v1322-windows-preview-debugger-and-repairs","content":"# Script Kit 1.32.2 Released 🎉\r\n\r\nDownload here: https://scriptkit.com\r\n\r\n## Windows Preview 🤩\r\n\r\nWe are excited to announce the first Windows preview of Script Kit! This build is very close to feature-parity with the OSX version, so you can expect the vast majority of scripts you run on Mac to also run on Windows.\r\n\r\n> Note: We haven't purchased the Windows code signing certificate yet, so Windows will warn you that it can't verify Script Kit when you begin the install process. Also, this causes that Windows updates will need to be installed manually. We plan on setting up the Windows code-signing certificate by the end of the year to fix these issues then we'll remove the \"Preview\" label 😊\r\n\r\nSnippets, Watchers, Schedule, etc, etc, etc all work. If an api is not supported on Windows (mostly the functions that get information about the desktop) then it will display a \"Not supported on Windows\" message.\r\n\r\nThe \"Browse\" (`/` from the main menu) and \"File Search\" (`.` from the main menu) both required a ton of work, but they're working as well. We'll get the App Launcher sorted out in the next release.\r\n\r\n## Debugger\r\n\r\nYou can now debug your scripts by simply pressing `cmd+enter` from the main menu (`ctrl+enter` on Windows). This will open a built-in inspector that will allow you to step through your script, set breakpoints, and inspect variables.\r\n\r\nUse the `debugger` keyword to set a breakpoint in your script. The inspector will pause execution when it hits the breakpoint and you can mess around with the variables and step through the script to your heart's content. You can even invoke functions such as `setDescription()` and treat the inspector like a REPL.\r\n\r\n## Repair\r\n\r\nThe menubar now includes a `Debug` menu. From `Debug->Force Repair Kit SDK` you can force the Kit SDK to be reinstalled. This is useful if you're having issues with the Kit SDK due to npm acting up or if an update failed.\r\n\r\n## `await cutText()`\r\n\r\nThe `cutText()` function will cut the latest typed word and bring it into your script.\r\n\r\n```js\r\nlet word = await cutText()\r\n\r\n// Send word to an API, wrap the word in markdown, etc, etc\r\n```\r\n\r\n## Other Fixes\r\n\r\n* The TypeScript esbuild compiling should be faster and more stable\r\n* New install splash now shows the npm progress status\r\n* App Launcher fixes (`;` from the main menu)\r\n* Google Fixes (`~` from the main menu)","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2022-10-27T16:08:15Z"},{"name":"Example Postfix Snippet","snippet":"*html,,","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/901","url":"","title":"September 2022 Release (version 1.30.8) - Postfix Snippets, UI Shortcuts, VS Code Extension, and Much, much more!","command":"september-2022-release-version-1308-postfix-snippets-ui-shortcuts-vs-code-extension-and-much-much-more","content":"# Script Kit 1.30.8 Released 🎉\r\n\r\nDownload here: https://www.scriptkit.com/\r\n\r\nThis is our first release after a couple of busy summer months, and it's slam-packed full of new features and UX!\r\n\r\n## Postfix Snippets\r\n\r\nPostfix snippets are snippets that are triggered by typing a postfix after a \"variable\" of text. The variable is represented by a `*` at the beginning of snippet. In the `*html,,` example below, typing `divhtml,,` would treat `div` as the variable and render out `<div>Hello world</div>`.\r\n\r\n### Postfix Snippet Hello World\r\n\r\n```js\r\n// Name: Example Postfix Snippet\r\n// Snippet: *html,,\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet value = await arg(\"I'm the '*' content\")\r\n\r\nsetSelectedText(`<${value}>Hello world</${value}>`)\r\n```\r\n\r\n### Postfix Snippet Query API\r\n\r\nThe snippet can also take the content of the `*` and post it to an API for more complex scripts.\r\n\r\nIn this example, the content is used to query google and create a markdown link from the word you typed.\r\n\r\n```js\r\n// Name: Markdown Link from Google Snippet\r\n// Snippet: *,.\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet google  = await npm(\"googlethis\")\r\n\r\nconst options = {\r\n  page: 0, \r\n  safe: false,\r\n  additional_params: { \r\n    hl: 'en' \r\n  }\r\n}\r\n\r\nlet value = await arg(\"I'm the asterisk content\")\r\nlet response = await google.search(value, options);\r\n\r\nlet url = response.results[0].url\r\n\r\nsetSelectedText(`[${value}](${url})`)\r\n```\r\n\r\n\r\n## `template()`\r\n\r\nThe `template` prompt will present the editor populated by your template. You can then tab through each variable in your template and edit it. \r\n\r\nTemplates pair really, _really_ nicely with Snippets!\r\n\r\n### Template Hello World\r\n\r\n```js\r\nlet text = await template(`Hello $1!`)\r\n```\r\n\r\n### Standard Usage\r\n\r\n```js\r\nlet text = await template(`\r\nDear \\${1:name},\r\n\r\nPlease meet me at \\${2:address}\r\n\r\n    Sincerely, John`)\r\n```\r\n\r\n\r\n## `await docs()`\r\n\r\n`docs()` takes the file path of a markdown file and displays it as a list of choices.\r\n\r\nEach h2 is displayed as a choice while the content of the h2 is displayed in the preview.\r\n\r\nSelected the choice will return current h2.\r\n\r\n### Submitting a `docs()` value\r\n\r\nIf you'd rather submit a value instead of the h2, then use an HTML comment to specify the value under the h2's content:\r\n\r\n```md\r\n## I'm the Choice Header\r\n<!-- value: This will be returned -->\r\n```\r\n\r\n### `docs()` Example\r\n\r\n```js\r\n// Name: Example Docs\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet buffer = await download(`https://raw.githubusercontent.com/BuilderIO/qwik/main/README.md`)\r\n\r\nlet filePath = tmpPath(\"README.md\")\r\nawait writeFile(filePath, buffer)\r\n\r\n\r\nlet selectedDoc = await docs(filePath)\r\n\r\ndev({selectedDoc})\r\n```\r\n\r\n## UI Shortcuts in the \"Action Bar\"\r\n\r\nThe September 2022 release adds a new \"Action Bar\" at the bottom of the UI which supports custom shortcuts.\r\n\r\nA shortcut has a `name`, `key`, `onPress` and `bar` property. When you press the shortcut, it will trigger the `onPress` function. You can also click on the shortcut to trigger the `onPress` function.\r\n\r\n```js\r\nlet clearInput = {\r\n            name: \"Clear\",\r\n            key: \"cmd+u\",            \r\n            onPress: async () => { \r\n                setInput(\"\")\r\n            },\r\n            // optional, but will only display when set\r\n            bar: \"right\",\r\n}\r\n```\r\n\r\n\r\nAdd each shortcuts to a `shortcuts` array which is passed to the prompt config (most commonly, the first argument of `arg()`).\r\n\r\n### UI Shortcuts Example\r\n\r\n```js\r\n// Name: Shortcuts Example\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet clearInput = {\r\n            name: \"Clear\",\r\n            key: \"cmd+u\",            \r\n            onPress: async () => { \r\n                setInput(\"\")\r\n            },\r\n            // optional, but will only display when set\r\n            bar: \"right\",\r\n}\r\n\r\nlet reloadChoices = {\r\n            name: \"Reload\",\r\n            key: \"cmd+l\",\r\n            bar: \"right\",\r\n            onPress: async () => { \r\n                setChoices([\"one\",\"two\",\"three\"])\r\n            }\r\n}      \r\n\r\nlet submitInputNotChoice = {\r\n            name: \"Submit Input\",\r\n            key: \"cmd+i\",\r\n            bar: \"right\",\r\n            onPress: async (input) => { \r\n                submit(input)\r\n            }\r\n}                \r\n\r\nlet runAppLauncher = {\r\n            name: \"Launch App\",\r\n            key: \"cmd+a\",\r\n            bar: \"left\",\r\n            onPress: async () => { \r\n                await run(kitPath(\"main\", \"app-launcher.js\"))\r\n            }\r\n}\r\n\r\nlet result = await arg({\r\n    placeholder: \"Shortcut demo\",\r\n    shortcuts: [        \r\n        clearInput,\r\n        reloadChoices,\r\n        submitInputNotChoice,\r\n        runAppLauncher\r\n    ]\r\n}, [\"apple\", \"banana\", \"cherry\"])\r\n\r\nawait div(md(`## ${result}`))\r\n```\r\n\r\n## Recent Script Moved to Top\r\n\r\nThe most recently run script is now moved to the top of the list so that the next time you open the main prompt, you can quickly run it again.\r\n\r\n\r\n## VS Code Extension\r\n\r\nWe now have a VS Code extension which allows you to run scripts directly from VS Code:\r\n\r\nhttps://marketplace.visualstudio.com/items?itemName=johnlindquist.kit-extension\r\n\r\nMore features are coming soon!\r\n\r\n## Menubar Updates\r\n\r\nThe menubar menu now has a \"Dev Tools\" menu which allows you to perform some common commands that might not be obvious from the main UI.\r\n\r\nThe menu also lists all of the running processes so that you can easily terminate them without having to hunt around from process ids.\r\n\r\n## cmd+tab to Widgets and `dev`\r\n\r\nWhen the main prompt is open, a widget is open, or a `dev` window is open, the Script Kit icon will be added to the doc to allow you to cmd+tab back to widgets/editor/dev/etc. Since Script Kit is a combination of a temporary prompt (like Alfred) but also can host long-running widgets, we had to work through various scenarios of when cmd+tab can be available. Hopefully we've landed on a solution that works for everyone.\r\n\r\n## Main Menu `API` and `Guide`\r\n\r\nThe Main Menu of Script Kit now hosts `API` and `Guide` tabs which allow you to easily copy code snippets or create new scripts from the examples. They're also both easy to update, so you can expect more samples and explanations to play with in the future!\r\n\r\n## `await emoji()`\r\n\r\nA brand new emoji picker\r\n\r\n```js\r\nlet e = await emoji()\r\nsetSelectedText(e.emoji)\r\n```\r\n\r\n## `await fields()`\r\n\r\n```js\r\nlet [first, last] = await fields([\"First name\", \"Last name\"])\r\n\r\ndev({\r\n    first,\r\n    last\r\n})\r\n```\r\n\r\n## `beep()`\r\n\r\nAnd the most exciting announcement of all, `beep()` is now available!\r\n\r\n`beep()` plays a beep sound.\r\n\r\n### `beep()` Example\r\n\r\n```js\r\nbeep()\r\n```\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2022-09-29T08:49:36Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/787","url":"","title":"June 2022 Release (version 1.19.3) - Menu, Native Keyboard, ignoreBlur","command":"june-2022-release-version-1193-menu-native-keyboard-ignoreblur","content":"# Script Kit 1.19.3 Released 🎉\r\n\r\nDownload here: https://www.scriptkit.com/\r\nDirect downloads:\r\n* Intel: https://github.com/johnlindquist/kitapp/releases/download/v1.19.3/Kit-1.19.3.dmg\r\n* m1: https://github.com/johnlindquist/kitapp/releases/download/v1.19.3/Kit-1.19.3-arm64.dmg\r\n\r\n## Features\r\n\r\n* Moved all notifications to menu colored “dots” (red, orange, green)\r\n    * In the future, the user will be able to set these notifications as well\r\n* Completely re-vamped menu for common options\r\n* Implemented an “auth helpers” when user does actions that require “accessibility permissions” (Snippets, clipboard history, setSelectedText, etc)\r\n* `ignoreBlur` allows window to go behind other windows and stay open\r\n* `node` is now stored in `~/.knode` (instead of ~/.kit/node) to allow npx to work in the terminal\r\n* `node` version set to v16.14.2. Version is now synced with Kit.app which resolves conflicts with native packages in scripts\r\n* Keyboard actions (copy/paste/type) have moved from applescript to native code. Snippets, setSelectedText, etc should now feel as “instant” as possible.\r\n* You can now `await hide()` for when you need to make sure the prompt is hidden before continuing the script. This was necessary since the new keyboard actions were so fast.\r\n* Moved the script sharing auth flow to a widget\r\n* Internal: Can now set the state of Kit.app from a script to help with debugging\r\n\r\n\r\n## Fixes\r\n\r\n* App launcher failed to parse malformed App plist icons\r\n* Editor whitespace collapsing on HiDPI screens\r\n* Touchbar key while prompt open would cause crash\r\n* Bin files sometimes didn’t regenerate properly when re-launching the app\r\n* Updater issues\r\n* Background UI not updating when user manually terminates process\r\n* Performance: Moved the file watcher to a spawned process that sends events to the App\r\n\r\n## More to come...\r\n\r\nFinally moved into the new house and settled in. Personal life was too hectic to stream much or do release notes on past couple releases. Expect more streaming, sharing scripts, promotion, and news from me. Cheers! 🥂\r\n\r\n_Here's a preview of the new menu and an example of a dot notification_\r\n\r\n\r\n![The new dot notifications and re-vamped menu](https://cdn.discordapp.com/attachments/963905444823318578/988844882665803926/unknown.png)\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2022-06-21T16:44:14Z"},{"name":"Widget Hello World","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/745","url":"","title":"March 2022 Release (version 1.7.3) - Widgets! Built-in Terminal, Menu, and Built-in Editor Types","command":"march-2022-release-version-173-widgets-built-in-terminal-menu-and-built-in-editor-types","content":"# March 2022 Release (version 1.7.3)\r\n\r\nScript Kit should auto-update or you can grab the downloads here: https://www.scriptkit.com/\r\n\r\n## Widgets - `await widget()`\r\n\r\nA widget is a detached UI window that can control and listen to a script.\r\n\r\n<img width=\"374\" alt=\"CleanShot 2022-03-01 at 12 43 13@2x\" src=\"https://user-images.githubusercontent.com/36073/156237436-f42e8f33-2fbb-48bb-9408-94f1a45283a5.png\">\r\n\r\n[Open widget-hello-world in Script Kit](https://scriptkit.com/api/new?name=widget-hello-world&url=https://gist.githubusercontent.com/johnlindquist/ca174899643e86f416d301d9599bb4e8/raw/55d334c6dc412c0346a750348d8c0ffa2b8650ba/widget-hello-world.ts\")\r\n\r\n```js\r\n// Name: Widget Hello World\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet message = await arg(\"Hello what?\")\r\nawait widget(`<h1 class=\"p-4 text-4xl\">Hello ${message}</h1>`)\r\n\r\n```\r\n\r\n### Widget Events\r\n\r\n\r\n[Open widget-events in Script Kit](https://scriptkit.com/api/new?name=widget-events&url=https://gist.githubusercontent.com/johnlindquist/1ce2972fdeed0773450f4dba3f3f2c00/raw/6834ccde194ea471f403df9366a7ac283cb853bb/widget-events.ts\")\r\n\r\n```js\r\n// Name: Widget Events\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet text = \"\"\r\nlet count = 0\r\n\r\nlet w = await widget(`\r\n<div class=\"p-5\">\r\n    <h1>Widget Events</h1>\r\n    <input autofocus type=\"text\" class=\"border dark:bg-black\"/>\r\n    <button id=\"myButton\" class=\"border px-2 py-1\">+</button>\r\n    <span>{{count}}</span>    \r\n</div>\r\n`)\r\n\r\nw.onClick((event) => {\r\n    if (event.targetId === \"myButton\") {\r\n        w.setState({count: count++})\r\n    }\r\n})\r\n\r\nw.onClose(async () => {\r\n    await widget(`\r\n<div class=\"p-5\">\r\n    <h1>You closed the other widget</h1>\r\n    <p>${text}</p>\r\n</div>\r\n`)\r\n})\r\n\r\nw.onInput((event) => {\r\n    text = event.value\r\n})\r\n\r\nw.onMoved(({ x, y}) => {\r\n    // e.g., save position\r\n})\r\n\r\nw.onResized(({ width, height }) => {\r\n    // e.g., save size\r\n})\r\n```\r\n\r\n## Closing a Widget\r\nThere are 3 ways to close a widget:\r\n1. Hit \"escape\" with the widget focused\r\n2. End the process of the widget. Hit <kbd>cmd+p</kbd> with the main menu focused to see the running processes or `exit()` anywhere in the script.\r\n3. Use a `ttl` (time to live) in the options when creating a widget\r\n\r\n## \"Always on Top\" and Locking the Widget\r\n\r\n[Open widget-always-on-top in Script Kit](https://scriptkit.com/api/new?name=widget-always-on-top&url=https://gist.githubusercontent.com/johnlindquist/bfd8ec67d9632867b0faf4e808381948/raw/90f766f21af8c88760409215e569baef9d8f0238/widget-always-on-top.ts\")\r\n\r\n```js\r\n// Name: Widget Always on Top\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait widget(`<h1 class=\"text-9xl\">🇺🇦</h1>`, {\r\n    alwaysOnTop: true,\r\n    transparent: true\r\n})\r\n\r\n```\r\n\r\nWith a widget focused, press <kbd>cmd+l</kbd> to \"Lock\" the widget. This will disable any possible mouse interactions (including moving, resizing, etc) and allow you to click through the widget to any windows underneath.\r\n\r\nTo \"Unlock\":\r\n1. three-fingered swipe up on OSX\r\n2. focus the widget\r\n3. hit <kbd>cmd+l</kbd>\r\n\r\nYou can now hit move, escape, etc the widget.\r\n\r\n## Built-in Terminal - `await term()`\r\n\r\n`term` is Script Kit's built-in terminal.\r\n\r\n### From the Main Menu\r\n\r\nType <kbd>></kbd> into the main menu to open `term`\r\n\r\n### From a Script\r\n\r\nUse the `await term()` API to switch to the terminal.\r\n\r\n[Open term-hello-world in Script Kit](https://scriptkit.com/api/new?name=term-hello-world&url=https://gist.githubusercontent.com/johnlindquist/10420bab68da357b572c1e703c2c5a43/raw/a287e443f1e57d4541f50feba28b86e1702ff515/term-hello-world.ts\")\r\n\r\n```js\r\n// Name: Term Hello World\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait term(`echo 'Hello World!'`)\r\n```\r\n\r\n> Note: If you want spawn a new Mac terminal, use `await terminal()`\r\n\r\n### Pass Terminal Output to Script\r\n\r\nIf you end the terminal with <kbd>cmd+enter</kbd>, the script will continue and you can grab the latest text output from the terminal.\r\n\r\n> 🐞: <kbd>ctrl+any key</kbd> will also end the terminal. This is a bug (it was only meant to be ctrl+c) which I'll fix soon. I'm also open to ideas for other shortcuts to \"end\" a terminal that aren't taken by vim/emacs/etc, because I know I'll be missing some.\r\n> 🐞: `term` doesn't grab keyboard focus when opening. I'll get that fixed ASAP!\r\n\r\n[Open term-returns in Script Kit](https://scriptkit.com/api/new?name=term-returns&url=https://gist.githubusercontent.com/johnlindquist/935445caef26d1c13f195533569cd0cc/raw/ca921b09480a3d7b5bf63e7a777011199e642fb9/term-returns.ts\")\r\n\r\n```js\r\n// Name: Term Returns\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet text = await term(`ls ~/.kit`)\r\nawait editor(text)\r\n```\r\n\r\n## Menubar - `menu()`\r\n\r\n`menu` allows you to customize the menubar for Script Kit.\r\n\r\n<img width=\"290\" alt=\"CleanShot 2022-03-01 at 12 40 58@2x\" src=\"https://user-images.githubusercontent.com/36073/156237149-c40843db-4dd2-4e35-9854-4a922e9cd1dd.png\">\r\n\r\n[Open menu-hello-world in Script Kit](https://scriptkit.com/api/new?name=menu-hello-world&url=https://gist.githubusercontent.com/johnlindquist/6aeb6a3f916bfc40e9acd6b9d4388b34/raw/21d8c70da05f08e454d81cb0ccebbbbc82b42f7d/menu-hello-world.ts\")\r\n\r\n```js\r\n// Name: Menu Hello World\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nmenu(`Hello 🌎`)\r\n```\r\n\r\n### Menu with Scripts\r\n\r\nThe second arg of menu can be an array of scripts you wish to present in a drop-down menu. This way, on left-click, you'll get a list of scripts to pick from from the menubar rather than opening the main Script Kit UI.\r\n\r\n[Open menu-with-scripts in Script Kit](https://scriptkit.com/api/new?name=menu-with-scripts&url=https://gist.githubusercontent.com/johnlindquist/0e07e0a8bd4926be6d843ce49fbb4474/raw/4a111ceeae7725525fdcf8bf546105698a4ac4c9/menu-with-scripts.ts\")\r\n\r\n```js\r\n// Name: Menu with Scripts\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n// An empty string means \"Use default Script Kit icon\"\r\nmenu(``, [\r\n    \"app-launcher\"\r\n])\r\n```\r\n\r\n## Built-in Editor Types\r\n\r\nScript Kit's built-in editor now loads all of Script Kit's types! This was a huge undertaking that everyone just expects to work. You all know how that feels 😇\r\n\r\n> 🐞: Please let me know if you see any missing. I noticed that I missed the types for `terminal` and `iterm` when putting this post together 🤦‍♂️.\r\n\r\n## March Plans\r\n\r\nI'm dedicating March to DOCUMENTATION!!! (and bug-fixes)... I have _a lot_ of script requests to follow-up on and work around the newsletter and other non-app stuff. I'm also moving this month, so y'all know how stressful that can be. So expect the April build to be extremely light feature-wise, but I will be set up in the new house ready to much more live-streaming and communication. Can't wait to share more! 🙂\r\n\r\n## Questions?\r\n\r\nI'm happy to help with any questions you may have!","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2022-03-01T19:45:06Z"},{"name":"Menubar Demo","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/705","url":"","title":"February 2021 (version 1.6.9) - Built-in Editor, New Main Menu Features, `await path()`, Event handlers, Beta pro features, Terminate Process","command":"february-2021-version-169-built-in-editor-new-main-menu-features-await-path-event-handlers-beta-pro-features-terminate-process","content":"Been a _busy_ month of major Script Kit features!\r\n\r\n## Built-in Editor\r\n\r\nScript Kit's number one goal is to make writing time-saving scripts easier. So now Script KIt comes with a pre-configured editor, complete with autocompletion and error checking:\r\n\r\nhttps://user-images.githubusercontent.com/36073/152349718-9f9af13f-4cbb-4444-810a-2f1281938106.mp4\r\n\r\nIf you're already using vs code, you can switch to the \"Kit\" editor in the `Kit` tab -> `Change Editor`.\r\n\r\n## Main Menu Shortcuts and `/`, `~`, and `>`\r\n\r\nThe Script Kit main menu will continue to grow in features. \r\n\r\n### Shortcuts\r\n\r\n* `cmd+f` - Does a `grep` search through all of your scripts\r\n* `cmd+p` - Launches a `Processes` menu for currently running scripts\r\n\r\n### Path Mode\r\nType the following characters to change the mode of the main menu:\r\n* <kbd>~</kbd> Switches to a path selector mode in your home directory\r\n* <kbd>/</kbd> Switches to a path selector mode in your root directory\r\n\r\nNavigate with <kbd>right</kbd>/<kbd>left</kbd> or <kbd>tab</kbd>/<kbd>shift+tab</kbd> then select with <kbd>return</kbd>. Here's an example of typing `~`\r\n\r\nhttps://user-images.githubusercontent.com/36073/152386816-8be054d6-047c-416f-ae2b-dce1723d222c.mp4\r\n\r\n### Command Mode\r\n\r\n* <kbd>></kbd> Switches to a command mode to execute a command\r\n\r\n\r\nhttps://user-images.githubusercontent.com/36073/152387376-b2e8b71a-4980-4d23-8c98-4f56f3ce1fdd.mp4\r\n\r\n\r\n### Future Work\r\nIn the March release, planning on these:\r\n\r\n* <kbd>,</kbd> List system preferences\r\n* <kbd>.</kbd> App launcher\r\n* <kbd>;</kbd> MEGA MENU WITH EVERYTHING 🤭\r\n\r\n## `await path()`\r\n\r\nYou can now prompt to select a path. This UI  works exactly like \"path mode\" above.\r\n\r\n```js\r\nlet selectedPath = await path()\r\ncd(selectedPath)\r\n\r\nawait exec(`git pull`) // this will now operate based on the selectedPath\r\n```\r\n\r\n## Event Handlers\r\n\r\nWhen building the `path` prompt, I realized it just wasn't possible to do in a script. So I put in the effort to expose the event handlers from the app into the prompt. So even though `path` behaves very differently, it's still an `arg` with customized handlers. You can override many of the handlers yourself for customized prompts:\r\n\r\nFor example, you can override the default behavior of `Escape` terminating your current script:\r\n\r\n```js\r\n// Submit the current input when you hit escape\r\nawait arg({\r\n  onEscape: (input)=> {\r\n    submit(input)\r\n  }\r\n})\r\n```\r\n\r\nOverriding handlers is definitely considered \"advanced\", so I'm happy to answer any questions!\r\n\r\nHere's a list of all the new `arg` config properties:\r\n```js\r\nexport interface ChannelHandler {\r\n  (input: string, state: AppState): void | Promise<void>\r\n}\r\n\r\nexport interface PromptConfig\r\n  onNoChoices?: ChannelHandler\r\n  onChoices?: ChannelHandler\r\n  onEscape?: ChannelHandler\r\n  onAbandon?: ChannelHandler\r\n  onBack?: ChannelHandler\r\n  onForward?: ChannelHandler\r\n  onUp?: ChannelHandler\r\n  onDown?: ChannelHandler\r\n  onLeft?: ChannelHandler\r\n  onRight?: ChannelHandler\r\n  onTab?: ChannelHandler\r\n  onInput?: ChannelHandler\r\n  onBlur?: ChannelHandler\r\n  onChoiceFocus?: ChannelHandler\r\n\r\n  debounceInput?: number\r\n  debounceChoiceFocus?: number\r\n\r\n  onInputSubmit?: {\r\n    [key: string]: any\r\n  }\r\n  onShortcutSubmit?: {\r\n    [key: string]: any\r\n  }\r\n}\r\n```\r\n\r\n## onInputSubmit, onShortcutSubmit\r\n\r\nIf you want to create \"shortcuts\" to submit specific values, can use the new `onInputSubmit` and `onShortcutSubmit`. These allow you to bind text or shortcuts to submit values. This is exactly how the main menu works:\r\n\r\n![CleanShot 2022-02-03 at 09 47 42](https://user-images.githubusercontent.com/36073/152388672-db242f4e-20e2-4645-a326-a8bbc960f63d.png)\r\n\r\n\r\n## Beta Pro Features: Menubar\r\n\r\nYou can now customize the text of the Script Kit menubar icon to say anything with the `pro.beta.menubar` method. In the future, you'll be able to build out an entire menu, but I thought I'd sneak this feature in for fun in this build:\r\n\r\n[Open menubar-demo in Script Kit](https://scriptkit.com/api/new?name=menubar-demo&url=https://gist.githubusercontent.com/johnlindquist/ef01308eb63715970f26ee1378473194/raw/9ad4219968d9ec1a9747811a71c678ad8e241ec0/menubar-demo.ts\")\r\n\r\n```js\r\n// Name: Menubar Demo\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet value = await arg(\"Set the menubar to:\")\r\npro.beta.menubar(value)\r\n\r\n\r\n```\r\n\r\nhttps://user-images.githubusercontent.com/36073/152394319-d9e071fe-edcd-4cf2-be3e-60d5ba7b01cd.mp4\r\n\r\n\r\n## Terminate Processes\r\n\r\nIf you need to end a script that's running in the background, stuck on an exec command, or whatever reason, open the main menu with the <kbd>cmd+;</kbd> shortcut, then press this button (or hit <kbd>cmd+p</kbd>. This will open a \"terminate processes\" window where you can end your scripts:\r\n\r\n![CleanShot 2022-02-03 at 10 20 45@2x](https://user-images.githubusercontent.com/36073/152394881-cf612921-1f00-4458-861a-3538053377dd.png)","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2022-01-30T00:36:03Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/669","url":"","title":"Script Kit for Linux - Developer Preview","command":"script-kit-for-linux-developer-preview","content":"# Script Kit for Linux - Developer Preview\r\n\r\n## Why \"Developer Preview\"\r\n\r\n1. Building from the \"Mac\" source\r\n\r\nCurrently, the Linux build builds from the exact same branch as the Mac build. While this works fine, for now, we'll want two separate release cadences and feature sets. This could be done through a branch, but then I'd have to set up a new release server. I'll figure it out details next year.\r\n\r\n2. The Linux build is missing all the OS-specific tools\r\n\r\nLinux currently doesn't support `getSelectedText`, `getTabs`, and other utils that are written in AppleScript. I'm planning to tackle many of those utils in Rust, which theoretically should allow them to be cross-platform, but that's another task for next year.\r\n\r\n3. I've Only Tested on Ubuntu through a Parallels vm\r\n\r\nObviously will need some more real-world testing.\r\n\r\n## Where to Download\r\n\r\nDownload the AppImage here:\r\nhttps://github.com/johnlindquist/kitapp/releases/tag/v1.5.1","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-12-24T08:15:12Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/655","url":"","title":"🥳  Script Kit Launch Day 🎉","command":"script-kit-launch-day","content":"# Script Kit is Officially Released! 🎉\r\n\r\nDownload now from https://scriptkit.com\r\n\r\n## Free Script Kit Course on [egghead.io](https://egghead.io)\r\n\r\nTo help you get started, I put together a short course as a feature tour:\r\n\r\nhttps://egghead.io/courses/script-kit-showcase-for-optimizing-your-everyday-workflows-e20ceab4\r\n\r\nIf you've been using Script Kit for a while on the beta, you know it can do much, much more than what's shown in the lessons, but everyone has to start somewhere. Speaking of the beta...\r\n\r\n## Beta Channel Discontinued\r\n\r\nIf you installed the beta, please download from https://scriptkit.com, quit Kit.app, and replace with the new version. This will put you on the “Main” channel. Updates will be ~monthly. The beta channel is discontinued ❗️\r\n\r\nAlso, thank you so, so much for all your feedback and patience with updates over the past year. You’ve really helped make Script Kit what it is today and I’m forever grateful 🙏\r\n\r\n## Windows Developer Preview\r\n\r\nThe details for the Windows build are found here: https://github.com/johnlindquist/kit/discussions/654\r\n\r\n## Plans for 2022\r\n\r\n1. Make the dev setup more contribution-friendly. I would love to accept PRs later next year.\r\n2. Get the Windows build to parity with Mac.\r\n3. Lots of lessons and scripts. I can finally spend more time sharing scripts than working on the app 😎\r\n4. Research into Rust, runtimes, and utilities that can provide any benefit to making our scripts better.\r\n5. Focus on \"export to serverless function\", \"export as github action\", and other ways to maximize the work you put into your scripts.\r\n5. Script Kit Pro. A paid version with additional features not found in the base version. Not ready to talk about it, but it's exciting!\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-12-17T18:33:08Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/654","url":"","title":"Script Kit for Windows - Developer Preview","command":"script-kit-for-windows-developer-preview","content":"# Script Kit for Windows - Developer Preview\r\n\r\n## Why \"Developer Preview\"\r\n\r\n1. I haven't bought a certificate to add to the build:\r\n- You'll see many \"untrusted\" warnings when downloading/installing\r\n- Auto-updating will not work\r\n\r\n2. I haven't decided if the Windows repo will be a fork, branch, or main\r\n\r\nCurrently, the Windows build builds from the exact same branch as the Mac build. While this works fine, for now, I'm pretty sure we'll want two separate release cadences and feature sets. This could be done through a branch, but then I'd have to set up a new release server. I'll figure it out the details next year.\r\n\r\n3. The Windows build is missing all the OS-specific tools\r\n\r\nWindows currently doesn't support `getSelectedText`, `getTabs`, and other utils that are written in AppleScript. I'm planning to tackle many of those utils in Rust, which theoretically should allow them to be cross-platform, but that's another task for next year.\r\n\r\n4. I've Only Tested It on Two Laptops\r\n\r\nThe Mac version has been used/tested by many, many people. I have two Windows laptops at home to test it on. It works well, but I don't know how much your mileage will vary.\r\n\r\n## Where to Download\r\n\r\nDownload the  installer here:\r\nhttps://github.com/johnlindquist/kitapp/releases/tag/v1.5.1\r\n\r\nAgain, this build will not auto-update. I'll post announcements here when new versions are available and you'll have to download the new version each time until I have the certificate and release servers worked out. Honestly, I'll probably write a \"check for Windows update and download\" script then you can just run that on a `// Schedule: 0 8 * * *` 😉","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-12-17T15:06:29Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/615","url":"https://gist.githubusercontent.com/johnlindquist/87e92156251d09a02154f04772f1e9bf/raw/be6dde40a7f5e1f3b8eaa9abf68d8698031cd3de/non-blocking-div.js","title":"beta.114 - Info, Settings, Choice Events 🎛","command":"beta114-info-settings-choice-events","content":"# beta.114 - Info, Settings, Choice Events\r\n\r\n## Displaying Temporary Info\r\n\r\nUntil now, `await div()` worked by waiting for the user to hit enter/escape. This still works fine, but if you want to \"timeout\" a `div` to display temporary info without user input, this entire script will run without any user interaction:\r\n\r\n[Install non-blocking-div](https://scriptkit.com/api/new?name=non-blocking-div&url=https://gist.githubusercontent.com/johnlindquist/87e92156251d09a02154f04772f1e9bf/raw/be6dde40a7f5e1f3b8eaa9abf68d8698031cd3de/non-blocking-div.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet classes = `p-5 text-3xl flex justify-center items-center text-center`\r\n\r\ndiv(`Wait 1 second...`, classes)\r\nawait wait(1000)\r\n\r\ndiv(`Just 2 more seconds...`, classes)\r\nawait wait(2000)\r\n\r\ndiv(`Almost there...`, classes)\r\nawait wait(3000)\r\n\r\n```\r\n\r\n## Remember Selection\r\n\r\nI needed to build a settings \"panel\", so I wanted to make a list that could toggle. \r\n\r\n\r\n![CleanShot 2021-11-22 at 12 08 29](https://user-images.githubusercontent.com/36073/142920816-3bf47911-578b-4e2f-9662-10257287fde4.png)\r\n\r\nThe solution was to remember the previous choice by `id`. Any time `arg` is invoked, it will check to see if a choice has an id that matched the previously submitted choice and focus back on it. This enables you to hit enter repeatedly to toggle a choice on and off.\r\n\r\n[Install remember-selection](https://scriptkit.com/api/new?name=remember-selection&url=https://gist.githubusercontent.com/johnlindquist/a86395d809c260d943f9763023f5a6f0/raw/4c1057b8500fcdf34fcd179af52f09cc7dee9ca4/remember-selection.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet data = [\r\n  {\r\n    id: uuid(),\r\n    name: \"On\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Off\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"On\",\r\n  },\r\n]\r\n\r\nlet argConfig = {\r\n  placeholder: \"Toggle items\",\r\n  flags: {\r\n    end: {\r\n      shortcut: \"cmd+enter\",\r\n    },\r\n  },\r\n}\r\n\r\nwhile (true) {\r\n  let item = await arg(argConfig, data)\r\n  data.find(i => i.id === item.id).name =\r\n    item.name === \"On\" ? \"Off\" : \"On\"\r\n\r\n  if (flag.end) break\r\n}\r\n\r\nawait div(JSON.stringify(data), \"p-2 text-sm\")\r\n```\r\n\r\nYou could also use this when making a sequence of selections:\r\n\r\n[Install remember-sequence](https://scriptkit.com/api/new?name=remember-sequence&url=https://gist.githubusercontent.com/johnlindquist/80f9d005e5bff92691125f736199aa2c/raw/4e05c118bc91defe5e2f39cff20eb9862f4c6a2d/remember-sequence.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet data = [\r\n  {\r\n    id: uuid(),\r\n    name: \"One\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Two\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Three\",\r\n  },\r\n]\r\n\r\nlet selections = []\r\n\r\nlet one = await arg(`First selection`, data)\r\nselections.push(one)\r\n\r\nlet two = await arg(\r\n  {\r\n    placeholder: `Second selection`,\r\n    hint: selections.map(s => s.name).join(\", \"),\r\n  },\r\n  data\r\n)\r\nselections.push(two)\r\n\r\nlet three = await arg(\r\n  {\r\n    placeholder: `Third selection`,\r\n    hint: selections.map(s => s.name).join(\", \"),\r\n  },\r\n  data\r\n)\r\nselections.push(three)\r\n\r\nawait div(\r\n  selections.map(s => s.name).join(\", \"),\r\n  \"p-2 text-sm\"\r\n)\r\n\r\n```\r\n\r\n\r\n\r\n[Install no-choices-event](https://scriptkit.com/api/new?name=no-choices-event&url=https://gist.githubusercontent.com/johnlindquist/5534589a322bbb384e5bf4dbcbf00864/raw/1a7c2500149db3b8731e900646d568fa7fb5ed74/no-choices-event.js\")\r\n\r\n## Choice Events\r\n\r\n`onNoChoices` and `onChoices` allows Kit.app to tell your script when the user has typed something that filtered out every choice. Most commonly, you'll want to provide a `setHint` (I almost made it a default), but you can add any logic you want.\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait arg(\r\n  {\r\n    placeholder: `Pick a fruit`,\r\n    onChoices: async () => {\r\n      setHint(``)\r\n    },\r\n    onNoChoices: async input => {\r\n      setHint(`No choices matched ${input}`)\r\n    },\r\n  },\r\n  [`Apple`, `Orange`, `Banana`]\r\n)\r\n\r\n```\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-11-22T19:09:19Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/587","url":"","title":"beta.98 - Previews 👀, Docs, devTools, updater improvements","command":"beta98-previews-docs-devtools-updater-improvements","content":"## Previews\r\n\r\nCreating the previews feature was a huge undertaking, but it really paid off. You can now render html into a side pane by simply providing a `preview` function. A preview can be a simple string all the way to an async function per choice that loads data based on the currently selected choice. For examples, see here #555 \r\n\r\n> You can toggle previews on/off with <kbd>cmd+p</kbd>\r\n\r\nhttps://user-images.githubusercontent.com/36073/141507471-db3e4454-f0ef-4e6b-891b-bd4344a40e85.mp4\r\n\r\n## Docs\r\n\r\nAlong with previews comes the built-in docs.\r\n\r\n- Docs are built from the GitHub discussions [docs](https://github.com/johnlindquist/kit/discussions/categories/docs) category\r\n- Each time I post/update a doc, a webhook builds the docs into a json file, Kit.app checks for a new docs.json once a day (or you can manually update them from the `Help->Download Latest Docs`\r\n- You can _click an example to install it!_ 🎉\r\n- I'll keep working on docs and examples. Please ask any questions over in the [docs](https://github.com/johnlindquist/kit/discussions/categories/docs) section if you'd like to see something clarified.\r\n\r\nhttps://user-images.githubusercontent.com/36073/141507953-02d44174-3ac0-43d7-8d92-4319e917d512.mp4\r\n\r\n## Dev Tools\r\n\r\nPass any data into `devTools` to pop open a Dev Tools pane so you can interact with the data. `devTools` will first log out the data, but it's also assigned to an `x` variable you can interact with in the console.\r\n\r\n> `devTools` will be another paid feature once Script Kit 1.0 releases\r\n\r\nhttps://user-images.githubusercontent.com/36073/141508954-df3ea997-a49e-4fdd-bd40-7bff76024a6d.mp4\r\n\r\n## Updater Fixes\r\n\r\nA few users reported a strange behavior with the updater. If you've had any issues with it, please download a fresh copy of Kit.app from https://scriptkit.com and overwrite the old version. There are many more guards around the updating logic to prevent those issues from cropping up again.\r\n\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-11-12T17:32:40Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/488","url":"","title":"Script Kit online on Stackblitz ⚡️","command":"script-kit-online-on-stackblitz","content":"I spent last week getting Script Kit running \"in browser\" to emulate the terminal experience over on Stackblitz. Here's a quick demo:\r\n\r\nhttps://stackblitz.com/edit/node-rnrhra?file=scripts%2Frepos-to-markdown.js\r\n\r\nThe plan is to use this to host interactive demos for the guide/docs. I'd appreciate if you could play around with it a bit and see if I missed anything.\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-10-18T20:06:28Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/457","url":"","title":"TypeScript support! 🚀","command":"typescript-support","content":"beta.62 brings with it a long-awaited, much-requested feature: TypeScript support!\r\n\r\n![CleanShot 2021-09-27 at 10 42 38](https://user-images.githubusercontent.com/36073/134951810-31754840-85c3-4ad3-a493-59c757fdda07.png)\r\n\r\n## TypeScript Support 🚀\r\n\r\n### 1. But, how?\r\n\r\nEach time your run a TS script, Script Kit will compile the TS script using `esbuild` to a JS script in a `.scripts` dir (notice the \"dot\"). The compiled JS script is then imported from there. Using `.scripts` as a sibling dir will help avoid any `import`/path issues. You can also write TS \"library\" files in your `~/.kenv/lib` dir and import them into your script just fine.\r\n\r\nIf you're experienced with `esbuild` and curious about the settings, they look like this:\r\n\r\n```js\r\nlet { build } = await import(\"esbuild\")\r\n\r\nawait build({\r\n  entryPoints: [scriptPath],\r\n  outfile,\r\n  bundle: true,\r\n  platform: \"node\",\r\n  format: \"esm\",\r\n  external: [\"@johnlindquist/kit\"],\r\n})\r\n```\r\n\r\nThis also opens the door to exporting/building/bundling scripts and libs as individual shippable tools which I'll investigate more in the future.\r\n\r\n### 2. Can I still run my JS scripts if I switch to TS?\r\n\r\nYes! Both your TS and JS scripts will show up in the UI.\r\n\r\n### 3. Why the `import \"@johnlindquist/kit\"`?\r\n\r\nWhen you create a new TS script, the generated script will start with the line: `import \"@johnlindquist/kit\"`\r\n\r\nThis is mostly to make your editor stop complaining by forcing it to load the type definition files and forcing it to treat the file as an \"es module\" so support \"top-level `await`\". It's not technically required since it's not technically importing anything, but your editor will certainly complain very loudly if you leave it out.\r\n\r\n### 4. Where is the setting stored?\r\n\r\nLook in your `~/.kenv/.env` for `KIT_MODE=ts`.\r\n\r\n## fs-extra's added to global\r\n\r\nThe [fs-extra methods](https://www.npmjs.com/package/fs-extra#methods) are now added on the global space. I found myself using `outputFile`, `write/readJson`, etc too often and found them to be a great addition. The only one missing is `copy` since we're already using that to \"copy to clipboard\". You can bring it in with the normal import/alias process if needed, e.g., `let {copy:fsCopy} = await import(\"fs-extra\")`\r\n\r\n## Sync Path\r\n\r\n![CleanShot 2021-09-27 at 11 10 26](https://user-images.githubusercontent.com/36073/134954703-7c9d779f-268a-4f8b-973a-59ac71eebaf0.png)\r\n\r\nYou may notice running scripts from the Script Kit app that some commands you can run in your terminal might be missing, like \"yarn\", etc.\r\n\r\nRun the following command in your terminal to copy the $PATH var from your terminal to your `~/.kenv/.env`. This will help \"sync\" up which commands are available between your terminal and running scripts from the app.\r\n\r\n```bash\r\n~/.kit/bin/kit sync-path\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-09-27T17:25:03Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/442","url":"","title":"Scripts in GitHub actions (preview)","command":"scripts-in-github-actions-preview","content":"## tl;dr Here's an example repo\r\n\r\nThe example script creates a release, downloads an image, and uploads it to the release.\r\n\r\nhttps://github.com/johnlindquist/kit-action-example\r\n\r\n## Template Repo\r\n\r\nThis page has a \"one-click\" clone so you can add/play with your own script.\r\n\r\nhttps://github.com/johnlindquist/kit-action-template\r\n\r\n## What is it?\r\n\r\nUse any of your scripts in a GitHub action. `use` the `kit-action` and point it to a scripts in your `scripts` dir:\r\n\r\n```yml\r\nname: \"example\"\r\non:\r\n  workflow_dispatch:\r\n  pull_request:\r\n  push:\r\n    branches:\r\n      - main\r\n\r\njobs:\r\n  example:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Script Kit\r\n        uses: johnlindquist/kit-action@main\r\n        with:\r\n          script: \"example-script\" # The name of a script in your ./scripts dir\r\n```\r\n\r\n## Add env vars:\r\n\r\nYou most likely add [\"secrets\" to GitHub actions](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-an-environment), so you'll want to pass them to your scripts as environment variables:\r\n\r\n```yml\r\njobs:\r\n  example:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Script Kit\r\n        uses: johnlindquist/kit-action@main\r\n        with:\r\n          script: \"example-script\"\r\n        env:\r\n          REPO_TOKEN: \"${{ secrets.REPO_TOKEN }}\" # load in your script with await env(\"REPO_TOKEN\")\r\n```\r\n\r\n## Works with your existing repos\r\n\r\nFeel free to add this action and a `scripts` dir to your existing repos. It automatically loads in your repo so you can parse `package.json`, compress assets, or whatever it is you're looking to add to your CI.\r\n\r\n## What does \"preview\" mean?\r\n\r\nEverything is working, but it's pointing to the \"main\" branch rather than a tagged version. Once I get some feedback, I'll tag a \"1.0\" version so you can `uses: @johlindquist/kit-action@v1`\r\n\r\n## Please ask for help! 😇\r\n\r\nI'd ❤️ to help you script something for a github action! Please let me know whatever I can do to help.","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-09-21T19:34:15Z"},{"menu":"Drag demo","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/405","url":"","title":"beta.55 Improved Search, Drag, and Happiness 😊","command":"beta55-improved-search-drag-and-happiness","content":"## Search Improvements\r\n\r\nbeta.55 has a vastly improved search:\r\n\r\nSearch descriptions 🎉\r\n\r\n![CleanShot 2021-08-20 at 13 37 44](https://user-images.githubusercontent.com/36073/130285547-24f111d7-a706-4be2-b0d6-b425afbe6683.png)\r\n\r\nSearch shortcuts\r\n\r\n![CleanShot 2021-08-20 at 13 51 49](https://user-images.githubusercontent.com/36073/130286634-4797c029-c2ed-4071-9e1d-285d6bf1a15f.png)\r\n\r\nSearch by kenv\r\n\r\n![CleanShot 2021-08-20 at 13 51 18](https://user-images.githubusercontent.com/36073/130286567-4fd0a155-43a7-4af5-bd3f-c0a9db9ae8dc.png)\r\n\r\nSear by \"command-name\" (if you can't think of // Menu: name)\r\n\r\n![CleanShot 2021-08-20 at 13 54 45](https://user-images.githubusercontent.com/36073/130286878-62b2a139-b3b7-4c34-904f-40d7b03a7e1c.png)\r\n\r\nSorts by \"score\" (rather than alphabetically)\r\n\r\n## Drag\r\n\r\nChoices can now take a `drag` property. This will make list items \"draggable\" and allow you to drag/drop to copy files from your machine (or even from URLs!) into any app. When using remote URLs, their will be a bit of \"delay\" while the file downloads (depending on the file size) between \"drag start\" and \"drop enabled\", so just be aware. I'll add some sort of download progress indicator sometime in the future, just not high priority 😅\r\n\r\n```js\r\n// Menu: Drag demo\r\n\r\nawait arg(\r\n  {\r\n    placeholder: \"Drag something from below\",\r\n    ignoreBlur: true,\r\n  },\r\n  [\r\n    {\r\n      name: \"Heart Eyes (local)\",\r\n      drag: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\r\n      img: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\r\n    },\r\n    {\r\n      name: \"React logo svg (wikipedia)\",\r\n      drag: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\r\n      img: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\r\n    },\r\n  ]\r\n)\r\n```\r\n\r\n![CleanShot 2021-08-20 at 15 26 07](https://user-images.githubusercontent.com/36073/130294979-c45aabe2-6c30-41ad-94b4-64a85a2c34eb.gif)\r\n\r\nYou can use the `drag` object syntax to define a `format` and `data`\r\n\r\n> `text/html`: Renders the HTML payload in contentEditable elements and rich text (WYSIWYG) editors like Google Docs, Microsoft Word, and others.\r\n> `text/plain`: Sets the value of input elements, content of code editors, and the fallback from text/html.\r\n> `text/uri-list`: Navigates to the URL when dropping on the URL bar or browser page. A URL shortcut will be created when dropping on a directory or the desktop.\r\n\r\n```js\r\n// Menu: Drag demo\r\n\r\nawait arg(\r\n  {\r\n    placeholder: \"Drag something from below\",\r\n    ignoreBlur: true,\r\n  },\r\n  [\r\n    {\r\n      name: \"Padding 4\",\r\n      drag: {\r\n        format: \"text/plain\",\r\n        data: `className=\"p-4\"`,\r\n      },\r\n    },\r\n    {\r\n      name: \"I love code\",\r\n      drag: {\r\n        format: \"text/html\",\r\n        data: `<span style=\"background-color:yellow;font-family:Roboto Mono\">I ❤️ code</span>`,\r\n      },\r\n    },\r\n  ]\r\n)\r\n```\r\n\r\n![CleanShot 2021-08-20 at 15 48 00](https://user-images.githubusercontent.com/36073/130296713-6249d5c2-c01f-42d1-b2c2-ea86d2e4c29b.gif)\r\n\r\n## Happiness\r\n\r\nI'm _very_ happy with the state of Script Kit. When I started almost a year ago, I had no idea I could push the concept of creating/sharing/managing custom scripts so far. I think it looks great, feels speedy, and is flexible enough to handle so, so many scenarios.\r\n\r\nWith everything in place, next week I'm starting on creating lessons, demos, and docs. It's time to show you what Script Kit can really do 😉 \r\n\r\nP.S. - Thanks for all the beta-testing and feedback. It's been tremendously helpful!\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-08-20T21:58:48Z"},{"menu":"Flags demo","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/397","url":"https://gist.githubusercontent.com/johnlindquist/b96c8f8de9c256f909ae0f6ab0adda39/raw/9f049cf454f0766fb278e5ee7a24c6b6776df889/flags-demo.js","title":"beta.46 Design, ⚐ Flags, div, fixed notify","command":"beta46-design-flags-div-fixed-notify","content":"## Design/theme\r\n\r\nPut a lot of work into tightening up pixels and made progress towards custom themes:\r\n\r\n![CleanShot 2021-08-13 at 09 35 40](https://user-images.githubusercontent.com/36073/129383567-ae628c68-3c96-463f-a47e-4800186ea7ac.png)\r\n\r\nHere's a silly demo of me playing with theme generation:\r\n\r\nhttps://user-images.githubusercontent.com/36073/129384214-2af744ab-8165-4e3f-825d-42fadbf86aec.mp4\r\n\r\n## Flags ⚐\r\n\r\nAn astute observer would notice that the `Edit` and `Share` tabs are now gone. They've been consolidated into a \"flag menu\".\r\n\r\nWhen you press the `right` key from the main menu of script, the flag menu now opens up. This shows the selected script and gives you some options. It also exposes the keyboard shortcuts associated with those options that you can use to :\r\n\r\n![CleanShot 2021-08-13 at 09 42 52](https://user-images.githubusercontent.com/36073/129384559-bff59ebf-88d9-4b95-b9b5-640ce755fe8f.png)\r\n\r\nI've found I use `cmd+o` and `cmd+n` all the time to tweak scripts of quickly create a new one to play around with.\r\n\r\n### Custom Flags\r\n\r\nYou can pass your own custom flags like so:\r\n\r\n[Install flags-demo](https://scriptkit.com/api/new?name=flags-demo&url=https://gist.githubusercontent.com/johnlindquist/b96c8f8de9c256f909ae0f6ab0adda39/raw/9f049cf454f0766fb278e5ee7a24c6b6776df889/flags-demo.js)\r\n\r\n```js\r\n//Menu: Flags demo\r\n\r\nlet urls = [\r\n  \"https://scriptkit.com\",\r\n  \"https://egghead.io\",\r\n  \"https://johnlindquist.com\",\r\n]\r\n\r\nlet flags = {\r\n  open: {\r\n    name: \"Open\",\r\n    shortcut: \"cmd+o\",\r\n  },\r\n  copy: {\r\n    name: \"Copy\",\r\n    shortcut: \"cmd+c\",\r\n  },\r\n}\r\n\r\nlet url = await arg(\r\n  { placeholder: `Press 'right' to see menu`, flags },\r\n  urls\r\n)\r\n\r\nif (flag?.open) {\r\n  $`open ${url}`\r\n} else if (flag?.copy) {\r\n  copy(url)\r\n} else {\r\n  console.log(url)\r\n}\r\n```\r\n\r\nNotice that `flag` is a global while `flags` is an object you pass to `arg`. This is to help keep it consistent with terminal usage:\r\n\r\nFrom the terminal\r\n```bash\r\nflags-demo --open\r\n```\r\n\r\nWill set the global `flag.open` to `true`\r\n\r\n![CleanShot 2021-08-13 at 10 08 30](https://user-images.githubusercontent.com/36073/129388037-3f27a12d-9e44-4402-a51f-bac39eead54d.png)\r\n\r\n\r\nYou could also run this and pass in all the args:\r\n\r\n```bash\r\nflags-demo https://egghead.io --copy\r\n```\r\n\r\nIn the app, you could create a second script to pass flags to the first with. This is required if you need to pass multiple flags since the `arg` helper can only \"submit\" one per `arg`.\r\n\r\n```js\r\nawait run(`flags-demo https://egghead.io --copy`)\r\n```\r\n\r\nI'll put together some more demos soon. There are plenty of existing CLI tools out there using flags heavily, so lots of inspiration to pull from.\r\n\r\n## `await div()`\r\n\r\nThere's a new `div` \"component\". You can pass in arbitrary HTML. This works well with the `md()` helper which generates `html` from markdown.\r\n\r\n[Install div-demo](https://scriptkit.com/api/new?name=div-demo&url=https://gist.githubusercontent.com/johnlindquist/0ad790953f7101d313abfd48182356b0/raw/c70e17649317986707d2ac714c31afe6f7850015/div-demo.js)\r\n\r\n```js\r\n// Menu: Div Demo\r\n\r\n// Hit \"enter\" to continue, escape to exit\r\nawait div(`<img src=\"https://placekitten.com/320\"/>`)\r\n\r\nawait div(\r\n  md(\r\n    `\r\n    # Some header\r\n\r\n    ## You guessed it, an h2\r\n\r\n    * I\r\n    * love\r\n    * lists\r\n    `\r\n  )\r\n)\r\n\r\n```\r\n\r\n## Fixed `notify`\r\n\r\n`notify` is now fixed so that it doesn't open a prompt\r\n\r\nThe most basic usage is:\r\n\r\n```js\r\nnotify(\"Hello world\")\r\n```\r\n\r\n`notify` leverages [https://www.npmjs.com/package/node-notifier](https://www.npmjs.com/package/node-notifier)\r\n\r\nSo the entire API should be available. Here's an example of using the \"type inside a notification\":\r\n\r\n[Install notify-demo](https://scriptkit.com/api/new?name=notify-demo&url=https://gist.githubusercontent.com/johnlindquist/44387dc5b0c170e4146b061162c33532/raw/1bce77fb778a45cf9052a63d02dcab94a9cf7ef0/notify-demo.js)\r\n\r\n```js\r\n// Menu: Notify Demo\r\nlet notifier = notify({\r\n  title: \"Notifications\",\r\n  message: \"Write a reply?\",\r\n  reply: true,\r\n})\r\n\r\nnotifier.on(\"replied\", async (obj, options, metadata) => {\r\n  await arg(metadata.activationValue)\r\n})\r\n\r\n```\r\n\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-08-13T16:33:27Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/365","url":"","title":"beta.33 `console.log` component, cmd+o to Open, `className`","command":"beta33-consolelog-component-cmdo-to-open-classname","content":"## `console.log` Component\r\n\r\nThe follow code will create the below prompt (👀 notice the black background logging component):\r\n```js\r\nlet { stdout } = await $`ls ~/projects | grep kit`\r\n\r\nawait arg(`Select a kit dir`, stdout.split(\"\\n\"))\r\n\r\n```\r\n<img width=\"402\" alt=\"CleanShot 2021-07-22 at 16 13 10@2x\" src=\"https://user-images.githubusercontent.com/36073/126716080-db8e1361-7972-488c-8873-2996a7c03064.png\">\r\n\r\n```js\r\nconsole.log(chalk`{green.bold The current date is:}`)\r\nconsole.log(new Date().toLocaleDateString())\r\nawait arg()\r\n```\r\n\r\n<img width=\"416\" alt=\"CleanShot 2021-07-22 at 16 12 24@2x\" src=\"https://user-images.githubusercontent.com/36073/126716010-b38c8d28-af68-4f1f-aefd-93de186a03d2.png\">\r\n\r\nThe log even persists between prompts:\r\n\r\n```js\r\nlet first = await arg(\"First name\")\r\nconsole.log(first)\r\nlet last = await arg(\"Last name\")\r\nconsole.log(`${first} ${last}`)\r\nlet age = await arg(\"Age\")\r\nconsole.log(`${first} ${last} ${age}`)\r\nlet emotion = await arg(\"Emotion\")\r\nconsole.log(`${first} ${last} ${age} ${emotion}`)\r\nawait arg()\r\n```\r\n<img width=\"415\" alt=\"CleanShot 2021-07-22 at 16 19 36@2x\" src=\"https://user-images.githubusercontent.com/36073/126716651-bb7b539a-2314-4d95-bcd9-5104c8d18ec5.png\">\r\n\r\nClick the \"edit\" icon to open the full log in your editor:\r\n![CleanShot 2021-07-22 at 16 20 57@2x](https://user-images.githubusercontent.com/36073/126716749-4eda367a-4e55-424f-915a-30207583cd3f.png)\r\n\r\n## cmd+o to Open\r\n\r\nFrom the main menu, hitting `cmd+o` will open:\r\n\r\n1. The currently selected script from the main menu\r\n2. The currently running script\r\n3.  Any \"choice\" that provides a \"filePath\" prop:\r\n\r\n```js\r\nawait arg(`cmd+o to open file`, [\r\n  {\r\n    name: \"Karabiner config\",\r\n    filePath: \"~/.dotfiles/karabiner/karabiner.edn\",\r\n  },\r\n  {\r\n    name: \"zshrc\",\r\n    filePath: \"~/.zshrc\",\r\n  },\r\n])\r\n```\r\n\r\nI've found this really useful when I want to tweak the running script, but I don't want to go back through the process of finding it.\r\n\r\n## Experimental `className`\r\n\r\nYou can pass `className` into the arg options to affect the container for the list items or panel. Most classes from Tailwind should be available. Feel free to play around with it and let me know how it goes 😇:\r\n\r\n```js\r\nawait arg(\r\n  {\r\n    className: \"p-4 bg-black font-mono text-xl text-white\",\r\n  },\r\n  `\r\n  <p>Working on Script Kit today</p>\r\n  <img src=\"https://i.imgflip.com/5hc0v4.jpg\" title=\"made at imgflip.com\"/>`\r\n)\r\n\r\n```\r\n\r\n<img width=\"428\" alt=\"CleanShot 2021-07-22 at 16 38 40@2x\" src=\"https://user-images.githubusercontent.com/36073/126717978-2bf8d0e4-24a4-47ad-948a-97fde38a83e0.png\">\r\n\r\n\r\n```js\r\nawait arg(\r\n  {\r\n    className: \"p-4 bg-black font-mono text-xl text-white\",\r\n  },\r\n  [\"Eat\", \"more\", \"tacos 🌮\"]\r\n)\r\n```\r\n\r\n<img width=\"420\" alt=\"CleanShot 2021-07-22 at 16 41 19@2x\" src=\"https://user-images.githubusercontent.com/36073/126718146-c3c94b10-0e5a-4e9d-8bab-a6b7c3b6f1d3.png\">\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-07-22T22:44:19Z"},{"image":"https://placekitten.com/64","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/353","url":"","title":"beta.29 M1 build, install remote kenvs, polish, upcoming lessons","command":"beta29-m1-build-install-remote-kenvs-polish-upcoming-lessons","content":"I'm starting on lessons/docs on Monday. If you have anything specific you want me to cover, please reply below!\r\n\r\n## M1 Build\r\n If you're on an M1 mac, you can download the new M1 build from https://www.scriptkit.com/\r\n\r\n1. Download https://www.scriptkit.com/\r\n2. Quit Kit. *note - typing `kit quit` or `k q` in the app is the fastest way to quit.\r\n3. Drag/drop to overwrite your previous build\r\n4. Kit should now auto-update from the M1 channel\r\n5. Open Kit\r\n\r\n## Kenv Management\r\nThere are a lot of tools to help manage other kenvs. They're in the `Kit` menu and once you've installed a remote kenv (which is really just a git repo with a scripts dir), then more options show up in the `Edit` menu to move scripts between kenvs, etc. I'll cover this in detail in the docs/lessons\r\n\r\n## Polish\r\nLots of UI work:\r\n* Remembering position - Each script with a `//Shortcut` will remember its last individual prompt position. For example, if you have a script that uses `textarea`, then drag it to the upper right, the next time you launch that script, it will launch in that position.\r\n* `//Image` metadata - Scripts can now have images:\r\n```js\r\n//Image: https://placekitten.com/64\r\n```\r\nor\r\n```js\r\n//Image: logo.png\r\n```\r\nwill load from `~/.kenv/assets/logo.png`\r\n\r\n\r\n* Spinner - added a spinner for when you submit a prompt and the process needs to do some work before opening the next prompt\r\n\r\n![CleanShot 2021-07-16 at 12 22 58](https://user-images.githubusercontent.com/36073/125992326-7b6f0034-00e8-41df-9ca7-f0e33becf0b2.gif)\r\n\r\n\r\n* Resizing - *Lots* of work on getting window resizing behavior consistent between different UIs. This was a huge pain, but you'll probably never appreciate it 😅\r\n* Lots more - many more small things\r\n\r\n## Lessons!\r\n\r\nI'm starting to work on lessons next week and getting back into streaming schedule. I would ♥️ to hear any specific questions or lessons you would like to see to help you remove some friction from your day. I'll be posting the lessons over on [egghead.io](egghead.io) for your viewing pleasure. Please ask questions in the replies!\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-07-16T18:29:00Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/330","url":"","title":"Beta.20 MOAR SPEED! ⚡️","command":"beta20-moar-speed","content":"## Process Pools and Virtualized Lists\r\n\r\nhttps://user-images.githubusercontent.com/36073/123519955-7fdd8200-d66b-11eb-8167-09b9daed1c9f.mp4\r\n\r\n\r\n## Experimental `textarea`\r\n\r\nFeel free to play around with the `textarea` for multiline input.\r\n\r\n```js\r\nlet value = await textarea()\r\n```\r\n\r\nThe API of textarea will change (it currently just sets the placeholder), but it will always return the string value of the textarea, so there won't be any breaking changes if you just keep the default behavior. `cmd+s` submits. `cmd+w` cancels.\r\n\r\n## Experimental `editor` (this will become a _paid_  💵 feature later this year)\r\n\r\nAs an upgrade to `textarea`, `await editor()` will give you a full editor experience. Same as the textarea, the API will also change, but will always return a string of the content.\r\n\r\n\r\n```js\r\n// Defaults to markdown\r\nlet value = await editor()\r\n```\r\n\r\n> ⚠️ API is subject to change!\r\n```js\r\nlet value = await editor(\"markdown\", `\r\n## Preloaded content\r\n\r\n* nice\r\n`)\r\n```\r\n\r\n```js\r\nlet value = await editor(\"javascript\", `\r\nconsole.log(\"Support other languages\")\r\n`)\r\n```\r\n\r\n### A note on paid features\r\n\r\nEverything you've used so far in the Script Kit app will stay free. The core `kit` is open-source MIT. \r\n\r\nThe paid features will be add-ons to the core experience: Themes, Editor, Widgets, Screenshots, Record Audio, and many more fun ideas. These will roll out experimentally in the free version first then move exclusively to the paid version. Expect the paid versions later this year.\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-06-26T17:03:40Z"},{"shortcut":"option 5","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/312","url":"","title":"Beta.19 New Features - Gotta go fast! 🏎💨","command":"beta19-new-features-gotta-go-fast","content":"Beta.19 is all about _speed_! I've finally landed on an approach I love to get the prompt moving waaaay faster.\r\n\r\nCouple videos below:\r\n\r\n## Instant Prompts\r\n\r\nhttps://user-images.githubusercontent.com/36073/121084054-6d270a00-c79d-11eb-8b37-96473de7e0e4.mp4\r\n\r\n```js\r\n// Shortcut: option 5\r\n\r\nlet { items } = await db(async () => {\r\n  let response = await get(\r\n    `https://api.github.com/users/johnlindquist/repos`\r\n  )\r\n\r\n  return response.data\r\n})\r\n\r\nawait arg(\"Select repo\", items)\r\n\r\n```\r\n\r\n## Instant Tabs\r\n\r\nhttps://user-images.githubusercontent.com/36073/121084134-85972480-c79d-11eb-9e18-94e5a2efa5d1.mp4\r\n\r\n## Instant Main Menu\r\n\r\nThe main menu now also leverages the concepts behind Instant Prompts listed above.\r\n\r\n## Faster in the future\r\n\r\nThese conventions laid the groundwork for caching prompt data, but I still have plenty ideas to speed things, especially around how the app launches the process. I'm looking forward to making this even faster for you!\r\n\r\nI'm also starting the work on an \"Instant Textarea\" because I know popping open a little textarea to take/save notes/ideas is something many people would use. 📝\r\n\r\n\r\n\r\n\r\n\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-06-07T20:47:28Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/305","url":"","title":"How to Get Your Scripts Featured on ScriptKit.com 😎","command":"how-to-get-your-scripts-featured-on-scriptkitcom","content":"TL;DR\r\n\r\n- Help -> Create kenv\r\n- Git init new kenv, push to github\r\n- Reply, dm, contact me somehow with the repo 😇\r\n\r\nHere's a video walking you through it:\r\n\r\nhttps://user-images.githubusercontent.com/36073/120856653-6732ee00-c53d-11eb-9dfb-04907b036361.mp4\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-06-04T20:07:36Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/304","url":"","title":"Beta.18 Changes/Features (`db` has a breaking change)","command":"beta18-changesfeatures-db-has-a-breaking-change","content":"## ⚠️Breaking: New `db` helper\r\n\r\n[lowdb](https://github.com/typicode/lowdb) updated to 2.0, so I updated the `db` helper to support it.\r\n\r\n* access/mutate the objects in the db directly. Then `.write()` to save your changes to the file.\r\n* `await db()` and `await myDb.write()`\r\n\r\nExample with a simple object:\r\n```js\r\nlet shoppingListDb = await db(\"shopping-list\", {\r\n  list: [\"apples\", \"bananas\"],\r\n})\r\n\r\nlet item = await arg(\"Add to list\")\r\nshoppingListDb.list.push(item)\r\nawait shoppingListDb.write()\r\n\r\nawait arg(\"Shopping list\", shoppingListDb.list)\r\n```\r\n\r\n\r\nYou can also use an `async` function to store the initial data:\r\n```js\r\nlet reposDb = await db(\"repos\", async () => {\r\n  let response = await get(\r\n    \"https://api.github.com/users/johnlindquist/repos\"\r\n  )\r\n\r\n  return {\r\n    repos: response.data,\r\n  }\r\n})\r\n\r\nawait arg(\"Select repo\", reposDb.repos)\r\n```\r\n\r\n## Text Area prompt\r\n\r\n```js\r\nlet text = await textarea()\r\n\r\ninspect(text)\r\n```\r\n![CleanShot 2021-06-04 at 14 25 12](https://user-images.githubusercontent.com/36073/120858988-cf370380-c540-11eb-8b79-5483ec090dd8.gif)\r\n\r\n\r\n## Optional `value`\r\n\r\n`arg` choice objects used to require a `value`. Now if you don't provide a value, it will simply return the entire object:\r\n\r\n```js\r\nlet person = await arg(\"Select\", [\r\n  { name: \"John\", location: \"Chair\" },\r\n  { name: \"Mindy\", location: \"Couch\" },\r\n])\r\n\r\nawait arg(person.location)\r\n```\r\n\r\n## ⚗️ Experimental \"Multiple kenvs\"\r\n\r\nThere was a _ton_ 🏋️‍♀️ of internal work over the past couple weeks to get this working. The \"big idea\" is supporting multiple kit environments. For example:\r\n\r\n* private/personal kenv\r\n* shared kenv\r\n* company kenv\r\n* product kenv\r\n\r\n### Future plans\r\nIn an upcoming release: \r\n* you'll be able to \"click to install kenv from repo\" (just like we do with individual scripts)\r\n* update a git-controlled kenv (like a company kenv)\r\n* the main prompt will be able to search for all scripts across kenvs. \r\n* If multiple kenvs exist, creating a new script will ask you which kenv to create it in.\r\n\r\nFor now, you can try adding/creating/switching the help menu. It should all work fine, but will be _waaaay_ cooler in the future 😎\r\n\r\n![CleanShot 2021-06-04 at 11 50 32](https://user-images.githubusercontent.com/36073/120843227-16b29500-c52b-11eb-974c-a81c260b9ae2.png)\r\n\r\n## Improved Error Prompt\r\n\r\nNow when an error occurs, it takes the error data, shuts down the script, then prompts you on what to do. For example, trying to use the old `db` would result in this:\r\n\r\n![CleanShot 2021-06-04 at 12 03 04](https://user-images.githubusercontent.com/36073/120844575-d6541680-c52c-11eb-8d12-c7c3117e132e.png)\r\n\r\n## Improved Tab Switching\r\nSwitching tabs will now cancel the previous tabs' script. Previously, if you quickly switched tabs on the main menu, the \"Hot\" tab results might show up in a different tab because the loaded _after_ the tab switched. The internals around message passing between the script and the app now have a cancellation mechanism so you only get the latest result that matches the prompt/tab. (This was also a ton of internals refactoring work 😅)\r\n\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-06-04T18:09:55Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/282","url":"","title":"✨NEW FEATURES✨ beta.17","command":"new-features-beta17","content":"New features are separated into the comments below:\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-05-18T20:24:57Z"},{"background":"true","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/245","url":"","title":"✨ NEW ✨ // Background: true","command":"new-background-true","content":"`beta.12` brings in the ability to start/stop background tasks.\r\n\r\n\r\nUsing `// Background :true` at the top of your script will change the behavior in the main menu:\r\n```js\r\n// Background: true\r\n\r\nsetInterval(() => {}, 1000) //Some long-running process\r\n```\r\n\r\n<img width=\"702\" alt=\"Screen Shot 2021-05-06 at 1 30 53 PM\" src=\"https://user-images.githubusercontent.com/36073/117355039-4b212b80-ae6f-11eb-952e-4ee28c65ded4.png\">\r\n\r\n<img width=\"681\" alt=\"Screen Shot 2021-05-06 at 1 31 13 PM\" src=\"https://user-images.githubusercontent.com/36073/117355094-5b390b00-ae6f-11eb-817a-86be66cabe18.png\">\r\n\r\n\r\n<img width=\"679\" alt=\"Screen Shot 2021-05-06 at 1 33 02 PM\" src=\"https://user-images.githubusercontent.com/36073/117355276-9a675c00-ae6f-11eb-82b4-fa069e53b143.png\">\r\n\r\n\r\n## Auto (like nodemon)\r\n```js\r\n// Background: auto\r\n\r\nsetInterval(() => {}, 1000) //Some long-running process\r\n```\r\n\r\nUsing `auto`, after you start the script, editing will stop/restart the script.\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-05-06T19:36:22Z"},{"watch":"~/projects/thoughts/**/*.md","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/213","url":"","title":"// Watch: metadata 👀","command":"watch-metadata","content":"Script Kit now supports `// Watch:` metadata\r\n\r\n```js\r\n// Watch: ~/projects/thoughts/**/*.md\r\n\r\nlet { say } = await kit(\"speech\")\r\n\r\nsay(\"journal updated\")\r\n```\r\n\r\n* `// Watch: ` supports any file name, glob, or array (Kit will `JSON.parse` the array).\r\n* Scripts will run on the \"change\" event\r\n* Read more about supported [globbing](https://github.com/micromatch/picomatch#globbing-features)\r\n\r\n> Read about the [other metadata](https://github.com/johnlindquist/kit/discussions/185)\r\n\r\nI would _LOVE_ to hear about scenarios you would use this for or if you run into any issues 🙏","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-29T14:31:31Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/150","url":"","title":"beta.96 - Design, Drop, and Hotkeys! Oh my!","command":"beta96-design-drop-and-hotkeys-oh-my","content":"\r\nhttps://user-images.githubusercontent.com/36073/115079813-fc5f2200-9ebe-11eb-8e7c-74c8a1d2aee3.mp4\r\n\r\nCan't wait to see what you build! Happy Scripting this weekend! 😇","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-16T20:32:44Z"},{"menu":"Google Image Search","description":"","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/119","url":"https://gist.githubusercontent.com/johnlindquist/99756d4e1a54c737dc534c4edb5f6c9d/raw/55c440503a8a653c3ef3dafb9ba1bd567fc0b14a/google-image-search.js","title":"*New* Choice Preview","command":"new-choice-preview","content":"\r\nhttps://user-images.githubusercontent.com/36073/114220248-fc907800-9928-11eb-8096-61a5debbdc0d.mp4\r\n\r\n\r\n[Install google-image-search](https://scriptkit.app/api/new?name=google-image-search&url=https://gist.githubusercontent.com/johnlindquist/99756d4e1a54c737dc534c4edb5f6c9d/raw/55c440503a8a653c3ef3dafb9ba1bd567fc0b14a/google-image-search.js)\r\n\r\n```js\r\n// Menu: Google Image Search\r\n// Description: Searches Google Images\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet gis = await npm(\"g-i-s\")\r\n\r\nlet selectedImageUrl = await arg(\r\n  \"Image search:\",\r\n  async input => {\r\n    if (input.length < 3) return []\r\n\r\n    let searchResults = await new Promise(res => {\r\n      gis(input, (_, results) => {\r\n        res(results)\r\n      })\r\n    })\r\n\r\n    return searchResults.map(({ url }) => {\r\n      return {\r\n        name: url.split(\"/\").pop().replace(/\\?.*/g, \"\"),\r\n        value: url,\r\n        preview: `<img src=\"${url}\" />`,\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\ncopy(selectedImageUrl)\r\n\r\n```\r\n\r\n\r\n\r\n[Install giphy-search](https://scriptkit.app/api/new?name=giphy-search&url=https://gist.githubusercontent.com/johnlindquist/dc17a3f07fb41b855e742a0f995cb0ed/raw/109831f9d40a8293b7d8741b44081fddcb024cda/giphy-search.js)\r\n\r\n```js\r\n// Menu: Giphy\r\n// Description: Search giphy. Paste markdown link.\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\nlet download = await npm(\"image-downloader\")\r\nlet queryString = await npm(\"query-string\")\r\nlet { setSelectedText } = await kit(\"text\")\r\n\r\nif (!env.GIPHY_API_KEY) {\r\n  show(\r\n    `<div class=\"p-4\">\r\n      <div>\r\n        Grab an API Key from the Giphy dev dashboard:\r\n      </div>\r\n      <a href=\"https://developers.giphy.com/dashboard/\">Here</a>\r\n    </div>`\r\n  )\r\n}\r\nlet GIPHY_API_KEY = await env(\"GIPHY_API_KEY\")\r\n\r\nlet search = q =>\r\n  `https://api.giphy.com/v1/gifs/search?api_key=${GIPHY_API_KEY}&q=${q}&limit=10&offset=0&rating=g&lang=en`\r\n\r\nlet { input, url } = await arg(\r\n  \"Search giphy:\",\r\n  async input => {\r\n    if (!input) return []\r\n    let query = search(input)\r\n    let { data } = await get(query)\r\n\r\n    return data.data.map(gif => {\r\n      return {\r\n        name: gif.title.trim() || gif.slug,\r\n        value: {\r\n          input,\r\n          url: gif.images.downsized_medium.url,\r\n        },\r\n        preview: `<img src=\"${gif.images.downsized_medium.url}\" alt=\"\">`,\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\nlet formattedLink = await arg(\"Format to paste\", [\r\n  {\r\n    name: \"URL Only\",\r\n    value: url,\r\n  },\r\n  {\r\n    name: \"Markdown Image Link\",\r\n    value: `![${input}](${url})`,\r\n  },\r\n  {\r\n    name: \"HTML <img>\",\r\n    value: `<img src=\"${url}\" alt=\"${input}\">`,\r\n  },\r\n])\r\n\r\nsetSelectedText(formattedLink)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-09T21:43:36Z"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/112","url":"https://gist.githubusercontent.com/johnlindquist/f238cb1b3a3ed97890657ccf154d12b1/raw/a488a8b6c331d527bb0433a6b8df9428263b85a0/link-kit.js","title":"Types are here!","command":"types-are-here","content":"Update (1.1.0-beta.86) adds a [`~/.kit/kit.d.ts`](https://github.com/johnlindquist/kit/blob/main/kit.d.ts) to allow better code hinting and completion.\r\n\r\n❗️After updating, you will need to manually \"link\" your `~/.kenv` to your `~/.kit` for the benefits (This will happen automatically for new users during install)\r\n\r\nMethod 1 - Install and run this script\r\n\r\n[Click to install link-kit](https://scriptkit.app/api/new?name=link-kit&url=https://gist.githubusercontent.com/johnlindquist/f238cb1b3a3ed97890657ccf154d12b1/raw/a488a8b6c331d527bb0433a6b8df9428263b85a0/link-kit.js)\r\n\r\n```js\r\nawait cli(\"install\", \"~/.kit\")\r\n```\r\n\r\nMethod  2 - In your terminal\r\n```bash\r\nPATH=~/.kit/node/bin ~/.kit/node/bin/npm --prefix ~/.kenv i ~/.kit\r\n```\r\n\r\nNow your scripts in your `~/.kenv/scripts` should have completion/hinting for globals included in the \"preloaded\" scripts.\r\n\r\n> I still need to add types for the helpers that load scripts from dirs `kit()`, `cli()`, etc.\r\n\r\nPlease let me know how it goes and if you have any questions. Thanks!","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2021-04-03T18:08:24Z"}]
